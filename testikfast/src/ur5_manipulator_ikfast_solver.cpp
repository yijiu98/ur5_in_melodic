/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2025-05-02 20:31:05.287448
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[5]);
x8=IKcos(j[4]);
x9=IKcos(j[5]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.39225)*x0);
x13=((0.2243)*x6);
x14=((0.09465)*x11);
x15=((0.09465)*x0);
x16=((1.0)*x11);
x17=((1.0)*x6);
x18=((1.0)*x5);
x19=((1.0)*x8);
x20=((0.39225)*x2);
x21=((0.2243)*x5);
x22=((0.425)*x1);
x23=((1.0)*x0);
x24=(x1*x3);
x25=(x3*x4);
x26=(x11*x8);
x27=(x11*x4);
x28=(x1*x2);
x29=(x0*x10);
x30=(x2*x4);
x31=(x10*x16);
x32=(x23*x24);
x33=(x16*x24);
x34=(x25+x28);
x35=((((-1.0)*x30))+(((1.0)*x24)));
x36=(x34*x5);
x37=(x35*x6);
x38=((((-1.0)*x32))+((x0*x30)));
x39=((((-1.0)*x33))+((x2*x27)));
x40=(x23*((x25+x28)));
x41=(x16*((x25+x28)));
x42=(x38*x5);
x43=(((x35*x5))+((x6*(((((-1.0)*x25))+(((-1.0)*x28)))))));
x44=(x42+((x40*x6)));
x45=(((x41*x6))+((x39*x5)));
x46=((((-1.0)*x18*x40))+((x17*(((((-1.0)*x32))+((x23*x30)))))));
x47=((((-1.0)*x18*x41))+((x17*(((((-1.0)*x33))+((x16*x30)))))));
eerot[0]=(((x9*(((((-1.0)*x19*x44))+x31))))+((x46*x7)));
eerot[1]=(((x7*(((((-1.0)*x31))+((x44*x8))))))+((x46*x9)));
eerot[2]=(((x10*x44))+x26);
eetrans[0]=(((x10*((((x21*x38))+((x13*x40))))))+(((0.10915)*x11))+(((0.2243)*x26))+(((-1.0)*x0*x22))+(((-1.0)*x12*x24))+((x6*((((x15*x24))+(((-1.0)*x15*x30))))))+((x12*x30))+((x5*((((x15*x25))+((x15*x28)))))));
eerot[3]=(((x47*x7))+((x9*(((((-1.0)*x19*x45))+(((-1.0)*x10*x23)))))));
eerot[4]=(((x7*((x29+((x45*x8))))))+((x47*x9)));
eerot[5]=(((x10*x45))+(((-1.0)*x0*x19)));
eetrans[1]=(((x6*(((((-1.0)*x14*x30))+((x14*x24))))))+((x10*((((x21*x39))+((x13*x41))))))+((x5*((((x14*x28))+((x14*x25))))))+(((-0.10915)*x0))+(((-0.39225)*x11*x24))+(((-1.0)*x11*x22))+(((-0.2243)*x0*x8))+((x20*x27)));
eerot[6]=(((x43*x7))+((x8*x9*((x37+x36)))));
eerot[7]=(((x43*x9))+((x7*x8*(((((-1.0)*x37))+(((-1.0)*x36)))))));
eerot[8]=(x10*(((((-1.0)*x18*x34))+(((-1.0)*x17*x35)))));
eetrans[2]=((0.08916)+(((-1.0)*x1*x20))+((x10*(((((-1.0)*x21*x34))+(((-1.0)*x13*x35))))))+((x6*(((((0.09465)*x28))+(((0.09465)*x25))))))+((x5*(((((-0.09465)*x24))+(((0.09465)*x30))))))+(((-0.425)*x4))+(((-0.39225)*x25)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
// IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=((-1.0)*r01);
new_r02=((-1.0)*r02);
new_px=((((0.2243)*r02))+(((-1.0)*px)));
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=((-1.0)*r12);
new_py=((((0.2243)*r12))+(((-1.0)*py)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.08916)+pz+(((-0.2243)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x48=((1.0)*px);
IkReal x49=((1.0)*pz);
IkReal x50=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x50))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x49)));
rxp0_2=((((-1.0)*r10*x48))+((py*r00)));
rxp1_0=((((-1.0)*r21*x50))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x49)));
rxp1_2=((((-1.0)*r11*x48))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x50)));
rxp2_1=((((-1.0)*r02*x49))+((px*r22)));
rxp2_2=((((-1.0)*r12*x48))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x51=((0.1893)*npx);
IkReal x52=((0.1893)*npy);
IkReal x53=((0.09465)*r22);
IkReal x54=((0.09465)*r21);
IkReal x55=((-0.09465)*r20);
IkReal x56=((-1.0)*r20);
IkReal x57=((-1.0)*rxp0_2);
IkReal x58=((-0.09465)*r21);
IkReal x59=((-1.0)*r21);
IkReal x60=((-1.0)*rxp1_2);
IkReal x61=((-1.0)*npx);
IkReal x62=((-1.0)*r22);
IkReal x63=((-1.0)*npz);
matrixinvcoeffs[0]=x55;
matrixinvcoeffs[1]=x51;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x56;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x57;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x55;
matrixinvcoeffs[19]=x51;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x56;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x57;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x58;
matrixinvcoeffs[33]=x52;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x59;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x60;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x58;
matrixinvcoeffs[51]=x52;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x59;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x60;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x62;
matrixinvcoeffs[76]=x53;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x63;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x53;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x60;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x58;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x60;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x54;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x56;
matrixinvcoeffs[133]=x61;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.09465)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x56;
matrixinvcoeffs[151]=x61;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x55;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x62;
matrixinvcoeffs[165]=x63;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x53;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x62;
matrixinvcoeffs[183]=x63;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.09465)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x59;
matrixinvcoeffs[204]=x54;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x60;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x54;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x61;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x55;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x56;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x55;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x57;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x64=pz*pz;
IkReal x65=pp*pp;
IkReal x66=((0.1893)*pz);
IkReal x67=((1.7)*pz);
IkReal x68=(gclwh15_9*npx);
IkReal x69=(gclwh6_11*r21);
IkReal x70=(pp*r22);
IkReal x71=((0.00702803935125)*r21);
IkReal x72=(gclwh5_9*npz);
IkReal x73=(gclwh8_11*r20);
IkReal x74=(npy*pz);
IkReal x75=((3.60823078949063e-5)*r22);
IkReal x76=(gclwh14_3*rxp0_2);
IkReal x77=((0.000977833645875)*r20);
IkReal x78=(npz*pz);
IkReal x79=((0.000977833645875)*r21);
IkReal x80=(gclwh10_12*r22);
IkReal x81=(gclwh10_2*rxp2_2);
IkReal x82=((0.00076243651125)*rxp1_2);
IkReal x83=((0.00600991575645741)*r20);
IkReal x84=((0.154705425)*rxp1_2);
IkReal x85=((0.017917245)*r21);
IkReal x86=(gclwh6_11*rxp1_2);
IkReal x87=((0.3786)*rxp1_2);
IkReal x88=(gclwh7_0*rxp1_2);
IkReal x89=((0.7572)*rxp1_2);
IkReal x90=((0.154705425)*rxp2_2);
IkReal x91=((2.0)*gclwh11_10);
IkReal x92=(gclwh12_8*r21);
IkReal x93=((0.81725)*pp);
IkReal x94=(pp*pz);
IkReal x95=(gclwh14_2*r20);
IkReal x96=(pp*r21);
IkReal x97=((2.0)*gclwh4_11);
IkReal x98=(gclwh8_12*r20);
IkReal x99=(npx*pz);
IkReal x100=(gclwh14_8*rxp0_2);
IkReal x101=((0.1893)*rxp2_2);
IkReal x102=(gclwh5_9*rxp2_2);
IkReal x103=((0.020662095)*rxp1_2);
IkReal x104=((0.007321434238125)*r21);
IkReal x105=((1.6345)*pz);
IkReal x106=((0.0089586225)*pz);
IkReal x107=(gclwh13_0*r21);
IkReal x108=(gclwh5_9*r22);
IkReal x109=(gclwh11_10*r22);
IkReal x110=(gclwh11_13*r22);
IkReal x111=((1.0)*r21);
IkReal x112=((0.3786)*rxp0_2);
IkReal x113=(gclwh14_14*rxp0_2);
IkReal x114=(pp*r20);
IkReal x115=((0.00195566729175)*r22);
IkReal x116=(gclwh15_10*rxp0_2);
IkReal x117=(gclwh14_8*r20);
IkReal x118=(gclwh12_8*rxp1_2);
IkReal x119=((2.0)*gclwh9_10);
IkReal x120=((2.0)*gclwh15_10);
IkReal x121=(gclwh5_15*rxp2_2);
IkReal x122=((2.0)*gclwh13_10);
IkReal x123=((0.00702803935125)*r20);
IkReal x124=(gclwh13_9*r21);
IkReal x125=(gclwh5_0*r22);
IkReal x126=((0.01464286847625)*r20);
IkReal x127=(gclwh15_1*r20);
IkReal x128=((0.000977833645875)*r22);
IkReal x129=((0.0089586225)*r20);
IkReal x130=((2.0)*gclwh10_11);
IkReal x131=(gclwh5_10*r22);
IkReal x132=((2.0)*pp);
IkReal x133=(gclwh15_9*r20);
IkReal x134=(gclwh1_3*r20);
IkReal x135=((0.00195566729175)*r20);
IkReal x136=(gclwh4_3*rxp2_2);
IkReal x137=((0.2183)*gclwh13_15);
IkReal x138=((2.0)*gclwh7_10);
IkReal x139=(gclwh15_0*r20);
IkReal x140=(gclwh9_0*r20);
IkReal x141=(gclwh15_15*rxp0_2);
IkReal x142=(gclwh2_1*r21);
IkReal x143=((4.0)*gclwh11_10);
IkReal x144=((0.30941085)*rxp0_2);
IkReal x145=(gclwh9_0*rxp0_2);
IkReal x146=(gclwh5_10*rxp2_2);
IkReal x147=((0.2183)*gclwh12_14);
IkReal x148=((0.2183)*gclwh14_14);
IkReal x149=(gclwh4_2*rxp2_2);
IkReal x150=((0.03275)*pp);
IkReal x151=((0.006199575)*rxp1_2);
IkReal x152=(gclwh12_2*rxp1_2);
IkReal x153=(gclwh5_0*rxp2_2);
IkReal x154=((3.60823078949063e-5)*r21);
IkReal x155=(gclwh14_11*rxp0_2);
IkReal x156=((0.020662095)*rxp0_2);
IkReal x157=(gclwh14_8*npx);
IkReal x158=((4.0)*gclwh9_10);
IkReal x159=((0.00195566729175)*r21);
IkReal x160=(gclwh8_12*rxp0_2);
IkReal x161=((0.01464286847625)*r21);
IkReal x162=((0.3786)*rxp2_2);
IkReal x163=((0.01464286847625)*r22);
IkReal x164=(gclwh7_13*r21);
IkReal x165=((4.0)*gclwh7_10);
IkReal x166=(gclwh13_0*rxp1_2);
IkReal x167=((0.1893)*rxp1_2);
IkReal x168=(gclwh6_2*r21);
IkReal x169=(gclwh5_1*rxp2_2);
IkReal x170=(gclwh8_2*rxp0_2);
IkReal x171=(gclwh9_10*r20);
IkReal x172=((4.0)*pp);
IkReal x173=(gclwh15_1*rxp0_2);
IkReal x174=(gclwh9_13*r20);
IkReal x175=((0.0089586225)*r21);
IkReal x176=(gclwh0_0*r20);
IkReal x177=(gclwh10_11*r22);
IkReal x178=((2.0)*gclwh12_11);
IkReal x179=((0.0655)*pz);
IkReal x180=((0.006199575)*rxp2_2);
IkReal x181=(gclwh12_14*rxp1_2);
IkReal x182=(gclwh15_0*rxp0_2);
IkReal x183=((2.0)*npx);
IkReal x184=(gclwh9_13*rxp0_2);
IkReal x185=((1.0)*pp);
IkReal x186=((4.0)*gclwh10_11);
IkReal x187=(gclwh15_9*rxp0_2);
IkReal x188=((3.60823078949063e-5)*r20);
IkReal x189=((0.00702803935125)*r22);
IkReal x190=(gclwh8_2*r20);
IkReal x191=((0.2183)*gclwh5_15);
IkReal x192=(gclwh10_2*r22);
IkReal x193=(gclwh5_1*r22);
IkReal x194=(gclwh13_9*rxp1_2);
IkReal x195=((2.0)*gclwh5_10);
IkReal x196=((0.020662095)*rxp2_2);
IkReal x197=(gclwh4_8*r22);
IkReal x198=((0.017917245)*r20);
IkReal x199=(gclwh7_0*r21);
IkReal x200=((0.00600991575645741)*r21);
IkReal x201=(gclwh11_0*r22);
IkReal x202=(gclwh6_12*r21);
IkReal x203=((0.2183)*gclwh15_15);
IkReal x204=(gclwh11_0*rxp2_2);
IkReal x205=((0.2183)*gclwh4_14);
IkReal x206=(gclwh4_14*rxp2_2);
IkReal x207=(gclwh6_2*rxp1_2);
IkReal x208=((0.1893)*rxp0_2);
IkReal x209=(gclwh4_8*rxp2_2);
IkReal x210=((0.12699240901125)*rxp1_2);
IkReal x211=(gclwh14_2*rxp0_2);
IkReal x212=(gclwh4_3*r22);
IkReal x213=((0.1893)*pp);
IkReal x214=(gclwh13_15*rxp1_2);
IkReal x215=(gclwh1_2*r20);
IkReal x216=((2.0)*gclwh14_11);
IkReal x217=(gclwh4_11*r22);
IkReal x218=((0.020662095)*x113);
IkReal x219=(gclwh6_5*x79);
IkReal x220=(gclwh8_5*x77);
IkReal x221=(gclwh12_14*x103);
IkReal x222=(gclwh10_5*x128);
IkReal x223=(gclwh4_14*x196);
IkReal x224=((0.0089586225)*x69);
IkReal x225=(gclwh12_11*x167);
IkReal x226=((0.017917245)*x118);
IkReal x227=((0.017917245)*x209);
IkReal x228=(gclwh4_11*x101);
IkReal x229=((0.0089586225)*x73);
IkReal x230=((0.1893)*x155);
IkReal x231=((0.0089586225)*x177);
IkReal x232=((0.017917245)*x100);
IkReal x233=((0.017917245)*x102);
IkReal x234=((0.0089586225)*x109);
IkReal x235=((0.1893)*x116);
IkReal x236=((0.017917245)*x194);
IkReal x237=(gclwh9_10*x129);
IkReal x238=((0.017917245)*x187);
IkReal x239=(gclwh13_10*x167);
IkReal x240=(gclwh7_10*x175);
IkReal x241=(gclwh5_10*x101);
IkReal x242=((0.020662095)*x141);
IkReal x243=(gclwh7_7*x79);
IkReal x244=(gclwh9_7*x77);
IkReal x245=(gclwh13_15*x103);
IkReal x246=((0.020662095)*x121);
IkReal x247=(gclwh11_7*x128);
IkReal x248=(gclwh10_5*x196);
IkReal x249=(gclwh8_5*x156);
IkReal x250=(gclwh14_14*x77);
IkReal x251=(gclwh6_5*x103);
IkReal x252=(gclwh4_14*x128);
IkReal x253=(gclwh12_14*x79);
IkReal x254=(gclwh8_11*x208);
IkReal x255=((0.000847933619625)*x92);
IkReal x256=(gclwh12_11*x175);
IkReal x257=(gclwh10_11*x101);
IkReal x258=((0.0089586225)*x217);
IkReal x259=((0.000847933619625)*x197);
IkReal x260=((0.1893)*x86);
IkReal x261=(gclwh14_11*x129);
IkReal x262=((0.000847933619625)*x117);
IkReal x263=(gclwh9_10*x208);
IkReal x264=(gclwh13_10*x175);
IkReal x265=(gclwh11_10*x101);
IkReal x266=((0.000847933619625)*x133);
IkReal x267=((0.0089586225)*x131);
IkReal x268=((0.000847933619625)*x108);
IkReal x269=(gclwh7_10*x167);
IkReal x270=((0.000847933619625)*x124);
IkReal x271=(gclwh15_10*x129);
IkReal x272=(gclwh5_15*x128);
IkReal x273=(gclwh7_7*x103);
IkReal x274=(gclwh13_15*x79);
IkReal x275=(gclwh15_15*x77);
IkReal x276=(gclwh9_7*x156);
IkReal x277=(gclwh11_7*x196);
IkReal x278=((0.017917245)*x177);
IkReal x279=(gclwh14_11*x112);
IkReal x280=((0.017917245)*x73);
IkReal x281=((0.04132419)*x113);
IkReal x282=((0.04132419)*x181);
IkReal x283=((0.04132419)*x206);
IkReal x284=(gclwh4_11*x162);
IkReal x285=((0.017917245)*x69);
IkReal x286=(gclwh12_11*x87);
IkReal x287=((0.04132419)*x121);
IkReal x288=((0.04132419)*x214);
IkReal x289=((0.04132419)*x141);
IkReal x290=((0.017917245)*x171);
IkReal x291=(gclwh15_10*x112);
IkReal x292=((0.017917245)*x109);
IkReal x293=(gclwh7_10*x85);
IkReal x294=((0.3786)*x146);
IkReal x295=(gclwh13_10*x87);
IkReal x296=((0.3786)*x86);
IkReal x297=(gclwh14_11*x198);
IkReal x298=(gclwh14_14*x135);
IkReal x299=(gclwh4_14*x115);
IkReal x300=(gclwh12_14*x159);
IkReal x301=(gclwh14_8*x114);
IkReal x302=((2.0)*x64);
IkReal x303=((1.0)*x65);
IkReal x304=(r21*x65);
IkReal x305=((0.2183)*gclwh10_5*x78);
IkReal x306=((0.2183)*gclwh8_5*x99);
IkReal x307=((0.10915)*gclwh6_5*x96);
IkReal x308=((0.2183)*gclwh6_5*x74);
IkReal x309=((0.10915)*gclwh8_5*x114);
IkReal x310=((0.10915)*gclwh10_5*x70);
IkReal x311=(gclwh12_3*pp*x167);
IkReal x312=(x130*x78);
IkReal x313=(x106*x190);
IkReal x314=((2.0)*gclwh8_11*x99);
IkReal x315=(gclwh10_2*pz*x70);
IkReal x316=(x211*x66);
IkReal x317=(x190*x94);
IkReal x318=(gclwh4_3*pp*x101);
IkReal x319=(x106*x192);
IkReal x320=(x152*x66);
IkReal x321=((2.0)*gclwh6_11*x74);
IkReal x322=(x149*x66);
IkReal x323=(x213*x76);
IkReal x324=(x106*x168);
IkReal x325=(gclwh13_1*pp*x167);
IkReal x326=(x106*x201);
IkReal x327=(x106*x140);
IkReal x328=(gclwh5_1*pp*x101);
IkReal x329=(x182*x66);
IkReal x330=(gclwh11_0*pz*x70);
IkReal x331=(x138*x74);
IkReal x332=(x140*x94);
IkReal x333=(x78*x91);
IkReal x334=(x173*x213);
IkReal x335=(x119*x99);
IkReal x336=(x106*x199);
IkReal x337=(x166*x66);
IkReal x338=(x153*x66);
IkReal x339=((0.10915)*gclwh7_7*x96);
IkReal x340=((0.2183)*gclwh9_7*x99);
IkReal x341=((0.2183)*gclwh11_7*x78);
IkReal x342=((0.10915)*gclwh9_7*x114);
IkReal x343=((0.2183)*gclwh7_7*x74);
IkReal x344=((0.10915)*gclwh11_7*x70);
IkReal x345=((0.10915)*gclwh14_14*x114);
IkReal x346=(x205*x78);
IkReal x347=(x147*x74);
IkReal x348=((0.10915)*gclwh12_14*x96);
IkReal x349=(x148*x99);
IkReal x350=((0.10915)*gclwh4_14*x70);
IkReal x351=((0.09465)*gclwh4_8*x70);
IkReal x352=(x94*x95);
IkReal x353=(gclwh12_3*x304);
IkReal x354=(x207*x66);
IkReal x355=(gclwh3_3*x304);
IkReal x356=(x134*x65);
IkReal x357=(gclwh3_2*r21*x106);
IkReal x358=(x216*x99);
IkReal x359=(x157*x66);
IkReal x360=(x106*x95);
IkReal x361=((0.09465)*pp*x92);
IkReal x362=(x212*x65);
IkReal x363=(x106*x215);
IkReal x364=(x170*x66);
IkReal x365=(x78*x97);
IkReal x366=(gclwh4_2*r22*x106);
IkReal x367=(gclwh4_8*npz*x66);
IkReal x368=(gclwh12_2*r21*x106);
IkReal x369=(x66*x81);
IkReal x370=((0.09465)*x301);
IkReal x371=(x178*x74);
IkReal x372=(gclwh12_8*npy*x66);
IkReal x373=(x127*x65);
IkReal x374=(x66*x72);
IkReal x375=(gclwh5_0*pz*x70);
IkReal x376=(gclwh13_9*npy*x66);
IkReal x377=(x106*x125);
IkReal x378=(x107*x94);
IkReal x379=((0.09465)*gclwh15_9*x114);
IkReal x380=(x120*x99);
IkReal x381=(x106*x107);
IkReal x382=(x142*x65);
IkReal x383=(gclwh2_0*r21*x106);
IkReal x384=(x145*x66);
IkReal x385=(x204*x66);
IkReal x386=(gclwh0_1*r20*x65);
IkReal x387=(x106*x176);
IkReal x388=((0.09465)*gclwh5_9*x70);
IkReal x389=(x66*x88);
IkReal x390=((0.09465)*gclwh13_9*x96);
IkReal x391=(x106*x139);
IkReal x392=(x66*x68);
IkReal x393=(x195*x78);
IkReal x394=(x122*x74);
IkReal x395=((0.10915)*gclwh13_15*x96);
IkReal x396=((0.10915)*gclwh5_15*x70);
IkReal x397=(x203*x99);
IkReal x398=((0.10915)*gclwh15_15*x114);
IkReal x399=(x191*x78);
IkReal x400=(x137*x74);
IkReal x401=(x132*x73);
IkReal x402=(x130*x70);
IkReal x403=((4.0)*gclwh6_11*x74);
IkReal x404=((4.0)*gclwh8_11*x99);
IkReal x405=(x132*x69);
IkReal x406=(x186*x78);
IkReal x407=(x70*x91);
IkReal x408=(x165*x74);
IkReal x409=(x114*x119);
IkReal x410=(x138*x96);
IkReal x411=(x158*x99);
IkReal x412=(x143*x78);
IkReal x413=(x114*x216);
IkReal x414=((4.0)*gclwh12_11*x74);
IkReal x415=((4.0)*gclwh4_11*x78);
IkReal x416=(x114*x148);
IkReal x417=((0.4366)*gclwh12_14*x74);
IkReal x418=((0.4366)*gclwh4_14*x78);
IkReal x419=(x147*x96);
IkReal x420=((0.4366)*gclwh14_14*x99);
IkReal x421=(x205*x70);
IkReal x422=(gclwh6_2*npy*x302);
IkReal x423=(gclwh6_2*x111*x94);
IkReal x424=(gclwh10_2*npz*x302);
IkReal x425=(gclwh8_2*x183*x64);
IkReal x426=(gclwh7_0*npy*x302);
IkReal x427=(gclwh9_0*x183*x64);
IkReal x428=(gclwh11_0*npz*x302);
IkReal x429=(gclwh7_0*x111*x94);
IkReal x430=(gclwh12_2*npy*x302);
IkReal x431=(gclwh3_2*npy*x302);
IkReal x432=(gclwh1_2*x183*x64);
IkReal x433=(gclwh14_3*x183*x94);
IkReal x434=(gclwh4_2*npz*x302);
IkReal x435=(gclwh4_3*x132*x78);
IkReal x436=(gclwh12_2*x111*x94);
IkReal x437=((1.0)*x215*x94);
IkReal x438=(gclwh3_3*x132*x74);
IkReal x439=((1.0)*gclwh4_2*pz*x70);
IkReal x440=(gclwh1_3*x183*x94);
IkReal x441=(gclwh3_2*x111*x94);
IkReal x442=(gclwh12_3*x132*x74);
IkReal x443=(gclwh14_2*x183*x64);
IkReal x444=(gclwh14_3*r20*x303);
IkReal x445=(gclwh0_0*x183*x64);
IkReal x446=(gclwh2_0*npy*x302);
IkReal x447=(gclwh5_1*x132*x78);
IkReal x448=(gclwh13_1*x132*x74);
IkReal x449=(gclwh15_0*x183*x64);
IkReal x450=(gclwh2_1*x132*x74);
IkReal x451=(gclwh0_1*x183*x94);
IkReal x452=(gclwh5_0*npz*x302);
IkReal x453=(gclwh13_0*npy*x302);
IkReal x454=((1.0)*x176*x94);
IkReal x455=((1.0)*x139*x94);
IkReal x456=(gclwh2_0*x111*x94);
IkReal x457=(gclwh13_1*x111*x65);
IkReal x458=(x193*x303);
IkReal x459=(gclwh15_1*x183*x94);
IkReal x460=(x283+x282);
IkReal x461=(x288+x287);
IkReal x462=(x249+x248);
IkReal x463=(x221+x223);
IkReal x464=(x246+x245);
IkReal x465=(x276+x277);
IkReal x466=(x321+x229+x230+x231);
IkReal x467=(x331+x237+x234+x235);
IkReal x468=(x394+x393+x269+x271);
IkReal x469=(x371+x365+x261+x260);
IkReal x470=(x298+x416+x417+x418);
IkReal x471=(x306+x307+x305+x219);
IkReal x472=(x346+x347+x345+x250);
IkReal x473=(x399+x398+x275+x400);
IkReal x474=(x339+x340+x341+x243);
IkReal x475=(x380+x265+x264+x267+x263);
IkReal x476=(x358+x258+x254+x256+x257);
IkReal x477=(x314+x312+x228+x225+x224);
IkReal x478=(x333+x335+x239+x241+x240);
IkReal x479=(x350+x348+x349+x252+x253);
IkReal x480=(x395+x397+x396+x274+x272);
IkReal x481=(x342+x343+x344+x247+x244);
IkReal x482=(x300+x299+x419+x421+x420);
IkReal x483=(x296+x297+x413+x414+x415);
IkReal x484=(x308+x309+x310+x220+x222);
IkReal x485=(x286+x285+x284+x405+x404+x406);
IkReal x486=(x293+x294+x295+x412+x410+x411);
IkReal x487=(x290+x291+x292+x407+x409+x408);
IkReal x488=(x278+x279+x280+x401+x403+x402);
IkReal x489=(((x178*x96))+((x70*x97))+((gclwh12_11*x85))+(((0.017917245)*x217))+((gclwh10_11*x162))+(((4.0)*gclwh14_11*x99))+((gclwh8_11*x112)));
IkReal x490=(x324+x320+x322+x323+x232+x425+x424+x423);
IkReal x491=(x338+x337+x336+x334+x238+x429+x428+x427);
IkReal x492=(x319+x318+x315+x317+x316+x311+x313+x227+x226+x422);
IkReal x493=(x332+x330+x325+x326+x327+x328+x329+x233+x236+x426);
IkReal x494=(x388+x389+x391+x390+x392+x268+x270+x458+x459+x456+x457+x454+x455+x452+x453+x450+x451);
IkReal x495=(x351+x353+x352+x355+x354+x357+x356+x359+x360+x361+x362+x363+x259+x255+x430+x431+x432+x433+x434+x66);
IkReal x496=(x372+x370+x368+x369+x364+x366+x367+x262+x438+x439+x435+x436+x437+x444+x441+x440+x443+x442);
IkReal x497=(x386+x387+x384+x385+x382+x383+x381+x379+x378+x377+x376+x375+x374+x373+x266+x449+x448+x445+x447+x446+x66);
op[0]=((((-0.81725)*gclwh10_12*x70))+(((1.6345)*gclwh10_12*x78))+(((-1.0)*x484))+((gclwh6_12*x104))+(((-0.007321434238125)*x98))+(((-1.6345)*gclwh6_12*x74))+(((-0.007321434238125)*x80))+(((-1.0)*gclwh4_8*x90))+x463+x471+((x202*x93))+(((0.154705425)*x100))+(((-1.0)*x218))+(((1.6345)*gclwh8_12*x99))+(((-1.0)*x93*x98))+(((-1.0)*gclwh12_8*x84)));
op[1]=((((-1.0)*x490))+(((-1.0)*x185*x69))+(((-1.0)*x477))+((gclwh10_11*x70))+(((-0.12699240901125)*x136))+(((-1.0)*gclwh12_3*x210))+x492+x466+((pp*x73))+(((0.12699240901125)*x76)));
op[2]=((-0.17125635)+(((-1.0)*x485))+x488);
op[3]=(((gclwh8_2*x123))+((gclwh10_2*x189))+(((-0.160905)*x100))+(((0.7845)*gclwh8_2*x114))+(((-1.0)*gclwh6_2*x71))+(((-0.7845)*gclwh6_2*x96))+(((0.160905)*x209))+(((-0.14850585)*x149))+(((-0.14850585)*x152))+(((-1.569)*gclwh10_2*x78))+(((-1.0)*x460))+(((0.160905)*x118))+(((0.14850585)*x211))+x281+(((-1.569)*gclwh8_2*x99))+(((0.7845)*gclwh10_2*x70))+(((1.569)*gclwh6_2*x74)));
op[4]=((((-0.0655)*gclwh6_12*x74))+(((-1.0)*x484))+(((0.03275)*gclwh6_12*x96))+(((-1.0)*x463))+(((-0.000293394886875)*x98))+x218+((gclwh4_8*x180))+(((-0.000293394886875)*x80))+x471+(((-0.006199575)*x100))+(((0.0655)*gclwh10_12*x78))+(((0.0655)*gclwh8_12*x99))+(((0.006199575)*x118))+(((-0.03275)*gclwh10_12*x70))+(((0.000293394886875)*x202))+(((-1.0)*x150*x98)));
op[5]=((((-1.0)*gclwh10_11*x70))+(((-1.0)*x490))+((pp*x69))+(((-1.0)*x185*x73))+(((-1.0)*x466))+x492+x477+(((-1.0)*gclwh12_3*x82))+(((-0.00076243651125)*x136))+(((0.00076243651125)*x76)));
op[6]=((((0.12699240901125)*x173))+(((-1.0)*x491))+(((-1.0)*gclwh9_10*x114))+((gclwh7_10*x96))+(((-1.0)*x467))+(((-1.0)*gclwh11_10*x70))+x493+x478+(((-1.0)*gclwh13_1*x210))+(((-0.12699240901125)*x169)));
op[7]=(((gclwh7_13*x104))+(((-0.81725)*gclwh11_13*x70))+(((-1.0)*gclwh13_9*x84))+(((-1.0)*x481))+(((0.154705425)*x187))+((x164*x93))+x464+x474+(((-1.0)*gclwh5_9*x90))+(((1.6345)*gclwh9_13*x99))+(((-0.007321434238125)*x110))+(((-1.0)*x242))+(((-1.0)*x174*x93))+(((-0.007321434238125)*x174))+(((1.6345)*gclwh11_13*x78))+(((-1.6345)*gclwh7_13*x74)));
op[8]=((((-0.160905)*x194))+(((0.160905)*x187))+(((-1.0)*gclwh7_0*x71))+(((-0.160905)*x102))+(((0.14850585)*x182))+(((1.569)*gclwh7_0*x74))+(((-0.14850585)*x153))+(((-0.14850585)*x166))+((gclwh9_0*x123))+x461+(((-1.569)*gclwh11_0*x78))+(((-1.569)*gclwh9_0*x99))+(((-1.0)*x289))+(((-0.7845)*gclwh7_0*x96))+(((0.7845)*gclwh11_0*x70))+((gclwh11_0*x189))+(((0.7845)*gclwh9_0*x114)));
op[9]=((-0.17125635)+(((-1.0)*x486))+x487);
op[10]=((((-1.0)*x491))+((gclwh11_10*x70))+(((-1.0)*gclwh7_10*x96))+(((-1.0)*x478))+x493+x467+(((0.00076243651125)*x173))+((gclwh9_10*x114))+(((-0.00076243651125)*x169))+(((-1.0)*gclwh13_1*x82)));
op[11]=((((0.000293394886875)*x164))+(((-0.03275)*gclwh9_13*x114))+(((0.03275)*gclwh7_13*x96))+(((-0.006199575)*x187))+(((-1.0)*x481))+(((-0.0655)*gclwh7_13*x74))+(((-0.03275)*gclwh11_13*x70))+(((-1.0)*x464))+((gclwh13_9*x151))+(((0.0655)*gclwh11_13*x78))+x242+(((-0.000293394886875)*x110))+x474+(((0.0655)*gclwh9_13*x99))+(((-0.000293394886875)*x174))+(((0.006199575)*x102)));
op[12]=((((1.6345)*gclwh4_8*x78))+(((1.6345)*gclwh12_8*x74))+((x117*x93))+(((-1.6345)*gclwh14_8*x99))+(((0.154705425)*x160))+(((-0.007321434238125)*x92))+(((-1.0)*x472))+(((-0.81725)*gclwh4_8*x70))+((gclwh10_12*x90))+x462+x479+(((-1.0)*x92*x93))+(((0.007321434238125)*x117))+(((-1.0)*x251))+(((-1.0)*gclwh6_12*x84))+(((-0.007321434238125)*x197)));
op[13]=((-0.679811285)+((gclwh3_3*x200))+(((1.341705325)*gclwh12_3*x74))+(((-1.0)*x496))+(((-1.0)*gclwh12_3*x200))+(((1.341705325)*gclwh4_3*x78))+(((-0.66189404)*gclwh12_3*x96))+(((-1.0)*x476))+(((-0.66189404)*gclwh4_3*x70))+(((-0.679811285)*gclwh1_3*x114))+(((-0.679811285)*gclwh3_3*x96))+(((1.341705325)*gclwh3_3*x74))+(((1.341705325)*gclwh1_3*x99))+x495+x469+((gclwh1_3*x83))+((gclwh14_3*x83))+(((-1.341705325)*gclwh14_3*x99))+((gclwh14_11*x114))+(((-1.0)*gclwh12_11*x96))+(((-0.00600991575645741)*x212))+(((-1.0)*gclwh4_11*x70))+(((0.66189404)*gclwh14_3*x114)));
op[14]=((-0.07735732)+(((-1.0)*x489))+x483);
op[15]=((((-0.7845)*gclwh4_2*x70))+(((-1.0)*gclwh4_2*x189))+(((-0.85)*x301))+(((0.85)*gclwh4_8*x70))+(((1.569)*gclwh3_2*x74))+(((0.7845)*pp*x95))+(((-1.0)*x482))+(((-0.14850585)*x81))+((gclwh3_2*x71))+(((-0.7845)*gclwh12_2*x96))+(((-0.007614829125)*x117))+(((1.569)*gclwh12_2*x74))+(((0.00702803935125)*x95))+(((0.85)*pp*x92))+(((-0.14850585)*x170))+(((0.007614829125)*x92))+x470+(((0.007614829125)*x197))+(((-0.7845)*gclwh1_2*x114))+(((1.569)*gclwh4_2*x78))+(((-0.7845)*gclwh3_2*x96))+(((-1.569)*gclwh14_2*x99))+(((-1.0)*gclwh12_2*x71))+(((1.569)*gclwh1_2*x99))+(((-1.0)*gclwh12_8*npy*x67))+((gclwh1_2*x123))+(((-1.0)*gclwh4_8*npz*x67))+(((0.14850585)*x207))+((x157*x67)));
op[16]=((((0.0655)*gclwh14_8*x99))+((x150*x92))+(((-1.0)*gclwh6_12*x151))+(((0.03275)*gclwh4_8*x70))+(((-0.0655)*gclwh12_8*x74))+(((-0.0655)*gclwh4_8*x78))+(((-0.03275)*x301))+(((-1.0)*x479))+(((0.006199575)*x160))+((gclwh10_12*x180))+(((-0.000293394886875)*x117))+(((0.000293394886875)*x92))+x462+x472+(((0.000293394886875)*x197))+(((-1.0)*x251)));
op[17]=((0.012986285)+(((-0.00493096)*gclwh14_3*x114))+(((-1.0)*gclwh14_11*x114))+(((0.008055325)*gclwh3_3*x74))+(((-1.0)*x496))+(((-1.0)*x469))+(((-0.012986285)*gclwh3_3*x96))+(((0.008055325)*gclwh12_3*x74))+x495+x476+(((0.008055325)*gclwh4_3*x78))+(((-0.008055325)*gclwh14_3*x99))+((gclwh3_3*x154))+(((0.00493096)*gclwh12_3*x96))+(((0.00493096)*gclwh4_3*x70))+(((3.60823078949063e-5)*x134))+(((-1.0)*gclwh4_3*x75))+(((-0.012986285)*gclwh1_3*x114))+((gclwh12_11*x96))+((gclwh14_3*x188))+((gclwh4_11*x70))+(((-1.0)*gclwh12_3*x154))+(((0.008055325)*gclwh1_3*x99)));
op[18]=((0.679811285)+((gclwh13_1*x200))+(((-1.0)*x494))+(((1.341705325)*gclwh0_1*x99))+(((0.00600991575645741)*x193))+(((-0.66189404)*gclwh15_1*x114))+(((0.00600991575645741)*x142))+(((-1.0)*gclwh15_1*x83))+(((-0.679811285)*gclwh0_1*x114))+(((-1.341705325)*gclwh5_1*x78))+(((-1.0)*x475))+(((-1.341705325)*gclwh13_1*x74))+(((-1.0)*gclwh5_10*x70))+(((-1.0)*gclwh13_10*x96))+((gclwh0_1*x83))+((gclwh15_10*x114))+x497+x468+(((0.66189404)*gclwh13_1*x96))+(((1.341705325)*gclwh2_1*x74))+(((-0.679811285)*gclwh2_1*x96))+(((0.66189404)*gclwh5_1*x70))+(((1.341705325)*gclwh15_1*x99)));
op[19]=(((x105*x68))+(((-1.0)*x105*x72))+(((-1.0)*x480))+((x124*x93))+(((-1.0)*x465))+(((-0.154705425)*x184))+x273+(((-1.0)*gclwh11_13*x90))+x473+(((-0.007321434238125)*x133))+(((-1.0)*x133*x93))+(((-1.6345)*gclwh13_9*x74))+(((0.007321434238125)*x108))+((gclwh7_13*x84))+((gclwh13_9*x104))+(((0.81725)*gclwh5_9*x70)));
op[20]=((((-0.7845)*gclwh15_0*x114))+((gclwh15_15*x135))+(((-0.85)*gclwh15_9*x114))+((gclwh0_0*x123))+(((0.007614829125)*x108))+(((-0.007614829125)*x133))+(((-1.0)*x191*x70))+(((-0.14850585)*x88))+(((-0.7845)*gclwh2_0*x96))+(((0.4366)*gclwh13_15*x74))+(((0.007614829125)*x124))+(((-1.569)*gclwh5_0*x78))+(((1.569)*gclwh15_0*x99))+(((0.14850585)*x145))+(((-0.7845)*gclwh0_0*x114))+((gclwh2_0*x71))+(((-1.0)*gclwh15_0*x123))+((gclwh13_0*x71))+(((1.569)*gclwh2_0*x74))+((x67*x68))+((x114*x203))+(((1.569)*gclwh0_0*x99))+(((0.85)*gclwh5_9*x70))+(((-1.0)*gclwh5_15*x115))+(((-1.0)*x137*x96))+(((0.4366)*gclwh5_15*x78))+(((-1.0)*x67*x72))+(((-1.0)*gclwh13_15*x159))+(((0.85)*gclwh13_9*x96))+(((-0.4366)*gclwh15_15*x99))+(((0.7845)*gclwh5_0*x70))+(((0.00702803935125)*x125))+(((0.14850585)*x204))+(((-1.0)*gclwh13_9*npy*x67))+(((0.7845)*gclwh13_0*x96))+(((-1.569)*gclwh13_0*x74)));
op[21]=((-0.07735732)+(((4.0)*gclwh15_10*x99))+((gclwh11_10*x162))+(((-4.0)*gclwh13_10*x74))+((x195*x70))+(((-1.0)*gclwh15_10*x198))+(((0.017917245)*x131))+(((-1.0)*x114*x120))+((gclwh9_10*x112))+((x122*x96))+((gclwh13_10*x85))+(((-4.0)*gclwh5_10*x78))+(((-1.0)*gclwh7_10*x87)));
op[22]=((-0.012986285)+((gclwh5_1*x75))+(((0.008055325)*gclwh2_1*x74))+(((3.60823078949063e-5)*x142))+(((-1.0)*x494))+(((-1.0)*gclwh15_10*x114))+(((-0.00493096)*gclwh5_1*x70))+(((-0.012986285)*gclwh2_1*x96))+(((-0.008055325)*gclwh5_1*x78))+(((0.008055325)*gclwh15_1*x99))+(((-1.0)*x468))+((gclwh5_10*x70))+(((-0.012986285)*gclwh0_1*x114))+x497+x475+((gclwh0_1*x188))+(((0.00493096)*gclwh15_1*x114))+(((-0.00493096)*gclwh13_1*x96))+(((0.008055325)*gclwh0_1*x99))+((gclwh13_10*x96))+(((-3.60823078949063e-5)*x127))+(((-0.008055325)*gclwh13_1*x74))+((gclwh13_1*x154)));
op[23]=((((0.0655)*gclwh13_9*x74))+(((-0.006199575)*x184))+(((0.03275)*gclwh15_9*x114))+(((-1.0)*x179*x68))+(((-0.03275)*gclwh13_9*x96))+(((-0.000293394886875)*x124))+((gclwh7_13*x151))+(((-1.0)*x473))+(((0.000293394886875)*x133))+(((-1.0)*x465))+(((-0.000293394886875)*x108))+x273+x480+(((-0.03275)*gclwh5_9*x70))+(((-1.0)*gclwh11_13*x180))+((x179*x72)));
op[24]=((-0.35681135)+(((-1.0)*x485))+x488);
op[25]=((((-3.269)*gclwh8_2*x99))+((gclwh8_2*x126))+((gclwh10_2*x163))+(((-1.0)*gclwh6_2*x161))+(((-1.0)*x460))+(((3.269)*gclwh6_2*x74))+(((-3.269)*gclwh10_2*x78))+(((-0.30941085)*x152))+x281+((gclwh14_2*x144))+(((-0.30941085)*x149))+(((-1.6345)*gclwh6_2*x96))+(((1.6345)*gclwh8_2*x114))+(((1.6345)*gclwh10_2*x70)));
op[26]=((((1.569)*pp*x98))+(((0.08264838)*x113))+(((1.569)*gclwh10_12*x70))+(((-3.138)*gclwh10_12*x78))+(((-0.0140560787025)*x202))+(((-1.569)*gclwh6_12*x96))+(((0.0140560787025)*x80))+(((-0.08264838)*x181))+(((0.0140560787025)*x98))+(((-0.08264838)*x206))+(((3.138)*gclwh6_12*x74))+(((-3.138)*gclwh8_12*x99)));
op[27]=((((-0.03583449)*x73))+(((-1.0)*x172*x73))+(((0.03583449)*x69))+(((8.0)*gclwh10_11*x78))+(((0.7572)*gclwh4_11*rxp2_2))+(((-0.03583449)*x177))+(((8.0)*gclwh8_11*x99))+(((-0.7572)*x155))+(((-1.0)*x186*x70))+((gclwh12_11*x89))+(((-8.0)*gclwh6_11*x74))+((x172*x69)));
op[28]=((-0.01429865)+(((-1.0)*x488))+x485);
op[29]=((((-0.00058678977375)*x168))+(((-0.131)*gclwh8_2*x99))+(((0.00058678977375)*x190))+(((0.00058678977375)*x192))+(((0.0655)*gclwh8_2*x114))+(((0.01239915)*x211))+x460+(((-0.0655)*gclwh6_2*x96))+(((-1.0)*x281))+(((0.131)*gclwh6_2*x74))+(((-0.131)*gclwh10_2*x78))+(((-0.01239915)*x152))+(((0.0655)*gclwh10_2*x70))+(((-0.01239915)*x149)));
op[30]=((((-3.269)*gclwh9_0*x99))+(((-1.6345)*gclwh7_0*x96))+(((1.6345)*gclwh11_0*x70))+(((-0.30941085)*x166))+(((3.269)*gclwh7_0*x74))+(((-1.0)*gclwh7_0*x161))+(((-0.30941085)*x153))+(((1.6345)*gclwh9_0*x114))+((gclwh9_0*x126))+x461+(((-3.269)*gclwh11_0*x78))+((gclwh15_0*x144))+(((-1.0)*x289))+((gclwh11_0*x163)));
op[31]=((-0.35681135)+(((-1.0)*x486))+x487);
op[32]=((((0.03583449)*x171))+(((-1.0)*gclwh13_10*x89))+(((-0.03583449)*gclwh7_10*r21))+(((-1.0)*x165*x96))+((x143*x70))+(((0.03583449)*x109))+(((-8.0)*gclwh11_10*x78))+(((8.0)*gclwh7_10*x74))+(((-0.7572)*x146))+(((0.7572)*x116))+((x114*x158))+(((-8.0)*gclwh9_10*x99)));
op[33]=((((-0.0140560787025)*x164))+(((-3.138)*gclwh11_13*x78))+(((1.569)*gclwh9_13*x114))+(((0.0140560787025)*x110))+(((-0.08264838)*x214))+(((0.08264838)*x141))+(((3.138)*gclwh7_13*x74))+(((1.569)*gclwh11_13*x70))+(((0.0140560787025)*x174))+(((-1.569)*gclwh7_13*x96))+(((-0.08264838)*x121))+(((-3.138)*gclwh9_13*x99)));
op[34]=((((-0.0655)*gclwh7_0*x96))+(((-0.00058678977375)*x199))+(((0.00058678977375)*x140))+(((0.131)*gclwh7_0*x74))+(((-1.0)*x461))+x289+(((-0.131)*gclwh11_0*x78))+(((0.0655)*gclwh9_0*x114))+(((-0.131)*gclwh9_0*x99))+(((0.00058678977375)*x201))+(((0.0655)*gclwh11_0*x70))+(((-0.01239915)*x166))+(((-0.01239915)*x153))+(((0.01239915)*x182)));
op[35]=((-0.01429865)+(((-1.0)*x487))+x486);
op[36]=((1.31196768)+(((-1.0)*x489))+x483);
op[37]=((((-1.6345)*gclwh3_2*x96))+(((-1.0)*gclwh12_2*x161))+(((3.269)*gclwh12_2*x74))+(((0.30941085)*x207))+(((-1.0)*x482))+(((-1.0)*gclwh4_2*x163))+(((-3.269)*gclwh14_2*x99))+(((-1.6345)*gclwh1_2*x114))+(((0.01464286847625)*x95))+(((3.269)*gclwh1_2*x99))+x470+(((-1.6345)*gclwh12_2*x96))+(((-1.6345)*gclwh4_2*x70))+(((3.269)*gclwh3_2*x74))+(((-0.30941085)*x81))+((gclwh1_2*x126))+((gclwh3_2*x161))+(((-1.0)*gclwh8_2*x144))+(((1.6345)*pp*x95))+(((3.269)*gclwh4_2*x78)));
IkReal x498=pz*pz;
IkReal x499=pp*pp;
IkReal x500=((0.1893)*pz);
IkReal x501=((1.7)*pz);
IkReal x502=(gclwh15_9*npx);
IkReal x503=(pp*r21);
IkReal x504=(pp*r22);
IkReal x505=((0.00702803935125)*r21);
IkReal x506=(gclwh5_9*npz);
IkReal x507=(pp*r20);
IkReal x508=(npy*pz);
IkReal x509=((4.0)*gclwh12_11);
IkReal x510=((3.60823078949063e-5)*r22);
IkReal x511=(gclwh14_3*rxp0_2);
IkReal x512=((0.000977833645875)*r20);
IkReal x513=(npz*pz);
IkReal x514=((0.000977833645875)*r21);
IkReal x515=(gclwh10_2*rxp2_2);
IkReal x516=((0.00076243651125)*rxp1_2);
IkReal x517=((0.00600991575645741)*r20);
IkReal x518=((0.154705425)*rxp1_2);
IkReal x519=((0.4366)*gclwh5_15);
IkReal x520=(gclwh6_11*rxp1_2);
IkReal x521=(gclwh7_0*rxp1_2);
IkReal x522=((0.154705425)*rxp2_2);
IkReal x523=((2.0)*gclwh11_10);
IkReal x524=((0.2970117)*rxp1_2);
IkReal x525=((0.017917245)*r21);
IkReal x526=(gclwh14_2*pz);
IkReal x527=(gclwh12_8*r21);
IkReal x528=(gclwh14_2*rxp0_2);
IkReal x529=((2.0)*gclwh4_11);
IkReal x530=((0.007321434238125)*r20);
IkReal x531=(npx*pz);
IkReal x532=((0.4366)*gclwh15_15);
IkReal x533=(gclwh10_11*rxp2_2);
IkReal x534=(gclwh5_9*rxp2_2);
IkReal x535=((0.020662095)*rxp1_2);
IkReal x536=((0.007321434238125)*r21);
IkReal x537=(gclwh0_0*r20);
IkReal x538=((0.0089586225)*r21);
IkReal x539=(gclwh13_0*pz);
IkReal x540=((1.6345)*pz);
IkReal x541=((0.007321434238125)*r22);
IkReal x542=((1.0)*pz);
IkReal x543=(gclwh14_14*rxp0_2);
IkReal x544=(gclwh4_14*r22);
IkReal x545=((0.1893)*rxp0_2);
IkReal x546=((0.00058678977375)*r22);
IkReal x547=(gclwh12_8*rxp1_2);
IkReal x548=((2.0)*gclwh9_10);
IkReal x549=((0.1893)*rxp2_2);
IkReal x550=((2.0)*gclwh15_10);
IkReal x551=((4.0)*gclwh14_11);
IkReal x552=(gclwh5_15*rxp2_2);
IkReal x553=((0.020662095)*rxp0_2);
IkReal x554=((2.0)*gclwh13_10);
IkReal x555=((0.3786)*rxp1_2);
IkReal x556=(gclwh9_0*r20);
IkReal x557=(gclwh13_9*r21);
IkReal x558=(gclwh15_1*r20);
IkReal x559=((0.000977833645875)*r22);
IkReal x560=((0.006199575)*rxp0_2);
IkReal x561=(gclwh6_2*rxp1_2);
IkReal x562=((0.0089586225)*r20);
IkReal x563=((2.0)*gclwh10_11);
IkReal x564=((2.0)*pp);
IkReal x565=((0.00058678977375)*r21);
IkReal x566=(gclwh1_3*r20);
IkReal x567=(gclwh14_14*r20);
IkReal x568=(gclwh9_0*rxp0_2);
IkReal x569=(gclwh4_3*rxp2_2);
IkReal x570=(gclwh5_0*r22);
IkReal x571=((0.03583449)*r20);
IkReal x572=((0.00058678977375)*r20);
IkReal x573=((0.2183)*gclwh13_15);
IkReal x574=((2.0)*gclwh7_10);
IkReal x575=(gclwh2_1*r21);
IkReal x576=((4.0)*gclwh15_10);
IkReal x577=((0.0089586225)*pz);
IkReal x578=((0.2183)*gclwh12_14);
IkReal x579=((0.2183)*gclwh14_14);
IkReal x580=(gclwh11_0*rxp2_2);
IkReal x581=(gclwh8_2*rxp0_2);
IkReal x582=((0.3786)*rxp2_2);
IkReal x583=(gclwh12_2*rxp1_2);
IkReal x584=(gclwh5_0*rxp2_2);
IkReal x585=((3.60823078949063e-5)*r21);
IkReal x586=(gclwh15_9*r20);
IkReal x587=((0.3786)*rxp0_2);
IkReal x588=((0.006199575)*rxp1_2);
IkReal x589=(gclwh14_8*npx);
IkReal x590=(gclwh13_15*r21);
IkReal x591=((0.017917245)*r20);
IkReal x592=(gclwh5_15*r22);
IkReal x593=((0.000293394886875)*r21);
IkReal x594=(gclwh13_0*rxp1_2);
IkReal x595=(gclwh7_10*rxp1_2);
IkReal x596=((0.000293394886875)*r22);
IkReal x597=(gclwh5_1*rxp2_2);
IkReal x598=((0.154705425)*rxp0_2);
IkReal x599=((0.4366)*gclwh13_15);
IkReal x600=((0.0089586225)*r22);
IkReal x601=((0.2970117)*rxp2_2);
IkReal x602=(gclwh5_9*r22);
IkReal x603=((0.7572)*rxp0_2);
IkReal x604=((4.0)*gclwh4_11);
IkReal x605=(gclwh15_1*rxp0_2);
IkReal x606=((0.000293394886875)*r20);
IkReal x607=((2.0)*gclwh6_11);
IkReal x608=((0.4366)*gclwh12_14);
IkReal x609=((0.017917245)*r22);
IkReal x610=(gclwh15_0*r20);
IkReal x611=(gclwh15_15*r20);
IkReal x612=((2.0)*gclwh12_11);
IkReal x613=(gclwh14_8*rxp0_2);
IkReal x614=((0.0655)*pz);
IkReal x615=((0.006199575)*rxp2_2);
IkReal x616=((0.04132419)*rxp1_2);
IkReal x617=((0.4366)*gclwh4_14);
IkReal x618=(gclwh15_0*rxp0_2);
IkReal x619=(gclwh14_8*r20);
IkReal x620=((0.03583449)*r22);
IkReal x621=((2.0)*gclwh8_11);
IkReal x622=((4.0)*gclwh13_10);
IkReal x623=(gclwh15_9*rxp0_2);
IkReal x624=((3.60823078949063e-5)*r20);
IkReal x625=((0.00702803935125)*r22);
IkReal x626=((0.2183)*gclwh5_15);
IkReal x627=(gclwh5_1*r22);
IkReal x628=((4.0)*gclwh5_10);
IkReal x629=(gclwh13_9*rxp1_2);
IkReal x630=((2.0)*gclwh5_10);
IkReal x631=((0.4366)*gclwh14_14);
IkReal x632=((0.020662095)*rxp2_2);
IkReal x633=(gclwh4_8*r22);
IkReal x634=(gclwh4_2*rxp2_2);
IkReal x635=((0.00600991575645741)*r21);
IkReal x636=((0.2183)*gclwh15_15);
IkReal x637=((0.2183)*gclwh4_14);
IkReal x638=((0.00702803935125)*r20);
IkReal x639=(gclwh12_14*r21);
IkReal x640=(gclwh4_8*rxp2_2);
IkReal x641=((0.2970117)*rxp0_2);
IkReal x642=(gclwh8_2*pz);
IkReal x643=(gclwh13_1*rxp1_2);
IkReal x644=((0.1893)*pp);
IkReal x645=(gclwh12_3*rxp1_2);
IkReal x646=((0.01464286847625)*r21);
IkReal x647=((0.1893)*rxp1_2);
IkReal x648=(gclwh4_3*r22);
IkReal x649=((2.0)*gclwh14_11);
IkReal x650=((0.03583449)*r21);
IkReal x651=((0.00195566729175)*x590);
IkReal x652=((0.00195566729175)*x592);
IkReal x653=((0.00195566729175)*x611);
IkReal x654=(gclwh15_10*x591);
IkReal x655=(gclwh7_10*x555);
IkReal x656=(gclwh5_10*x609);
IkReal x657=(gclwh9_10*x587);
IkReal x658=(gclwh13_10*x525);
IkReal x659=(gclwh11_10*x582);
IkReal x660=(gclwh12_14*x535);
IkReal x661=(gclwh6_5*x514);
IkReal x662=(gclwh4_14*x632);
IkReal x663=(gclwh8_5*x512);
IkReal x664=((0.020662095)*x543);
IkReal x665=(gclwh10_5*x559);
IkReal x666=((0.017917245)*x547);
IkReal x667=(gclwh8_11*x562);
IkReal x668=(gclwh14_11*x545);
IkReal x669=((0.017917245)*x640);
IkReal x670=(gclwh10_11*x600);
IkReal x671=(gclwh6_11*x538);
IkReal x672=(gclwh12_11*x647);
IkReal x673=(gclwh4_11*x549);
IkReal x674=((0.017917245)*x613);
IkReal x675=((0.017917245)*x534);
IkReal x676=(gclwh13_10*x647);
IkReal x677=(gclwh7_10*x538);
IkReal x678=(gclwh5_10*x549);
IkReal x679=((0.017917245)*x629);
IkReal x680=((0.017917245)*x623);
IkReal x681=(gclwh11_10*x600);
IkReal x682=(gclwh15_10*x545);
IkReal x683=(gclwh9_10*x562);
IkReal x684=(gclwh13_15*x535);
IkReal x685=((0.020662095)*x552);
IkReal x686=(gclwh7_7*x514);
IkReal x687=(gclwh9_7*x512);
IkReal x688=(gclwh15_15*x553);
IkReal x689=(gclwh11_7*x559);
IkReal x690=(gclwh12_11*x525);
IkReal x691=((0.3786)*x533);
IkReal x692=(gclwh4_11*x609);
IkReal x693=(gclwh8_11*x587);
IkReal x694=((0.00195566729175)*x544);
IkReal x695=((0.00195566729175)*x639);
IkReal x696=((0.00195566729175)*x567);
IkReal x697=((0.000977833645875)*x544);
IkReal x698=(gclwh10_5*x632);
IkReal x699=(gclwh12_14*x514);
IkReal x700=(gclwh8_5*x553);
IkReal x701=(gclwh6_5*x535);
IkReal x702=(gclwh14_14*x512);
IkReal x703=((0.000847933619625)*x527);
IkReal x704=((0.1893)*x520);
IkReal x705=(gclwh14_11*x562);
IkReal x706=((0.000847933619625)*x633);
IkReal x707=(gclwh8_11*x545);
IkReal x708=(gclwh12_11*x538);
IkReal x709=((0.1893)*x533);
IkReal x710=(gclwh4_11*x600);
IkReal x711=((0.000847933619625)*x619);
IkReal x712=((0.1893)*x595);
IkReal x713=(gclwh15_10*x562);
IkReal x714=((0.000847933619625)*x586);
IkReal x715=((0.000847933619625)*x602);
IkReal x716=(gclwh9_10*x545);
IkReal x717=(gclwh13_10*x538);
IkReal x718=((0.000847933619625)*x557);
IkReal x719=(gclwh11_10*x549);
IkReal x720=(gclwh5_10*x600);
IkReal x721=(gclwh15_15*x512);
IkReal x722=(gclwh7_7*x535);
IkReal x723=(gclwh5_15*x559);
IkReal x724=(gclwh9_7*x553);
IkReal x725=(gclwh11_7*x632);
IkReal x726=(gclwh13_15*x514);
IkReal x727=((2.0)*x498);
IkReal x728=(r21*x499);
IkReal x729=((1.0)*x499);
IkReal x730=(x503*x573);
IkReal x731=(x531*x532);
IkReal x732=(x504*x626);
IkReal x733=(x508*x599);
IkReal x734=(x507*x636);
IkReal x735=(x513*x519);
IkReal x736=(x507*x550);
IkReal x737=(x513*x628);
IkReal x738=(x508*x622);
IkReal x739=(x503*x554);
IkReal x740=(x531*x576);
IkReal x741=(x504*x630);
IkReal x742=((0.2183)*gclwh10_5*x513);
IkReal x743=((0.2183)*gclwh8_5*x531);
IkReal x744=((0.10915)*gclwh6_5*x503);
IkReal x745=((0.2183)*gclwh6_5*x508);
IkReal x746=((0.10915)*gclwh8_5*x507);
IkReal x747=((0.10915)*gclwh10_5*x504);
IkReal x748=(x644*x645);
IkReal x749=(x508*x607);
IkReal x750=(x562*x642);
IkReal x751=(gclwh10_2*pz*x504);
IkReal x752=(x500*x528);
IkReal x753=(x507*x642);
IkReal x754=(gclwh4_3*pp*x549);
IkReal x755=(gclwh10_2*r22*x577);
IkReal x756=(x500*x583);
IkReal x757=(x513*x563);
IkReal x758=(x500*x634);
IkReal x759=(x511*x644);
IkReal x760=(x531*x621);
IkReal x761=(gclwh6_2*pz*x538);
IkReal x762=(x643*x644);
IkReal x763=(x513*x523);
IkReal x764=(x531*x548);
IkReal x765=(gclwh11_0*r22*x577);
IkReal x766=(x556*x577);
IkReal x767=(gclwh5_1*pp*x549);
IkReal x768=(x500*x618);
IkReal x769=(gclwh11_0*pz*x504);
IkReal x770=(gclwh9_0*pz*x507);
IkReal x771=(gclwh15_1*pp*x545);
IkReal x772=(gclwh7_0*pz*x538);
IkReal x773=(x500*x594);
IkReal x774=(x500*x584);
IkReal x775=(x508*x574);
IkReal x776=((0.10915)*gclwh7_7*x503);
IkReal x777=((0.2183)*gclwh9_7*x531);
IkReal x778=((0.2183)*gclwh11_7*x513);
IkReal x779=((0.10915)*gclwh9_7*x507);
IkReal x780=((0.2183)*gclwh7_7*x508);
IkReal x781=((0.10915)*gclwh11_7*x504);
IkReal x782=(x504*x529);
IkReal x783=(x503*x612);
IkReal x784=(x531*x551);
IkReal x785=(x503*x578);
IkReal x786=(x531*x631);
IkReal x787=(x504*x637);
IkReal x788=(x507*x579);
IkReal x789=(x508*x608);
IkReal x790=(x513*x617);
IkReal x791=((0.10915)*gclwh12_14*x503);
IkReal x792=(x531*x579);
IkReal x793=((0.10915)*gclwh4_14*x504);
IkReal x794=((0.10915)*gclwh14_14*x507);
IkReal x795=(x513*x637);
IkReal x796=(x508*x578);
IkReal x797=((0.09465)*gclwh4_8*x504);
IkReal x798=(x507*x526);
IkReal x799=(gclwh12_3*x728);
IkReal x800=(x513*x529);
IkReal x801=(x500*x561);
IkReal x802=(gclwh3_3*x728);
IkReal x803=(x499*x566);
IkReal x804=(gclwh3_2*pz*x538);
IkReal x805=(x500*x589);
IkReal x806=(x526*x562);
IkReal x807=((0.09465)*gclwh12_8*x503);
IkReal x808=(x499*x648);
IkReal x809=(gclwh1_2*pz*x562);
IkReal x810=(x508*x612);
IkReal x811=(x500*x581);
IkReal x812=(gclwh4_2*r22*x577);
IkReal x813=(gclwh4_8*npz*x500);
IkReal x814=(gclwh12_2*pz*x538);
IkReal x815=(x500*x515);
IkReal x816=(x531*x649);
IkReal x817=((0.09465)*gclwh14_8*x507);
IkReal x818=(gclwh12_8*npy*x500);
IkReal x819=(x499*x558);
IkReal x820=(x500*x506);
IkReal x821=(gclwh5_0*pz*x504);
IkReal x822=(gclwh13_9*npy*x500);
IkReal x823=(x570*x577);
IkReal x824=(x503*x539);
IkReal x825=((0.09465)*gclwh15_9*x507);
IkReal x826=(x538*x539);
IkReal x827=(x499*x575);
IkReal x828=(x513*x630);
IkReal x829=(gclwh2_0*pz*x538);
IkReal x830=(x500*x568);
IkReal x831=(x508*x554);
IkReal x832=(x500*x580);
IkReal x833=(gclwh0_1*r20*x499);
IkReal x834=(x537*x577);
IkReal x835=((0.09465)*gclwh5_9*x504);
IkReal x836=(x500*x521);
IkReal x837=((0.09465)*gclwh13_9*x503);
IkReal x838=(gclwh15_0*pz*x562);
IkReal x839=(x500*x502);
IkReal x840=(x531*x550);
IkReal x841=((0.10915)*gclwh15_15*x507);
IkReal x842=(x513*x626);
IkReal x843=(x508*x573);
IkReal x844=((0.10915)*gclwh13_15*x503);
IkReal x845=((0.10915)*gclwh5_15*x504);
IkReal x846=(x531*x636);
IkReal x847=(gclwh6_2*npy*x727);
IkReal x848=(gclwh6_2*x503*x542);
IkReal x849=(gclwh10_2*npz*x727);
IkReal x850=(gclwh8_2*npx*x727);
IkReal x851=(gclwh7_0*npy*x727);
IkReal x852=(gclwh9_0*npx*x727);
IkReal x853=(gclwh11_0*npz*x727);
IkReal x854=(gclwh7_0*x503*x542);
IkReal x855=(gclwh12_2*npy*x727);
IkReal x856=(gclwh3_2*npy*x727);
IkReal x857=(gclwh1_2*npx*x727);
IkReal x858=(gclwh14_3*x531*x564);
IkReal x859=(gclwh4_2*npz*x727);
IkReal x860=(gclwh4_3*x513*x564);
IkReal x861=(gclwh12_2*x503*x542);
IkReal x862=(gclwh1_2*x507*x542);
IkReal x863=(gclwh3_3*x508*x564);
IkReal x864=(gclwh4_2*x504*x542);
IkReal x865=(gclwh1_3*x531*x564);
IkReal x866=(gclwh3_2*x503*x542);
IkReal x867=(gclwh12_3*x508*x564);
IkReal x868=(gclwh14_2*npx*x727);
IkReal x869=(gclwh14_3*r20*x729);
IkReal x870=(gclwh0_0*npx*x727);
IkReal x871=(gclwh2_0*npy*x727);
IkReal x872=(gclwh5_1*x513*x564);
IkReal x873=(gclwh13_1*x508*x564);
IkReal x874=(gclwh15_0*npx*x727);
IkReal x875=(gclwh2_1*x508*x564);
IkReal x876=(gclwh0_1*x531*x564);
IkReal x877=(gclwh5_0*npz*x727);
IkReal x878=(gclwh13_0*npy*x727);
IkReal x879=(gclwh0_0*x507*x542);
IkReal x880=(gclwh15_0*x507*x542);
IkReal x881=(gclwh2_0*x503*x542);
IkReal x882=((1.0)*gclwh13_1*x728);
IkReal x883=(x627*x729);
IkReal x884=(gclwh15_1*x531*x564);
IkReal x885=(x660+x662);
IkReal x886=(x698+x700);
IkReal x887=(x685+x684);
IkReal x888=(x724+x725);
IkReal x889=(x683+x682+x681+x775);
IkReal x890=(x668+x667+x670+x749);
IkReal x891=(x704+x705+x810+x800);
IkReal x892=(x713+x712+x828+x831);
IkReal x893=(x653+x735+x734+x733);
IkReal x894=(x661+x744+x742+x743);
IkReal x895=(x702+x795+x794+x796);
IkReal x896=(x696+x790+x788+x789);
IkReal x897=(x686+x777+x776+x778);
IkReal x898=(x721+x841+x843+x842);
IkReal x899=(x719+x717+x716+x720+x840);
IkReal x900=(x710+x708+x709+x707+x816);
IkReal x901=(x678+x676+x677+x764+x763);
IkReal x902=(x672+x673+x671+x757+x760);
IkReal x903=(((x513*x604))+((x508*x509))+((x507*x649))+((gclwh14_11*x591))+(((0.3786)*x520)));
IkReal x904=(x694+x695+x786+x787+x785);
IkReal x905=(x654+x655+x737+x736+x738);
IkReal x906=(x697+x699+x791+x793+x792);
IkReal x907=(x723+x726+x845+x844+x846);
IkReal x908=(x663+x665+x746+x747+x745);
IkReal x909=(x651+x652+x732+x731+x730);
IkReal x910=(x689+x687+x779+x780+x781);
IkReal x911=(x656+x657+x658+x659+x739+x740+x741);
IkReal x912=(x690+x691+x692+x693+x782+x783+x784);
IkReal x913=(x680+x773+x772+x771+x774+x852+x853+x854);
IkReal x914=(x674+x756+x759+x758+x761+x850+x849+x848);
IkReal x915=(x679+x675+x770+x768+x769+x765+x766+x767+x762+x851);
IkReal x916=(x669+x666+x755+x754+x751+x750+x753+x752+x748+x847);
IkReal x917=(x718+x715+x878+x879+x875+x876+x877+x884+x881+x880+x883+x882+x835+x836+x837+x838+x839);
IkReal x918=(x500+x703+x706+x797+x799+x798+x856+x857+x855+x858+x859+x809+x808+x805+x804+x807+x806+x801+x803+x802);
IkReal x919=(x711+x869+x868+x867+x866+x865+x864+x863+x862+x861+x860+x818+x817+x814+x815+x812+x813+x811);
IkReal x920=(x500+x714+x870+x871+x872+x873+x874+x819+x829+x823+x822+x821+x820+x827+x826+x825+x824+x834+x830+x832+x833);
op[38]=((((0.8732)*gclwh4_14*x513))+(((-0.0039113345835)*x639))+(((-1.0)*gclwh8_12*x641))+((x507*x631))+(((0.0039113345835)*x567))+(((0.8732)*gclwh12_14*x508))+(((-1.0)*gclwh10_12*x601))+(((-0.0039113345835)*x544))+(((-0.8732)*gclwh14_14*x531))+(((-1.0)*x504*x617))+(((-1.0)*x503*x608))+((gclwh6_12*x524)));
op[39]=((-0.05940486)+(((8.0)*gclwh14_11*x531))+((gclwh8_11*x603))+(((-1.0)*x507*x551))+(((-8.0)*gclwh4_11*x513))+(((0.7572)*x533))+((gclwh4_11*x620))+((x504*x604))+((x503*x509))+(((-8.0)*gclwh12_11*x508))+(((-0.7572)*x520))+((gclwh12_11*x650))+(((-1.0)*gclwh14_11*x571)));
op[40]=((0.02168232)+(((-1.0)*x903))+x912);
op[41]=(((gclwh3_2*x565))+(((-0.131)*npx*x526))+(((-1.0)*gclwh12_2*x565))+((gclwh1_2*x572))+((gclwh14_2*x572))+(((-0.0655)*gclwh1_2*x507))+(((-0.01239915)*x581))+(((-1.0)*x896))+(((0.131)*gclwh4_2*x513))+(((0.0655)*gclwh14_2*x507))+(((-0.0655)*gclwh12_2*x503))+(((0.131)*gclwh12_2*x508))+(((0.131)*gclwh1_2*x531))+(((-0.0655)*gclwh4_2*x504))+x904+(((-0.0655)*gclwh3_2*x503))+(((-0.01239915)*x515))+(((0.131)*gclwh3_2*x508))+(((0.01239915)*x561))+(((-1.0)*gclwh4_2*x546)));
op[42]=((((3.269)*gclwh15_0*x531))+(((-3.269)*gclwh13_0*x508))+(((-0.30941085)*x521))+(((-1.6345)*gclwh15_0*x507))+(((3.269)*gclwh0_0*x531))+(((0.30941085)*x568))+(((0.30941085)*x580))+(((1.6345)*gclwh13_0*x503))+(((-1.0)*x909))+(((-1.6345)*gclwh0_0*x507))+((gclwh13_0*x646))+(((0.01464286847625)*x570))+(((-0.01464286847625)*x610))+((gclwh2_0*x646))+(((0.01464286847625)*x537))+x893+(((3.269)*gclwh2_0*x508))+(((-1.6345)*gclwh2_0*x503))+(((-3.269)*gclwh5_0*x513))+(((1.6345)*gclwh5_0*x504)));
op[43]=((1.31196768)+(((-1.0)*x905))+x911);
op[44]=((0.05940486)+(((0.7572)*gclwh11_10*rxp2_2))+(((-1.0)*x507*x576))+(((-8.0)*gclwh13_10*x508))+((gclwh13_10*x650))+(((-0.7572)*x595))+(((8.0)*gclwh15_10*x531))+((x503*x622))+((x504*x628))+((gclwh9_10*x603))+(((-8.0)*gclwh5_10*x513))+((gclwh5_10*x620))+(((-1.0)*gclwh15_10*x571)));
op[45]=(((gclwh11_13*x601))+((gclwh9_13*x641))+(((-1.0)*x507*x532))+(((0.8732)*gclwh15_15*x531))+((x504*x519))+((x503*x599))+(((-1.0)*gclwh7_13*x524))+(((0.0039113345835)*x590))+(((0.0039113345835)*x592))+(((-0.8732)*gclwh13_15*x508))+(((-0.0039113345835)*x611))+(((-0.8732)*gclwh5_15*x513)));
op[46]=((((0.131)*gclwh2_0*x508))+(((0.131)*gclwh15_0*x531))+(((-1.0)*gclwh15_0*x572))+(((-0.0655)*gclwh15_0*x507))+(((-0.0655)*gclwh0_0*x507))+(((-0.131)*gclwh5_0*x513))+(((0.131)*gclwh0_0*x531))+(((0.00058678977375)*x537))+(((-0.131)*gclwh13_0*x508))+(((-0.01239915)*x521))+((gclwh5_0*x546))+(((-1.0)*x893))+(((0.01239915)*x580))+((gclwh13_0*x565))+((gclwh2_0*x565))+(((-0.0655)*gclwh2_0*x503))+(((0.0655)*gclwh13_0*x503))+x909+(((0.0655)*gclwh5_0*x504))+(((0.01239915)*x568)));
op[47]=((0.02168232)+(((-1.0)*x911))+x905);
op[48]=((((-1.0)*gclwh4_8*x522))+(((-1.0)*gclwh12_8*x518))+((gclwh10_12*x541))+((gclwh8_12*x530))+(((-1.6345)*gclwh10_12*x513))+(((-1.0)*x908))+(((0.81725)*gclwh8_12*x507))+(((-1.0)*x885))+((gclwh14_8*x598))+(((0.81725)*gclwh10_12*x504))+x664+(((-1.6345)*gclwh8_12*x531))+(((1.6345)*gclwh6_12*x508))+(((-1.0)*gclwh6_12*x536))+x894+(((-0.81725)*gclwh6_12*x503)));
op[49]=((((0.12699240901125)*x511))+(((-1.0)*gclwh10_11*x504))+(((-1.0)*x890))+(((-1.0)*x914))+(((-0.12699240901125)*x569))+(((-0.12699240901125)*x645))+((gclwh6_11*x503))+x916+x902+(((-1.0)*gclwh8_11*x507)));
op[50]=((0.17125635)+(((4.0)*gclwh10_11*x513))+(((-1.0)*x504*x563))+((gclwh12_11*x555))+((gclwh6_11*x525))+((x503*x607))+(((4.0)*gclwh8_11*x531))+(((-4.0)*gclwh6_11*x508))+(((-1.0)*gclwh8_11*x591))+(((-1.0)*gclwh14_11*x587))+(((-1.0)*x507*x621))+(((-1.0)*gclwh10_11*x609))+((gclwh4_11*x582)));
op[51]=((((0.14850585)*x583))+(((-0.160905)*x613))+(((-1.0)*gclwh8_2*x638))+(((-0.14850585)*x528))+((gclwh6_2*x505))+(((0.7845)*gclwh6_2*x503))+(((-1.0)*gclwh10_2*x625))+(((0.04132419)*gclwh4_14*rxp2_2))+(((0.160905)*x640))+(((0.160905)*x547))+(((-0.7845)*gclwh8_2*x507))+((gclwh12_14*x616))+(((0.14850585)*x634))+(((1.569)*gclwh10_2*x513))+(((1.569)*gclwh8_2*x531))+(((-1.569)*gclwh6_2*x508))+(((-0.04132419)*x543))+(((-0.7845)*gclwh10_2*x504)));
op[52]=((((-0.0655)*gclwh10_12*x513))+(((-1.0)*gclwh14_8*x560))+(((-0.0655)*gclwh8_12*x531))+(((0.0655)*gclwh6_12*x508))+(((-0.03275)*gclwh6_12*x503))+(((-1.0)*x908))+((gclwh4_8*x615))+(((0.03275)*gclwh8_12*x507))+((gclwh10_12*x596))+(((-1.0)*gclwh6_12*x593))+(((-1.0)*x664))+(((0.006199575)*x547))+(((0.03275)*gclwh10_12*x504))+x885+x894+((gclwh8_12*x606)));
op[53]=(((gclwh8_11*x507))+(((-1.0)*gclwh6_11*x503))+(((-1.0)*x902))+(((-1.0)*x914))+((gclwh10_11*x504))+(((-0.00076243651125)*x569))+x890+x916+(((0.00076243651125)*x511))+(((-1.0)*gclwh12_3*x516)));
op[54]=(((gclwh11_10*x504))+((gclwh9_10*x507))+(((-1.0)*x901))+(((-1.0)*x913))+(((-0.12699240901125)*x597))+(((-1.0)*gclwh7_10*x503))+(((-0.12699240901125)*x643))+(((0.12699240901125)*x605))+x889+x915);
op[55]=((((-1.0)*gclwh13_9*x518))+(((-1.6345)*gclwh9_13*x531))+(((0.81725)*gclwh11_13*x504))+(((0.81725)*gclwh9_13*x507))+(((-1.0)*gclwh5_9*x522))+(((-1.0)*x910))+(((-1.0)*gclwh7_13*x536))+(((-1.6345)*gclwh11_13*x513))+(((-1.0)*x887))+(((-0.81725)*gclwh7_13*x503))+(((1.6345)*gclwh7_13*x508))+x688+((gclwh11_13*x541))+((gclwh15_9*x598))+x897+((gclwh9_13*x530)));
op[56]=((((-1.0)*gclwh13_15*x616))+(((-0.7845)*gclwh11_0*x504))+(((0.14850585)*x584))+(((-0.04132419)*x552))+(((-0.00702803935125)*x556))+(((-1.569)*gclwh7_0*x508))+(((-1.0)*gclwh11_0*x625))+((gclwh7_0*x505))+(((0.160905)*x623))+(((-0.14850585)*x618))+(((1.569)*gclwh9_0*x531))+(((0.04132419)*gclwh15_15*rxp0_2))+(((-0.160905)*x629))+(((0.7845)*gclwh7_0*x503))+(((0.14850585)*x594))+(((-0.160905)*x534))+(((-0.7845)*gclwh9_0*x507))+(((1.569)*gclwh11_0*x513)));
op[57]=((0.17125635)+((gclwh5_10*x582))+((gclwh13_10*x555))+(((-1.0)*x507*x548))+(((-1.0)*gclwh11_10*x609))+(((-1.0)*gclwh15_10*x587))+(((-1.0)*x504*x523))+((x503*x574))+(((4.0)*gclwh11_10*x513))+((gclwh7_10*x525))+(((-4.0)*gclwh7_10*x508))+(((4.0)*gclwh9_10*x531))+(((-1.0)*gclwh9_10*x591)));
op[58]=((((-1.0)*gclwh11_10*x504))+((gclwh7_10*x503))+(((-1.0)*x913))+(((-1.0)*x889))+(((-1.0)*gclwh13_1*x516))+(((-1.0)*gclwh9_10*x507))+(((0.00076243651125)*x605))+x915+x901+(((-0.00076243651125)*x597)));
op[59]=((((-0.0655)*gclwh9_13*x531))+(((0.03275)*gclwh9_13*x507))+(((-1.0)*x688))+(((-0.03275)*gclwh7_13*x503))+(((-1.0)*x910))+(((-0.0655)*gclwh11_13*x513))+(((0.0655)*gclwh7_13*x508))+(((0.006199575)*x534))+(((-1.0)*gclwh7_13*x593))+x887+x897+((gclwh9_13*x606))+((gclwh13_9*x588))+((gclwh11_13*x596))+(((-1.0)*gclwh15_9*x560))+(((0.03275)*gclwh11_13*x504)));
op[60]=((((-1.0)*gclwh4_8*x541))+(((1.6345)*gclwh12_8*x508))+(((-1.0)*x906))+((gclwh6_12*x518))+(((-0.81725)*gclwh4_8*x504))+(((-0.007321434238125)*x527))+(((-1.0)*gclwh8_12*x598))+(((-1.0)*x701))+(((-0.81725)*gclwh12_8*x503))+(((0.81725)*gclwh14_8*x507))+((gclwh14_8*x530))+(((1.6345)*gclwh4_8*x513))+x886+x895+(((-1.0)*gclwh10_12*x522))+(((-1.6345)*gclwh14_8*x531)));
op[61]=((0.679811285)+((gclwh3_3*x635))+(((-0.66189404)*gclwh12_3*x503))+(((-1.0)*gclwh14_11*x507))+(((-0.00600991575645741)*x648))+(((1.341705325)*gclwh12_3*x508))+(((-1.0)*x891))+(((-1.0)*x919))+((gclwh14_3*x517))+(((0.66189404)*gclwh14_3*x507))+(((-0.66189404)*gclwh4_3*x504))+(((1.341705325)*gclwh3_3*x508))+((gclwh12_11*x503))+(((1.341705325)*gclwh1_3*x531))+(((-0.679811285)*gclwh3_3*x503))+(((-1.0)*gclwh12_3*x635))+(((1.341705325)*gclwh4_3*x513))+(((-0.679811285)*gclwh1_3*x507))+(((-1.341705325)*gclwh14_3*x531))+x918+x900+((gclwh4_11*x504))+((gclwh1_3*x517)));
op[62]=((0.07735732)+(((-1.0)*x903))+x912);
op[63]=((((-0.14850585)*x561))+(((-1.569)*gclwh12_2*x508))+(((-1.569)*gclwh1_2*x531))+(((-0.85)*gclwh14_8*x507))+(((0.7845)*gclwh12_2*x503))+(((0.14850585)*x581))+(((0.85)*gclwh4_8*x504))+(((-1.569)*gclwh4_2*x513))+(((-1.0)*gclwh12_8*npy*x501))+(((-1.0)*gclwh4_8*npz*x501))+((x501*x589))+(((-1.0)*gclwh1_2*x638))+(((0.14850585)*x515))+(((-1.0)*x896))+(((0.7845)*gclwh3_2*x503))+(((-0.7845)*gclwh14_2*x507))+((gclwh12_2*x505))+(((0.85)*gclwh12_8*x503))+(((1.569)*npx*x526))+(((0.007614829125)*x527))+(((0.7845)*gclwh1_2*x507))+(((-0.007614829125)*x619))+(((0.7845)*gclwh4_2*x504))+x904+(((0.007614829125)*x633))+(((-1.0)*gclwh14_2*x638))+(((-1.0)*gclwh3_2*x505))+((gclwh4_2*x625))+(((-1.569)*gclwh3_2*x508)));
op[64]=((((-1.0)*gclwh14_8*x606))+(((-0.0655)*gclwh4_8*x513))+(((0.0655)*gclwh14_8*x531))+(((0.000293394886875)*x527))+(((-1.0)*x895))+(((0.03275)*gclwh12_8*x503))+((gclwh4_8*x596))+(((-0.0655)*gclwh12_8*x508))+(((-1.0)*x701))+((gclwh6_12*x588))+x886+(((-0.03275)*gclwh14_8*x507))+(((-1.0)*gclwh10_12*x615))+x906+(((0.03275)*gclwh4_8*x504))+(((-1.0)*gclwh8_12*x560)));
op[65]=((-0.012986285)+(((0.008055325)*gclwh3_3*x508))+(((3.60823078949063e-5)*x566))+(((-1.0)*gclwh12_11*x503))+(((0.00493096)*gclwh12_3*x503))+((gclwh14_11*x507))+(((-1.0)*x900))+((gclwh3_3*x585))+(((-1.0)*x919))+(((-1.0)*gclwh4_3*x510))+(((-1.0)*gclwh12_3*x585))+(((-1.0)*gclwh4_11*x504))+(((-0.008055325)*gclwh14_3*x531))+(((0.008055325)*gclwh12_3*x508))+(((0.008055325)*gclwh1_3*x531))+(((-0.00493096)*gclwh14_3*x507))+(((0.00493096)*gclwh4_3*x504))+x891+(((0.008055325)*gclwh4_3*x513))+(((-0.012986285)*gclwh3_3*x503))+x918+((gclwh14_3*x624))+(((-0.012986285)*gclwh1_3*x507)));
op[66]=((-0.679811285)+((gclwh0_1*x517))+((gclwh13_1*x635))+(((1.341705325)*gclwh15_1*x531))+(((-1.0)*gclwh15_1*x517))+(((1.341705325)*gclwh0_1*x531))+(((-1.0)*x892))+(((-1.0)*gclwh15_10*x507))+(((-1.0)*x917))+(((-0.679811285)*gclwh0_1*x507))+(((0.00600991575645741)*x575))+(((-0.66189404)*gclwh15_1*x507))+(((-1.341705325)*gclwh13_1*x508))+((gclwh5_10*x504))+(((-0.679811285)*gclwh2_1*x503))+(((0.66189404)*gclwh13_1*x503))+(((-1.341705325)*gclwh5_1*x513))+x899+((gclwh13_10*x503))+x920+(((0.66189404)*gclwh5_1*x504))+(((0.00600991575645741)*x627))+(((1.341705325)*gclwh2_1*x508)));
op[67]=((((0.81725)*gclwh13_9*x503))+((gclwh9_13*x598))+(((-1.0)*x898))+(((-1.0)*x888))+((gclwh13_9*x536))+((x502*x540))+(((0.81725)*gclwh5_9*x504))+(((-1.0)*x506*x540))+(((-1.0)*gclwh15_9*x530))+((gclwh11_13*x522))+x722+(((-0.81725)*gclwh15_9*x507))+((gclwh5_9*x541))+x907+(((-1.6345)*gclwh13_9*x508))+(((-1.0)*gclwh7_13*x518)));
op[68]=((((-1.0)*gclwh13_0*x505))+(((0.85)*gclwh13_9*x503))+(((-0.14850585)*x568))+(((-0.85)*gclwh15_9*x507))+(((-0.00702803935125)*x570))+(((-1.569)*gclwh0_0*x531))+(((-1.569)*gclwh2_0*x508))+(((0.7845)*gclwh2_0*x503))+(((-1.0)*x893))+(((-0.7845)*gclwh5_0*x504))+(((-1.0)*x501*x506))+(((1.569)*gclwh5_0*x513))+(((-1.0)*gclwh13_9*npy*x501))+(((0.007614829125)*x602))+((x501*x502))+(((0.00702803935125)*x610))+(((0.85)*gclwh5_9*x504))+(((0.14850585)*x521))+(((0.007614829125)*x557))+(((-1.569)*gclwh15_0*x531))+(((-0.7845)*gclwh13_0*x503))+(((0.7845)*gclwh15_0*x507))+(((-0.007614829125)*x586))+(((-1.0)*gclwh2_0*x505))+(((1.569)*gclwh13_0*x508))+(((0.7845)*gclwh0_0*x507))+(((-0.14850585)*x580))+x909+(((-0.00702803935125)*x537)));
op[69]=((0.07735732)+(((-1.0)*x911))+x905);
op[70]=((0.012986285)+((gclwh0_1*x624))+((gclwh13_1*x585))+(((-1.0)*gclwh5_10*x504))+(((0.008055325)*gclwh0_1*x531))+(((-1.0)*x899))+(((-1.0)*x917))+(((-0.00493096)*gclwh13_1*x503))+(((3.60823078949063e-5)*x575))+(((0.00493096)*gclwh15_1*x507))+(((-0.012986285)*gclwh0_1*x507))+(((0.008055325)*gclwh2_1*x508))+(((0.008055325)*gclwh15_1*x531))+(((-0.008055325)*gclwh5_1*x513))+(((-3.60823078949063e-5)*x558))+(((-0.00493096)*gclwh5_1*x504))+x892+(((-1.0)*gclwh13_10*x503))+((gclwh5_1*x510))+(((-0.012986285)*gclwh2_1*x503))+x920+(((-0.008055325)*gclwh13_1*x508))+((gclwh15_10*x507)));
op[71]=((((-1.0)*gclwh7_13*x588))+(((0.0655)*gclwh13_9*x508))+((gclwh11_13*x615))+(((-1.0)*x907))+(((-1.0)*x888))+(((-0.03275)*gclwh13_9*x503))+(((-1.0)*x502*x614))+(((0.03275)*gclwh15_9*x507))+((gclwh9_13*x560))+(((-1.0)*gclwh5_9*x596))+(((0.000293394886875)*x586))+((x506*x614))+x722+x898+(((-0.000293394886875)*x557))+(((-0.03275)*gclwh5_9*x504)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x921=htj1*htj1;
CheckValue<IkReal> x922=IKPowWithIntegerCheck(((1.0)+x921),-1);
if(!x922.valid){
continue;
}
cj1array[numsolutions]=((x922.value)*(((1.0)+(((-1.0)*x921)))));
CheckValue<IkReal> x923=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x923.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x923.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x924=htj2*htj2;
CheckValue<IkReal> x925=IKPowWithIntegerCheck(((1.0)+x924),-1);
if(!x925.valid){
continue;
}
cj2array[numsolutions]=((x925.value)*(((1.0)+(((-1.0)*x924)))));
CheckValue<IkReal> x926=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x926.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x926.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x927=htj3*htj3;
CheckValue<IkReal> x928=IKPowWithIntegerCheck(((1.0)+x927),-1);
if(!x928.valid){
continue;
}
cj3array[numsolutions]=((x928.value)*(((1.0)+(((-1.0)*x927)))));
CheckValue<IkReal> x929=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x929.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x929.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+5, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+6, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x930=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x930);
rxp1_0=(pz*r11);
rxp1_1=(r01*x930);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x931=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x931);
rxp1_0=(pz*r11);
rxp1_1=(r01*x931);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x932=IKPowWithIntegerCheck(r22,-1);
if(!x932.valid){
continue;
}
CheckValue<IkReal> x933=IKPowWithIntegerCheck(sj3,-1);
if(!x933.valid){
continue;
}
sj4array[0]=((x932.value)*(x933.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x934=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x934);
rxp1_0=(pz*r11);
rxp1_1=(r01*x934);
IkReal x935=((16.0)*sj4);
IkReal x936=(cj1*cj2);
IkReal x937=((4.0)*sj3);
IkReal x938=((8.0)*sj4);
IkReal x939=((4.0)*cj4);
IkReal x940=(sj1*sj2);
IkReal x941=((4.0)*sj4);
IkReal x942=(cj3*r02);
IkReal x943=((16.0)*sj3);
IkReal x944=((8.0)*sj3);
IkReal x945=((12.0)*cj4);
IkReal x946=((12.0)*sj4);
IkReal x947=(cj3*r12);
IkReal x948=(r11*x937);
IkReal x949=(r01*x937);
IkReal x950=(r01*x940);
IkReal x951=(cj3*cj4*r01);
IkReal x952=(cj3*cj4*r11);
IkReal x953=(cj3*r10*x939);
IkReal x954=(x946*x947);
IkReal x955=(cj3*r00*x939);
IkReal x956=(x942*x946);
IkReal x957=(r00*x940*x941);
IkReal x958=(r02*x940*x945);
IkReal x959=(r00*x936*x941);
IkReal x960=(r02*x936*x945);
IkReal x961=(r10*x940*x941);
IkReal x962=(r12*x936*x945);
IkReal x963=(r12*x940*x945);
IkReal x964=(r10*x936*x941);
IkReal x965=(x959+x948);
IkReal x966=(x961+x949);
IkReal x967=(x957+x953);
IkReal x968=(x960+x954);
IkReal x969=(x964+x955);
IkReal x970=(x963+x956);
j5eval[0]=((((0.5)*(IKabs((x967+x958+(((-1.0)*x965))+(((-1.0)*x968)))))))+(((0.5)*(IKabs((x962+x966+(((-1.0)*x969))+(((-1.0)*x970)))))))+(((0.5)*(IKabs((x962+x969+(((-1.0)*x966))+(((-1.0)*x970)))))))+(IKabs(((((-1.0)*r00*x944))+(((-1.0)*r11*x936*x938))+(((-8.0)*x951))+((r11*x938*x940)))))+(((0.5)*(IKabs((((r01*x935*x936))+(((-1.0)*x935*x950))+(((-16.0)*x952))+(((-1.0)*r10*x943)))))))+(((0.5)*(IKabs((x965+x958+(((-1.0)*x967))+(((-1.0)*x968)))))))+(IKabs(((((-1.0)*x938*x950))+(((-8.0)*x952))+((r01*x936*x938))+(((-1.0)*r10*x944)))))+(((0.5)*(IKabs((((r12*x936*x939))+(((-1.0)*x941*x942))+(((-1.0)*r12*x939*x940))+x966+(((-1.0)*x969)))))))+(((0.5)*(IKabs(((((-1.0)*x941*x947))+(((-1.0)*r02*x936*x939))+x965+(((-1.0)*x967))+((r02*x939*x940)))))))+(((0.5)*(IKabs(((((-1.0)*r00*x943))+((r11*x935*x940))+(((-1.0)*r11*x935*x936))+(((-16.0)*x951))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x971=(r10*sj3);
IkReal x972=(r01*sj4);
IkReal x973=(cj1*cj2);
IkReal x974=(cj3*cj4);
IkReal x975=(sj1*sj2);
IkReal x976=(cj4*r02);
IkReal x977=((4.0)*r11*sj3);
IkReal x978=(cj3*r12*sj4);
IkReal x979=((4.0)*r00*sj4);
IkReal x980=((4.0)*r10*x974);
IkReal x981=((12.0)*x978);
IkReal x982=((4.0)*x978);
IkReal x983=(x973*x979);
IkReal x984=(x975*x979);
IkReal x985=((12.0)*x975*x976);
IkReal x986=((12.0)*x973*x976);
IkReal x987=((4.0)*x975*x976);
IkReal x988=((4.0)*x973*x976);
IkReal x989=(x983+x977);
IkReal x990=(x984+x980);
IkReal x991=(x988+x982);
IkReal x992=(x986+x981);
IkReal x993=((((8.0)*x972*x973))+(((-8.0)*x971))+(((-8.0)*r11*x974))+(((-8.0)*x972*x975)));
op[0]=((((-1.0)*x991))+(((-1.0)*x990))+x989+x987);
op[1]=x993;
op[2]=((((-1.0)*x992))+(((-1.0)*x990))+x989+x985);
op[3]=((((16.0)*x972*x973))+(((-16.0)*r11*x974))+(((-16.0)*x972*x975))+(((-16.0)*x971)));
op[4]=((((-1.0)*x989))+(((-1.0)*x992))+x990+x985);
op[5]=x993;
op[6]=((((-1.0)*x989))+(((-1.0)*x991))+x990+x987);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x994=(cj1*cj2);
IkReal x995=((4.0)*cj4);
IkReal x996=(sj1*sj2);
IkReal x997=((4.0)*sj4);
IkReal x998=(r00*sj3);
IkReal x999=(cj3*r02);
IkReal x1000=((4.0)*r01*sj3);
IkReal x1001=((16.0)*r11*sj4);
IkReal x1002=(cj3*cj4*r01);
IkReal x1003=((12.0)*cj4*r12);
IkReal x1004=((8.0)*r11*sj4);
IkReal x1005=(cj3*r00*x995);
IkReal x1006=((12.0)*sj4*x999);
IkReal x1007=(x997*x999);
IkReal x1008=(r10*x994*x997);
IkReal x1009=(r10*x996*x997);
IkReal x1010=(x1003*x994);
IkReal x1011=(x1003*x996);
IkReal x1012=(r12*x994*x995);
IkReal x1013=(r12*x995*x996);
IkReal x1014=(x1009+x1000);
IkReal x1015=(x1008+x1005);
IkReal x1016=(x1013+x1007);
IkReal x1017=(x1011+x1006);
IkReal x1018=((((-8.0)*x1002))+(((-1.0)*x1004*x994))+((x1004*x996))+(((-8.0)*x998)));
j5evalpoly[0]=(x1015+x1012+(((htj5*htj5*htj5)*(((((-16.0)*x1002))+(((-16.0)*x998))+(((-1.0)*x1001*x994))+((x1001*x996))))))+(((-1.0)*x1016))+(((-1.0)*x1014))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1014+x1012+(((-1.0)*x1016))+(((-1.0)*x1015))))))+((x1018*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5)*((x1015+x1010+(((-1.0)*x1017))+(((-1.0)*x1014))))))+(((htj5*htj5*htj5*htj5)*((x1014+x1010+(((-1.0)*x1017))+(((-1.0)*x1015))))))+((htj5*x1018)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1019=(cj5*sj4);
IkReal x1020=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1020))+(((-1.0)*r00*x1019)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1020))+((r10*x1019))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1020))+(((-1.0)*r00*x1019))))+IKsqr(((((-1.0)*r11*x1020))+((r10*x1019))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1020))+(((-1.0)*r00*x1019))), ((((-1.0)*r11*x1020))+((r10*x1019))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1021=IKcos(j0);
IkReal x1022=IKsin(j0);
IkReal x1023=(r02*sj4);
IkReal x1024=((1.0)*sj3);
IkReal x1025=(r12*sj4);
IkReal x1026=(cj3*cj4);
IkReal x1027=((1.0)*cj5);
IkReal x1028=(r11*sj5);
IkReal x1029=((1.0)*cj1);
IkReal x1030=((0.39225)*sj1);
IkReal x1031=(cj5*r01);
IkReal x1032=(r01*sj5);
IkReal x1033=(r00*sj5);
IkReal x1034=((1.0)*sj1);
IkReal x1035=((0.39225)*cj2);
IkReal x1036=(cj5*r11);
IkReal x1037=(r10*sj5);
IkReal x1038=((1.0)*cj4);
IkReal x1039=(sj2*x1021);
IkReal x1040=(sj2*x1022);
IkReal x1041=(cj4*cj5*sj3);
IkReal x1042=(cj1*x1021);
IkReal x1043=(cj2*x1021);
IkReal x1044=(cj1*x1022);
IkReal x1045=(cj2*x1022);
evalcond[0]=(x1021+((sj4*x1028))+(((-1.0)*r12*x1038))+(((-1.0)*r10*sj4*x1027)));
evalcond[1]=(((sj4*x1032))+(((-1.0)*r00*sj4*x1027))+(((-1.0)*x1022))+(((-1.0)*r02*x1038)));
evalcond[2]=((((-0.10915)*x1022))+((x1035*x1042))+(((-1.0)*px))+(((-1.0)*x1030*x1039))+(((-0.09465)*x1033))+(((-0.09465)*x1031))+(((0.425)*x1042)));
evalcond[3]=((((0.10915)*x1021))+((x1035*x1044))+(((-1.0)*py))+(((-0.09465)*x1037))+(((-0.09465)*x1036))+(((-1.0)*x1030*x1040))+(((0.425)*x1044)));
evalcond[4]=(((x1026*x1032))+(((-1.0)*x1029*x1043))+((sj1*x1039))+((sj3*x1033))+((sj3*x1031))+((cj3*x1023))+(((-1.0)*r00*x1026*x1027)));
evalcond[5]=((((-1.0)*r10*x1026*x1027))+(((-1.0)*x1029*x1045))+((x1026*x1028))+((sj3*x1036))+((sj3*x1037))+((sj1*x1040))+((cj3*x1025)));
evalcond[6]=((((-1.0)*x1023*x1024))+((cj3*x1033))+((cj3*x1031))+(((-1.0)*x1029*x1039))+((r00*x1041))+(((-1.0)*cj4*x1024*x1032))+(((-1.0)*x1034*x1043)));
evalcond[7]=(((cj3*x1037))+((cj3*x1036))+(((-1.0)*x1029*x1040))+((r10*x1041))+(((-1.0)*x1034*x1045))+(((-1.0)*cj4*x1024*x1028))+(((-1.0)*x1024*x1025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1046=IKPowWithIntegerCheck(cj3,-1);
if(!x1046.valid){
continue;
}
CheckValue<IkReal> x1047=IKPowWithIntegerCheck(r22,-1);
if(!x1047.valid){
continue;
}
sj4array[0]=((-1.0)*(x1046.value)*(x1047.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1048=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1048);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1048);
IkReal x1049=((16.0)*sj4);
IkReal x1050=(cj1*cj2);
IkReal x1051=((4.0)*sj3);
IkReal x1052=((8.0)*sj4);
IkReal x1053=((4.0)*cj4);
IkReal x1054=(sj1*sj2);
IkReal x1055=((4.0)*sj4);
IkReal x1056=(cj3*r02);
IkReal x1057=((16.0)*sj3);
IkReal x1058=((8.0)*sj3);
IkReal x1059=((12.0)*cj4);
IkReal x1060=((12.0)*sj4);
IkReal x1061=(cj3*r12);
IkReal x1062=(r11*x1051);
IkReal x1063=(r01*x1051);
IkReal x1064=(r01*x1054);
IkReal x1065=(cj3*cj4*r01);
IkReal x1066=(cj3*cj4*r11);
IkReal x1067=(cj3*r10*x1053);
IkReal x1068=(x1060*x1061);
IkReal x1069=(cj3*r00*x1053);
IkReal x1070=(x1056*x1060);
IkReal x1071=(r00*x1054*x1055);
IkReal x1072=(r02*x1054*x1059);
IkReal x1073=(r00*x1050*x1055);
IkReal x1074=(r02*x1050*x1059);
IkReal x1075=(r10*x1054*x1055);
IkReal x1076=(r12*x1050*x1059);
IkReal x1077=(r12*x1054*x1059);
IkReal x1078=(r10*x1050*x1055);
IkReal x1079=(x1073+x1062);
IkReal x1080=(x1075+x1063);
IkReal x1081=(x1071+x1067);
IkReal x1082=(x1074+x1068);
IkReal x1083=(x1078+x1069);
IkReal x1084=(x1077+x1070);
j5eval[0]=((((0.5)*(IKabs((x1072+x1081+(((-1.0)*x1082))+(((-1.0)*x1079)))))))+(((0.5)*(IKabs((x1079+x1072+(((-1.0)*x1081))+(((-1.0)*x1082)))))))+(((0.5)*(IKabs((((r02*x1053*x1054))+x1079+(((-1.0)*r02*x1050*x1053))+(((-1.0)*x1055*x1061))+(((-1.0)*x1081)))))))+(IKabs((((r11*x1052*x1054))+(((-1.0)*r00*x1058))+(((-1.0)*r11*x1050*x1052))+(((-8.0)*x1065)))))+(((0.5)*(IKabs((x1080+(((-1.0)*x1055*x1056))+(((-1.0)*r12*x1053*x1054))+((r12*x1050*x1053))+(((-1.0)*x1083)))))))+(((0.5)*(IKabs(((((-1.0)*r00*x1057))+(((-1.0)*r11*x1049*x1050))+((r11*x1049*x1054))+(((-16.0)*x1065)))))))+(((0.5)*(IKabs((x1076+x1080+(((-1.0)*x1083))+(((-1.0)*x1084)))))))+(((0.5)*(IKabs((((r01*x1049*x1050))+(((-1.0)*r10*x1057))+(((-1.0)*x1049*x1064))+(((-16.0)*x1066)))))))+(((0.5)*(IKabs((x1076+x1083+(((-1.0)*x1084))+(((-1.0)*x1080)))))))+(IKabs((((r01*x1050*x1052))+(((-1.0)*r10*x1058))+(((-1.0)*x1052*x1064))+(((-8.0)*x1066))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1085=(r10*sj3);
IkReal x1086=(r01*sj4);
IkReal x1087=(cj1*cj2);
IkReal x1088=(cj3*cj4);
IkReal x1089=(sj1*sj2);
IkReal x1090=(cj4*r02);
IkReal x1091=((4.0)*r11*sj3);
IkReal x1092=(cj3*r12*sj4);
IkReal x1093=((4.0)*r00*sj4);
IkReal x1094=((4.0)*r10*x1088);
IkReal x1095=((12.0)*x1092);
IkReal x1096=((4.0)*x1092);
IkReal x1097=(x1087*x1093);
IkReal x1098=(x1089*x1093);
IkReal x1099=((12.0)*x1089*x1090);
IkReal x1100=((12.0)*x1087*x1090);
IkReal x1101=((4.0)*x1089*x1090);
IkReal x1102=((4.0)*x1087*x1090);
IkReal x1103=(x1097+x1091);
IkReal x1104=(x1094+x1098);
IkReal x1105=(x1102+x1096);
IkReal x1106=(x1100+x1095);
IkReal x1107=((((-8.0)*x1086*x1089))+(((-8.0)*r11*x1088))+(((8.0)*x1086*x1087))+(((-8.0)*x1085)));
op[0]=(x1103+x1101+(((-1.0)*x1105))+(((-1.0)*x1104)));
op[1]=x1107;
op[2]=(x1103+x1099+(((-1.0)*x1104))+(((-1.0)*x1106)));
op[3]=((((16.0)*x1086*x1087))+(((-16.0)*x1085))+(((-16.0)*r11*x1088))+(((-16.0)*x1086*x1089)));
op[4]=(x1104+x1099+(((-1.0)*x1103))+(((-1.0)*x1106)));
op[5]=x1107;
op[6]=(x1104+x1101+(((-1.0)*x1103))+(((-1.0)*x1105)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1108=(cj1*cj2);
IkReal x1109=((4.0)*cj4);
IkReal x1110=(sj1*sj2);
IkReal x1111=((4.0)*sj4);
IkReal x1112=(r00*sj3);
IkReal x1113=(cj3*r02);
IkReal x1114=((4.0)*r01*sj3);
IkReal x1115=((16.0)*r11*sj4);
IkReal x1116=(cj3*cj4*r01);
IkReal x1117=((12.0)*cj4*r12);
IkReal x1118=((8.0)*r11*sj4);
IkReal x1119=(cj3*r00*x1109);
IkReal x1120=((12.0)*sj4*x1113);
IkReal x1121=(x1111*x1113);
IkReal x1122=(r10*x1108*x1111);
IkReal x1123=(r10*x1110*x1111);
IkReal x1124=(x1108*x1117);
IkReal x1125=(x1110*x1117);
IkReal x1126=(r12*x1108*x1109);
IkReal x1127=(r12*x1109*x1110);
IkReal x1128=(x1114+x1123);
IkReal x1129=(x1119+x1122);
IkReal x1130=(x1121+x1127);
IkReal x1131=(x1120+x1125);
IkReal x1132=(((x1110*x1118))+(((-1.0)*x1108*x1118))+(((-8.0)*x1116))+(((-8.0)*x1112)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*((x1128+x1124+(((-1.0)*x1131))+(((-1.0)*x1129))))))+x1129+x1126+(((htj5*htj5)*((x1129+x1124+(((-1.0)*x1131))+(((-1.0)*x1128))))))+(((htj5*htj5*htj5)*((((x1110*x1115))+(((-16.0)*x1116))+(((-16.0)*x1112))+(((-1.0)*x1108*x1115))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1128+x1126+(((-1.0)*x1130))+(((-1.0)*x1129))))))+((x1132*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x1130))+(((-1.0)*x1128))+((htj5*x1132)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1133=(cj5*sj4);
IkReal x1134=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1134))+(((-1.0)*r00*x1133)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1134))+((r10*x1133))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1134))+(((-1.0)*r00*x1133))))+IKsqr(((((-1.0)*r11*x1134))+((r10*x1133))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1134))+(((-1.0)*r00*x1133))), ((((-1.0)*r11*x1134))+((r10*x1133))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1135=IKcos(j0);
IkReal x1136=IKsin(j0);
IkReal x1137=(r02*sj4);
IkReal x1138=((1.0)*sj3);
IkReal x1139=(r12*sj4);
IkReal x1140=(cj3*cj4);
IkReal x1141=((1.0)*cj5);
IkReal x1142=(r11*sj5);
IkReal x1143=((1.0)*cj1);
IkReal x1144=((0.39225)*sj1);
IkReal x1145=(cj5*r01);
IkReal x1146=(r01*sj5);
IkReal x1147=(r00*sj5);
IkReal x1148=((1.0)*sj1);
IkReal x1149=((0.39225)*cj2);
IkReal x1150=(cj5*r11);
IkReal x1151=(r10*sj5);
IkReal x1152=((1.0)*cj4);
IkReal x1153=(sj2*x1135);
IkReal x1154=(sj2*x1136);
IkReal x1155=(cj4*cj5*sj3);
IkReal x1156=(cj1*x1135);
IkReal x1157=(cj2*x1135);
IkReal x1158=(cj1*x1136);
IkReal x1159=(cj2*x1136);
evalcond[0]=(((sj4*x1142))+x1135+(((-1.0)*r10*sj4*x1141))+(((-1.0)*r12*x1152)));
evalcond[1]=(((sj4*x1146))+(((-1.0)*r02*x1152))+(((-1.0)*r00*sj4*x1141))+(((-1.0)*x1136)));
evalcond[2]=((((-1.0)*x1144*x1153))+((x1149*x1156))+(((0.425)*x1156))+(((-1.0)*px))+(((-0.10915)*x1136))+(((-0.09465)*x1147))+(((-0.09465)*x1145)));
evalcond[3]=((((-1.0)*x1144*x1154))+((x1149*x1158))+(((0.425)*x1158))+(((0.10915)*x1135))+(((-1.0)*py))+(((-0.09465)*x1151))+(((-0.09465)*x1150)));
evalcond[4]=(((x1140*x1146))+((cj3*x1137))+(((-1.0)*x1143*x1157))+((sj3*x1145))+((sj3*x1147))+(((-1.0)*r00*x1140*x1141))+((sj1*x1153)));
evalcond[5]=(((x1140*x1142))+((cj3*x1139))+(((-1.0)*x1143*x1159))+(((-1.0)*r10*x1140*x1141))+((sj3*x1150))+((sj3*x1151))+((sj1*x1154)));
evalcond[6]=(((r00*x1155))+(((-1.0)*cj4*x1138*x1146))+(((-1.0)*x1143*x1153))+((cj3*x1147))+((cj3*x1145))+(((-1.0)*x1148*x1157))+(((-1.0)*x1137*x1138)));
evalcond[7]=((((-1.0)*cj4*x1138*x1142))+((cj3*x1150))+((cj3*x1151))+(((-1.0)*x1143*x1154))+(((-1.0)*x1138*x1139))+(((-1.0)*x1148*x1159))+((r10*x1155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1160=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1160);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1160);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1161=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1161);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1161);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1162=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1162);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1162);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1163=IKPowWithIntegerCheck(r22,-1);
if(!x1163.valid){
continue;
}
sj4array[0]=((-1.0)*(x1163.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1164=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1164);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1164);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1166 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1166.valid){
continue;
}
IkReal x1165=x1166.value;
j5array[0]=((-1.0)*x1165);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1165)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1167=(cj5*sj4);
IkReal x1168=(sj4*sj5);
if( IKabs((((r01*x1168))+(((-1.0)*r00*x1167)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1167))+(((-1.0)*r11*x1168)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1168))+(((-1.0)*r00*x1167))))+IKsqr((((r10*x1167))+(((-1.0)*r11*x1168))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1168))+(((-1.0)*r00*x1167))), (((r10*x1167))+(((-1.0)*r11*x1168))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1169=IKcos(j0);
IkReal x1170=IKsin(j0);
IkReal x1171=(cj5*r01);
IkReal x1172=(sj4*sj5);
IkReal x1173=(cj5*r11);
IkReal x1174=((0.425)*cj1);
IkReal x1175=(r00*sj5);
IkReal x1176=(r10*sj5);
IkReal x1177=((1.0)*cj1*sj2);
IkReal x1178=((1.0)*cj2*sj1);
IkReal x1179=((1.0)*cj5*sj4);
evalcond[0]=(x1169+((r11*x1172))+(((-1.0)*r10*x1179)));
evalcond[1]=(((r01*x1172))+(((-1.0)*r00*x1179))+(((-1.0)*x1170)));
evalcond[2]=(x1175+x1171+(((-1.0)*x1169*x1178))+(((-1.0)*x1169*x1177)));
evalcond[3]=(x1176+x1173+(((-1.0)*x1170*x1178))+(((-1.0)*x1170*x1177)));
evalcond[4]=((((-0.10915)*x1170))+(((-0.09465)*x1171))+(((-0.09465)*x1175))+(((-1.0)*px))+((x1169*x1174)));
evalcond[5]=((((-0.09465)*x1173))+(((-0.09465)*x1176))+(((0.10915)*x1169))+(((-1.0)*py))+((x1170*x1174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1180=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1180);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1180);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1181=IKPowWithIntegerCheck(r22,-1);
if(!x1181.valid){
continue;
}
sj4array[0]=((x1181.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1182=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1182);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1182);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1184 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1184.valid){
continue;
}
IkReal x1183=x1184.value;
j5array[0]=((-1.0)*x1183);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1183)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1185=(cj5*sj4);
IkReal x1186=(sj4*sj5);
if( IKabs((((r01*x1186))+(((-1.0)*r00*x1185)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1185))+(((-1.0)*r11*x1186)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1186))+(((-1.0)*r00*x1185))))+IKsqr((((r10*x1185))+(((-1.0)*r11*x1186))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1186))+(((-1.0)*r00*x1185))), (((r10*x1185))+(((-1.0)*r11*x1186))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1187=IKcos(j0);
IkReal x1188=IKsin(j0);
IkReal x1189=(sj4*sj5);
IkReal x1190=(cj5*r11);
IkReal x1191=((1.0)*sj5);
IkReal x1192=((0.425)*cj1);
IkReal x1193=((0.09465)*sj5);
IkReal x1194=((1.0)*cj5);
IkReal x1195=((1.0)*cj1*sj2);
IkReal x1196=((1.0)*cj2*sj1);
evalcond[0]=(x1187+((r11*x1189))+(((-1.0)*r10*sj4*x1194)));
evalcond[1]=((((-1.0)*r00*sj4*x1194))+((r01*x1189))+(((-1.0)*x1188)));
evalcond[2]=((((-1.0)*r00*x1193))+((x1187*x1192))+(((-0.09465)*cj5*r01))+(((-0.10915)*x1188))+(((-1.0)*px)));
evalcond[3]=((((-0.09465)*x1190))+(((0.10915)*x1187))+((x1188*x1192))+(((-1.0)*r10*x1193))+(((-1.0)*py)));
evalcond[4]=((((-1.0)*r00*x1191))+(((-1.0)*x1187*x1195))+(((-1.0)*x1187*x1196))+(((-1.0)*r01*x1194)));
evalcond[5]=((((-1.0)*x1188*x1196))+(((-1.0)*x1188*x1195))+(((-1.0)*r10*x1191))+(((-1.0)*x1190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1197=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1197);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1197);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1198=IKPowWithIntegerCheck(r22,-1);
if(!x1198.valid){
continue;
}
sj4array[0]=((x1198.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1199=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1199);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1199);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1201 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1201.valid){
continue;
}
IkReal x1200=x1201.value;
j5array[0]=((-1.0)*x1200);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1200)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1202=(cj5*sj4);
IkReal x1203=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1202))+((r01*x1203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1202))+(((-1.0)*r11*x1203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1202))+((r01*x1203))))+IKsqr((((r10*x1202))+(((-1.0)*r11*x1203))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1202))+((r01*x1203))), (((r10*x1202))+(((-1.0)*r11*x1203))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1204=IKcos(j0);
IkReal x1205=IKsin(j0);
IkReal x1206=(cj5*r01);
IkReal x1207=(sj4*sj5);
IkReal x1208=(r00*sj5);
IkReal x1209=(sj1*sj2);
IkReal x1210=(cj5*r11);
IkReal x1211=((0.39225)*cj2);
IkReal x1212=(r10*sj5);
IkReal x1213=((0.39225)*x1209);
IkReal x1214=(cj1*x1204);
IkReal x1215=((1.0)*x1205);
IkReal x1216=((1.0)*cj5*sj4);
IkReal x1217=(cj1*x1205);
evalcond[0]=(x1204+((r11*x1207))+(((-1.0)*r10*x1216)));
evalcond[1]=((((-1.0)*r00*x1216))+((r01*x1207))+(((-1.0)*x1215)));
evalcond[2]=(((x1204*x1209))+x1208+x1206+(((-1.0)*cj2*x1214)));
evalcond[3]=(x1212+x1210+(((-1.0)*cj1*cj2*x1215))+((x1205*x1209)));
evalcond[4]=((((-1.0)*x1204*x1213))+(((0.425)*x1214))+(((-0.10915)*x1205))+(((-1.0)*px))+((x1211*x1214))+(((-0.09465)*x1208))+(((-0.09465)*x1206)));
evalcond[5]=((((0.425)*x1217))+(((-0.09465)*x1212))+(((-0.09465)*x1210))+(((0.10915)*x1204))+(((-1.0)*py))+(((-1.0)*x1205*x1213))+((x1211*x1217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1218=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1218);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1218);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1219=IKPowWithIntegerCheck(r22,-1);
if(!x1219.valid){
continue;
}
sj4array[0]=((-1.0)*(x1219.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1220=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1220);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1220);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1222 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1222.valid){
continue;
}
IkReal x1221=x1222.value;
j5array[0]=((-1.0)*x1221);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1221)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1223=(cj5*sj4);
IkReal x1224=(sj4*sj5);
if( IKabs((((r01*x1224))+(((-1.0)*r00*x1223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1224))+((r10*x1223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1224))+(((-1.0)*r00*x1223))))+IKsqr(((((-1.0)*r11*x1224))+((r10*x1223))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1224))+(((-1.0)*r00*x1223))), ((((-1.0)*r11*x1224))+((r10*x1223))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1225=IKcos(j0);
IkReal x1226=IKsin(j0);
IkReal x1227=(sj4*sj5);
IkReal x1228=(cj5*r11);
IkReal x1229=(cj5*r01);
IkReal x1230=((1.0)*sj5);
IkReal x1231=((0.09465)*sj5);
IkReal x1232=(sj1*sj2);
IkReal x1233=((0.39225)*cj2);
IkReal x1234=((0.39225)*x1232);
IkReal x1235=((1.0)*x1226);
IkReal x1236=(cj1*x1225);
IkReal x1237=((1.0)*cj5*sj4);
IkReal x1238=(cj1*x1226);
evalcond[0]=(x1225+(((-1.0)*r10*x1237))+((r11*x1227)));
evalcond[1]=((((-1.0)*r00*x1237))+((r01*x1227))+(((-1.0)*x1235)));
evalcond[2]=((((-1.0)*r00*x1230))+(((-1.0)*x1229))+((x1225*x1232))+(((-1.0)*cj2*x1236)));
evalcond[3]=((((-1.0)*cj1*cj2*x1235))+(((-1.0)*x1228))+((x1226*x1232))+(((-1.0)*r10*x1230)));
evalcond[4]=((((-1.0)*r00*x1231))+(((-1.0)*x1225*x1234))+(((-1.0)*px))+(((-0.09465)*x1229))+((x1233*x1236))+(((0.425)*x1236))+(((-0.10915)*x1226)));
evalcond[5]=((((-1.0)*x1226*x1234))+(((-1.0)*py))+(((-0.09465)*x1228))+((x1233*x1238))+(((0.425)*x1238))+(((0.10915)*x1225))+(((-1.0)*r10*x1231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1239=IKPowWithIntegerCheck(r22,-1);
if(!x1239.valid){
continue;
}
CheckValue<IkReal> x1240=IKPowWithIntegerCheck(sj3,-1);
if(!x1240.valid){
continue;
}
sj4array[0]=((x1239.value)*(x1240.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1241=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1241);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1241);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1242=((4.0)*r01);
IkReal x1243=((16.0)*r00);
IkReal x1244=(cj3*sj2);
IkReal x1245=((8.0)*r00);
IkReal x1246=(cj2*cj3);
IkReal x1247=(cj4*r01);
IkReal x1248=((16.0)*cj1);
IkReal x1249=((8.0)*sj1);
IkReal x1250=((16.0)*sj1);
IkReal x1251=((8.0)*cj1);
IkReal x1252=(sj2*sj3);
IkReal x1253=(cj2*sj3);
IkReal x1254=(sj1*x1253);
IkReal x1255=((4.0)*cj4*r00);
IkReal x1256=(((sj1*x1242*x1244))+((cj1*x1242*x1252))+((sj1*x1252*x1255))+((x1242*x1254)));
IkReal x1257=(((cj1*x1244*x1255))+((cj1*x1253*x1255))+((sj1*x1246*x1255))+((cj1*x1242*x1246)));
IkReal x1258=((((-1.0)*x1256))+x1257);
IkReal x1259=(((sj1*x1244*x1245))+((x1245*x1254))+((x1246*x1247*x1249))+((cj1*x1245*x1252))+(((-1.0)*cj1*x1245*x1246))+(((-1.0)*x1247*x1249*x1252))+((x1247*x1251*x1253))+((x1244*x1247*x1251)));
IkReal x1260=((((-1.0)*x1257))+x1256);
op[0]=x1258;
op[1]=x1259;
op[2]=x1258;
op[3]=(((x1243*x1254))+((sj1*x1243*x1244))+((x1244*x1247*x1248))+((x1247*x1248*x1253))+(((-1.0)*cj1*x1243*x1246))+((cj1*x1243*x1252))+(((-1.0)*x1247*x1250*x1252))+((x1246*x1247*x1250)));
op[4]=x1260;
op[5]=x1259;
op[6]=x1260;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1261=(cj5*sj4);
IkReal x1262=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1261))+((r01*x1262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1261))+(((-1.0)*r11*x1262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1261))+((r01*x1262))))+IKsqr((((r10*x1261))+(((-1.0)*r11*x1262))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1261))+((r01*x1262))), (((r10*x1261))+(((-1.0)*r11*x1262))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1263=IKcos(j0);
IkReal x1264=IKsin(j0);
IkReal x1265=((0.39225)*sj1);
IkReal x1266=((1.0)*cj3);
IkReal x1267=((1.0)*cj1);
IkReal x1268=(r11*sj5);
IkReal x1269=(cj5*r01);
IkReal x1270=(cj5*r11);
IkReal x1271=(r01*sj5);
IkReal x1272=(cj3*cj4);
IkReal x1273=(r00*sj5);
IkReal x1274=((0.39225)*cj2);
IkReal x1275=((1.0)*sj1);
IkReal x1276=(r10*sj5);
IkReal x1277=(sj2*x1263);
IkReal x1278=(cj4*cj5*r00);
IkReal x1279=(cj1*x1264);
IkReal x1280=(sj2*x1264);
IkReal x1281=(cj4*cj5*r10);
IkReal x1282=((1.0)*cj4*sj3);
IkReal x1283=(cj1*x1263);
IkReal x1284=(cj2*x1263);
IkReal x1285=((1.0)*cj5*sj4);
evalcond[0]=(x1263+((sj4*x1268))+(((-1.0)*r10*x1285)));
evalcond[1]=(((sj4*x1271))+(((-1.0)*r00*x1285))+(((-1.0)*x1264)));
evalcond[2]=(((sj3*x1273))+((sj1*x1277))+(((-1.0)*x1266*x1278))+(((-1.0)*x1267*x1284))+((x1271*x1272))+((sj3*x1269)));
evalcond[3]=(((sj3*x1276))+((sj3*x1270))+(((-1.0)*cj2*x1264*x1267))+(((-1.0)*x1266*x1281))+((x1268*x1272))+((sj1*x1280)));
evalcond[4]=(((sj3*x1278))+(((-1.0)*x1267*x1277))+(((-1.0)*x1275*x1284))+((cj3*x1269))+((cj3*x1273))+(((-1.0)*x1271*x1282)));
evalcond[5]=((((-1.0)*cj2*x1264*x1275))+(((-1.0)*x1267*x1280))+((cj3*x1270))+((cj3*x1276))+((sj3*x1281))+(((-1.0)*x1268*x1282)));
evalcond[6]=((((0.425)*x1283))+(((-0.09465)*x1273))+(((-0.10915)*x1264))+(((-0.09465)*x1269))+(((-1.0)*px))+((x1274*x1283))+(((-1.0)*x1265*x1277)));
evalcond[7]=((((-0.09465)*x1276))+(((-0.09465)*x1270))+(((0.10915)*x1263))+((x1274*x1279))+(((-1.0)*py))+(((0.425)*x1279))+(((-1.0)*x1265*x1280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1286=IKPowWithIntegerCheck(cj3,-1);
if(!x1286.valid){
continue;
}
CheckValue<IkReal> x1287=IKPowWithIntegerCheck(r22,-1);
if(!x1287.valid){
continue;
}
sj4array[0]=((-1.0)*(x1286.value)*(x1287.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1288=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1288);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1288);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1289=((4.0)*r01);
IkReal x1290=((16.0)*r00);
IkReal x1291=(cj3*sj2);
IkReal x1292=((8.0)*r00);
IkReal x1293=(cj2*cj3);
IkReal x1294=(cj4*r01);
IkReal x1295=((16.0)*cj1);
IkReal x1296=((8.0)*sj1);
IkReal x1297=((16.0)*sj1);
IkReal x1298=((8.0)*cj1);
IkReal x1299=(sj2*sj3);
IkReal x1300=(cj2*sj3);
IkReal x1301=(sj1*x1300);
IkReal x1302=((4.0)*cj4*r00);
IkReal x1303=(((sj1*x1289*x1291))+((cj1*x1289*x1299))+((x1289*x1301))+((sj1*x1299*x1302)));
IkReal x1304=(((cj1*x1289*x1293))+((sj1*x1293*x1302))+((cj1*x1291*x1302))+((cj1*x1300*x1302)));
IkReal x1305=(x1304+(((-1.0)*x1303)));
IkReal x1306=(((x1292*x1301))+((x1291*x1294*x1298))+((x1294*x1298*x1300))+(((-1.0)*cj1*x1292*x1293))+((sj1*x1291*x1292))+(((-1.0)*x1294*x1296*x1299))+((x1293*x1294*x1296))+((cj1*x1292*x1299)));
IkReal x1307=(x1303+(((-1.0)*x1304)));
op[0]=x1305;
op[1]=x1306;
op[2]=x1305;
op[3]=(((x1294*x1295*x1300))+(((-1.0)*cj1*x1290*x1293))+((x1290*x1301))+((x1291*x1294*x1295))+(((-1.0)*x1294*x1297*x1299))+((sj1*x1290*x1291))+((cj1*x1290*x1299))+((x1293*x1294*x1297)));
op[4]=x1307;
op[5]=x1306;
op[6]=x1307;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1308=(cj5*sj4);
IkReal x1309=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1308))+((r01*x1309)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1308))+(((-1.0)*r11*x1309)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1308))+((r01*x1309))))+IKsqr((((r10*x1308))+(((-1.0)*r11*x1309))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1308))+((r01*x1309))), (((r10*x1308))+(((-1.0)*r11*x1309))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1310=IKcos(j0);
IkReal x1311=IKsin(j0);
IkReal x1312=((0.39225)*sj1);
IkReal x1313=((1.0)*cj3);
IkReal x1314=((1.0)*cj1);
IkReal x1315=(r11*sj5);
IkReal x1316=(cj5*r01);
IkReal x1317=(cj5*r11);
IkReal x1318=(r01*sj5);
IkReal x1319=(cj3*cj4);
IkReal x1320=(r00*sj5);
IkReal x1321=((0.39225)*cj2);
IkReal x1322=((1.0)*sj1);
IkReal x1323=(r10*sj5);
IkReal x1324=(sj2*x1310);
IkReal x1325=(cj4*cj5*r00);
IkReal x1326=(cj1*x1311);
IkReal x1327=(sj2*x1311);
IkReal x1328=(cj4*cj5*r10);
IkReal x1329=((1.0)*cj4*sj3);
IkReal x1330=(cj1*x1310);
IkReal x1331=(cj2*x1310);
IkReal x1332=((1.0)*cj5*sj4);
evalcond[0]=(x1310+((sj4*x1315))+(((-1.0)*r10*x1332)));
evalcond[1]=((((-1.0)*x1311))+((sj4*x1318))+(((-1.0)*r00*x1332)));
evalcond[2]=(((x1318*x1319))+((sj3*x1316))+((sj3*x1320))+(((-1.0)*x1313*x1325))+(((-1.0)*x1314*x1331))+((sj1*x1324)));
evalcond[3]=(((sj3*x1317))+((sj3*x1323))+(((-1.0)*x1313*x1328))+(((-1.0)*cj2*x1311*x1314))+((x1315*x1319))+((sj1*x1327)));
evalcond[4]=(((sj3*x1325))+(((-1.0)*x1322*x1331))+(((-1.0)*x1314*x1324))+((cj3*x1316))+((cj3*x1320))+(((-1.0)*x1318*x1329)));
evalcond[5]=((((-1.0)*x1315*x1329))+((sj3*x1328))+(((-1.0)*x1314*x1327))+(((-1.0)*cj2*x1311*x1322))+((cj3*x1317))+((cj3*x1323)));
evalcond[6]=((((-1.0)*x1312*x1324))+(((-0.10915)*x1311))+(((0.425)*x1330))+(((-1.0)*px))+((x1321*x1330))+(((-0.09465)*x1316))+(((-0.09465)*x1320)));
evalcond[7]=((((-1.0)*x1312*x1327))+(((0.10915)*x1310))+(((-1.0)*py))+(((-0.09465)*x1317))+((x1321*x1326))+(((-0.09465)*x1323))+(((0.425)*x1326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1335 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1335.valid){
continue;
}
IkReal x1333=((1.0)*(x1335.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1336=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1336.valid){
continue;
}
if( (((-1.0)*(x1336.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1336.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1334=((-1.0)*(IKasin(((-1.0)*(x1336.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1334))+(((-1.0)*x1333)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((1.0)*x1334))+(((-1.0)*x1333)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1337=cj5*cj5;
IkReal x1338=r21*r21;
IkReal x1339=(sj3*x1337);
IkReal x1340=(((sj3*(r22*r22)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1338))+(((-1.0)*x1338*x1339))+((x1339*(r20*r20))));
j4eval[0]=x1340;
j4eval[1]=IKsign(x1340);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1341=cj5*cj5;
IkReal x1342=r21*r21;
IkReal x1343=((1.0)*cj3);
IkReal x1344=(cj3*x1341);
IkReal x1345=((((-1.0)*x1341*x1343*(r20*r20)))+(((-1.0)*x1343*(r22*r22)))+((x1342*x1344))+(((-1.0)*x1342*x1343))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1345;
j4eval[1]=IKsign(x1345);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1346=cj1*cj1;
IkReal x1347=cj2*cj2;
IkReal x1348=(cj1*sj1*sj2);
IkReal x1349=(cj2*x1346);
IkReal x1350=(x1346*x1347);
j0eval[0]=((6.19369221392727)+x1346+(((-11.4971359451148)*cj2*x1348))+(((-5.74856797255738)*x1347))+(((12.4570625281677)*x1349))+(((11.4971359451148)*x1350))+(((-12.4570625281677)*x1348)));
j0eval[1]=IKsign(((66309514.0)+(((-61544025.0)*x1347))+(((133365000.0)*x1349))+(((-123088050.0)*cj2*x1348))+(((123088050.0)*x1350))+(((10705975.0)*x1346))+(((-133365000.0)*x1348))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1351=((1.0)*cj5);
IkReal x1352=((1.0)*sj5);
IkReal x1353=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1353;
j0eval[1]=((IKabs(((((-1.0)*r10*x1352))+(((-1.0)*r11*x1351)))))+(IKabs(((((-1.0)*r00*x1352))+(((-1.0)*r01*x1351))))));
j0eval[2]=IKsign(x1353);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1354=cj5*cj5;
IkReal x1355=r21*r21;
IkReal x1356=(sj1*sj2);
IkReal x1357=(r21*sj5);
IkReal x1358=(cj5*r20);
IkReal x1359=(cj1*cj2);
IkReal x1360=(x1355+(r22*r22)+((x1354*(r20*r20)))+(((-2.0)*x1357*x1358))+(((-1.0)*x1354*x1355)));
j4eval[0]=x1360;
j4eval[1]=IKsign(x1360);
j4eval[2]=((IKabs((((x1358*x1359))+(((-1.0)*x1357*x1359))+(((-1.0)*x1356*x1358))+((x1356*x1357)))))+(IKabs((((r22*x1356))+(((-1.0)*r22*x1359))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1361=IKsin(j0);
IkReal x1362=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x1361))+(((0.425)*x1362)));
evalcond[1]=((((0.10915)*x1362))+(((-1.0)*py))+(((0.425)*x1361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1363=((1.0)*cj5);
IkReal x1364=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1363)));
j4eval[0]=x1364;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1363))))));
j4eval[2]=IKsign(x1364);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1365=((1.0)*cj5);
IkReal x1366=((((-1.0)*r11*x1365))+(((-1.0)*r10*sj5)));
j4eval[0]=x1366;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1365))))));
j4eval[2]=IKsign(x1366);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1367=cj5*cj5;
IkReal x1368=((1.0)*sj5);
IkReal x1369=(cj5*r20);
IkReal x1370=(r11*r21);
IkReal x1371=(x1370+(((-1.0)*r11*x1368*x1369))+((r10*r20*x1367))+((r12*r22))+(((-1.0)*x1367*x1370))+(((-1.0)*cj5*r10*r21*x1368)));
j4eval[0]=x1371;
j4eval[1]=IKsign(x1371);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1368))+((cj0*x1369)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1372=cj5*cj5;
IkReal x1373=((1.0)*sj5);
IkReal x1374=(cj5*r20);
IkReal x1375=(r11*r21);
CheckValue<IkReal> x1376 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1373))+((cj0*x1374)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1376.valid){
continue;
}
CheckValue<IkReal> x1377=IKPowWithIntegerCheck(IKsign((x1375+((r10*r20*x1372))+(((-1.0)*r11*x1373*x1374))+(((-1.0)*x1372*x1375))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1373)))),-1);
if(!x1377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1376.value)+(((1.5707963267949)*(x1377.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1378=IKsin(j4);
IkReal x1379=IKcos(j4);
IkReal x1380=((1.0)*sj0);
IkReal x1381=(cj5*r00);
IkReal x1382=(r11*sj5);
IkReal x1383=(cj5*r10);
IkReal x1384=(r21*sj5);
IkReal x1385=(cj5*r20);
IkReal x1386=(r01*sj5);
IkReal x1387=((1.0)*x1379);
IkReal x1388=((1.0)*x1378);
evalcond[0]=((((-1.0)*r22*x1387))+((x1378*x1384))+(((-1.0)*x1385*x1388)));
evalcond[1]=((((-1.0)*x1384*x1387))+((x1379*x1385))+(((-1.0)*r22*x1388)));
evalcond[2]=((((-1.0)*r12*x1387))+(((-1.0)*x1383*x1388))+cj0+((x1378*x1382)));
evalcond[3]=((((-1.0)*x1380))+(((-1.0)*r02*x1387))+(((-1.0)*x1381*x1388))+((x1378*x1386)));
evalcond[4]=((((-1.0)*r02*x1388))+((x1379*x1381))+(((-1.0)*x1386*x1387))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1388))+(((-1.0)*x1380))+(((-1.0)*x1382*x1387))+((x1379*x1383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1389=((1.0)*cj5);
CheckValue<IkReal> x1390=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1389))+(((-1.0)*r10*sj5)))),-1);
if(!x1390.valid){
continue;
}
CheckValue<IkReal> x1391 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1390.value)))+(x1391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1392=IKsin(j4);
IkReal x1393=IKcos(j4);
IkReal x1394=((1.0)*sj0);
IkReal x1395=(cj5*r00);
IkReal x1396=(r11*sj5);
IkReal x1397=(cj5*r10);
IkReal x1398=(r21*sj5);
IkReal x1399=(cj5*r20);
IkReal x1400=(r01*sj5);
IkReal x1401=((1.0)*x1393);
IkReal x1402=((1.0)*x1392);
evalcond[0]=((((-1.0)*x1399*x1402))+(((-1.0)*r22*x1401))+((x1392*x1398)));
evalcond[1]=(((x1393*x1399))+(((-1.0)*x1398*x1401))+(((-1.0)*r22*x1402)));
evalcond[2]=((((-1.0)*r12*x1401))+cj0+((x1392*x1396))+(((-1.0)*x1397*x1402)));
evalcond[3]=(((x1392*x1400))+(((-1.0)*r02*x1401))+(((-1.0)*x1395*x1402))+(((-1.0)*x1394)));
evalcond[4]=(((x1393*x1395))+(((-1.0)*r02*x1402))+(((-1.0)*x1400*x1401))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1402))+((x1393*x1397))+(((-1.0)*x1396*x1401))+(((-1.0)*x1394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1403=((1.0)*cj5);
CheckValue<IkReal> x1404 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1404.valid){
continue;
}
CheckValue<IkReal> x1405=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1403)))),-1);
if(!x1405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1404.value)+(((1.5707963267949)*(x1405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1406=IKsin(j4);
IkReal x1407=IKcos(j4);
IkReal x1408=((1.0)*sj0);
IkReal x1409=(cj5*r00);
IkReal x1410=(r11*sj5);
IkReal x1411=(cj5*r10);
IkReal x1412=(r21*sj5);
IkReal x1413=(cj5*r20);
IkReal x1414=(r01*sj5);
IkReal x1415=((1.0)*x1407);
IkReal x1416=((1.0)*x1406);
evalcond[0]=((((-1.0)*x1413*x1416))+(((-1.0)*r22*x1415))+((x1406*x1412)));
evalcond[1]=(((x1407*x1413))+(((-1.0)*x1412*x1415))+(((-1.0)*r22*x1416)));
evalcond[2]=(cj0+(((-1.0)*x1411*x1416))+((x1406*x1410))+(((-1.0)*r12*x1415)));
evalcond[3]=((((-1.0)*r02*x1415))+(((-1.0)*x1408))+((x1406*x1414))+(((-1.0)*x1409*x1416)));
evalcond[4]=((((-1.0)*x1414*x1415))+(((-1.0)*r02*x1416))+(((-1.0)*cj0))+((x1407*x1409)));
evalcond[5]=(((x1407*x1411))+(((-1.0)*x1408))+(((-1.0)*x1410*x1415))+(((-1.0)*r12*x1416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1417=IKsin(j0);
IkReal x1418=IKcos(j0);
evalcond[0]=((((-0.10915)*x1417))+(((0.425)*x1418))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x1418))+(((0.425)*x1417))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1419=((1.0)*cj5);
IkReal x1420=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1419)));
j4eval[0]=x1420;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1419)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1420);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1421=cj5*cj5;
IkReal x1422=((1.0)*r21);
IkReal x1423=(cj5*sj5);
IkReal x1424=((1.0)*r20);
IkReal x1425=((((-1.0)*r01*x1421*x1422))+((r00*r20*x1421))+((r01*r21))+(((-1.0)*r00*x1422*x1423))+((r02*r22))+(((-1.0)*r01*x1423*x1424)));
j4eval[0]=x1425;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1424)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1425);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1426=cj5*cj5;
IkReal x1427=(r21*sj5);
IkReal x1428=(r11*r21);
IkReal x1429=((1.0)*cj5*r20);
IkReal x1430=((((-1.0)*r11*sj5*x1429))+((r12*r22))+(((-1.0)*x1426*x1428))+(((-1.0)*cj5*r10*x1427))+x1428+((r10*r20*x1426)));
j4eval[0]=x1430;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1429))+((sj0*x1427)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1431=cj5*cj5;
IkReal x1432=(r21*sj5);
IkReal x1433=(r11*r21);
IkReal x1434=((1.0)*cj5*r20);
CheckValue<IkReal> x1435 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1434))+((sj0*x1432)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1435.valid){
continue;
}
CheckValue<IkReal> x1436=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1432))+((r10*r20*x1431))+(((-1.0)*r11*sj5*x1434))+((r12*r22))+(((-1.0)*x1431*x1433))+x1433)),-1);
if(!x1436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1435.value)+(((1.5707963267949)*(x1436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1437=IKsin(j4);
IkReal x1438=IKcos(j4);
IkReal x1439=(r11*sj5);
IkReal x1440=(cj5*r00);
IkReal x1441=(cj5*r10);
IkReal x1442=(r21*sj5);
IkReal x1443=(cj5*r20);
IkReal x1444=(r01*sj5);
IkReal x1445=((1.0)*x1438);
IkReal x1446=((1.0)*x1437);
evalcond[0]=(((x1437*x1442))+(((-1.0)*r22*x1445))+(((-1.0)*x1443*x1446)));
evalcond[1]=(((x1438*x1443))+(((-1.0)*r22*x1446))+(((-1.0)*x1442*x1445)));
evalcond[2]=(cj0+((x1437*x1439))+(((-1.0)*r12*x1445))+(((-1.0)*x1441*x1446)));
evalcond[3]=(((x1438*x1440))+cj0+(((-1.0)*x1444*x1445))+(((-1.0)*r02*x1446)));
evalcond[4]=(((x1438*x1441))+sj0+(((-1.0)*r12*x1446))+(((-1.0)*x1439*x1445)));
evalcond[5]=(((x1437*x1444))+(((-1.0)*sj0))+(((-1.0)*r02*x1445))+(((-1.0)*x1440*x1446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1447=cj5*cj5;
IkReal x1448=((1.0)*r21);
IkReal x1449=(cj5*sj5);
IkReal x1450=((1.0)*r20);
CheckValue<IkReal> x1451=IKPowWithIntegerCheck(IKsign((((r00*r20*x1447))+((r01*r21))+(((-1.0)*r01*x1449*x1450))+((r02*r22))+(((-1.0)*r01*x1447*x1448))+(((-1.0)*r00*x1448*x1449)))),-1);
if(!x1451.valid){
continue;
}
CheckValue<IkReal> x1452 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1451.value)))+(x1452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1453=IKsin(j4);
IkReal x1454=IKcos(j4);
IkReal x1455=(r11*sj5);
IkReal x1456=(cj5*r00);
IkReal x1457=(cj5*r10);
IkReal x1458=(r21*sj5);
IkReal x1459=(cj5*r20);
IkReal x1460=(r01*sj5);
IkReal x1461=((1.0)*x1454);
IkReal x1462=((1.0)*x1453);
evalcond[0]=((((-1.0)*x1459*x1462))+(((-1.0)*r22*x1461))+((x1453*x1458)));
evalcond[1]=((((-1.0)*x1458*x1461))+((x1454*x1459))+(((-1.0)*r22*x1462)));
evalcond[2]=(cj0+(((-1.0)*x1457*x1462))+(((-1.0)*r12*x1461))+((x1453*x1455)));
evalcond[3]=((((-1.0)*r02*x1462))+cj0+((x1454*x1456))+(((-1.0)*x1460*x1461)));
evalcond[4]=(sj0+((x1454*x1457))+(((-1.0)*x1455*x1461))+(((-1.0)*r12*x1462)));
evalcond[5]=(((x1453*x1460))+(((-1.0)*sj0))+(((-1.0)*r02*x1461))+(((-1.0)*x1456*x1462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1463=((1.0)*cj5);
CheckValue<IkReal> x1464=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1463)))),-1);
if(!x1464.valid){
continue;
}
CheckValue<IkReal> x1465 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1463)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1464.value)))+(x1465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1466=IKsin(j4);
IkReal x1467=IKcos(j4);
IkReal x1468=(r11*sj5);
IkReal x1469=(cj5*r00);
IkReal x1470=(cj5*r10);
IkReal x1471=(r21*sj5);
IkReal x1472=(cj5*r20);
IkReal x1473=(r01*sj5);
IkReal x1474=((1.0)*x1467);
IkReal x1475=((1.0)*x1466);
evalcond[0]=((((-1.0)*r22*x1474))+((x1466*x1471))+(((-1.0)*x1472*x1475)));
evalcond[1]=((((-1.0)*r22*x1475))+(((-1.0)*x1471*x1474))+((x1467*x1472)));
evalcond[2]=((((-1.0)*x1470*x1475))+cj0+(((-1.0)*r12*x1474))+((x1466*x1468)));
evalcond[3]=(cj0+(((-1.0)*r02*x1475))+((x1467*x1469))+(((-1.0)*x1473*x1474)));
evalcond[4]=(sj0+((x1467*x1470))+(((-1.0)*r12*x1475))+(((-1.0)*x1468*x1474)));
evalcond[5]=(((x1466*x1473))+(((-1.0)*sj0))+(((-1.0)*x1469*x1475))+(((-1.0)*r02*x1474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1476=((1.0)*cj5);
IkReal x1477=((((-1.0)*r01*x1476))+(((-1.0)*r00*sj5)));
j4eval[0]=x1477;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1476)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1477);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1478=((1.0)*cj5);
IkReal x1479=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1478)));
j4eval[0]=x1479;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1478))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1479);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1480=cj5*cj5;
IkReal x1481=((1.0)*sj5);
IkReal x1482=(cj5*r20);
IkReal x1483=(r11*r21);
IkReal x1484=((((-1.0)*r11*x1481*x1482))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1481))+(((-1.0)*x1480*x1483))+x1483+((r10*r20*x1480)));
j4eval[0]=x1484;
j4eval[1]=IKsign(x1484);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1481))+((cj0*x1482))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1485=cj5*cj5;
IkReal x1486=((1.0)*sj5);
IkReal x1487=(cj5*r20);
IkReal x1488=(r11*r21);
CheckValue<IkReal> x1489=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1485*x1488))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1486))+(((-1.0)*r11*x1486*x1487))+x1488+((r10*r20*x1485)))),-1);
if(!x1489.valid){
continue;
}
CheckValue<IkReal> x1490 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1486))+((cj0*x1487)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1489.value)))+(x1490.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1491=IKsin(j4);
IkReal x1492=IKcos(j4);
IkReal x1493=((1.0)*sj0);
IkReal x1494=(cj5*r00);
IkReal x1495=(r11*sj5);
IkReal x1496=(cj5*r10);
IkReal x1497=(r21*sj5);
IkReal x1498=(cj5*r20);
IkReal x1499=(r01*sj5);
IkReal x1500=((1.0)*x1492);
IkReal x1501=((1.0)*x1491);
evalcond[0]=((((-1.0)*x1498*x1501))+(((-1.0)*r22*x1500))+((x1491*x1497)));
evalcond[1]=((((-1.0)*r22*x1501))+((x1492*x1498))+(((-1.0)*x1497*x1500)));
evalcond[2]=(cj0+((x1491*x1495))+(((-1.0)*x1496*x1501))+(((-1.0)*r12*x1500)));
evalcond[3]=((((-1.0)*x1493))+(((-1.0)*x1494*x1501))+((x1491*x1499))+(((-1.0)*r02*x1500)));
evalcond[4]=((((-1.0)*x1499*x1500))+(((-1.0)*r02*x1501))+((x1492*x1494))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1493))+((x1492*x1496))+(((-1.0)*x1495*x1500))+(((-1.0)*r12*x1501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1502=((1.0)*cj5);
CheckValue<IkReal> x1503=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1502)))),-1);
if(!x1503.valid){
continue;
}
CheckValue<IkReal> x1504 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1502)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1503.value)))+(x1504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1505=IKsin(j4);
IkReal x1506=IKcos(j4);
IkReal x1507=((1.0)*sj0);
IkReal x1508=(cj5*r00);
IkReal x1509=(r11*sj5);
IkReal x1510=(cj5*r10);
IkReal x1511=(r21*sj5);
IkReal x1512=(cj5*r20);
IkReal x1513=(r01*sj5);
IkReal x1514=((1.0)*x1506);
IkReal x1515=((1.0)*x1505);
evalcond[0]=((((-1.0)*r22*x1514))+(((-1.0)*x1512*x1515))+((x1505*x1511)));
evalcond[1]=((((-1.0)*r22*x1515))+((x1506*x1512))+(((-1.0)*x1511*x1514)));
evalcond[2]=(cj0+(((-1.0)*x1510*x1515))+((x1505*x1509))+(((-1.0)*r12*x1514)));
evalcond[3]=((((-1.0)*x1507))+(((-1.0)*r02*x1514))+((x1505*x1513))+(((-1.0)*x1508*x1515)));
evalcond[4]=((((-1.0)*x1513*x1514))+((x1506*x1508))+(((-1.0)*r02*x1515))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1507))+((x1506*x1510))+(((-1.0)*x1509*x1514))+(((-1.0)*r12*x1515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1516=((1.0)*cj5);
CheckValue<IkReal> x1517=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1516))+(((-1.0)*r00*sj5)))),-1);
if(!x1517.valid){
continue;
}
CheckValue<IkReal> x1518 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1516))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1517.value)))+(x1518.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1519=IKsin(j4);
IkReal x1520=IKcos(j4);
IkReal x1521=((1.0)*sj0);
IkReal x1522=(cj5*r00);
IkReal x1523=(r11*sj5);
IkReal x1524=(cj5*r10);
IkReal x1525=(r21*sj5);
IkReal x1526=(cj5*r20);
IkReal x1527=(r01*sj5);
IkReal x1528=((1.0)*x1520);
IkReal x1529=((1.0)*x1519);
evalcond[0]=(((x1519*x1525))+(((-1.0)*r22*x1528))+(((-1.0)*x1526*x1529)));
evalcond[1]=((((-1.0)*x1525*x1528))+(((-1.0)*r22*x1529))+((x1520*x1526)));
evalcond[2]=((((-1.0)*r12*x1528))+(((-1.0)*x1524*x1529))+cj0+((x1519*x1523)));
evalcond[3]=(((x1519*x1527))+(((-1.0)*x1521))+(((-1.0)*r02*x1528))+(((-1.0)*x1522*x1529)));
evalcond[4]=((((-1.0)*r02*x1529))+((x1520*x1522))+(((-1.0)*x1527*x1528))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1529))+(((-1.0)*x1521))+((x1520*x1524))+(((-1.0)*x1523*x1528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1530=((1.0)*cj5);
IkReal x1531=((((-1.0)*r01*x1530))+(((-1.0)*r00*sj5)));
j4eval[0]=x1531;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1530)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1532=cj5*cj5;
IkReal x1533=((1.0)*r21);
IkReal x1534=(cj5*sj5);
IkReal x1535=((1.0)*r20);
IkReal x1536=((((-1.0)*r01*x1532*x1533))+((r01*r21))+(((-1.0)*r01*x1534*x1535))+((r02*r22))+(((-1.0)*r00*x1533*x1534))+((r00*r20*x1532)));
j4eval[0]=x1536;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1535))))));
j4eval[2]=IKsign(x1536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1537=cj5*cj5;
IkReal x1538=(r21*sj5);
IkReal x1539=(r11*r21);
IkReal x1540=((1.0)*cj5*r20);
IkReal x1541=((((-1.0)*r11*sj5*x1540))+((r12*r22))+x1539+(((-1.0)*cj5*r10*x1538))+(((-1.0)*x1537*x1539))+((r10*r20*x1537)));
j4eval[0]=x1541;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1538))+(((-1.0)*sj0*x1540))))));
j4eval[2]=IKsign(x1541);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1542=cj5*cj5;
IkReal x1543=(r21*sj5);
IkReal x1544=(r11*r21);
IkReal x1545=((1.0)*cj5*r20);
CheckValue<IkReal> x1546 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1543))+(((-1.0)*sj0*x1545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1546.valid){
continue;
}
CheckValue<IkReal> x1547=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1543))+(((-1.0)*x1542*x1544))+(((-1.0)*r11*sj5*x1545))+((r12*r22))+x1544+((r10*r20*x1542)))),-1);
if(!x1547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1546.value)+(((1.5707963267949)*(x1547.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1548=IKsin(j4);
IkReal x1549=IKcos(j4);
IkReal x1550=(r11*sj5);
IkReal x1551=(cj5*r00);
IkReal x1552=(cj5*r10);
IkReal x1553=(r21*sj5);
IkReal x1554=(cj5*r20);
IkReal x1555=(r01*sj5);
IkReal x1556=((1.0)*x1549);
IkReal x1557=((1.0)*x1548);
evalcond[0]=((((-1.0)*r22*x1556))+((x1548*x1553))+(((-1.0)*x1554*x1557)));
evalcond[1]=((((-1.0)*r22*x1557))+(((-1.0)*x1553*x1556))+((x1549*x1554)));
evalcond[2]=(cj0+(((-1.0)*x1552*x1557))+(((-1.0)*r12*x1556))+((x1548*x1550)));
evalcond[3]=(cj0+(((-1.0)*r02*x1557))+(((-1.0)*x1555*x1556))+((x1549*x1551)));
evalcond[4]=(sj0+((x1549*x1552))+(((-1.0)*r12*x1557))+(((-1.0)*x1550*x1556)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1556))+((x1548*x1555))+(((-1.0)*x1551*x1557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1558=cj5*cj5;
IkReal x1559=((1.0)*r21);
IkReal x1560=(cj5*sj5);
IkReal x1561=((1.0)*r20);
CheckValue<IkReal> x1562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1558*x1559))+((r01*r21))+((r00*r20*x1558))+(((-1.0)*r00*x1559*x1560))+((r02*r22))+(((-1.0)*r01*x1560*x1561)))),-1);
if(!x1562.valid){
continue;
}
CheckValue<IkReal> x1563 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1562.value)))+(x1563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1564=IKsin(j4);
IkReal x1565=IKcos(j4);
IkReal x1566=(r11*sj5);
IkReal x1567=(cj5*r00);
IkReal x1568=(cj5*r10);
IkReal x1569=(r21*sj5);
IkReal x1570=(cj5*r20);
IkReal x1571=(r01*sj5);
IkReal x1572=((1.0)*x1565);
IkReal x1573=((1.0)*x1564);
evalcond[0]=((((-1.0)*x1570*x1573))+(((-1.0)*r22*x1572))+((x1564*x1569)));
evalcond[1]=((((-1.0)*r22*x1573))+(((-1.0)*x1569*x1572))+((x1565*x1570)));
evalcond[2]=(cj0+(((-1.0)*x1568*x1573))+(((-1.0)*r12*x1572))+((x1564*x1566)));
evalcond[3]=((((-1.0)*r02*x1573))+(((-1.0)*x1571*x1572))+cj0+((x1565*x1567)));
evalcond[4]=(sj0+(((-1.0)*x1566*x1572))+(((-1.0)*r12*x1573))+((x1565*x1568)));
evalcond[5]=((((-1.0)*r02*x1572))+(((-1.0)*sj0))+(((-1.0)*x1567*x1573))+((x1564*x1571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1574=((1.0)*cj5);
CheckValue<IkReal> x1575 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1575.valid){
continue;
}
CheckValue<IkReal> x1576=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1574)))),-1);
if(!x1576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1575.value)+(((1.5707963267949)*(x1576.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1577=IKsin(j4);
IkReal x1578=IKcos(j4);
IkReal x1579=(r11*sj5);
IkReal x1580=(cj5*r00);
IkReal x1581=(cj5*r10);
IkReal x1582=(r21*sj5);
IkReal x1583=(cj5*r20);
IkReal x1584=(r01*sj5);
IkReal x1585=((1.0)*x1578);
IkReal x1586=((1.0)*x1577);
evalcond[0]=((((-1.0)*r22*x1585))+((x1577*x1582))+(((-1.0)*x1583*x1586)));
evalcond[1]=((((-1.0)*r22*x1586))+((x1578*x1583))+(((-1.0)*x1582*x1585)));
evalcond[2]=(cj0+((x1577*x1579))+(((-1.0)*x1581*x1586))+(((-1.0)*r12*x1585)));
evalcond[3]=(cj0+(((-1.0)*r02*x1586))+(((-1.0)*x1584*x1585))+((x1578*x1580)));
evalcond[4]=(sj0+(((-1.0)*x1579*x1585))+((x1578*x1581))+(((-1.0)*r12*x1586)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1580*x1586))+(((-1.0)*r02*x1585))+((x1577*x1584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1587=IKcos(j0);
IkReal x1588=IKsin(j0);
evalcond[0]=((((-0.425)*x1587))+(((-1.0)*px))+(((-0.10915)*x1588)));
evalcond[1]=((((-0.425)*x1588))+(((-1.0)*py))+(((0.10915)*x1587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1589=((1.0)*cj5);
IkReal x1590=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1589)));
j4eval[0]=x1590;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1589))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1590);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1591=cj5*cj5;
IkReal x1592=((1.0)*r21);
IkReal x1593=(cj5*sj5);
IkReal x1594=((1.0)*r20);
IkReal x1595=(((r01*r21))+(((-1.0)*r01*x1593*x1594))+(((-1.0)*r00*x1592*x1593))+((r00*r20*x1591))+((r02*r22))+(((-1.0)*r01*x1591*x1592)));
j4eval[0]=x1595;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1594)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1595);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1596=cj5*cj5;
IkReal x1597=(r21*sj5);
IkReal x1598=(r11*r21);
IkReal x1599=((1.0)*cj5*r20);
IkReal x1600=(((r10*r20*x1596))+((r12*r22))+x1598+(((-1.0)*r11*sj5*x1599))+(((-1.0)*x1596*x1598))+(((-1.0)*cj5*r10*x1597)));
j4eval[0]=x1600;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1599))+((sj0*x1597)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1600);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1601=cj5*cj5;
IkReal x1602=(r21*sj5);
IkReal x1603=(r11*r21);
IkReal x1604=((1.0)*cj5*r20);
CheckValue<IkReal> x1605=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1602))+((r10*r20*x1601))+x1603+(((-1.0)*r11*sj5*x1604))+(((-1.0)*x1601*x1603))+((r12*r22)))),-1);
if(!x1605.valid){
continue;
}
CheckValue<IkReal> x1606 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1604))+((sj0*x1602)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1605.value)))+(x1606.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1607=IKsin(j4);
IkReal x1608=IKcos(j4);
IkReal x1609=(r11*sj5);
IkReal x1610=(cj5*r00);
IkReal x1611=(cj5*r10);
IkReal x1612=(r21*sj5);
IkReal x1613=(cj5*r20);
IkReal x1614=(r01*sj5);
IkReal x1615=((1.0)*x1608);
IkReal x1616=((1.0)*x1607);
evalcond[0]=((((-1.0)*r22*x1615))+((x1607*x1612))+(((-1.0)*x1613*x1616)));
evalcond[1]=(((x1608*x1613))+(((-1.0)*r22*x1616))+(((-1.0)*x1612*x1615)));
evalcond[2]=((((-1.0)*r12*x1615))+(((-1.0)*x1611*x1616))+cj0+((x1607*x1609)));
evalcond[3]=(cj0+(((-1.0)*r02*x1616))+((x1608*x1610))+(((-1.0)*x1614*x1615)));
evalcond[4]=((((-1.0)*r12*x1616))+sj0+((x1608*x1611))+(((-1.0)*x1609*x1615)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1610*x1616))+(((-1.0)*r02*x1615))+((x1607*x1614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1617=cj5*cj5;
IkReal x1618=((1.0)*r21);
IkReal x1619=(cj5*sj5);
IkReal x1620=((1.0)*r20);
CheckValue<IkReal> x1621 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1620))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1621.valid){
continue;
}
CheckValue<IkReal> x1622=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1619*x1620))+((r00*r20*x1617))+((r01*r21))+(((-1.0)*r00*x1618*x1619))+(((-1.0)*r01*x1617*x1618))+((r02*r22)))),-1);
if(!x1622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1621.value)+(((1.5707963267949)*(x1622.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1623=IKsin(j4);
IkReal x1624=IKcos(j4);
IkReal x1625=(r11*sj5);
IkReal x1626=(cj5*r00);
IkReal x1627=(cj5*r10);
IkReal x1628=(r21*sj5);
IkReal x1629=(cj5*r20);
IkReal x1630=(r01*sj5);
IkReal x1631=((1.0)*x1624);
IkReal x1632=((1.0)*x1623);
evalcond[0]=((((-1.0)*r22*x1631))+((x1623*x1628))+(((-1.0)*x1629*x1632)));
evalcond[1]=((((-1.0)*r22*x1632))+(((-1.0)*x1628*x1631))+((x1624*x1629)));
evalcond[2]=(cj0+(((-1.0)*r12*x1631))+((x1623*x1625))+(((-1.0)*x1627*x1632)));
evalcond[3]=(cj0+(((-1.0)*x1630*x1631))+((x1624*x1626))+(((-1.0)*r02*x1632)));
evalcond[4]=(sj0+(((-1.0)*r12*x1632))+(((-1.0)*x1625*x1631))+((x1624*x1627)));
evalcond[5]=((((-1.0)*sj0))+((x1623*x1630))+(((-1.0)*x1626*x1632))+(((-1.0)*r02*x1631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1633=((1.0)*cj5);
CheckValue<IkReal> x1634=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1633))+(((-1.0)*r00*sj5)))),-1);
if(!x1634.valid){
continue;
}
CheckValue<IkReal> x1635 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1634.value)))+(x1635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1636=IKsin(j4);
IkReal x1637=IKcos(j4);
IkReal x1638=(r11*sj5);
IkReal x1639=(cj5*r00);
IkReal x1640=(cj5*r10);
IkReal x1641=(r21*sj5);
IkReal x1642=(cj5*r20);
IkReal x1643=(r01*sj5);
IkReal x1644=((1.0)*x1637);
IkReal x1645=((1.0)*x1636);
evalcond[0]=(((x1636*x1641))+(((-1.0)*r22*x1644))+(((-1.0)*x1642*x1645)));
evalcond[1]=((((-1.0)*x1641*x1644))+((x1637*x1642))+(((-1.0)*r22*x1645)));
evalcond[2]=(((x1636*x1638))+cj0+(((-1.0)*r12*x1644))+(((-1.0)*x1640*x1645)));
evalcond[3]=(((x1637*x1639))+cj0+(((-1.0)*x1643*x1644))+(((-1.0)*r02*x1645)));
evalcond[4]=(sj0+((x1637*x1640))+(((-1.0)*r12*x1645))+(((-1.0)*x1638*x1644)));
evalcond[5]=(((x1636*x1643))+(((-1.0)*sj0))+(((-1.0)*x1639*x1645))+(((-1.0)*r02*x1644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1646=IKcos(j0);
IkReal x1647=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.425)*x1646))+(((-0.10915)*x1647)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x1646))+(((-0.425)*x1647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1648=((1.0)*cj5);
IkReal x1649=((((-1.0)*r01*x1648))+(((-1.0)*r00*sj5)));
j4eval[0]=x1649;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1648))))));
j4eval[2]=IKsign(x1649);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1650=((1.0)*cj5);
IkReal x1651=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1650)));
j4eval[0]=x1651;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1650))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1651);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1652=cj5*cj5;
IkReal x1653=((1.0)*sj5);
IkReal x1654=(cj5*r20);
IkReal x1655=(r11*r21);
IkReal x1656=((((-1.0)*r11*x1653*x1654))+(((-1.0)*cj5*r10*r21*x1653))+x1655+((r12*r22))+(((-1.0)*x1652*x1655))+((r10*r20*x1652)));
j4eval[0]=x1656;
j4eval[1]=IKsign(x1656);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1653))+((cj0*x1654))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1657=cj5*cj5;
IkReal x1658=((1.0)*sj5);
IkReal x1659=(cj5*r20);
IkReal x1660=(r11*r21);
CheckValue<IkReal> x1661 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1658))+((cj0*x1659)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1661.valid){
continue;
}
CheckValue<IkReal> x1662=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1658*x1659))+(((-1.0)*cj5*r10*r21*x1658))+x1660+((r12*r22))+(((-1.0)*x1657*x1660))+((r10*r20*x1657)))),-1);
if(!x1662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1661.value)+(((1.5707963267949)*(x1662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1663=IKsin(j4);
IkReal x1664=IKcos(j4);
IkReal x1665=((1.0)*sj0);
IkReal x1666=(cj5*r00);
IkReal x1667=(r11*sj5);
IkReal x1668=(cj5*r10);
IkReal x1669=(r21*sj5);
IkReal x1670=(cj5*r20);
IkReal x1671=(r01*sj5);
IkReal x1672=((1.0)*x1664);
IkReal x1673=((1.0)*x1663);
evalcond[0]=((((-1.0)*x1670*x1673))+((x1663*x1669))+(((-1.0)*r22*x1672)));
evalcond[1]=((((-1.0)*x1669*x1672))+(((-1.0)*r22*x1673))+((x1664*x1670)));
evalcond[2]=(cj0+(((-1.0)*x1668*x1673))+(((-1.0)*r12*x1672))+((x1663*x1667)));
evalcond[3]=((((-1.0)*r02*x1672))+(((-1.0)*x1665))+(((-1.0)*x1666*x1673))+((x1663*x1671)));
evalcond[4]=((((-1.0)*r02*x1673))+(((-1.0)*x1671*x1672))+((x1664*x1666))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1667*x1672))+(((-1.0)*r12*x1673))+(((-1.0)*x1665))+((x1664*x1668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1674=((1.0)*cj5);
CheckValue<IkReal> x1675 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1674))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1675.valid){
continue;
}
CheckValue<IkReal> x1676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1674)))),-1);
if(!x1676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1675.value)+(((1.5707963267949)*(x1676.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1677=IKsin(j4);
IkReal x1678=IKcos(j4);
IkReal x1679=((1.0)*sj0);
IkReal x1680=(cj5*r00);
IkReal x1681=(r11*sj5);
IkReal x1682=(cj5*r10);
IkReal x1683=(r21*sj5);
IkReal x1684=(cj5*r20);
IkReal x1685=(r01*sj5);
IkReal x1686=((1.0)*x1678);
IkReal x1687=((1.0)*x1677);
evalcond[0]=(((x1677*x1683))+(((-1.0)*r22*x1686))+(((-1.0)*x1684*x1687)));
evalcond[1]=((((-1.0)*x1683*x1686))+(((-1.0)*r22*x1687))+((x1678*x1684)));
evalcond[2]=((((-1.0)*r12*x1686))+((x1677*x1681))+cj0+(((-1.0)*x1682*x1687)));
evalcond[3]=(((x1677*x1685))+(((-1.0)*x1680*x1687))+(((-1.0)*r02*x1686))+(((-1.0)*x1679)));
evalcond[4]=((((-1.0)*x1685*x1686))+(((-1.0)*r02*x1687))+((x1678*x1680))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1687))+(((-1.0)*x1681*x1686))+(((-1.0)*x1679))+((x1678*x1682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1688=((1.0)*cj5);
CheckValue<IkReal> x1689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1688))+(((-1.0)*r00*sj5)))),-1);
if(!x1689.valid){
continue;
}
CheckValue<IkReal> x1690 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1688)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1689.value)))+(x1690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1691=IKsin(j4);
IkReal x1692=IKcos(j4);
IkReal x1693=((1.0)*sj0);
IkReal x1694=(cj5*r00);
IkReal x1695=(r11*sj5);
IkReal x1696=(cj5*r10);
IkReal x1697=(r21*sj5);
IkReal x1698=(cj5*r20);
IkReal x1699=(r01*sj5);
IkReal x1700=((1.0)*x1692);
IkReal x1701=((1.0)*x1691);
evalcond[0]=((((-1.0)*x1698*x1701))+((x1691*x1697))+(((-1.0)*r22*x1700)));
evalcond[1]=(((x1692*x1698))+(((-1.0)*r22*x1701))+(((-1.0)*x1697*x1700)));
evalcond[2]=(cj0+((x1691*x1695))+(((-1.0)*x1696*x1701))+(((-1.0)*r12*x1700)));
evalcond[3]=((((-1.0)*x1693))+((x1691*x1699))+(((-1.0)*r02*x1700))+(((-1.0)*x1694*x1701)));
evalcond[4]=((((-1.0)*x1699*x1700))+((x1692*x1694))+(((-1.0)*r02*x1701))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1693))+((x1692*x1696))+(((-1.0)*x1695*x1700))+(((-1.0)*r12*x1701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1702=((1.0)*cj5);
IkReal x1703=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1702)));
j4eval[0]=x1703;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1702)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1703);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1704=cj5*cj5;
IkReal x1705=((1.0)*r21);
IkReal x1706=(cj5*sj5);
IkReal x1707=((1.0)*r20);
IkReal x1708=((((-1.0)*r01*x1706*x1707))+((r01*r21))+((r00*r20*x1704))+(((-1.0)*r00*x1705*x1706))+((r02*r22))+(((-1.0)*r01*x1704*x1705)));
j4eval[0]=x1708;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1707)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1708);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1709=cj5*cj5;
IkReal x1710=(r21*sj5);
IkReal x1711=(r11*r21);
IkReal x1712=((1.0)*cj5*r20);
IkReal x1713=((((-1.0)*x1709*x1711))+x1711+(((-1.0)*r11*sj5*x1712))+((r12*r22))+((r10*r20*x1709))+(((-1.0)*cj5*r10*x1710)));
j4eval[0]=x1713;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1712))+((sj0*x1710))))));
j4eval[2]=IKsign(x1713);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1714=cj5*cj5;
IkReal x1715=(r21*sj5);
IkReal x1716=(r11*r21);
IkReal x1717=((1.0)*cj5*r20);
CheckValue<IkReal> x1718=IKPowWithIntegerCheck(IKsign((x1716+(((-1.0)*r11*sj5*x1717))+(((-1.0)*x1714*x1716))+((r10*r20*x1714))+((r12*r22))+(((-1.0)*cj5*r10*x1715)))),-1);
if(!x1718.valid){
continue;
}
CheckValue<IkReal> x1719 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1717))+((sj0*x1715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1718.value)))+(x1719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1720=IKsin(j4);
IkReal x1721=IKcos(j4);
IkReal x1722=(r11*sj5);
IkReal x1723=(cj5*r00);
IkReal x1724=(cj5*r10);
IkReal x1725=(r21*sj5);
IkReal x1726=(cj5*r20);
IkReal x1727=(r01*sj5);
IkReal x1728=((1.0)*x1721);
IkReal x1729=((1.0)*x1720);
evalcond[0]=((((-1.0)*r22*x1728))+(((-1.0)*x1726*x1729))+((x1720*x1725)));
evalcond[1]=((((-1.0)*r22*x1729))+((x1721*x1726))+(((-1.0)*x1725*x1728)));
evalcond[2]=(cj0+(((-1.0)*r12*x1728))+((x1720*x1722))+(((-1.0)*x1724*x1729)));
evalcond[3]=(cj0+((x1721*x1723))+(((-1.0)*x1727*x1728))+(((-1.0)*r02*x1729)));
evalcond[4]=(sj0+(((-1.0)*r12*x1729))+(((-1.0)*x1722*x1728))+((x1721*x1724)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1723*x1729))+((x1720*x1727))+(((-1.0)*r02*x1728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1730=cj5*cj5;
IkReal x1731=((1.0)*r21);
IkReal x1732=(cj5*sj5);
IkReal x1733=((1.0)*r20);
CheckValue<IkReal> x1734=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1732*x1733))+(((-1.0)*r00*x1731*x1732))+((r01*r21))+(((-1.0)*r01*x1730*x1731))+((r02*r22))+((r00*r20*x1730)))),-1);
if(!x1734.valid){
continue;
}
CheckValue<IkReal> x1735 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1734.value)))+(x1735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1736=IKsin(j4);
IkReal x1737=IKcos(j4);
IkReal x1738=(r11*sj5);
IkReal x1739=(cj5*r00);
IkReal x1740=(cj5*r10);
IkReal x1741=(r21*sj5);
IkReal x1742=(cj5*r20);
IkReal x1743=(r01*sj5);
IkReal x1744=((1.0)*x1737);
IkReal x1745=((1.0)*x1736);
evalcond[0]=(((x1736*x1741))+(((-1.0)*r22*x1744))+(((-1.0)*x1742*x1745)));
evalcond[1]=((((-1.0)*x1741*x1744))+(((-1.0)*r22*x1745))+((x1737*x1742)));
evalcond[2]=((((-1.0)*r12*x1744))+cj0+(((-1.0)*x1740*x1745))+((x1736*x1738)));
evalcond[3]=(cj0+((x1737*x1739))+(((-1.0)*x1743*x1744))+(((-1.0)*r02*x1745)));
evalcond[4]=((((-1.0)*r12*x1745))+sj0+(((-1.0)*x1738*x1744))+((x1737*x1740)));
evalcond[5]=(((x1736*x1743))+(((-1.0)*sj0))+(((-1.0)*x1739*x1745))+(((-1.0)*r02*x1744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1746=((1.0)*cj5);
CheckValue<IkReal> x1747 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1746)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1747.valid){
continue;
}
CheckValue<IkReal> x1748=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1746)))),-1);
if(!x1748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1747.value)+(((1.5707963267949)*(x1748.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1749=IKsin(j4);
IkReal x1750=IKcos(j4);
IkReal x1751=(r11*sj5);
IkReal x1752=(cj5*r00);
IkReal x1753=(cj5*r10);
IkReal x1754=(r21*sj5);
IkReal x1755=(cj5*r20);
IkReal x1756=(r01*sj5);
IkReal x1757=((1.0)*x1750);
IkReal x1758=((1.0)*x1749);
evalcond[0]=(((x1749*x1754))+(((-1.0)*r22*x1757))+(((-1.0)*x1755*x1758)));
evalcond[1]=((((-1.0)*r22*x1758))+((x1750*x1755))+(((-1.0)*x1754*x1757)));
evalcond[2]=((((-1.0)*r12*x1757))+((x1749*x1751))+cj0+(((-1.0)*x1753*x1758)));
evalcond[3]=((((-1.0)*x1756*x1757))+cj0+((x1750*x1752))+(((-1.0)*r02*x1758)));
evalcond[4]=(sj0+(((-1.0)*r12*x1758))+((x1750*x1753))+(((-1.0)*x1751*x1757)));
evalcond[5]=((((-1.0)*sj0))+((x1749*x1756))+(((-1.0)*x1752*x1758))+(((-1.0)*r02*x1757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1759=((1.0)*cj5);
IkReal x1760=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1759)));
j4eval[0]=x1760;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1759))))));
j4eval[2]=IKsign(x1760);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1761=((1.0)*cj5);
IkReal x1762=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1761)));
j4eval[0]=x1762;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1761))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1762);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1763=cj5*cj5;
IkReal x1764=((1.0)*sj5);
IkReal x1765=(cj5*r20);
IkReal x1766=(r11*r21);
IkReal x1767=((((-1.0)*x1763*x1766))+x1766+((r12*r22))+(((-1.0)*cj5*r10*r21*x1764))+((r10*r20*x1763))+(((-1.0)*r11*x1764*x1765)));
j4eval[0]=x1767;
j4eval[1]=IKsign(x1767);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1764))+((cj0*x1765))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1768=cj5*cj5;
IkReal x1769=((1.0)*sj5);
IkReal x1770=(cj5*r20);
IkReal x1771=(r11*r21);
CheckValue<IkReal> x1772=IKPowWithIntegerCheck(IKsign((x1771+((r12*r22))+(((-1.0)*cj5*r10*r21*x1769))+(((-1.0)*x1768*x1771))+((r10*r20*x1768))+(((-1.0)*r11*x1769*x1770)))),-1);
if(!x1772.valid){
continue;
}
CheckValue<IkReal> x1773 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1769))+((cj0*x1770)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1772.value)))+(x1773.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1774=IKsin(j4);
IkReal x1775=IKcos(j4);
IkReal x1776=((1.0)*sj0);
IkReal x1777=(cj5*r00);
IkReal x1778=(r11*sj5);
IkReal x1779=(cj5*r10);
IkReal x1780=(r21*sj5);
IkReal x1781=(cj5*r20);
IkReal x1782=(r01*sj5);
IkReal x1783=((1.0)*x1775);
IkReal x1784=((1.0)*x1774);
evalcond[0]=((((-1.0)*r22*x1783))+((x1774*x1780))+(((-1.0)*x1781*x1784)));
evalcond[1]=(((x1775*x1781))+(((-1.0)*r22*x1784))+(((-1.0)*x1780*x1783)));
evalcond[2]=(cj0+(((-1.0)*r12*x1783))+(((-1.0)*x1779*x1784))+((x1774*x1778)));
evalcond[3]=(((x1774*x1782))+(((-1.0)*x1777*x1784))+(((-1.0)*x1776))+(((-1.0)*r02*x1783)));
evalcond[4]=(((x1775*x1777))+(((-1.0)*x1782*x1783))+(((-1.0)*r02*x1784))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1784))+(((-1.0)*x1776))+((x1775*x1779))+(((-1.0)*x1778*x1783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1785=((1.0)*cj5);
CheckValue<IkReal> x1786 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1786.valid){
continue;
}
CheckValue<IkReal> x1787=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1785)))),-1);
if(!x1787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1786.value)+(((1.5707963267949)*(x1787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1788=IKsin(j4);
IkReal x1789=IKcos(j4);
IkReal x1790=((1.0)*sj0);
IkReal x1791=(cj5*r00);
IkReal x1792=(r11*sj5);
IkReal x1793=(cj5*r10);
IkReal x1794=(r21*sj5);
IkReal x1795=(cj5*r20);
IkReal x1796=(r01*sj5);
IkReal x1797=((1.0)*x1789);
IkReal x1798=((1.0)*x1788);
evalcond[0]=((((-1.0)*x1795*x1798))+(((-1.0)*r22*x1797))+((x1788*x1794)));
evalcond[1]=((((-1.0)*r22*x1798))+((x1789*x1795))+(((-1.0)*x1794*x1797)));
evalcond[2]=(cj0+(((-1.0)*r12*x1797))+(((-1.0)*x1793*x1798))+((x1788*x1792)));
evalcond[3]=((((-1.0)*x1790))+(((-1.0)*r02*x1797))+((x1788*x1796))+(((-1.0)*x1791*x1798)));
evalcond[4]=((((-1.0)*x1796*x1797))+((x1789*x1791))+(((-1.0)*r02*x1798))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1792*x1797))+(((-1.0)*x1790))+(((-1.0)*r12*x1798))+((x1789*x1793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1799=((1.0)*cj5);
CheckValue<IkReal> x1800=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1799))+(((-1.0)*r00*sj5)))),-1);
if(!x1800.valid){
continue;
}
CheckValue<IkReal> x1801 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1799))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1800.value)))+(x1801.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1802=IKsin(j4);
IkReal x1803=IKcos(j4);
IkReal x1804=((1.0)*sj0);
IkReal x1805=(cj5*r00);
IkReal x1806=(r11*sj5);
IkReal x1807=(cj5*r10);
IkReal x1808=(r21*sj5);
IkReal x1809=(cj5*r20);
IkReal x1810=(r01*sj5);
IkReal x1811=((1.0)*x1803);
IkReal x1812=((1.0)*x1802);
evalcond[0]=(((x1802*x1808))+(((-1.0)*x1809*x1812))+(((-1.0)*r22*x1811)));
evalcond[1]=((((-1.0)*x1808*x1811))+((x1803*x1809))+(((-1.0)*r22*x1812)));
evalcond[2]=(((x1802*x1806))+cj0+(((-1.0)*x1807*x1812))+(((-1.0)*r12*x1811)));
evalcond[3]=(((x1802*x1810))+(((-1.0)*x1805*x1812))+(((-1.0)*r02*x1811))+(((-1.0)*x1804)));
evalcond[4]=((((-1.0)*r02*x1812))+(((-1.0)*x1810*x1811))+((x1803*x1805))+(((-1.0)*cj0)));
evalcond[5]=(((x1803*x1807))+(((-1.0)*x1804))+(((-1.0)*r12*x1812))+(((-1.0)*x1806*x1811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1813=(sj1*sj2);
IkReal x1814=(cj5*r01);
IkReal x1815=(cj1*cj2);
IkReal x1816=(r00*sj5);
IkReal x1817=((20000.0)*px);
IkReal x1818=((8500.0)*cj1);
CheckValue<IkReal> x1819=IKPowWithIntegerCheck(((((2183.0)*x1813))+(((-2183.0)*x1815))),-1);
if(!x1819.valid){
continue;
}
CheckValue<IkReal> x1820=IKPowWithIntegerCheck((x1813+(((-1.0)*x1815))),-1);
if(!x1820.valid){
continue;
}
if( IKabs(((x1819.value)*(((((-5952.0)*x1815*x1816))+(((-1.0)*x1813*x1817))+(((-5952.0)*x1814*x1815))+(((5952.0)*x1813*x1814))+(((5952.0)*x1813*x1816))+(((-1.0)*x1816*x1818))+((x1815*x1817))+(((-1.0)*x1814*x1818)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1820.value)*(((((-1.0)*x1814))+(((-1.0)*x1816)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1819.value)*(((((-5952.0)*x1815*x1816))+(((-1.0)*x1813*x1817))+(((-5952.0)*x1814*x1815))+(((5952.0)*x1813*x1814))+(((5952.0)*x1813*x1816))+(((-1.0)*x1816*x1818))+((x1815*x1817))+(((-1.0)*x1814*x1818))))))+IKsqr(((x1820.value)*(((((-1.0)*x1814))+(((-1.0)*x1816))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1819.value)*(((((-5952.0)*x1815*x1816))+(((-1.0)*x1813*x1817))+(((-5952.0)*x1814*x1815))+(((5952.0)*x1813*x1814))+(((5952.0)*x1813*x1816))+(((-1.0)*x1816*x1818))+((x1815*x1817))+(((-1.0)*x1814*x1818))))), ((x1820.value)*(((((-1.0)*x1814))+(((-1.0)*x1816))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1821=IKcos(j0);
IkReal x1822=IKsin(j0);
IkReal x1823=(cj5*r01);
IkReal x1824=(cj5*r11);
IkReal x1825=(r00*sj5);
IkReal x1826=(sj1*sj2);
IkReal x1827=((0.39225)*cj2);
IkReal x1828=((1.0)*cj2);
IkReal x1829=(r10*sj5);
IkReal x1830=((0.39225)*x1826);
IkReal x1831=(cj1*x1821);
IkReal x1832=(cj1*x1822);
evalcond[0]=((((-1.0)*x1828*x1831))+((x1821*x1826))+x1825+x1823);
evalcond[1]=((((-1.0)*x1828*x1832))+((x1822*x1826))+x1829+x1824);
evalcond[2]=((((-0.09465)*x1825))+(((-0.09465)*x1823))+((x1827*x1831))+(((-1.0)*px))+(((-0.10915)*x1822))+(((0.425)*x1831))+(((-1.0)*x1821*x1830)));
evalcond[3]=((((-0.09465)*x1829))+(((-0.09465)*x1824))+(((0.10915)*x1821))+((x1827*x1832))+(((-1.0)*py))+(((-1.0)*x1822*x1830))+(((0.425)*x1832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1833=((1.0)*cj5);
IkReal x1834=((((-1.0)*r01*x1833))+(((-1.0)*r00*sj5)));
j4eval[0]=x1834;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1833))))));
j4eval[2]=IKsign(x1834);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1835=((1.0)*cj5);
IkReal x1836=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1835)));
j4eval[0]=x1836;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1835)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1836);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1837=((1.0)*sj0);
IkReal x1838=((1.0)*cj0);
IkReal x1839=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1839;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x1837))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1838)))))+(IKabs(((((-1.0)*r02*x1838))+(((-1.0)*r12*x1837))))));
j4eval[2]=IKsign(x1839);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1840=((-1.0)*r20);
IkReal x1842 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1842)==0){
continue;
}
IkReal x1841=pow(x1842,-0.5);
CheckValue<IkReal> x1843 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1840),IKFAST_ATAN2_MAGTHRESH);
if(!x1843.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1843.value));
IkReal gconst79=(r21*x1841);
IkReal gconst80=(x1840*x1841);
CheckValue<IkReal> x1844 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1844.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1844.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1845=((-1.0)*r20);
IkReal x1846=x1841;
CheckValue<IkReal> x1848 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1845),IKFAST_ATAN2_MAGTHRESH);
if(!x1848.valid){
continue;
}
IkReal x1847=((-1.0)*(x1848.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1847;
IkReal gconst78=x1847;
IkReal gconst79=(r21*x1846);
IkReal gconst80=(x1845*x1846);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1849=((-1.0)*r20);
IkReal x1850=x1841;
CheckValue<IkReal> x1852 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1849),IKFAST_ATAN2_MAGTHRESH);
if(!x1852.valid){
continue;
}
IkReal x1851=((-1.0)*(x1852.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1851;
IkReal gconst78=x1851;
IkReal gconst79=(r21*x1850);
IkReal gconst80=(x1849*x1850);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1853=((-1.0)*r20);
IkReal x1854=x1841;
CheckValue<IkReal> x1856 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1853),IKFAST_ATAN2_MAGTHRESH);
if(!x1856.valid){
continue;
}
IkReal x1855=((-1.0)*(x1856.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1855;
IkReal gconst78=x1855;
IkReal gconst79=(r21*x1854);
IkReal gconst80=(x1853*x1854);
IkReal x1857=r22*r22;
CheckValue<IkReal> x1860=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1857))),-1);
if(!x1860.valid){
continue;
}
IkReal x1858=x1860.value;
IkReal x1859=((((2.0)*x1858*(r20*r20)*(r21*r21)))+((x1858*(r21*r21*r21*r21)))+x1857+((x1858*(r20*r20*r20*r20))));
j4eval[0]=x1859;
j4eval[1]=IKsign(x1859);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1861=(sj1*sj2);
IkReal x1862=(gconst80*r20);
IkReal x1863=(gconst79*r21);
IkReal x1864=(cj1*cj2);
CheckValue<IkReal> x1865 = IKatan2WithCheck(IkReal((((r22*x1861))+(((-1.0)*r22*x1864)))),IkReal(((((-1.0)*x1861*x1862))+((x1862*x1864))+((x1861*x1863))+(((-1.0)*x1863*x1864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1865.valid){
continue;
}
CheckValue<IkReal> x1866=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x1863*x1863)+(((-2.0)*x1862*x1863))+(x1862*x1862))),-1);
if(!x1866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1865.value)+(((1.5707963267949)*(x1866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1867=IKsin(j4);
IkReal x1868=IKcos(j4);
IkReal x1869=(gconst79*r01);
IkReal x1870=(gconst79*r21);
IkReal x1871=((1.0)*cj2);
IkReal x1872=(gconst79*r11);
IkReal x1873=((1.0)*sj0);
IkReal x1874=(cj1*sj2);
IkReal x1875=((1.0)*x1868);
IkReal x1876=(gconst80*x1868);
IkReal x1877=((1.0)*x1867);
IkReal x1878=(gconst80*x1877);
evalcond[0]=((((-1.0)*r22*x1875))+(((-1.0)*r20*x1878))+((x1867*x1870)));
evalcond[1]=(cj0+(((-1.0)*r10*x1878))+(((-1.0)*r12*x1875))+((x1867*x1872)));
evalcond[2]=(((x1867*x1869))+(((-1.0)*x1873))+(((-1.0)*r02*x1875))+(((-1.0)*r00*x1878)));
evalcond[3]=((((-1.0)*r22*x1877))+(((-1.0)*x1870*x1875))+((sj1*sj2))+((r20*x1876))+(((-1.0)*cj1*x1871)));
evalcond[4]=((((-1.0)*x1869*x1875))+(((-1.0)*cj0*x1874))+(((-1.0)*r02*x1877))+(((-1.0)*cj0*sj1*x1871))+((r00*x1876)));
evalcond[5]=((((-1.0)*x1873*x1874))+(((-1.0)*x1872*x1875))+(((-1.0)*sj0*sj1*x1871))+(((-1.0)*r12*x1877))+((r10*x1876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1879=((1.0)*gconst80);
CheckValue<IkReal> x1880 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1879))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1880.valid){
continue;
}
CheckValue<IkReal> x1881=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x1879)))),-1);
if(!x1881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1880.value)+(((1.5707963267949)*(x1881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1882=IKsin(j4);
IkReal x1883=IKcos(j4);
IkReal x1884=(gconst79*r01);
IkReal x1885=(gconst79*r21);
IkReal x1886=((1.0)*cj2);
IkReal x1887=(gconst79*r11);
IkReal x1888=((1.0)*sj0);
IkReal x1889=(cj1*sj2);
IkReal x1890=((1.0)*x1883);
IkReal x1891=(gconst80*x1883);
IkReal x1892=((1.0)*x1882);
IkReal x1893=(gconst80*x1892);
evalcond[0]=(((x1882*x1885))+(((-1.0)*r22*x1890))+(((-1.0)*r20*x1893)));
evalcond[1]=(cj0+((x1882*x1887))+(((-1.0)*r10*x1893))+(((-1.0)*r12*x1890)));
evalcond[2]=((((-1.0)*r02*x1890))+((x1882*x1884))+(((-1.0)*r00*x1893))+(((-1.0)*x1888)));
evalcond[3]=(((r20*x1891))+(((-1.0)*cj1*x1886))+((sj1*sj2))+(((-1.0)*r22*x1892))+(((-1.0)*x1885*x1890)));
evalcond[4]=((((-1.0)*r02*x1892))+(((-1.0)*cj0*sj1*x1886))+(((-1.0)*cj0*x1889))+((r00*x1891))+(((-1.0)*x1884*x1890)));
evalcond[5]=((((-1.0)*sj0*sj1*x1886))+(((-1.0)*x1888*x1889))+((r10*x1891))+(((-1.0)*r12*x1892))+(((-1.0)*x1887*x1890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1894=((1.0)*gconst80);
CheckValue<IkReal> x1895 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1894))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1895.valid){
continue;
}
CheckValue<IkReal> x1896=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1894)))),-1);
if(!x1896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1895.value)+(((1.5707963267949)*(x1896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1897=IKsin(j4);
IkReal x1898=IKcos(j4);
IkReal x1899=(gconst79*r01);
IkReal x1900=(gconst79*r21);
IkReal x1901=((1.0)*cj2);
IkReal x1902=(gconst79*r11);
IkReal x1903=((1.0)*sj0);
IkReal x1904=(cj1*sj2);
IkReal x1905=((1.0)*x1898);
IkReal x1906=(gconst80*x1898);
IkReal x1907=((1.0)*x1897);
IkReal x1908=(gconst80*x1907);
evalcond[0]=((((-1.0)*r22*x1905))+(((-1.0)*r20*x1908))+((x1897*x1900)));
evalcond[1]=(cj0+(((-1.0)*r10*x1908))+(((-1.0)*r12*x1905))+((x1897*x1902)));
evalcond[2]=(((x1897*x1899))+(((-1.0)*r02*x1905))+(((-1.0)*x1903))+(((-1.0)*r00*x1908)));
evalcond[3]=((((-1.0)*x1900*x1905))+(((-1.0)*cj1*x1901))+(((-1.0)*r22*x1907))+((sj1*sj2))+((r20*x1906)));
evalcond[4]=((((-1.0)*x1899*x1905))+((r00*x1906))+(((-1.0)*cj0*x1904))+(((-1.0)*cj0*sj1*x1901))+(((-1.0)*r02*x1907)));
evalcond[5]=((((-1.0)*x1902*x1905))+(((-1.0)*x1903*x1904))+(((-1.0)*r12*x1907))+(((-1.0)*sj0*sj1*x1901))+((r10*x1906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1909=((-1.0)*r21);
IkReal x1911 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1911)==0){
continue;
}
IkReal x1910=pow(x1911,-0.5);
CheckValue<IkReal> x1912 = IKatan2WithCheck(IkReal(x1909),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1912.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1912.value))));
IkReal gconst82=(x1909*x1910);
IkReal gconst83=((1.0)*r20*x1910);
CheckValue<IkReal> x1913 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1913.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1913.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1914=((-1.0)*r21);
CheckValue<IkReal> x1917 = IKatan2WithCheck(IkReal(x1914),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1917.valid){
continue;
}
IkReal x1915=((1.0)*(x1917.value));
IkReal x1916=x1910;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1915)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1915)));
IkReal gconst82=(x1914*x1916);
IkReal gconst83=((1.0)*r20*x1916);
IkReal x1918=r22*r22;
IkReal x1919=((1.0)*x1918);
CheckValue<IkReal> x1923=IKPowWithIntegerCheck(((-1.0)+x1918),-1);
if(!x1923.valid){
continue;
}
IkReal x1920=x1923.value;
if((((1.0)+(((-1.0)*x1919)))) < -0.00001)
continue;
IkReal x1921=IKsqrt(((1.0)+(((-1.0)*x1919))));
IkReal x1922=(cj0*x1920*x1921);
j4eval[0]=((IKabs((x1922+(((-1.0)*x1919*x1922)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1924=((-1.0)*r21);
CheckValue<IkReal> x1927 = IKatan2WithCheck(IkReal(x1924),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1927.valid){
continue;
}
IkReal x1925=((1.0)*(x1927.value));
IkReal x1926=x1910;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1925)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1925)));
IkReal gconst82=(x1924*x1926);
IkReal gconst83=((1.0)*r20*x1926);
IkReal x1928=r22*r22;
IkReal x1929=((1.0)*x1928);
CheckValue<IkReal> x1933=IKPowWithIntegerCheck(((-1.0)+x1928),-1);
if(!x1933.valid){
continue;
}
IkReal x1930=x1933.value;
if((((1.0)+(((-1.0)*x1929)))) < -0.00001)
continue;
IkReal x1931=IKsqrt(((1.0)+(((-1.0)*x1929))));
IkReal x1932=(sj0*x1930*x1931);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x1932+(((-1.0)*x1929*x1932))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1934=((-1.0)*r21);
CheckValue<IkReal> x1937 = IKatan2WithCheck(IkReal(x1934),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1937.valid){
continue;
}
IkReal x1935=((1.0)*(x1937.value));
IkReal x1936=x1910;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1935)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1935)));
IkReal gconst82=(x1934*x1936);
IkReal gconst83=((1.0)*r20*x1936);
IkReal x1938=r22*r22;
IkReal x1939=(r12*sj0);
IkReal x1940=(cj0*r02);
CheckValue<IkReal> x1944=IKPowWithIntegerCheck(((-1.0)+x1938),-1);
if(!x1944.valid){
continue;
}
IkReal x1941=x1944.value;
if((((1.0)+(((-1.0)*x1938)))) < -0.00001)
continue;
IkReal x1942=IKsqrt(((1.0)+(((-1.0)*x1938))));
IkReal x1943=(r22*x1941*x1942);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x1939*x1943))+((x1940*x1943)))))+(IKabs(((((-1.0)*x1939))+(((-1.0)*x1940))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1945=((1.0)*sj0);
IkReal x1946=((1.0)*cj0);
CheckValue<IkReal> x1947=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1947.valid){
continue;
}
CheckValue<IkReal> x1948 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1946))+(((-1.0)*r12*x1945)))),IkReal(((((-1.0)*gconst82*r01*x1946))+(((-1.0)*gconst82*r11*x1945))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1947.value)))+(x1948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1949=IKsin(j4);
IkReal x1950=IKcos(j4);
IkReal x1951=(gconst82*r11);
IkReal x1952=((1.0)*cj2);
IkReal x1953=((1.0)*sj0);
IkReal x1954=(cj1*sj2);
IkReal x1955=((1.0)*x1950);
IkReal x1956=(gconst83*x1950);
IkReal x1957=(gconst82*x1949);
IkReal x1958=((1.0)*x1949);
evalcond[0]=((((-1.0)*r22*x1955))+((r21*x1957))+(((-1.0)*gconst83*r20*x1958)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1958))+(((-1.0)*r12*x1955))+((x1949*x1951)));
evalcond[2]=((((-1.0)*x1953))+(((-1.0)*r02*x1955))+((r01*x1957))+(((-1.0)*gconst83*r00*x1958)));
evalcond[3]=((((-1.0)*r22*x1958))+((r20*x1956))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1955))+(((-1.0)*cj1*x1952)));
evalcond[4]=((((-1.0)*cj0*sj1*x1952))+(((-1.0)*cj0*x1954))+(((-1.0)*r02*x1958))+(((-1.0)*gconst82*r01*x1955))+((r00*x1956)));
evalcond[5]=(((r10*x1956))+(((-1.0)*x1951*x1955))+(((-1.0)*x1953*x1954))+(((-1.0)*r12*x1958))+(((-1.0)*sj0*sj1*x1952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1959=((1.0)*gconst83);
CheckValue<IkReal> x1960 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1959)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1960.valid){
continue;
}
CheckValue<IkReal> x1961=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1959)))),-1);
if(!x1961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1960.value)+(((1.5707963267949)*(x1961.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1962=IKsin(j4);
IkReal x1963=IKcos(j4);
IkReal x1964=(gconst82*r11);
IkReal x1965=((1.0)*cj2);
IkReal x1966=((1.0)*sj0);
IkReal x1967=(cj1*sj2);
IkReal x1968=((1.0)*x1963);
IkReal x1969=(gconst83*x1963);
IkReal x1970=(gconst82*x1962);
IkReal x1971=((1.0)*x1962);
evalcond[0]=((((-1.0)*r22*x1968))+((r21*x1970))+(((-1.0)*gconst83*r20*x1971)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1971))+((x1962*x1964))+(((-1.0)*r12*x1968)));
evalcond[2]=((((-1.0)*r02*x1968))+(((-1.0)*x1966))+((r01*x1970))+(((-1.0)*gconst83*r00*x1971)));
evalcond[3]=((((-1.0)*r22*x1971))+((r20*x1969))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1968))+(((-1.0)*cj1*x1965)));
evalcond[4]=((((-1.0)*cj0*x1967))+(((-1.0)*cj0*sj1*x1965))+(((-1.0)*r02*x1971))+((r00*x1969))+(((-1.0)*gconst82*r01*x1968)));
evalcond[5]=((((-1.0)*x1964*x1968))+(((-1.0)*sj0*sj1*x1965))+((r10*x1969))+(((-1.0)*x1966*x1967))+(((-1.0)*r12*x1971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1972=((1.0)*gconst83);
CheckValue<IkReal> x1973 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1972))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1973.valid){
continue;
}
CheckValue<IkReal> x1974=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1972))+(((-1.0)*gconst82*r00)))),-1);
if(!x1974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1973.value)+(((1.5707963267949)*(x1974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1975=IKsin(j4);
IkReal x1976=IKcos(j4);
IkReal x1977=(gconst82*r11);
IkReal x1978=((1.0)*cj2);
IkReal x1979=((1.0)*sj0);
IkReal x1980=(cj1*sj2);
IkReal x1981=((1.0)*x1976);
IkReal x1982=(gconst83*x1976);
IkReal x1983=(gconst82*x1975);
IkReal x1984=((1.0)*x1975);
evalcond[0]=(((r21*x1983))+(((-1.0)*gconst83*r20*x1984))+(((-1.0)*r22*x1981)));
evalcond[1]=(cj0+((x1975*x1977))+(((-1.0)*r12*x1981))+(((-1.0)*gconst83*r10*x1984)));
evalcond[2]=((((-1.0)*r02*x1981))+(((-1.0)*gconst83*r00*x1984))+(((-1.0)*x1979))+((r01*x1983)));
evalcond[3]=((((-1.0)*gconst82*r21*x1981))+((sj1*sj2))+(((-1.0)*cj1*x1978))+(((-1.0)*r22*x1984))+((r20*x1982)));
evalcond[4]=((((-1.0)*cj0*sj1*x1978))+(((-1.0)*r02*x1984))+(((-1.0)*gconst82*r01*x1981))+((r00*x1982))+(((-1.0)*cj0*x1980)));
evalcond[5]=((((-1.0)*sj0*sj1*x1978))+(((-1.0)*x1979*x1980))+((r10*x1982))+(((-1.0)*r12*x1984))+(((-1.0)*x1977*x1981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1985=((-1.0)*r10);
IkReal x1987 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1987)==0){
continue;
}
IkReal x1986=pow(x1987,-0.5);
CheckValue<IkReal> x1988 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1985),IKFAST_ATAN2_MAGTHRESH);
if(!x1988.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1988.value));
IkReal gconst85=(r11*x1986);
IkReal gconst86=(x1985*x1986);
CheckValue<IkReal> x1989 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1989.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1989.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1990=((-1.0)*r10);
IkReal x1991=x1986;
CheckValue<IkReal> x1993 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1990),IKFAST_ATAN2_MAGTHRESH);
if(!x1993.valid){
continue;
}
IkReal x1992=((-1.0)*(x1993.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1992;
IkReal gconst84=x1992;
IkReal gconst85=(r11*x1991);
IkReal gconst86=(x1990*x1991);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1994=((1.0)*sj0);
IkReal x1995=((1.0)*gconst85);
CheckValue<IkReal> x1996 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1994)))),IkReal((((cj0*gconst86*r00))+((gconst86*r10*sj0))+(((-1.0)*cj0*r01*x1995))+(((-1.0)*gconst85*r11*x1994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1996.valid){
continue;
}
CheckValue<IkReal> x1997=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1995)))),-1);
if(!x1997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1996.value)+(((1.5707963267949)*(x1997.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1998=IKsin(j4);
IkReal x1999=IKcos(j4);
IkReal x2000=(gconst85*r21);
IkReal x2001=(gconst86*r00);
IkReal x2002=(gconst86*r10);
IkReal x2003=((1.0)*cj2);
IkReal x2004=(gconst85*r11);
IkReal x2005=(gconst85*r01);
IkReal x2006=((1.0)*sj0);
IkReal x2007=(gconst86*r20);
IkReal x2008=(cj1*sj2);
IkReal x2009=((1.0)*x1999);
IkReal x2010=((1.0)*x1998);
evalcond[0]=((((-1.0)*r22*x2009))+(((-1.0)*x2007*x2010))+((x1998*x2000)));
evalcond[1]=(cj0+(((-1.0)*r12*x2009))+(((-1.0)*x2002*x2010))+((x1998*x2004)));
evalcond[2]=((((-1.0)*r02*x2009))+(((-1.0)*x2006))+(((-1.0)*x2001*x2010))+((x1998*x2005)));
evalcond[3]=(((x1999*x2007))+((sj1*sj2))+(((-1.0)*cj1*x2003))+(((-1.0)*x2000*x2009))+(((-1.0)*r22*x2010)));
evalcond[4]=((((-1.0)*x2005*x2009))+((x1999*x2001))+(((-1.0)*cj0*x2008))+(((-1.0)*r02*x2010))+(((-1.0)*cj0*sj1*x2003)));
evalcond[5]=((((-1.0)*x2006*x2008))+(((-1.0)*x2004*x2009))+((x1999*x2002))+(((-1.0)*sj0*sj1*x2003))+(((-1.0)*r12*x2010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2011=((1.0)*gconst86);
CheckValue<IkReal> x2012 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2011))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2012.valid){
continue;
}
CheckValue<IkReal> x2013=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x2011)))),-1);
if(!x2013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2012.value)+(((1.5707963267949)*(x2013.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2014=IKsin(j4);
IkReal x2015=IKcos(j4);
IkReal x2016=(gconst85*r21);
IkReal x2017=(gconst86*r00);
IkReal x2018=(gconst86*r10);
IkReal x2019=((1.0)*cj2);
IkReal x2020=(gconst85*r11);
IkReal x2021=(gconst85*r01);
IkReal x2022=((1.0)*sj0);
IkReal x2023=(gconst86*r20);
IkReal x2024=(cj1*sj2);
IkReal x2025=((1.0)*x2015);
IkReal x2026=((1.0)*x2014);
evalcond[0]=((((-1.0)*x2023*x2026))+(((-1.0)*r22*x2025))+((x2014*x2016)));
evalcond[1]=(cj0+(((-1.0)*r12*x2025))+(((-1.0)*x2018*x2026))+((x2014*x2020)));
evalcond[2]=((((-1.0)*r02*x2025))+(((-1.0)*x2017*x2026))+(((-1.0)*x2022))+((x2014*x2021)));
evalcond[3]=((((-1.0)*r22*x2026))+(((-1.0)*x2016*x2025))+((sj1*sj2))+(((-1.0)*cj1*x2019))+((x2015*x2023)));
evalcond[4]=((((-1.0)*x2021*x2025))+((x2015*x2017))+(((-1.0)*cj0*sj1*x2019))+(((-1.0)*r02*x2026))+(((-1.0)*cj0*x2024)));
evalcond[5]=((((-1.0)*x2022*x2024))+((x2015*x2018))+(((-1.0)*r12*x2026))+(((-1.0)*x2020*x2025))+(((-1.0)*sj0*sj1*x2019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2027=((-1.0)*r11);
IkReal x2029 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2029)==0){
continue;
}
IkReal x2028=pow(x2029,-0.5);
CheckValue<IkReal> x2030 = IKatan2WithCheck(IkReal(x2027),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2030.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2030.value))));
IkReal gconst88=(x2027*x2028);
IkReal gconst89=((1.0)*r10*x2028);
CheckValue<IkReal> x2031 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2031.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2031.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2032=((-1.0)*r11);
CheckValue<IkReal> x2035 = IKatan2WithCheck(IkReal(x2032),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2035.valid){
continue;
}
IkReal x2033=((1.0)*(x2035.value));
IkReal x2034=x2028;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2033)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2033)));
IkReal gconst88=(x2032*x2034);
IkReal gconst89=((1.0)*r10*x2034);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2036=((-1.0)*r11);
CheckValue<IkReal> x2039 = IKatan2WithCheck(IkReal(x2036),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2039.valid){
continue;
}
IkReal x2037=((1.0)*(x2039.value));
IkReal x2038=x2028;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2037)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2037)));
IkReal gconst88=(x2036*x2038);
IkReal gconst89=((1.0)*r10*x2038);
IkReal x2040=r12*r12;
IkReal x2041=((1.0)*sj0);
IkReal x2042=(cj0*r02);
IkReal x2043=x2028;
j4eval[0]=((IKabs(((((-1.0)*x2041*x2043))+((sj0*x2040*x2043))+((r12*x2042*x2043)))))+(IKabs(((((-1.0)*x2042))+(((-1.0)*r12*x2041))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2044=((-1.0)*r11);
CheckValue<IkReal> x2047 = IKatan2WithCheck(IkReal(x2044),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2047.valid){
continue;
}
IkReal x2045=((1.0)*(x2047.value));
IkReal x2046=x2028;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2045)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2045)));
IkReal gconst88=(x2044*x2046);
IkReal gconst89=((1.0)*r10*x2046);
IkReal x2048=r12*r12;
IkReal x2049=(cj1*cj2*r22);
IkReal x2050=(r22*sj1*sj2);
CheckValue<IkReal> x2054=IKPowWithIntegerCheck(((-1.0)+x2048),-1);
if(!x2054.valid){
continue;
}
IkReal x2051=x2054.value;
if((((1.0)+(((-1.0)*x2048)))) < -0.00001)
continue;
IkReal x2052=IKsqrt(((1.0)+(((-1.0)*x2048))));
IkReal x2053=(r12*x2051*x2052);
j4eval[0]=((IKabs((((x2049*x2053))+(((-1.0)*x2050*x2053)))))+(IKabs((x2050+(((-1.0)*x2049))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2055=(cj1*cj2);
IkReal x2056=(gconst89*r20);
IkReal x2057=(gconst88*r21);
IkReal x2058=(sj1*sj2);
CheckValue<IkReal> x2059=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2056*x2056)+(((-2.0)*x2056*x2057))+(x2057*x2057))),-1);
if(!x2059.valid){
continue;
}
CheckValue<IkReal> x2060 = IKatan2WithCheck(IkReal((((r22*x2058))+(((-1.0)*r22*x2055)))),IkReal(((((-1.0)*x2055*x2057))+((x2055*x2056))+(((-1.0)*x2056*x2058))+((x2057*x2058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2059.value)))+(x2060.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2061=IKsin(j4);
IkReal x2062=IKcos(j4);
IkReal x2063=((1.0)*sj0);
IkReal x2064=((1.0)*cj2);
IkReal x2065=(gconst89*r20);
IkReal x2066=(gconst89*r10);
IkReal x2067=(gconst89*r00);
IkReal x2068=(cj1*sj2);
IkReal x2069=((1.0)*x2062);
IkReal x2070=((1.0)*x2061);
IkReal x2071=(gconst88*x2061);
evalcond[0]=((((-1.0)*r22*x2069))+(((-1.0)*x2065*x2070))+((r21*x2071)));
evalcond[1]=((((-1.0)*r12*x2069))+cj0+((r11*x2071))+(((-1.0)*x2066*x2070)));
evalcond[2]=((((-1.0)*r02*x2069))+(((-1.0)*x2063))+((r01*x2071))+(((-1.0)*x2067*x2070)));
evalcond[3]=((((-1.0)*gconst88*r21*x2069))+(((-1.0)*r22*x2070))+((sj1*sj2))+(((-1.0)*cj1*x2064))+((x2062*x2065)));
evalcond[4]=((((-1.0)*cj0*x2068))+(((-1.0)*r02*x2070))+(((-1.0)*cj0*sj1*x2064))+((x2062*x2067))+(((-1.0)*gconst88*r01*x2069)));
evalcond[5]=((((-1.0)*r12*x2070))+(((-1.0)*x2063*x2068))+((x2062*x2066))+(((-1.0)*gconst88*r11*x2069))+(((-1.0)*cj2*sj1*x2063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2072=((1.0)*sj0);
IkReal x2073=((1.0)*cj0);
CheckValue<IkReal> x2074 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2073))+(((-1.0)*r12*x2072)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r11*x2072))+(((-1.0)*gconst88*r01*x2073))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2074.valid){
continue;
}
CheckValue<IkReal> x2075=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2074.value)+(((1.5707963267949)*(x2075.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2076=IKsin(j4);
IkReal x2077=IKcos(j4);
IkReal x2078=((1.0)*sj0);
IkReal x2079=((1.0)*cj2);
IkReal x2080=(gconst89*r20);
IkReal x2081=(gconst89*r10);
IkReal x2082=(gconst89*r00);
IkReal x2083=(cj1*sj2);
IkReal x2084=((1.0)*x2077);
IkReal x2085=((1.0)*x2076);
IkReal x2086=(gconst88*x2076);
evalcond[0]=((((-1.0)*r22*x2084))+((r21*x2086))+(((-1.0)*x2080*x2085)));
evalcond[1]=(cj0+(((-1.0)*x2081*x2085))+(((-1.0)*r12*x2084))+((r11*x2086)));
evalcond[2]=((((-1.0)*r02*x2084))+(((-1.0)*x2078))+((r01*x2086))+(((-1.0)*x2082*x2085)));
evalcond[3]=((((-1.0)*r22*x2085))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2084))+((x2077*x2080))+(((-1.0)*cj1*x2079)));
evalcond[4]=((((-1.0)*r02*x2085))+(((-1.0)*gconst88*r01*x2084))+((x2077*x2082))+(((-1.0)*cj0*x2083))+(((-1.0)*cj0*sj1*x2079)));
evalcond[5]=((((-1.0)*x2078*x2083))+(((-1.0)*gconst88*r11*x2084))+((x2077*x2081))+(((-1.0)*r12*x2085))+(((-1.0)*cj2*sj1*x2078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2087=((1.0)*gconst89);
CheckValue<IkReal> x2088 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2087))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2088.valid){
continue;
}
CheckValue<IkReal> x2089=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2087))+(((-1.0)*gconst88*r00)))),-1);
if(!x2089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2088.value)+(((1.5707963267949)*(x2089.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2090=IKsin(j4);
IkReal x2091=IKcos(j4);
IkReal x2092=((1.0)*sj0);
IkReal x2093=((1.0)*cj2);
IkReal x2094=(gconst89*r20);
IkReal x2095=(gconst89*r10);
IkReal x2096=(gconst89*r00);
IkReal x2097=(cj1*sj2);
IkReal x2098=((1.0)*x2091);
IkReal x2099=((1.0)*x2090);
IkReal x2100=(gconst88*x2090);
evalcond[0]=(((r21*x2100))+(((-1.0)*x2094*x2099))+(((-1.0)*r22*x2098)));
evalcond[1]=(cj0+((r11*x2100))+(((-1.0)*x2095*x2099))+(((-1.0)*r12*x2098)));
evalcond[2]=((((-1.0)*x2092))+(((-1.0)*x2096*x2099))+((r01*x2100))+(((-1.0)*r02*x2098)));
evalcond[3]=((((-1.0)*gconst88*r21*x2098))+((x2091*x2094))+((sj1*sj2))+(((-1.0)*cj1*x2093))+(((-1.0)*r22*x2099)));
evalcond[4]=(((x2091*x2096))+(((-1.0)*gconst88*r01*x2098))+(((-1.0)*cj0*sj1*x2093))+(((-1.0)*r02*x2099))+(((-1.0)*cj0*x2097)));
evalcond[5]=((((-1.0)*cj2*sj1*x2092))+(((-1.0)*gconst88*r11*x2098))+((x2091*x2095))+(((-1.0)*x2092*x2097))+(((-1.0)*r12*x2099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2101=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2101;
j4eval[1]=IKsign(x2101);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2102=((1.0)*cj5);
IkReal x2103=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2102)));
j4eval[0]=x2103;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2102)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2103);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2104=cj5*cj5;
IkReal x2105=r11*r11;
IkReal x2106=(r11*sj5);
IkReal x2107=(cj5*r10);
IkReal x2108=((r12*r12)+x2105+(((-1.0)*x2104*x2105))+(((-2.0)*x2106*x2107))+((x2104*(r10*r10))));
j4eval[0]=x2108;
j4eval[1]=IKsign(x2108);
j4eval[2]=((IKabs(r12))+(IKabs((x2107+(((-1.0)*x2106))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2109=cj5*cj5;
IkReal x2110=r11*r11;
IkReal x2111=(cj5*r10);
IkReal x2112=(r11*sj5);
CheckValue<IkReal> x2113=IKPowWithIntegerCheck(IKsign((((x2109*(r10*r10)))+(r12*r12)+(((-2.0)*x2111*x2112))+(((-1.0)*x2109*x2110))+x2110)),-1);
if(!x2113.valid){
continue;
}
CheckValue<IkReal> x2114 = IKatan2WithCheck(IkReal((x2111+(((-1.0)*x2112)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2113.value)))+(x2114.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2115=IKsin(j4);
IkReal x2116=IKcos(j4);
IkReal x2117=(cj5*r10);
IkReal x2118=(r01*sj5);
IkReal x2119=((1.0)*cj2);
IkReal x2120=(cj5*r00);
IkReal x2121=(cj5*r20);
IkReal x2122=((1.0)*x2116);
IkReal x2123=((1.0)*x2115);
IkReal x2124=(sj5*x2115);
evalcond[0]=((((-1.0)*r22*x2122))+((r21*x2124))+(((-1.0)*x2121*x2123)));
evalcond[1]=((((-1.0)*x2120*x2123))+(((-1.0)*r02*x2122))+((x2115*x2118)));
evalcond[2]=(((x2116*x2117))+(((-1.0)*r12*x2123))+(((-1.0)*r11*sj5*x2122)));
evalcond[3]=((1.0)+(((-1.0)*x2117*x2123))+((r11*x2124))+(((-1.0)*r12*x2122)));
evalcond[4]=((((-1.0)*r22*x2123))+((sj1*sj2))+(((-1.0)*cj1*x2119))+(((-1.0)*r21*sj5*x2122))+((x2116*x2121)));
evalcond[5]=((((-1.0)*sj1*x2119))+(((-1.0)*x2118*x2122))+(((-1.0)*r02*x2123))+(((-1.0)*cj1*sj2))+((x2116*x2120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2125=((1.0)*cj5);
CheckValue<IkReal> x2126 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2125)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2126.valid){
continue;
}
CheckValue<IkReal> x2127=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2125))+(((-1.0)*r00*sj5)))),-1);
if(!x2127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2126.value)+(((1.5707963267949)*(x2127.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2128=IKsin(j4);
IkReal x2129=IKcos(j4);
IkReal x2130=(cj5*r10);
IkReal x2131=(r01*sj5);
IkReal x2132=((1.0)*cj2);
IkReal x2133=(cj5*r00);
IkReal x2134=(cj5*r20);
IkReal x2135=((1.0)*x2129);
IkReal x2136=((1.0)*x2128);
IkReal x2137=(sj5*x2128);
evalcond[0]=((((-1.0)*r22*x2135))+((r21*x2137))+(((-1.0)*x2134*x2136)));
evalcond[1]=(((x2128*x2131))+(((-1.0)*x2133*x2136))+(((-1.0)*r02*x2135)));
evalcond[2]=((((-1.0)*r12*x2136))+(((-1.0)*r11*sj5*x2135))+((x2129*x2130)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2135))+((r11*x2137))+(((-1.0)*x2130*x2136)));
evalcond[4]=((((-1.0)*r22*x2136))+((sj1*sj2))+(((-1.0)*cj1*x2132))+(((-1.0)*r21*sj5*x2135))+((x2129*x2134)));
evalcond[5]=((((-1.0)*sj1*x2132))+(((-1.0)*cj1*sj2))+((x2129*x2133))+(((-1.0)*x2131*x2135))+(((-1.0)*r02*x2136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2138=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2138.valid){
continue;
}
CheckValue<IkReal> x2139 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2138.value)))+(x2139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2140=IKsin(j4);
IkReal x2141=IKcos(j4);
IkReal x2142=(cj5*r10);
IkReal x2143=(r01*sj5);
IkReal x2144=((1.0)*cj2);
IkReal x2145=(cj5*r00);
IkReal x2146=(cj5*r20);
IkReal x2147=((1.0)*x2141);
IkReal x2148=((1.0)*x2140);
IkReal x2149=(sj5*x2140);
evalcond[0]=((((-1.0)*r22*x2147))+((r21*x2149))+(((-1.0)*x2146*x2148)));
evalcond[1]=((((-1.0)*r02*x2147))+((x2140*x2143))+(((-1.0)*x2145*x2148)));
evalcond[2]=((((-1.0)*r11*sj5*x2147))+(((-1.0)*r12*x2148))+((x2141*x2142)));
evalcond[3]=((1.0)+((r11*x2149))+(((-1.0)*x2142*x2148))+(((-1.0)*r12*x2147)));
evalcond[4]=(((sj1*sj2))+((x2141*x2146))+(((-1.0)*r22*x2148))+(((-1.0)*cj1*x2144))+(((-1.0)*r21*sj5*x2147)));
evalcond[5]=((((-1.0)*x2143*x2147))+(((-1.0)*r02*x2148))+(((-1.0)*sj1*x2144))+(((-1.0)*cj1*sj2))+((x2141*x2145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2150=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2150;
j4eval[1]=IKsign(x2150);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2151=((1.0)*cj5);
IkReal x2152=((((-1.0)*r21*x2151))+(((-1.0)*r20*sj5)));
j4eval[0]=x2152;
j4eval[1]=((IKabs(((((-1.0)*r00*x2151))+((r01*sj5)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2152);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2153=cj5*cj5;
IkReal x2154=r11*r11;
IkReal x2155=(cj5*r10);
IkReal x2156=(r11*sj5);
IkReal x2157=((((-1.0)*x2153*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x2155*x2156))+((x2153*x2154))+(((-1.0)*x2154)));
j4eval[0]=x2157;
j4eval[1]=((IKabs(r12))+(IKabs((x2155+(((-1.0)*x2156))))));
j4eval[2]=IKsign(x2157);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2158=cj5*cj5;
IkReal x2159=r11*r11;
IkReal x2160=(cj5*r10);
IkReal x2161=(r11*sj5);
CheckValue<IkReal> x2162=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2158*(r10*r10)))+(((2.0)*x2160*x2161))+((x2158*x2159))+(((-1.0)*(r12*r12)))+(((-1.0)*x2159)))),-1);
if(!x2162.valid){
continue;
}
CheckValue<IkReal> x2163 = IKatan2WithCheck(IkReal((x2160+(((-1.0)*x2161)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2162.value)))+(x2163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2164=IKsin(j4);
IkReal x2165=IKcos(j4);
IkReal x2166=(cj5*r10);
IkReal x2167=(r01*sj5);
IkReal x2168=(cj5*r00);
IkReal x2169=(cj5*r20);
IkReal x2170=((1.0)*x2165);
IkReal x2171=((1.0)*x2164);
IkReal x2172=(sj5*x2164);
evalcond[0]=(((r21*x2172))+(((-1.0)*x2169*x2171))+(((-1.0)*r22*x2170)));
evalcond[1]=((((-1.0)*x2168*x2171))+((x2164*x2167))+(((-1.0)*r02*x2170)));
evalcond[2]=((((-1.0)*r11*sj5*x2170))+((x2165*x2166))+(((-1.0)*r12*x2171)));
evalcond[3]=((-1.0)+((r11*x2172))+(((-1.0)*x2166*x2171))+(((-1.0)*r12*x2170)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2165*x2168))+(((-1.0)*r02*x2171))+(((-1.0)*x2167*x2170)));
evalcond[5]=((((-1.0)*r21*sj5*x2170))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2165*x2169))+(((-1.0)*r22*x2171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2173=((1.0)*cj5);
CheckValue<IkReal> x2174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2173))+(((-1.0)*r20*sj5)))),-1);
if(!x2174.valid){
continue;
}
CheckValue<IkReal> x2175 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2174.value)))+(x2175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2176=IKsin(j4);
IkReal x2177=IKcos(j4);
IkReal x2178=(cj5*r10);
IkReal x2179=(r01*sj5);
IkReal x2180=(cj5*r00);
IkReal x2181=(cj5*r20);
IkReal x2182=((1.0)*x2177);
IkReal x2183=((1.0)*x2176);
IkReal x2184=(sj5*x2176);
evalcond[0]=(((r21*x2184))+(((-1.0)*r22*x2182))+(((-1.0)*x2181*x2183)));
evalcond[1]=((((-1.0)*x2180*x2183))+((x2176*x2179))+(((-1.0)*r02*x2182)));
evalcond[2]=((((-1.0)*r11*sj5*x2182))+((x2177*x2178))+(((-1.0)*r12*x2183)));
evalcond[3]=((-1.0)+((r11*x2184))+(((-1.0)*x2178*x2183))+(((-1.0)*r12*x2182)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2177*x2180))+(((-1.0)*r02*x2183))+(((-1.0)*x2179*x2182)));
evalcond[5]=((((-1.0)*r21*sj5*x2182))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2177*x2181))+(((-1.0)*r22*x2183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2185 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2185.valid){
continue;
}
CheckValue<IkReal> x2186=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2185.value)+(((1.5707963267949)*(x2186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2187=IKsin(j4);
IkReal x2188=IKcos(j4);
IkReal x2189=(cj5*r10);
IkReal x2190=(r01*sj5);
IkReal x2191=(cj5*r00);
IkReal x2192=(cj5*r20);
IkReal x2193=((1.0)*x2188);
IkReal x2194=((1.0)*x2187);
IkReal x2195=(sj5*x2187);
evalcond[0]=((((-1.0)*x2192*x2194))+((r21*x2195))+(((-1.0)*r22*x2193)));
evalcond[1]=((((-1.0)*x2191*x2194))+((x2187*x2190))+(((-1.0)*r02*x2193)));
evalcond[2]=(((x2188*x2189))+(((-1.0)*r12*x2194))+(((-1.0)*r11*sj5*x2193)));
evalcond[3]=((-1.0)+(((-1.0)*x2189*x2194))+((r11*x2195))+(((-1.0)*r12*x2193)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2194))+((x2188*x2191))+(((-1.0)*x2190*x2193)));
evalcond[5]=((((-1.0)*r21*sj5*x2193))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2188*x2192))+(((-1.0)*r22*x2194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2196=((-1.0)*r00);
IkReal x2198 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2198)==0){
continue;
}
IkReal x2197=pow(x2198,-0.5);
CheckValue<IkReal> x2199 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2196),IKFAST_ATAN2_MAGTHRESH);
if(!x2199.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2199.value));
IkReal gconst91=(r01*x2197);
IkReal gconst92=(x2196*x2197);
CheckValue<IkReal> x2200 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2200.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2200.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2201=((-1.0)*r00);
IkReal x2202=x2197;
CheckValue<IkReal> x2204 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2201),IKFAST_ATAN2_MAGTHRESH);
if(!x2204.valid){
continue;
}
IkReal x2203=((-1.0)*(x2204.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2203;
IkReal gconst90=x2203;
IkReal gconst91=(r01*x2202);
IkReal gconst92=(x2201*x2202);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2205=((1.0)*sj0);
IkReal x2206=((1.0)*cj0);
CheckValue<IkReal> x2207=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2207.valid){
continue;
}
CheckValue<IkReal> x2208 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2205))+(((-1.0)*r02*x2206)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r01*x2206))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2205)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2207.value)))+(x2208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2209=IKsin(j4);
IkReal x2210=IKcos(j4);
IkReal x2211=((1.0)*cj2);
IkReal x2212=(gconst92*r00);
IkReal x2213=(gconst92*r20);
IkReal x2214=((1.0)*sj0);
IkReal x2215=(gconst92*r10);
IkReal x2216=(cj1*sj2);
IkReal x2217=((1.0)*x2210);
IkReal x2218=(gconst91*x2209);
IkReal x2219=((1.0)*x2209);
evalcond[0]=((((-1.0)*r22*x2217))+(((-1.0)*x2213*x2219))+((r21*x2218)));
evalcond[1]=(cj0+(((-1.0)*x2215*x2219))+(((-1.0)*r12*x2217))+((r11*x2218)));
evalcond[2]=(((r01*x2218))+(((-1.0)*x2214))+(((-1.0)*r02*x2217))+(((-1.0)*x2212*x2219)));
evalcond[3]=(((x2210*x2213))+(((-1.0)*cj1*x2211))+(((-1.0)*r22*x2219))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2217)));
evalcond[4]=(((x2210*x2212))+(((-1.0)*gconst91*r01*x2217))+(((-1.0)*cj0*sj1*x2211))+(((-1.0)*r02*x2219))+(((-1.0)*cj0*x2216)));
evalcond[5]=((((-1.0)*x2214*x2216))+((x2210*x2215))+(((-1.0)*r12*x2219))+(((-1.0)*gconst91*r11*x2217))+(((-1.0)*sj0*sj1*x2211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2220=((1.0)*gconst92);
CheckValue<IkReal> x2221=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2220)))),-1);
if(!x2221.valid){
continue;
}
CheckValue<IkReal> x2222 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2220))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2221.value)))+(x2222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2223=IKsin(j4);
IkReal x2224=IKcos(j4);
IkReal x2225=((1.0)*cj2);
IkReal x2226=(gconst92*r00);
IkReal x2227=(gconst92*r20);
IkReal x2228=((1.0)*sj0);
IkReal x2229=(gconst92*r10);
IkReal x2230=(cj1*sj2);
IkReal x2231=((1.0)*x2224);
IkReal x2232=(gconst91*x2223);
IkReal x2233=((1.0)*x2223);
evalcond[0]=((((-1.0)*x2227*x2233))+((r21*x2232))+(((-1.0)*r22*x2231)));
evalcond[1]=(cj0+(((-1.0)*x2229*x2233))+(((-1.0)*r12*x2231))+((r11*x2232)));
evalcond[2]=((((-1.0)*x2226*x2233))+(((-1.0)*r02*x2231))+(((-1.0)*x2228))+((r01*x2232)));
evalcond[3]=((((-1.0)*gconst91*r21*x2231))+((sj1*sj2))+((x2224*x2227))+(((-1.0)*r22*x2233))+(((-1.0)*cj1*x2225)));
evalcond[4]=((((-1.0)*r02*x2233))+((x2224*x2226))+(((-1.0)*cj0*x2230))+(((-1.0)*gconst91*r01*x2231))+(((-1.0)*cj0*sj1*x2225)));
evalcond[5]=((((-1.0)*sj0*sj1*x2225))+(((-1.0)*x2228*x2230))+((x2224*x2229))+(((-1.0)*r12*x2233))+(((-1.0)*gconst91*r11*x2231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2234=((-1.0)*r01);
IkReal x2236 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2236)==0){
continue;
}
IkReal x2235=pow(x2236,-0.5);
CheckValue<IkReal> x2237 = IKatan2WithCheck(IkReal(x2234),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2237.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2237.value))));
IkReal gconst94=(x2234*x2235);
IkReal gconst95=((1.0)*r00*x2235);
CheckValue<IkReal> x2238 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2238.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2238.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2239=((-1.0)*r01);
CheckValue<IkReal> x2242 = IKatan2WithCheck(IkReal(x2239),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2242.valid){
continue;
}
IkReal x2240=((1.0)*(x2242.value));
IkReal x2241=x2235;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2240)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2240)));
IkReal gconst94=(x2239*x2241);
IkReal gconst95=((1.0)*r00*x2241);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2243=((-1.0)*r01);
CheckValue<IkReal> x2246 = IKatan2WithCheck(IkReal(x2243),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2246.valid){
continue;
}
IkReal x2244=((1.0)*(x2246.value));
IkReal x2245=x2235;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2244)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2244)));
IkReal gconst94=(x2243*x2245);
IkReal gconst95=((1.0)*r00*x2245);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2247=((-1.0)*r01);
CheckValue<IkReal> x2250 = IKatan2WithCheck(IkReal(x2247),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2250.valid){
continue;
}
IkReal x2248=((1.0)*(x2250.value));
IkReal x2249=x2235;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2248)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2248)));
IkReal gconst94=(x2247*x2249);
IkReal gconst95=((1.0)*r00*x2249);
IkReal x2251=r02*r02;
IkReal x2252=(r12*sj0);
IkReal x2253=((1.0)*cj0);
IkReal x2254=x2235;
j4eval[0]=((IKabs(((((-1.0)*x2253*x2254))+((cj0*x2251*x2254))+((r02*x2252*x2254)))))+(IKabs(((((-1.0)*x2252))+(((-1.0)*r02*x2253))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2255=((1.0)*sj0);
IkReal x2256=((1.0)*cj0);
CheckValue<IkReal> x2257 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2256))+(((-1.0)*r12*x2255)))),IkReal(((((-1.0)*gconst94*r11*x2255))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2256))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2257.valid){
continue;
}
CheckValue<IkReal> x2258=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2257.value)+(((1.5707963267949)*(x2258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2259=IKsin(j4);
IkReal x2260=IKcos(j4);
IkReal x2261=(gconst94*r11);
IkReal x2262=((1.0)*cj2);
IkReal x2263=(gconst94*r21);
IkReal x2264=((1.0)*sj0);
IkReal x2265=(gconst94*r01);
IkReal x2266=(cj1*sj2);
IkReal x2267=((1.0)*x2260);
IkReal x2268=(gconst95*x2260);
IkReal x2269=((1.0)*x2259);
IkReal x2270=(gconst95*x2269);
evalcond[0]=(((x2259*x2263))+(((-1.0)*r20*x2270))+(((-1.0)*r22*x2267)));
evalcond[1]=(((x2259*x2261))+cj0+(((-1.0)*r10*x2270))+(((-1.0)*r12*x2267)));
evalcond[2]=(((x2259*x2265))+(((-1.0)*r00*x2270))+(((-1.0)*r02*x2267))+(((-1.0)*x2264)));
evalcond[3]=((((-1.0)*cj1*x2262))+((sj1*sj2))+(((-1.0)*x2263*x2267))+(((-1.0)*r22*x2269))+((r20*x2268)));
evalcond[4]=(((r00*x2268))+(((-1.0)*cj0*sj1*x2262))+(((-1.0)*r02*x2269))+(((-1.0)*cj0*x2266))+(((-1.0)*x2265*x2267)));
evalcond[5]=((((-1.0)*sj0*sj1*x2262))+((r10*x2268))+(((-1.0)*x2261*x2267))+(((-1.0)*x2264*x2266))+(((-1.0)*r12*x2269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2271=((1.0)*gconst95);
CheckValue<IkReal> x2272=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2271)))),-1);
if(!x2272.valid){
continue;
}
CheckValue<IkReal> x2273 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2272.value)))+(x2273.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2274=IKsin(j4);
IkReal x2275=IKcos(j4);
IkReal x2276=(gconst94*r11);
IkReal x2277=((1.0)*cj2);
IkReal x2278=(gconst94*r21);
IkReal x2279=((1.0)*sj0);
IkReal x2280=(gconst94*r01);
IkReal x2281=(cj1*sj2);
IkReal x2282=((1.0)*x2275);
IkReal x2283=(gconst95*x2275);
IkReal x2284=((1.0)*x2274);
IkReal x2285=(gconst95*x2284);
evalcond[0]=((((-1.0)*r20*x2285))+(((-1.0)*r22*x2282))+((x2274*x2278)));
evalcond[1]=(cj0+(((-1.0)*r12*x2282))+(((-1.0)*r10*x2285))+((x2274*x2276)));
evalcond[2]=((((-1.0)*r02*x2282))+((x2274*x2280))+(((-1.0)*x2279))+(((-1.0)*r00*x2285)));
evalcond[3]=((((-1.0)*cj1*x2277))+((r20*x2283))+((sj1*sj2))+(((-1.0)*x2278*x2282))+(((-1.0)*r22*x2284)));
evalcond[4]=((((-1.0)*r02*x2284))+(((-1.0)*cj0*sj1*x2277))+(((-1.0)*x2280*x2282))+(((-1.0)*cj0*x2281))+((r00*x2283)));
evalcond[5]=((((-1.0)*x2276*x2282))+((r10*x2283))+(((-1.0)*r12*x2284))+(((-1.0)*sj0*sj1*x2277))+(((-1.0)*x2279*x2281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2286=((1.0)*gconst95);
CheckValue<IkReal> x2287 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2287.valid){
continue;
}
CheckValue<IkReal> x2288=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2286)))),-1);
if(!x2288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2287.value)+(((1.5707963267949)*(x2288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2289=IKsin(j4);
IkReal x2290=IKcos(j4);
IkReal x2291=(gconst94*r11);
IkReal x2292=((1.0)*cj2);
IkReal x2293=(gconst94*r21);
IkReal x2294=((1.0)*sj0);
IkReal x2295=(gconst94*r01);
IkReal x2296=(cj1*sj2);
IkReal x2297=((1.0)*x2290);
IkReal x2298=(gconst95*x2290);
IkReal x2299=((1.0)*x2289);
IkReal x2300=(gconst95*x2299);
evalcond[0]=((((-1.0)*r20*x2300))+((x2289*x2293))+(((-1.0)*r22*x2297)));
evalcond[1]=((((-1.0)*r10*x2300))+cj0+((x2289*x2291))+(((-1.0)*r12*x2297)));
evalcond[2]=((((-1.0)*r00*x2300))+(((-1.0)*r02*x2297))+((x2289*x2295))+(((-1.0)*x2294)));
evalcond[3]=((((-1.0)*x2293*x2297))+((sj1*sj2))+((r20*x2298))+(((-1.0)*cj1*x2292))+(((-1.0)*r22*x2299)));
evalcond[4]=((((-1.0)*r02*x2299))+(((-1.0)*cj0*x2296))+((r00*x2298))+(((-1.0)*x2295*x2297))+(((-1.0)*cj0*sj1*x2292)));
evalcond[5]=(((r10*x2298))+(((-1.0)*sj0*sj1*x2292))+(((-1.0)*r12*x2299))+(((-1.0)*x2291*x2297))+(((-1.0)*x2294*x2296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2301=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2301;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2301);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2302=((1.0)*cj5);
IkReal x2303=((((-1.0)*r11*x2302))+(((-1.0)*r10*sj5)));
j4eval[0]=x2303;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2302))+((r21*sj5))))));
j4eval[2]=IKsign(x2303);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2304=cj5*cj5;
IkReal x2305=r01*r01;
IkReal x2306=(r01*sj5);
IkReal x2307=(cj5*r00);
IkReal x2308=((((-1.0)*x2304*(r00*r00)))+(((-1.0)*x2305))+((x2304*x2305))+(((2.0)*x2306*x2307))+(((-1.0)*(r02*r02))));
j4eval[0]=x2308;
j4eval[1]=IKsign(x2308);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2306))+x2307))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2309=cj5*cj5;
IkReal x2310=r01*r01;
IkReal x2311=(r01*sj5);
IkReal x2312=(cj5*r00);
CheckValue<IkReal> x2313 = IKatan2WithCheck(IkReal(((((-1.0)*x2311))+x2312)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2313.valid){
continue;
}
CheckValue<IkReal> x2314=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2310))+(((-1.0)*(r02*r02)))+(((-1.0)*x2309*(r00*r00)))+((x2309*x2310))+(((2.0)*x2311*x2312)))),-1);
if(!x2314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2313.value)+(((1.5707963267949)*(x2314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2315=IKsin(j4);
IkReal x2316=IKcos(j4);
IkReal x2317=(cj5*r10);
IkReal x2318=(r01*sj5);
IkReal x2319=((1.0)*cj2);
IkReal x2320=(cj5*r00);
IkReal x2321=(cj5*r20);
IkReal x2322=((1.0)*x2316);
IkReal x2323=((1.0)*x2315);
IkReal x2324=(sj5*x2315);
evalcond[0]=((((-1.0)*x2321*x2323))+(((-1.0)*r22*x2322))+((r21*x2324)));
evalcond[1]=(((r11*x2324))+(((-1.0)*r12*x2322))+(((-1.0)*x2317*x2323)));
evalcond[2]=(((x2316*x2320))+(((-1.0)*x2318*x2322))+(((-1.0)*r02*x2323)));
evalcond[3]=((-1.0)+((x2315*x2318))+(((-1.0)*x2320*x2323))+(((-1.0)*r02*x2322)));
evalcond[4]=(((x2316*x2321))+(((-1.0)*r22*x2323))+((sj1*sj2))+(((-1.0)*cj1*x2319))+(((-1.0)*r21*sj5*x2322)));
evalcond[5]=(((x2316*x2317))+(((-1.0)*r11*sj5*x2322))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2323))+(((-1.0)*sj1*x2319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2325=((1.0)*cj5);
CheckValue<IkReal> x2326=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2325)))),-1);
if(!x2326.valid){
continue;
}
CheckValue<IkReal> x2327 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2325)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2326.value)))+(x2327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2328=IKsin(j4);
IkReal x2329=IKcos(j4);
IkReal x2330=(cj5*r10);
IkReal x2331=(r01*sj5);
IkReal x2332=((1.0)*cj2);
IkReal x2333=(cj5*r00);
IkReal x2334=(cj5*r20);
IkReal x2335=((1.0)*x2329);
IkReal x2336=((1.0)*x2328);
IkReal x2337=(sj5*x2328);
evalcond[0]=(((r21*x2337))+(((-1.0)*r22*x2335))+(((-1.0)*x2334*x2336)));
evalcond[1]=(((r11*x2337))+(((-1.0)*r12*x2335))+(((-1.0)*x2330*x2336)));
evalcond[2]=((((-1.0)*x2331*x2335))+((x2329*x2333))+(((-1.0)*r02*x2336)));
evalcond[3]=((-1.0)+(((-1.0)*x2333*x2336))+(((-1.0)*r02*x2335))+((x2328*x2331)));
evalcond[4]=((((-1.0)*r22*x2336))+((x2329*x2334))+((sj1*sj2))+(((-1.0)*cj1*x2332))+(((-1.0)*r21*sj5*x2335)));
evalcond[5]=(((x2329*x2330))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2335))+(((-1.0)*sj1*x2332))+(((-1.0)*r12*x2336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2338=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2338.valid){
continue;
}
CheckValue<IkReal> x2339 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2338.value)))+(x2339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2340=IKsin(j4);
IkReal x2341=IKcos(j4);
IkReal x2342=(cj5*r10);
IkReal x2343=(r01*sj5);
IkReal x2344=((1.0)*cj2);
IkReal x2345=(cj5*r00);
IkReal x2346=(cj5*r20);
IkReal x2347=((1.0)*x2341);
IkReal x2348=((1.0)*x2340);
IkReal x2349=(sj5*x2340);
evalcond[0]=((((-1.0)*x2346*x2348))+(((-1.0)*r22*x2347))+((r21*x2349)));
evalcond[1]=(((r11*x2349))+(((-1.0)*r12*x2347))+(((-1.0)*x2342*x2348)));
evalcond[2]=(((x2341*x2345))+(((-1.0)*r02*x2348))+(((-1.0)*x2343*x2347)));
evalcond[3]=((-1.0)+(((-1.0)*x2345*x2348))+((x2340*x2343))+(((-1.0)*r02*x2347)));
evalcond[4]=(((x2341*x2346))+((sj1*sj2))+(((-1.0)*cj1*x2344))+(((-1.0)*r22*x2348))+(((-1.0)*r21*sj5*x2347)));
evalcond[5]=(((x2341*x2342))+(((-1.0)*r11*sj5*x2347))+(((-1.0)*sj1*x2344))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2350=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2350;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2350);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2351=((1.0)*cj5);
IkReal x2352=((((-1.0)*r21*x2351))+(((-1.0)*r20*sj5)));
j4eval[0]=x2352;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2351))))));
j4eval[2]=IKsign(x2352);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2353=cj5*cj5;
IkReal x2354=r01*r01;
IkReal x2355=(cj5*r00);
IkReal x2356=(r01*sj5);
IkReal x2357=((((-2.0)*x2355*x2356))+x2354+(((-1.0)*x2353*x2354))+((x2353*(r00*r00)))+(r02*r02));
j4eval[0]=x2357;
j4eval[1]=((IKabs(r02))+(IKabs((x2355+(((-1.0)*x2356))))));
j4eval[2]=IKsign(x2357);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2358=cj5*cj5;
IkReal x2359=r01*r01;
IkReal x2360=(r01*sj5);
IkReal x2361=(cj5*r00);
CheckValue<IkReal> x2362=IKPowWithIntegerCheck(IKsign((x2359+(((-2.0)*x2360*x2361))+(((-1.0)*x2358*x2359))+(r02*r02)+((x2358*(r00*r00))))),-1);
if(!x2362.valid){
continue;
}
CheckValue<IkReal> x2363 = IKatan2WithCheck(IkReal((x2361+(((-1.0)*x2360)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2362.value)))+(x2363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2364=IKsin(j4);
IkReal x2365=IKcos(j4);
IkReal x2366=(cj5*r10);
IkReal x2367=(r01*sj5);
IkReal x2368=(cj5*r00);
IkReal x2369=(cj5*r20);
IkReal x2370=((1.0)*x2365);
IkReal x2371=((1.0)*x2364);
IkReal x2372=(sj5*x2364);
evalcond[0]=((((-1.0)*x2369*x2371))+(((-1.0)*r22*x2370))+((r21*x2372)));
evalcond[1]=((((-1.0)*r12*x2370))+(((-1.0)*x2366*x2371))+((r11*x2372)));
evalcond[2]=((((-1.0)*r02*x2371))+((x2365*x2368))+(((-1.0)*x2367*x2370)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2370))+((x2364*x2367))+(((-1.0)*x2368*x2371)));
evalcond[4]=((((-1.0)*r11*sj5*x2370))+((cj2*sj1))+((x2365*x2366))+((cj1*sj2))+(((-1.0)*r12*x2371)));
evalcond[5]=(((x2365*x2369))+(((-1.0)*r21*sj5*x2370))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2373=((1.0)*cj5);
CheckValue<IkReal> x2374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2373))+(((-1.0)*r20*sj5)))),-1);
if(!x2374.valid){
continue;
}
CheckValue<IkReal> x2375 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2373))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2374.value)))+(x2375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2376=IKsin(j4);
IkReal x2377=IKcos(j4);
IkReal x2378=(cj5*r10);
IkReal x2379=(r01*sj5);
IkReal x2380=(cj5*r00);
IkReal x2381=(cj5*r20);
IkReal x2382=((1.0)*x2377);
IkReal x2383=((1.0)*x2376);
IkReal x2384=(sj5*x2376);
evalcond[0]=((((-1.0)*x2381*x2383))+(((-1.0)*r22*x2382))+((r21*x2384)));
evalcond[1]=((((-1.0)*r12*x2382))+(((-1.0)*x2378*x2383))+((r11*x2384)));
evalcond[2]=((((-1.0)*r02*x2383))+(((-1.0)*x2379*x2382))+((x2377*x2380)));
evalcond[3]=((1.0)+(((-1.0)*x2380*x2383))+(((-1.0)*r02*x2382))+((x2376*x2379)));
evalcond[4]=((((-1.0)*r12*x2383))+(((-1.0)*r11*sj5*x2382))+((cj2*sj1))+((cj1*sj2))+((x2377*x2378)));
evalcond[5]=((((-1.0)*r21*sj5*x2382))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2383))+((x2377*x2381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2385 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2385.valid){
continue;
}
CheckValue<IkReal> x2386=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2385.value)+(((1.5707963267949)*(x2386.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2387=IKsin(j4);
IkReal x2388=IKcos(j4);
IkReal x2389=(cj5*r10);
IkReal x2390=(r01*sj5);
IkReal x2391=(cj5*r00);
IkReal x2392=(cj5*r20);
IkReal x2393=((1.0)*x2388);
IkReal x2394=((1.0)*x2387);
IkReal x2395=(sj5*x2387);
evalcond[0]=((((-1.0)*r22*x2393))+(((-1.0)*x2392*x2394))+((r21*x2395)));
evalcond[1]=((((-1.0)*x2389*x2394))+((r11*x2395))+(((-1.0)*r12*x2393)));
evalcond[2]=((((-1.0)*r02*x2394))+(((-1.0)*x2390*x2393))+((x2388*x2391)));
evalcond[3]=((1.0)+((x2387*x2390))+(((-1.0)*r02*x2393))+(((-1.0)*x2391*x2394)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2388*x2389))+(((-1.0)*r11*sj5*x2393))+(((-1.0)*r12*x2394)));
evalcond[5]=((((-1.0)*r21*sj5*x2393))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2394))+((x2388*x2392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2396=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2396);
rxp1_1=(px*r21);
rxp1_2=(r11*x2396);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2397=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2397);
rxp1_1=(px*r21);
rxp1_2=(r11*x2397);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2398=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2398);
rxp1_1=(px*r21);
rxp1_2=(r11*x2398);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2401=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2401.valid){
continue;
}
IkReal x2399=x2401.value;
IkReal x2400=(sj0*x2399);
cj4array[0]=(((cj1*sj2*x2400))+((cj2*sj1*x2400)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2402=IKsin(j4);
IkReal x2403=IKcos(j4);
IkReal x2404=(cj5*r20);
IkReal x2405=(r21*sj5);
IkReal x2406=((1.0)*x2402);
IkReal x2407=((1.0)*x2403);
evalcond[0]=((-1.0)*r02*x2402);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2407)));
evalcond[2]=((((-1.0)*x2404*x2406))+((x2402*x2405)));
evalcond[3]=(((r11*sj5*x2402))+(((-1.0)*cj5*r10*x2406)));
evalcond[4]=((((-1.0)*x2405*x2407))+((x2403*x2404))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2409=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2409.valid){
continue;
}
IkReal x2408=x2409.value;
cj4array[0]=(((cj1*cj2*x2408))+(((-1.0)*sj1*sj2*x2408)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2410=IKsin(j4);
IkReal x2411=IKcos(j4);
IkReal x2412=(r11*sj5);
IkReal x2413=((1.0)*sj0);
IkReal x2414=((1.0)*x2411);
IkReal x2415=((1.0)*cj5*x2410);
evalcond[0]=((-1.0)*r02*x2410);
evalcond[1]=((((-1.0)*r02*x2414))+(((-1.0)*x2413)));
evalcond[2]=((((-1.0)*r20*x2415))+((r21*sj5*x2410)));
evalcond[3]=(((x2410*x2412))+(((-1.0)*r10*x2415)));
evalcond[4]=((((-1.0)*cj1*sj2*x2413))+(((-1.0)*cj2*sj1*x2413))+((cj5*r10*x2411))+(((-1.0)*x2412*x2414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2416=IKPowWithIntegerCheck(r02,-1);
if(!x2416.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2416.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2417=IKsin(j4);
IkReal x2418=IKcos(j4);
IkReal x2419=((1.0)*sj0);
IkReal x2420=(cj5*x2418);
IkReal x2421=(sj5*x2417);
IkReal x2422=((1.0)*sj5*x2418);
IkReal x2423=((1.0)*cj5*x2417);
evalcond[0]=((-1.0)*r02*x2417);
evalcond[1]=(((r21*x2421))+(((-1.0)*r20*x2423)));
evalcond[2]=((((-1.0)*r10*x2423))+((r11*x2421)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2422))+((r20*x2420)));
evalcond[4]=((((-1.0)*cj1*sj2*x2419))+((r10*x2420))+(((-1.0)*r11*x2422))+(((-1.0)*cj2*sj1*x2419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2424=((1.0)*sj0);
IkReal x2425=((1.0)*cj0);
CheckValue<IkReal> x2426 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2425))+(((-1.0)*r12*x2424)))),IkReal(((((-1.0)*r11*sj5*x2424))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x2425))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2426.valid){
continue;
}
CheckValue<IkReal> x2427=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2426.value)+(((1.5707963267949)*(x2427.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2428=IKsin(j4);
IkReal x2429=IKcos(j4);
IkReal x2430=(cj5*r10);
IkReal x2431=(r01*sj5);
IkReal x2432=((1.0)*cj2);
IkReal x2433=(cj5*r00);
IkReal x2434=((1.0)*sj0);
IkReal x2435=(cj5*r20);
IkReal x2436=(cj1*sj2);
IkReal x2437=((1.0)*x2429);
IkReal x2438=((1.0)*x2428);
IkReal x2439=(sj5*x2428);
evalcond[0]=((((-1.0)*r22*x2437))+((r21*x2439))+(((-1.0)*x2435*x2438)));
evalcond[1]=(((r11*x2439))+cj0+(((-1.0)*x2430*x2438))+(((-1.0)*r12*x2437)));
evalcond[2]=((((-1.0)*x2433*x2438))+((x2428*x2431))+(((-1.0)*x2434))+(((-1.0)*r02*x2437)));
evalcond[3]=((((-1.0)*r22*x2438))+((x2429*x2435))+(((-1.0)*r21*sj5*x2437))+((sj1*sj2))+(((-1.0)*cj1*x2432)));
evalcond[4]=((((-1.0)*cj0*x2436))+((x2429*x2433))+(((-1.0)*x2431*x2437))+(((-1.0)*r02*x2438))+(((-1.0)*cj0*sj1*x2432)));
evalcond[5]=(((x2429*x2430))+(((-1.0)*sj0*sj1*x2432))+(((-1.0)*x2434*x2436))+(((-1.0)*r11*sj5*x2437))+(((-1.0)*r12*x2438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2440=((1.0)*cj5);
CheckValue<IkReal> x2441=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2440)))),-1);
if(!x2441.valid){
continue;
}
CheckValue<IkReal> x2442 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2440)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2441.value)))+(x2442.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2443=IKsin(j4);
IkReal x2444=IKcos(j4);
IkReal x2445=(cj5*r10);
IkReal x2446=(r01*sj5);
IkReal x2447=((1.0)*cj2);
IkReal x2448=(cj5*r00);
IkReal x2449=((1.0)*sj0);
IkReal x2450=(cj5*r20);
IkReal x2451=(cj1*sj2);
IkReal x2452=((1.0)*x2444);
IkReal x2453=((1.0)*x2443);
IkReal x2454=(sj5*x2443);
evalcond[0]=((((-1.0)*x2450*x2453))+(((-1.0)*r22*x2452))+((r21*x2454)));
evalcond[1]=(cj0+(((-1.0)*x2445*x2453))+(((-1.0)*r12*x2452))+((r11*x2454)));
evalcond[2]=(((x2443*x2446))+(((-1.0)*x2448*x2453))+(((-1.0)*x2449))+(((-1.0)*r02*x2452)));
evalcond[3]=(((sj1*sj2))+((x2444*x2450))+(((-1.0)*r22*x2453))+(((-1.0)*cj1*x2447))+(((-1.0)*r21*sj5*x2452)));
evalcond[4]=((((-1.0)*cj0*x2451))+(((-1.0)*cj0*sj1*x2447))+(((-1.0)*x2446*x2452))+((x2444*x2448))+(((-1.0)*r02*x2453)));
evalcond[5]=((((-1.0)*r11*sj5*x2452))+(((-1.0)*x2449*x2451))+(((-1.0)*r12*x2453))+((x2444*x2445))+(((-1.0)*sj0*sj1*x2447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2455=((1.0)*cj5);
CheckValue<IkReal> x2456 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2456.valid){
continue;
}
CheckValue<IkReal> x2457=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2455)))),-1);
if(!x2457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2456.value)+(((1.5707963267949)*(x2457.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2458=IKsin(j4);
IkReal x2459=IKcos(j4);
IkReal x2460=(cj5*r10);
IkReal x2461=(r01*sj5);
IkReal x2462=((1.0)*cj2);
IkReal x2463=(cj5*r00);
IkReal x2464=((1.0)*sj0);
IkReal x2465=(cj5*r20);
IkReal x2466=(cj1*sj2);
IkReal x2467=((1.0)*x2459);
IkReal x2468=((1.0)*x2458);
IkReal x2469=(sj5*x2458);
evalcond[0]=((((-1.0)*r22*x2467))+(((-1.0)*x2465*x2468))+((r21*x2469)));
evalcond[1]=(cj0+(((-1.0)*r12*x2467))+((r11*x2469))+(((-1.0)*x2460*x2468)));
evalcond[2]=(((x2458*x2461))+(((-1.0)*x2463*x2468))+(((-1.0)*x2464))+(((-1.0)*r02*x2467)));
evalcond[3]=((((-1.0)*r22*x2468))+((x2459*x2465))+((sj1*sj2))+(((-1.0)*cj1*x2462))+(((-1.0)*r21*sj5*x2467)));
evalcond[4]=(((x2459*x2463))+(((-1.0)*cj0*sj1*x2462))+(((-1.0)*cj0*x2466))+(((-1.0)*r02*x2468))+(((-1.0)*x2461*x2467)));
evalcond[5]=((((-1.0)*x2464*x2466))+(((-1.0)*sj0*sj1*x2462))+(((-1.0)*r11*sj5*x2467))+((x2459*x2460))+(((-1.0)*r12*x2468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2470=cj5*cj5;
IkReal x2471=r21*r21;
IkReal x2472=(sj1*sj2);
IkReal x2473=(r21*sj5);
IkReal x2474=(cj1*cj2);
IkReal x2475=(cj5*r20);
CheckValue<IkReal> x2476 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2474))+((r22*x2472)))),IkReal(((((-1.0)*x2473*x2474))+((x2472*x2473))+(((-1.0)*x2472*x2475))+((x2474*x2475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2476.valid){
continue;
}
CheckValue<IkReal> x2477=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2473*x2475))+x2471+(r22*r22)+(((-1.0)*x2470*x2471))+((x2470*(r20*r20))))),-1);
if(!x2477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2476.value)+(((1.5707963267949)*(x2477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2478=IKsin(j4);
IkReal x2479=IKcos(j4);
IkReal x2480=(r21*sj5);
IkReal x2481=(cj5*r20);
IkReal x2482=((1.0)*x2479);
IkReal x2483=((1.0)*x2478);
evalcond[0]=((((-1.0)*r22*x2482))+(((-1.0)*x2481*x2483))+((x2478*x2480)));
evalcond[1]=((((-1.0)*r22*x2483))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2480*x2482))+((x2479*x2481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2484=(cj5*sj4);
IkReal x2485=(sj4*sj5);
if( IKabs((((r01*x2485))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2484))+((cj4*r12))+(((-1.0)*r11*x2485)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2485))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2484))))+IKsqr((((r10*x2484))+((cj4*r12))+(((-1.0)*r11*x2485))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x2485))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2484))), (((r10*x2484))+((cj4*r12))+(((-1.0)*r11*x2485))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2486=IKcos(j0);
IkReal x2487=IKsin(j0);
IkReal x2488=(cj4*cj5);
IkReal x2489=(cj5*r01);
IkReal x2490=((1.0)*cj1);
IkReal x2491=((0.39225)*sj1);
IkReal x2492=(r11*sj5);
IkReal x2493=((1.0)*sj4);
IkReal x2494=((0.39225)*cj2);
IkReal x2495=((1.0)*sj1);
IkReal x2496=(r00*sj5);
IkReal x2497=(cj5*r11);
IkReal x2498=((1.0)*cj4);
IkReal x2499=(r01*sj5);
IkReal x2500=(r10*sj5);
IkReal x2501=(sj2*x2486);
IkReal x2502=(sj2*x2487);
IkReal x2503=(cj1*x2486);
IkReal x2504=(cj1*x2487);
IkReal x2505=(cj2*x2486);
IkReal x2506=(cj2*x2487);
evalcond[0]=(x2486+(((-1.0)*cj5*r10*x2493))+((sj4*x2492))+(((-1.0)*r12*x2498)));
evalcond[1]=((((-1.0)*x2487))+(((-1.0)*cj5*r00*x2493))+(((-1.0)*r02*x2498))+((sj4*x2499)));
evalcond[2]=(x2489+x2496+((sj1*x2501))+(((-1.0)*x2490*x2505)));
evalcond[3]=(x2500+x2497+((sj1*x2502))+(((-1.0)*x2490*x2506)));
evalcond[4]=((((-1.0)*x2495*x2505))+(((-1.0)*r02*x2493))+(((-1.0)*x2490*x2501))+(((-1.0)*x2498*x2499))+((r00*x2488)));
evalcond[5]=((((-1.0)*x2495*x2506))+(((-1.0)*x2490*x2502))+((r10*x2488))+(((-1.0)*r12*x2493))+(((-1.0)*x2492*x2498)));
evalcond[6]=(((x2494*x2503))+(((0.425)*x2503))+(((-0.10915)*x2487))+(((-0.09465)*x2489))+(((-1.0)*px))+(((-0.09465)*x2496))+(((-1.0)*x2491*x2501)));
evalcond[7]=(((x2494*x2504))+(((0.425)*x2504))+(((-1.0)*py))+(((-0.09465)*x2497))+(((-0.09465)*x2500))+(((-1.0)*x2491*x2502))+(((0.10915)*x2486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2507=((1.0)*cj5);
IkReal x2508=((1.0)*sj5);
CheckValue<IkReal> x2509 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2507))+(((-1.0)*r10*x2508)))),IkReal(((((-1.0)*r00*x2508))+(((-1.0)*r01*x2507)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2509.valid){
continue;
}
CheckValue<IkReal> x2510=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2510.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2509.value)+(((1.5707963267949)*(x2510.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2511=IKcos(j0);
IkReal x2512=IKsin(j0);
IkReal x2513=(cj5*r01);
IkReal x2514=(cj5*r11);
IkReal x2515=(r00*sj5);
IkReal x2516=(sj1*sj2);
IkReal x2517=((0.39225)*cj2);
IkReal x2518=((1.0)*cj2);
IkReal x2519=(r10*sj5);
IkReal x2520=((0.39225)*x2516);
IkReal x2521=(cj1*x2511);
IkReal x2522=(cj1*x2512);
evalcond[0]=(x2515+x2513+((x2511*x2516))+(((-1.0)*x2518*x2521)));
evalcond[1]=(x2519+x2514+((x2512*x2516))+(((-1.0)*x2518*x2522)));
evalcond[2]=((((-1.0)*x2511*x2520))+(((0.425)*x2521))+((x2517*x2521))+(((-0.10915)*x2512))+(((-1.0)*px))+(((-0.09465)*x2515))+(((-0.09465)*x2513)));
evalcond[3]=((((0.425)*x2522))+((x2517*x2522))+(((-1.0)*x2512*x2520))+(((-1.0)*py))+(((-0.09465)*x2519))+(((-0.09465)*x2514))+(((0.10915)*x2511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2523=((1.0)*cj5);
IkReal x2524=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2523)));
j4eval[0]=x2524;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2523)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2524);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2525=((1.0)*cj5);
IkReal x2526=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2525)));
j4eval[0]=x2526;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2525))))));
j4eval[2]=IKsign(x2526);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2527=((1.0)*sj0);
IkReal x2528=((1.0)*cj0);
IkReal x2529=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2529;
j4eval[1]=((IKabs(((((-1.0)*r12*x2527))+(((-1.0)*r02*x2528)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2528))+(((-1.0)*r11*sj5*x2527))))));
j4eval[2]=IKsign(x2529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2530=((-1.0)*r20);
IkReal x2532 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2532)==0){
continue;
}
IkReal x2531=pow(x2532,-0.5);
CheckValue<IkReal> x2533 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2530),IKFAST_ATAN2_MAGTHRESH);
if(!x2533.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2533.value));
IkReal gconst79=(r21*x2531);
IkReal gconst80=(x2530*x2531);
CheckValue<IkReal> x2534 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2534.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2534.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2535=((-1.0)*r20);
IkReal x2536=x2531;
CheckValue<IkReal> x2538 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2535),IKFAST_ATAN2_MAGTHRESH);
if(!x2538.valid){
continue;
}
IkReal x2537=((-1.0)*(x2538.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2537;
IkReal gconst78=x2537;
IkReal gconst79=(r21*x2536);
IkReal gconst80=(x2535*x2536);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2539=((-1.0)*r20);
IkReal x2540=x2531;
CheckValue<IkReal> x2542 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2539),IKFAST_ATAN2_MAGTHRESH);
if(!x2542.valid){
continue;
}
IkReal x2541=((-1.0)*(x2542.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2541;
IkReal gconst78=x2541;
IkReal gconst79=(r21*x2540);
IkReal gconst80=(x2539*x2540);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2543=((-1.0)*r20);
IkReal x2544=x2531;
CheckValue<IkReal> x2546 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2543),IKFAST_ATAN2_MAGTHRESH);
if(!x2546.valid){
continue;
}
IkReal x2545=((-1.0)*(x2546.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2545;
IkReal gconst78=x2545;
IkReal gconst79=(r21*x2544);
IkReal gconst80=(x2543*x2544);
IkReal x2547=r22*r22;
CheckValue<IkReal> x2550=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2547))),-1);
if(!x2550.valid){
continue;
}
IkReal x2548=x2550.value;
IkReal x2549=(x2547+((x2548*(r20*r20*r20*r20)))+((x2548*(r21*r21*r21*r21)))+(((2.0)*x2548*(r20*r20)*(r21*r21))));
j4eval[0]=x2549;
j4eval[1]=IKsign(x2549);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2551=(sj1*sj2);
IkReal x2552=(gconst80*r20);
IkReal x2553=(gconst79*r21);
IkReal x2554=(cj1*cj2);
CheckValue<IkReal> x2555=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2552*x2552)+(((-2.0)*x2552*x2553))+(x2553*x2553))),-1);
if(!x2555.valid){
continue;
}
CheckValue<IkReal> x2556 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2554))+((r22*x2551)))),IkReal(((((-1.0)*x2553*x2554))+(((-1.0)*x2551*x2552))+((x2551*x2553))+((x2552*x2554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2555.value)))+(x2556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2557=IKsin(j4);
IkReal x2558=IKcos(j4);
IkReal x2559=(gconst79*r01);
IkReal x2560=(gconst79*r21);
IkReal x2561=((1.0)*cj2);
IkReal x2562=(gconst79*r11);
IkReal x2563=((1.0)*sj0);
IkReal x2564=(cj1*sj2);
IkReal x2565=((1.0)*x2558);
IkReal x2566=(gconst80*x2558);
IkReal x2567=((1.0)*x2557);
IkReal x2568=(gconst80*x2567);
evalcond[0]=((((-1.0)*r22*x2565))+(((-1.0)*r20*x2568))+((x2557*x2560)));
evalcond[1]=(cj0+((x2557*x2562))+(((-1.0)*r12*x2565))+(((-1.0)*r10*x2568)));
evalcond[2]=((((-1.0)*r00*x2568))+(((-1.0)*r02*x2565))+(((-1.0)*x2563))+((x2557*x2559)));
evalcond[3]=((((-1.0)*cj1*x2561))+(((-1.0)*r22*x2567))+((sj1*sj2))+((r20*x2566))+(((-1.0)*x2560*x2565)));
evalcond[4]=((((-1.0)*cj0*x2564))+((r00*x2566))+(((-1.0)*r02*x2567))+(((-1.0)*x2559*x2565))+(((-1.0)*cj0*sj1*x2561)));
evalcond[5]=((((-1.0)*x2563*x2564))+(((-1.0)*x2562*x2565))+((r10*x2566))+(((-1.0)*sj0*sj1*x2561))+(((-1.0)*r12*x2567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2569=((1.0)*gconst80);
CheckValue<IkReal> x2570=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2569)))),-1);
if(!x2570.valid){
continue;
}
CheckValue<IkReal> x2571 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2569))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2570.value)))+(x2571.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2572=IKsin(j4);
IkReal x2573=IKcos(j4);
IkReal x2574=(gconst79*r01);
IkReal x2575=(gconst79*r21);
IkReal x2576=((1.0)*cj2);
IkReal x2577=(gconst79*r11);
IkReal x2578=((1.0)*sj0);
IkReal x2579=(cj1*sj2);
IkReal x2580=((1.0)*x2573);
IkReal x2581=(gconst80*x2573);
IkReal x2582=((1.0)*x2572);
IkReal x2583=(gconst80*x2582);
evalcond[0]=((((-1.0)*r20*x2583))+((x2572*x2575))+(((-1.0)*r22*x2580)));
evalcond[1]=(cj0+((x2572*x2577))+(((-1.0)*r10*x2583))+(((-1.0)*r12*x2580)));
evalcond[2]=((((-1.0)*r00*x2583))+(((-1.0)*r02*x2580))+((x2572*x2574))+(((-1.0)*x2578)));
evalcond[3]=(((r20*x2581))+((sj1*sj2))+(((-1.0)*cj1*x2576))+(((-1.0)*x2575*x2580))+(((-1.0)*r22*x2582)));
evalcond[4]=(((r00*x2581))+(((-1.0)*r02*x2582))+(((-1.0)*cj0*x2579))+(((-1.0)*x2574*x2580))+(((-1.0)*cj0*sj1*x2576)));
evalcond[5]=(((r10*x2581))+(((-1.0)*x2578*x2579))+(((-1.0)*sj0*sj1*x2576))+(((-1.0)*x2577*x2580))+(((-1.0)*r12*x2582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2584=((1.0)*gconst80);
CheckValue<IkReal> x2585=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2584))+(((-1.0)*gconst79*r00)))),-1);
if(!x2585.valid){
continue;
}
CheckValue<IkReal> x2586 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2585.value)))+(x2586.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2587=IKsin(j4);
IkReal x2588=IKcos(j4);
IkReal x2589=(gconst79*r01);
IkReal x2590=(gconst79*r21);
IkReal x2591=((1.0)*cj2);
IkReal x2592=(gconst79*r11);
IkReal x2593=((1.0)*sj0);
IkReal x2594=(cj1*sj2);
IkReal x2595=((1.0)*x2588);
IkReal x2596=(gconst80*x2588);
IkReal x2597=((1.0)*x2587);
IkReal x2598=(gconst80*x2597);
evalcond[0]=((((-1.0)*r22*x2595))+(((-1.0)*r20*x2598))+((x2587*x2590)));
evalcond[1]=(cj0+(((-1.0)*r12*x2595))+(((-1.0)*r10*x2598))+((x2587*x2592)));
evalcond[2]=((((-1.0)*r00*x2598))+(((-1.0)*r02*x2595))+(((-1.0)*x2593))+((x2587*x2589)));
evalcond[3]=((((-1.0)*cj1*x2591))+(((-1.0)*r22*x2597))+(((-1.0)*x2590*x2595))+((sj1*sj2))+((r20*x2596)));
evalcond[4]=(((r00*x2596))+(((-1.0)*cj0*x2594))+(((-1.0)*r02*x2597))+(((-1.0)*x2589*x2595))+(((-1.0)*cj0*sj1*x2591)));
evalcond[5]=((((-1.0)*x2593*x2594))+((r10*x2596))+(((-1.0)*sj0*sj1*x2591))+(((-1.0)*r12*x2597))+(((-1.0)*x2592*x2595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2599=((-1.0)*r21);
IkReal x2601 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2601)==0){
continue;
}
IkReal x2600=pow(x2601,-0.5);
CheckValue<IkReal> x2602 = IKatan2WithCheck(IkReal(x2599),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2602.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2602.value))));
IkReal gconst82=(x2599*x2600);
IkReal gconst83=((1.0)*r20*x2600);
CheckValue<IkReal> x2603 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2603.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2603.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2604=((-1.0)*r21);
CheckValue<IkReal> x2607 = IKatan2WithCheck(IkReal(x2604),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2607.valid){
continue;
}
IkReal x2605=((1.0)*(x2607.value));
IkReal x2606=x2600;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2605)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2605)));
IkReal gconst82=(x2604*x2606);
IkReal gconst83=((1.0)*r20*x2606);
IkReal x2608=r22*r22;
IkReal x2609=((1.0)*x2608);
CheckValue<IkReal> x2613=IKPowWithIntegerCheck(((-1.0)+x2608),-1);
if(!x2613.valid){
continue;
}
IkReal x2610=x2613.value;
if((((1.0)+(((-1.0)*x2609)))) < -0.00001)
continue;
IkReal x2611=IKsqrt(((1.0)+(((-1.0)*x2609))));
IkReal x2612=(cj0*x2610*x2611);
j4eval[0]=((IKabs(((((-1.0)*x2609*x2612))+x2612)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2614=((-1.0)*r21);
CheckValue<IkReal> x2617 = IKatan2WithCheck(IkReal(x2614),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2617.valid){
continue;
}
IkReal x2615=((1.0)*(x2617.value));
IkReal x2616=x2600;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2615)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2615)));
IkReal gconst82=(x2614*x2616);
IkReal gconst83=((1.0)*r20*x2616);
IkReal x2618=r22*r22;
IkReal x2619=((1.0)*x2618);
CheckValue<IkReal> x2623=IKPowWithIntegerCheck(((-1.0)+x2618),-1);
if(!x2623.valid){
continue;
}
IkReal x2620=x2623.value;
if((((1.0)+(((-1.0)*x2619)))) < -0.00001)
continue;
IkReal x2621=IKsqrt(((1.0)+(((-1.0)*x2619))));
IkReal x2622=(sj0*x2620*x2621);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2619*x2622))+x2622))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2624=((-1.0)*r21);
CheckValue<IkReal> x2627 = IKatan2WithCheck(IkReal(x2624),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2627.valid){
continue;
}
IkReal x2625=((1.0)*(x2627.value));
IkReal x2626=x2600;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2625)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2625)));
IkReal gconst82=(x2624*x2626);
IkReal gconst83=((1.0)*r20*x2626);
IkReal x2628=r22*r22;
IkReal x2629=(r12*sj0);
IkReal x2630=(cj0*r02);
CheckValue<IkReal> x2634=IKPowWithIntegerCheck(((-1.0)+x2628),-1);
if(!x2634.valid){
continue;
}
IkReal x2631=x2634.value;
if((((1.0)+(((-1.0)*x2628)))) < -0.00001)
continue;
IkReal x2632=IKsqrt(((1.0)+(((-1.0)*x2628))));
IkReal x2633=(r22*x2631*x2632);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x2630*x2633))+((x2629*x2633)))))+(IKabs(((((-1.0)*x2629))+(((-1.0)*x2630))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2635=((1.0)*sj0);
IkReal x2636=((1.0)*cj0);
CheckValue<IkReal> x2637=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2637.valid){
continue;
}
CheckValue<IkReal> x2638 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2636))+(((-1.0)*r12*x2635)))),IkReal(((((-1.0)*gconst82*r11*x2635))+(((-1.0)*gconst82*r01*x2636))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2637.value)))+(x2638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2639=IKsin(j4);
IkReal x2640=IKcos(j4);
IkReal x2641=(gconst82*r11);
IkReal x2642=((1.0)*cj2);
IkReal x2643=((1.0)*sj0);
IkReal x2644=(cj1*sj2);
IkReal x2645=((1.0)*x2640);
IkReal x2646=(gconst83*x2640);
IkReal x2647=(gconst82*x2639);
IkReal x2648=((1.0)*x2639);
evalcond[0]=((((-1.0)*gconst83*r20*x2648))+(((-1.0)*r22*x2645))+((r21*x2647)));
evalcond[1]=((((-1.0)*r12*x2645))+cj0+((x2639*x2641))+(((-1.0)*gconst83*r10*x2648)));
evalcond[2]=((((-1.0)*r02*x2645))+((r01*x2647))+(((-1.0)*x2643))+(((-1.0)*gconst83*r00*x2648)));
evalcond[3]=((((-1.0)*r22*x2648))+(((-1.0)*cj1*x2642))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2645))+((r20*x2646)));
evalcond[4]=((((-1.0)*r02*x2648))+(((-1.0)*cj0*sj1*x2642))+(((-1.0)*gconst82*r01*x2645))+((r00*x2646))+(((-1.0)*cj0*x2644)));
evalcond[5]=((((-1.0)*r12*x2648))+((r10*x2646))+(((-1.0)*x2641*x2645))+(((-1.0)*sj0*sj1*x2642))+(((-1.0)*x2643*x2644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2649=((1.0)*gconst83);
CheckValue<IkReal> x2650 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2650.valid){
continue;
}
CheckValue<IkReal> x2651=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2649))+(((-1.0)*gconst82*r10)))),-1);
if(!x2651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2650.value)+(((1.5707963267949)*(x2651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2652=IKsin(j4);
IkReal x2653=IKcos(j4);
IkReal x2654=(gconst82*r11);
IkReal x2655=((1.0)*cj2);
IkReal x2656=((1.0)*sj0);
IkReal x2657=(cj1*sj2);
IkReal x2658=((1.0)*x2653);
IkReal x2659=(gconst83*x2653);
IkReal x2660=(gconst82*x2652);
IkReal x2661=((1.0)*x2652);
evalcond[0]=((((-1.0)*r22*x2658))+((r21*x2660))+(((-1.0)*gconst83*r20*x2661)));
evalcond[1]=(cj0+(((-1.0)*r12*x2658))+(((-1.0)*gconst83*r10*x2661))+((x2652*x2654)));
evalcond[2]=((((-1.0)*r02*x2658))+(((-1.0)*x2656))+((r01*x2660))+(((-1.0)*gconst83*r00*x2661)));
evalcond[3]=((((-1.0)*cj1*x2655))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2658))+(((-1.0)*r22*x2661))+((r20*x2659)));
evalcond[4]=((((-1.0)*r02*x2661))+(((-1.0)*cj0*sj1*x2655))+(((-1.0)*gconst82*r01*x2658))+((r00*x2659))+(((-1.0)*cj0*x2657)));
evalcond[5]=((((-1.0)*r12*x2661))+((r10*x2659))+(((-1.0)*sj0*sj1*x2655))+(((-1.0)*x2656*x2657))+(((-1.0)*x2654*x2658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2662=((1.0)*gconst83);
CheckValue<IkReal> x2663 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2663.valid){
continue;
}
CheckValue<IkReal> x2664=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2662))+(((-1.0)*gconst82*r00)))),-1);
if(!x2664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2663.value)+(((1.5707963267949)*(x2664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2665=IKsin(j4);
IkReal x2666=IKcos(j4);
IkReal x2667=(gconst82*r11);
IkReal x2668=((1.0)*cj2);
IkReal x2669=((1.0)*sj0);
IkReal x2670=(cj1*sj2);
IkReal x2671=((1.0)*x2666);
IkReal x2672=(gconst83*x2666);
IkReal x2673=(gconst82*x2665);
IkReal x2674=((1.0)*x2665);
evalcond[0]=(((r21*x2673))+(((-1.0)*r22*x2671))+(((-1.0)*gconst83*r20*x2674)));
evalcond[1]=((((-1.0)*r12*x2671))+cj0+(((-1.0)*gconst83*r10*x2674))+((x2665*x2667)));
evalcond[2]=((((-1.0)*r02*x2671))+(((-1.0)*x2669))+((r01*x2673))+(((-1.0)*gconst83*r00*x2674)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2668))+(((-1.0)*gconst82*r21*x2671))+((r20*x2672))+(((-1.0)*r22*x2674)));
evalcond[4]=((((-1.0)*cj0*x2670))+(((-1.0)*cj0*sj1*x2668))+(((-1.0)*gconst82*r01*x2671))+(((-1.0)*r02*x2674))+((r00*x2672)));
evalcond[5]=((((-1.0)*r12*x2674))+(((-1.0)*sj0*sj1*x2668))+((r10*x2672))+(((-1.0)*x2667*x2671))+(((-1.0)*x2669*x2670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2675=((-1.0)*r10);
IkReal x2677 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2677)==0){
continue;
}
IkReal x2676=pow(x2677,-0.5);
CheckValue<IkReal> x2678 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2675),IKFAST_ATAN2_MAGTHRESH);
if(!x2678.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2678.value));
IkReal gconst85=(r11*x2676);
IkReal gconst86=(x2675*x2676);
CheckValue<IkReal> x2679 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2679.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2679.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2680=((-1.0)*r10);
IkReal x2681=x2676;
CheckValue<IkReal> x2683 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2680),IKFAST_ATAN2_MAGTHRESH);
if(!x2683.valid){
continue;
}
IkReal x2682=((-1.0)*(x2683.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2682;
IkReal gconst84=x2682;
IkReal gconst85=(r11*x2681);
IkReal gconst86=(x2680*x2681);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2684=((1.0)*sj0);
IkReal x2685=((1.0)*gconst85);
CheckValue<IkReal> x2686=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2685)))),-1);
if(!x2686.valid){
continue;
}
CheckValue<IkReal> x2687 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2684))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst85*r11*x2684))+((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2685))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2686.value)))+(x2687.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2688=IKsin(j4);
IkReal x2689=IKcos(j4);
IkReal x2690=(gconst85*r21);
IkReal x2691=(gconst86*r00);
IkReal x2692=(gconst86*r10);
IkReal x2693=((1.0)*cj2);
IkReal x2694=(gconst85*r11);
IkReal x2695=(gconst85*r01);
IkReal x2696=((1.0)*sj0);
IkReal x2697=(gconst86*r20);
IkReal x2698=(cj1*sj2);
IkReal x2699=((1.0)*x2689);
IkReal x2700=((1.0)*x2688);
evalcond[0]=((((-1.0)*x2697*x2700))+(((-1.0)*r22*x2699))+((x2688*x2690)));
evalcond[1]=(cj0+(((-1.0)*x2692*x2700))+(((-1.0)*r12*x2699))+((x2688*x2694)));
evalcond[2]=((((-1.0)*r02*x2699))+(((-1.0)*x2696))+(((-1.0)*x2691*x2700))+((x2688*x2695)));
evalcond[3]=((((-1.0)*r22*x2700))+(((-1.0)*cj1*x2693))+((sj1*sj2))+((x2689*x2697))+(((-1.0)*x2690*x2699)));
evalcond[4]=((((-1.0)*cj0*x2698))+(((-1.0)*r02*x2700))+((x2689*x2691))+(((-1.0)*cj0*sj1*x2693))+(((-1.0)*x2695*x2699)));
evalcond[5]=((((-1.0)*x2696*x2698))+(((-1.0)*r12*x2700))+((x2689*x2692))+(((-1.0)*sj0*sj1*x2693))+(((-1.0)*x2694*x2699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2701=((1.0)*gconst86);
CheckValue<IkReal> x2702=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2701))+(((-1.0)*gconst85*r00)))),-1);
if(!x2702.valid){
continue;
}
CheckValue<IkReal> x2703 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2701))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2702.value)))+(x2703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2704=IKsin(j4);
IkReal x2705=IKcos(j4);
IkReal x2706=(gconst85*r21);
IkReal x2707=(gconst86*r00);
IkReal x2708=(gconst86*r10);
IkReal x2709=((1.0)*cj2);
IkReal x2710=(gconst85*r11);
IkReal x2711=(gconst85*r01);
IkReal x2712=((1.0)*sj0);
IkReal x2713=(gconst86*r20);
IkReal x2714=(cj1*sj2);
IkReal x2715=((1.0)*x2705);
IkReal x2716=((1.0)*x2704);
evalcond[0]=(((x2704*x2706))+(((-1.0)*x2713*x2716))+(((-1.0)*r22*x2715)));
evalcond[1]=(cj0+(((-1.0)*x2708*x2716))+((x2704*x2710))+(((-1.0)*r12*x2715)));
evalcond[2]=((((-1.0)*x2712))+(((-1.0)*r02*x2715))+((x2704*x2711))+(((-1.0)*x2707*x2716)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2709))+(((-1.0)*x2706*x2715))+(((-1.0)*r22*x2716))+((x2705*x2713)));
evalcond[4]=(((x2705*x2707))+(((-1.0)*r02*x2716))+(((-1.0)*cj0*sj1*x2709))+(((-1.0)*x2711*x2715))+(((-1.0)*cj0*x2714)));
evalcond[5]=((((-1.0)*x2712*x2714))+((x2705*x2708))+(((-1.0)*sj0*sj1*x2709))+(((-1.0)*x2710*x2715))+(((-1.0)*r12*x2716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2717=((-1.0)*r11);
IkReal x2719 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2719)==0){
continue;
}
IkReal x2718=pow(x2719,-0.5);
CheckValue<IkReal> x2720 = IKatan2WithCheck(IkReal(x2717),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2720.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2720.value))));
IkReal gconst88=(x2717*x2718);
IkReal gconst89=((1.0)*r10*x2718);
CheckValue<IkReal> x2721 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2721.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2721.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2722=((-1.0)*r11);
CheckValue<IkReal> x2725 = IKatan2WithCheck(IkReal(x2722),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2725.valid){
continue;
}
IkReal x2723=((1.0)*(x2725.value));
IkReal x2724=x2718;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2723)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2723)));
IkReal gconst88=(x2722*x2724);
IkReal gconst89=((1.0)*r10*x2724);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2726=((-1.0)*r11);
CheckValue<IkReal> x2729 = IKatan2WithCheck(IkReal(x2726),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2729.valid){
continue;
}
IkReal x2727=((1.0)*(x2729.value));
IkReal x2728=x2718;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2727)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2727)));
IkReal gconst88=(x2726*x2728);
IkReal gconst89=((1.0)*r10*x2728);
IkReal x2730=r12*r12;
IkReal x2731=((1.0)*sj0);
IkReal x2732=(cj0*r02);
IkReal x2733=x2718;
j4eval[0]=((IKabs(((((-1.0)*x2732))+(((-1.0)*r12*x2731)))))+(IKabs(((((-1.0)*x2731*x2733))+((r12*x2732*x2733))+((sj0*x2730*x2733))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2734=((-1.0)*r11);
CheckValue<IkReal> x2737 = IKatan2WithCheck(IkReal(x2734),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2737.valid){
continue;
}
IkReal x2735=((1.0)*(x2737.value));
IkReal x2736=x2718;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2735)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2735)));
IkReal gconst88=(x2734*x2736);
IkReal gconst89=((1.0)*r10*x2736);
IkReal x2738=r12*r12;
IkReal x2739=(cj1*cj2*r22);
IkReal x2740=(r22*sj1*sj2);
CheckValue<IkReal> x2744=IKPowWithIntegerCheck(((-1.0)+x2738),-1);
if(!x2744.valid){
continue;
}
IkReal x2741=x2744.value;
if((((1.0)+(((-1.0)*x2738)))) < -0.00001)
continue;
IkReal x2742=IKsqrt(((1.0)+(((-1.0)*x2738))));
IkReal x2743=(r12*x2741*x2742);
j4eval[0]=((IKabs((((x2739*x2743))+(((-1.0)*x2740*x2743)))))+(IKabs((x2740+(((-1.0)*x2739))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2745=(cj1*cj2);
IkReal x2746=(gconst89*r20);
IkReal x2747=(gconst88*r21);
IkReal x2748=(sj1*sj2);
CheckValue<IkReal> x2749=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2746*x2746)+(((-2.0)*x2746*x2747))+(x2747*x2747))),-1);
if(!x2749.valid){
continue;
}
CheckValue<IkReal> x2750 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2745))+((r22*x2748)))),IkReal((((x2745*x2746))+(((-1.0)*x2745*x2747))+((x2747*x2748))+(((-1.0)*x2746*x2748)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2749.value)))+(x2750.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2751=IKsin(j4);
IkReal x2752=IKcos(j4);
IkReal x2753=((1.0)*sj0);
IkReal x2754=((1.0)*cj2);
IkReal x2755=(gconst89*r20);
IkReal x2756=(gconst89*r10);
IkReal x2757=(gconst89*r00);
IkReal x2758=(cj1*sj2);
IkReal x2759=((1.0)*x2752);
IkReal x2760=((1.0)*x2751);
IkReal x2761=(gconst88*x2751);
evalcond[0]=((((-1.0)*x2755*x2760))+(((-1.0)*r22*x2759))+((r21*x2761)));
evalcond[1]=(cj0+(((-1.0)*r12*x2759))+(((-1.0)*x2756*x2760))+((r11*x2761)));
evalcond[2]=(((r01*x2761))+(((-1.0)*x2757*x2760))+(((-1.0)*x2753))+(((-1.0)*r02*x2759)));
evalcond[3]=(((x2752*x2755))+(((-1.0)*gconst88*r21*x2759))+((sj1*sj2))+(((-1.0)*cj1*x2754))+(((-1.0)*r22*x2760)));
evalcond[4]=((((-1.0)*gconst88*r01*x2759))+((x2752*x2757))+(((-1.0)*r02*x2760))+(((-1.0)*cj0*x2758))+(((-1.0)*cj0*sj1*x2754)));
evalcond[5]=(((x2752*x2756))+(((-1.0)*gconst88*r11*x2759))+(((-1.0)*r12*x2760))+(((-1.0)*cj2*sj1*x2753))+(((-1.0)*x2753*x2758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2762=((1.0)*sj0);
IkReal x2763=((1.0)*cj0);
CheckValue<IkReal> x2764 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2762))+(((-1.0)*r02*x2763)))),IkReal(((((-1.0)*gconst88*r01*x2763))+(((-1.0)*gconst88*r11*x2762))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2764.valid){
continue;
}
CheckValue<IkReal> x2765=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2764.value)+(((1.5707963267949)*(x2765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2766=IKsin(j4);
IkReal x2767=IKcos(j4);
IkReal x2768=((1.0)*sj0);
IkReal x2769=((1.0)*cj2);
IkReal x2770=(gconst89*r20);
IkReal x2771=(gconst89*r10);
IkReal x2772=(gconst89*r00);
IkReal x2773=(cj1*sj2);
IkReal x2774=((1.0)*x2767);
IkReal x2775=((1.0)*x2766);
IkReal x2776=(gconst88*x2766);
evalcond[0]=((((-1.0)*x2770*x2775))+((r21*x2776))+(((-1.0)*r22*x2774)));
evalcond[1]=(((r11*x2776))+cj0+(((-1.0)*r12*x2774))+(((-1.0)*x2771*x2775)));
evalcond[2]=(((r01*x2776))+(((-1.0)*r02*x2774))+(((-1.0)*x2768))+(((-1.0)*x2772*x2775)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*gconst88*r21*x2774))+(((-1.0)*cj1*x2769))+((x2767*x2770))+(((-1.0)*r22*x2775)));
evalcond[4]=((((-1.0)*cj0*x2773))+(((-1.0)*r02*x2775))+(((-1.0)*gconst88*r01*x2774))+(((-1.0)*cj0*sj1*x2769))+((x2767*x2772)));
evalcond[5]=((((-1.0)*x2768*x2773))+(((-1.0)*gconst88*r11*x2774))+(((-1.0)*r12*x2775))+(((-1.0)*cj2*sj1*x2768))+((x2767*x2771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2777=((1.0)*gconst89);
CheckValue<IkReal> x2778=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2777))+(((-1.0)*gconst88*r00)))),-1);
if(!x2778.valid){
continue;
}
CheckValue<IkReal> x2779 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2777))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2778.value)))+(x2779.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2780=IKsin(j4);
IkReal x2781=IKcos(j4);
IkReal x2782=((1.0)*sj0);
IkReal x2783=((1.0)*cj2);
IkReal x2784=(gconst89*r20);
IkReal x2785=(gconst89*r10);
IkReal x2786=(gconst89*r00);
IkReal x2787=(cj1*sj2);
IkReal x2788=((1.0)*x2781);
IkReal x2789=((1.0)*x2780);
IkReal x2790=(gconst88*x2780);
evalcond[0]=((((-1.0)*x2784*x2789))+((r21*x2790))+(((-1.0)*r22*x2788)));
evalcond[1]=((((-1.0)*r12*x2788))+cj0+((r11*x2790))+(((-1.0)*x2785*x2789)));
evalcond[2]=((((-1.0)*x2782))+(((-1.0)*x2786*x2789))+((r01*x2790))+(((-1.0)*r02*x2788)));
evalcond[3]=((((-1.0)*cj1*x2783))+((x2781*x2784))+(((-1.0)*gconst88*r21*x2788))+((sj1*sj2))+(((-1.0)*r22*x2789)));
evalcond[4]=(((x2781*x2786))+(((-1.0)*cj0*sj1*x2783))+(((-1.0)*cj0*x2787))+(((-1.0)*gconst88*r01*x2788))+(((-1.0)*r02*x2789)));
evalcond[5]=((((-1.0)*cj2*sj1*x2782))+(((-1.0)*r12*x2789))+((x2781*x2785))+(((-1.0)*x2782*x2787))+(((-1.0)*gconst88*r11*x2788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2791=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2791;
j4eval[1]=IKsign(x2791);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2792=((1.0)*cj5);
IkReal x2793=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2792)));
j4eval[0]=x2793;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2792))+((r21*sj5))))));
j4eval[2]=IKsign(x2793);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2794=cj5*cj5;
IkReal x2795=r11*r11;
IkReal x2796=(r11*sj5);
IkReal x2797=(cj5*r10);
IkReal x2798=(x2795+(r12*r12)+(((-2.0)*x2796*x2797))+((x2794*(r10*r10)))+(((-1.0)*x2794*x2795)));
j4eval[0]=x2798;
j4eval[1]=IKsign(x2798);
j4eval[2]=((IKabs(r12))+(IKabs((x2797+(((-1.0)*x2796))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2799=cj5*cj5;
IkReal x2800=r11*r11;
IkReal x2801=(cj5*r10);
IkReal x2802=(r11*sj5);
CheckValue<IkReal> x2803=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x2799*x2800))+((x2799*(r10*r10)))+(((-2.0)*x2801*x2802))+x2800)),-1);
if(!x2803.valid){
continue;
}
CheckValue<IkReal> x2804 = IKatan2WithCheck(IkReal(((((-1.0)*x2802))+x2801)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2803.value)))+(x2804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2805=IKsin(j4);
IkReal x2806=IKcos(j4);
IkReal x2807=(cj5*r10);
IkReal x2808=(r01*sj5);
IkReal x2809=((1.0)*cj2);
IkReal x2810=(cj5*r00);
IkReal x2811=(cj5*r20);
IkReal x2812=((1.0)*x2806);
IkReal x2813=((1.0)*x2805);
IkReal x2814=(sj5*x2805);
evalcond[0]=(((r21*x2814))+(((-1.0)*r22*x2812))+(((-1.0)*x2811*x2813)));
evalcond[1]=((((-1.0)*x2810*x2813))+(((-1.0)*r02*x2812))+((x2805*x2808)));
evalcond[2]=((((-1.0)*r12*x2813))+(((-1.0)*r11*sj5*x2812))+((x2806*x2807)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2812))+(((-1.0)*x2807*x2813))+((r11*x2814)));
evalcond[4]=((((-1.0)*cj1*x2809))+((sj1*sj2))+(((-1.0)*r22*x2813))+(((-1.0)*r21*sj5*x2812))+((x2806*x2811)));
evalcond[5]=((((-1.0)*sj1*x2809))+(((-1.0)*r02*x2813))+(((-1.0)*cj1*sj2))+(((-1.0)*x2808*x2812))+((x2806*x2810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2815=((1.0)*cj5);
CheckValue<IkReal> x2816 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2815)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2816.valid){
continue;
}
CheckValue<IkReal> x2817=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2815)))),-1);
if(!x2817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2816.value)+(((1.5707963267949)*(x2817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2818=IKsin(j4);
IkReal x2819=IKcos(j4);
IkReal x2820=(cj5*r10);
IkReal x2821=(r01*sj5);
IkReal x2822=((1.0)*cj2);
IkReal x2823=(cj5*r00);
IkReal x2824=(cj5*r20);
IkReal x2825=((1.0)*x2819);
IkReal x2826=((1.0)*x2818);
IkReal x2827=(sj5*x2818);
evalcond[0]=((((-1.0)*x2824*x2826))+((r21*x2827))+(((-1.0)*r22*x2825)));
evalcond[1]=(((x2818*x2821))+(((-1.0)*r02*x2825))+(((-1.0)*x2823*x2826)));
evalcond[2]=((((-1.0)*r12*x2826))+((x2819*x2820))+(((-1.0)*r11*sj5*x2825)));
evalcond[3]=((1.0)+(((-1.0)*x2820*x2826))+(((-1.0)*r12*x2825))+((r11*x2827)));
evalcond[4]=((((-1.0)*cj1*x2822))+((x2819*x2824))+((sj1*sj2))+(((-1.0)*r22*x2826))+(((-1.0)*r21*sj5*x2825)));
evalcond[5]=(((x2819*x2823))+(((-1.0)*x2821*x2825))+(((-1.0)*sj1*x2822))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2828=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2828.valid){
continue;
}
CheckValue<IkReal> x2829 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2828.value)))+(x2829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2830=IKsin(j4);
IkReal x2831=IKcos(j4);
IkReal x2832=(cj5*r10);
IkReal x2833=(r01*sj5);
IkReal x2834=((1.0)*cj2);
IkReal x2835=(cj5*r00);
IkReal x2836=(cj5*r20);
IkReal x2837=((1.0)*x2831);
IkReal x2838=((1.0)*x2830);
IkReal x2839=(sj5*x2830);
evalcond[0]=((((-1.0)*x2836*x2838))+(((-1.0)*r22*x2837))+((r21*x2839)));
evalcond[1]=(((x2830*x2833))+(((-1.0)*x2835*x2838))+(((-1.0)*r02*x2837)));
evalcond[2]=(((x2831*x2832))+(((-1.0)*r12*x2838))+(((-1.0)*r11*sj5*x2837)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2837))+(((-1.0)*x2832*x2838))+((r11*x2839)));
evalcond[4]=((((-1.0)*cj1*x2834))+(((-1.0)*r21*sj5*x2837))+((x2831*x2836))+((sj1*sj2))+(((-1.0)*r22*x2838)));
evalcond[5]=((((-1.0)*sj1*x2834))+((x2831*x2835))+(((-1.0)*cj1*sj2))+(((-1.0)*x2833*x2837))+(((-1.0)*r02*x2838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2840=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2840;
j4eval[1]=IKsign(x2840);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2841=((1.0)*cj5);
IkReal x2842=((((-1.0)*r21*x2841))+(((-1.0)*r20*sj5)));
j4eval[0]=x2842;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2841))))));
j4eval[2]=IKsign(x2842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2843=cj5*cj5;
IkReal x2844=r11*r11;
IkReal x2845=(cj5*r10);
IkReal x2846=(r11*sj5);
IkReal x2847=((((2.0)*x2845*x2846))+((x2843*x2844))+(((-1.0)*(r12*r12)))+(((-1.0)*x2844))+(((-1.0)*x2843*(r10*r10))));
j4eval[0]=x2847;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2846))+x2845))));
j4eval[2]=IKsign(x2847);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2848=cj5*cj5;
IkReal x2849=r11*r11;
IkReal x2850=(cj5*r10);
IkReal x2851=(r11*sj5);
CheckValue<IkReal> x2852=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2848*(r10*r10)))+((x2848*x2849))+(((-1.0)*(r12*r12)))+(((2.0)*x2850*x2851))+(((-1.0)*x2849)))),-1);
if(!x2852.valid){
continue;
}
CheckValue<IkReal> x2853 = IKatan2WithCheck(IkReal(((((-1.0)*x2851))+x2850)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2852.value)))+(x2853.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2854=IKsin(j4);
IkReal x2855=IKcos(j4);
IkReal x2856=(cj5*r10);
IkReal x2857=(r01*sj5);
IkReal x2858=(cj5*r00);
IkReal x2859=(cj5*r20);
IkReal x2860=((1.0)*x2855);
IkReal x2861=((1.0)*x2854);
IkReal x2862=(sj5*x2854);
evalcond[0]=(((r21*x2862))+(((-1.0)*r22*x2860))+(((-1.0)*x2859*x2861)));
evalcond[1]=((((-1.0)*r02*x2860))+(((-1.0)*x2858*x2861))+((x2854*x2857)));
evalcond[2]=(((x2855*x2856))+(((-1.0)*r12*x2861))+(((-1.0)*r11*sj5*x2860)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2860))+((r11*x2862))+(((-1.0)*x2856*x2861)));
evalcond[4]=(((x2855*x2858))+(((-1.0)*r02*x2861))+((cj2*sj1))+(((-1.0)*x2857*x2860))+((cj1*sj2)));
evalcond[5]=(((x2855*x2859))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2861))+(((-1.0)*r21*sj5*x2860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2863=((1.0)*cj5);
CheckValue<IkReal> x2864=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2863))+(((-1.0)*r20*sj5)))),-1);
if(!x2864.valid){
continue;
}
CheckValue<IkReal> x2865 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2863)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2864.value)))+(x2865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2866=IKsin(j4);
IkReal x2867=IKcos(j4);
IkReal x2868=(cj5*r10);
IkReal x2869=(r01*sj5);
IkReal x2870=(cj5*r00);
IkReal x2871=(cj5*r20);
IkReal x2872=((1.0)*x2867);
IkReal x2873=((1.0)*x2866);
IkReal x2874=(sj5*x2866);
evalcond[0]=((((-1.0)*x2871*x2873))+(((-1.0)*r22*x2872))+((r21*x2874)));
evalcond[1]=((((-1.0)*r02*x2872))+((x2866*x2869))+(((-1.0)*x2870*x2873)));
evalcond[2]=((((-1.0)*r11*sj5*x2872))+((x2867*x2868))+(((-1.0)*r12*x2873)));
evalcond[3]=((-1.0)+(((-1.0)*x2868*x2873))+((r11*x2874))+(((-1.0)*r12*x2872)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2873))+((cj1*sj2))+(((-1.0)*x2869*x2872))+((x2867*x2870)));
evalcond[5]=((((-1.0)*r22*x2873))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2867*x2871))+(((-1.0)*r21*sj5*x2872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2875 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2875.valid){
continue;
}
CheckValue<IkReal> x2876=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2875.value)+(((1.5707963267949)*(x2876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2877=IKsin(j4);
IkReal x2878=IKcos(j4);
IkReal x2879=(cj5*r10);
IkReal x2880=(r01*sj5);
IkReal x2881=(cj5*r00);
IkReal x2882=(cj5*r20);
IkReal x2883=((1.0)*x2878);
IkReal x2884=((1.0)*x2877);
IkReal x2885=(sj5*x2877);
evalcond[0]=((((-1.0)*r22*x2883))+(((-1.0)*x2882*x2884))+((r21*x2885)));
evalcond[1]=(((x2877*x2880))+(((-1.0)*r02*x2883))+(((-1.0)*x2881*x2884)));
evalcond[2]=((((-1.0)*r11*sj5*x2883))+((x2878*x2879))+(((-1.0)*r12*x2884)));
evalcond[3]=((-1.0)+((r11*x2885))+(((-1.0)*x2879*x2884))+(((-1.0)*r12*x2883)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2884))+((cj1*sj2))+((x2878*x2881))+(((-1.0)*x2880*x2883)));
evalcond[5]=((((-1.0)*r22*x2884))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2878*x2882))+(((-1.0)*r21*sj5*x2883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2886=((-1.0)*r00);
IkReal x2888 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2888)==0){
continue;
}
IkReal x2887=pow(x2888,-0.5);
CheckValue<IkReal> x2889 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2886),IKFAST_ATAN2_MAGTHRESH);
if(!x2889.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2889.value));
IkReal gconst91=(r01*x2887);
IkReal gconst92=(x2886*x2887);
CheckValue<IkReal> x2890 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2890.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2890.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2891=((-1.0)*r00);
IkReal x2892=x2887;
CheckValue<IkReal> x2894 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2891),IKFAST_ATAN2_MAGTHRESH);
if(!x2894.valid){
continue;
}
IkReal x2893=((-1.0)*(x2894.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2893;
IkReal gconst90=x2893;
IkReal gconst91=(r01*x2892);
IkReal gconst92=(x2891*x2892);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2895=((1.0)*sj0);
IkReal x2896=((1.0)*cj0);
CheckValue<IkReal> x2897=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2897.valid){
continue;
}
CheckValue<IkReal> x2898 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2896))+(((-1.0)*r12*x2895)))),IkReal(((((-1.0)*gconst91*r11*x2895))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2897.value)))+(x2898.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2899=IKsin(j4);
IkReal x2900=IKcos(j4);
IkReal x2901=((1.0)*cj2);
IkReal x2902=(gconst92*r00);
IkReal x2903=(gconst92*r20);
IkReal x2904=((1.0)*sj0);
IkReal x2905=(gconst92*r10);
IkReal x2906=(cj1*sj2);
IkReal x2907=((1.0)*x2900);
IkReal x2908=(gconst91*x2899);
IkReal x2909=((1.0)*x2899);
evalcond[0]=(((r21*x2908))+(((-1.0)*x2903*x2909))+(((-1.0)*r22*x2907)));
evalcond[1]=(cj0+(((-1.0)*x2905*x2909))+(((-1.0)*r12*x2907))+((r11*x2908)));
evalcond[2]=((((-1.0)*x2902*x2909))+(((-1.0)*r02*x2907))+((r01*x2908))+(((-1.0)*x2904)));
evalcond[3]=(((x2900*x2903))+((sj1*sj2))+(((-1.0)*cj1*x2901))+(((-1.0)*gconst91*r21*x2907))+(((-1.0)*r22*x2909)));
evalcond[4]=((((-1.0)*r02*x2909))+(((-1.0)*cj0*x2906))+((x2900*x2902))+(((-1.0)*cj0*sj1*x2901))+(((-1.0)*gconst91*r01*x2907)));
evalcond[5]=((((-1.0)*x2904*x2906))+((x2900*x2905))+(((-1.0)*gconst91*r11*x2907))+(((-1.0)*sj0*sj1*x2901))+(((-1.0)*r12*x2909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2910=((1.0)*gconst92);
CheckValue<IkReal> x2911=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2910)))),-1);
if(!x2911.valid){
continue;
}
CheckValue<IkReal> x2912 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2910)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2911.value)))+(x2912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2913=IKsin(j4);
IkReal x2914=IKcos(j4);
IkReal x2915=((1.0)*cj2);
IkReal x2916=(gconst92*r00);
IkReal x2917=(gconst92*r20);
IkReal x2918=((1.0)*sj0);
IkReal x2919=(gconst92*r10);
IkReal x2920=(cj1*sj2);
IkReal x2921=((1.0)*x2914);
IkReal x2922=(gconst91*x2913);
IkReal x2923=((1.0)*x2913);
evalcond[0]=(((r21*x2922))+(((-1.0)*x2917*x2923))+(((-1.0)*r22*x2921)));
evalcond[1]=(cj0+(((-1.0)*x2919*x2923))+(((-1.0)*r12*x2921))+((r11*x2922)));
evalcond[2]=((((-1.0)*r02*x2921))+(((-1.0)*x2916*x2923))+((r01*x2922))+(((-1.0)*x2918)));
evalcond[3]=((((-1.0)*gconst91*r21*x2921))+((x2914*x2917))+((sj1*sj2))+(((-1.0)*cj1*x2915))+(((-1.0)*r22*x2923)));
evalcond[4]=((((-1.0)*cj0*sj1*x2915))+((x2914*x2916))+(((-1.0)*r02*x2923))+(((-1.0)*cj0*x2920))+(((-1.0)*gconst91*r01*x2921)));
evalcond[5]=(((x2914*x2919))+(((-1.0)*x2918*x2920))+(((-1.0)*r12*x2923))+(((-1.0)*gconst91*r11*x2921))+(((-1.0)*sj0*sj1*x2915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2924=((-1.0)*r01);
IkReal x2926 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2926)==0){
continue;
}
IkReal x2925=pow(x2926,-0.5);
CheckValue<IkReal> x2927 = IKatan2WithCheck(IkReal(x2924),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2927.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2927.value))));
IkReal gconst94=(x2924*x2925);
IkReal gconst95=((1.0)*r00*x2925);
CheckValue<IkReal> x2928 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2928.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2928.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2929=((-1.0)*r01);
CheckValue<IkReal> x2932 = IKatan2WithCheck(IkReal(x2929),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2932.valid){
continue;
}
IkReal x2930=((1.0)*(x2932.value));
IkReal x2931=x2925;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2930)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2930)));
IkReal gconst94=(x2929*x2931);
IkReal gconst95=((1.0)*r00*x2931);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2933=((-1.0)*r01);
CheckValue<IkReal> x2936 = IKatan2WithCheck(IkReal(x2933),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2936.valid){
continue;
}
IkReal x2934=((1.0)*(x2936.value));
IkReal x2935=x2925;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2934)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2934)));
IkReal gconst94=(x2933*x2935);
IkReal gconst95=((1.0)*r00*x2935);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2937=((-1.0)*r01);
CheckValue<IkReal> x2940 = IKatan2WithCheck(IkReal(x2937),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2940.valid){
continue;
}
IkReal x2938=((1.0)*(x2940.value));
IkReal x2939=x2925;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2938)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2938)));
IkReal gconst94=(x2937*x2939);
IkReal gconst95=((1.0)*r00*x2939);
IkReal x2941=r02*r02;
IkReal x2942=(r12*sj0);
IkReal x2943=((1.0)*cj0);
IkReal x2944=x2925;
j4eval[0]=((IKabs((((cj0*x2941*x2944))+(((-1.0)*x2943*x2944))+((r02*x2942*x2944)))))+(IKabs(((((-1.0)*x2942))+(((-1.0)*r02*x2943))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2945=((1.0)*sj0);
IkReal x2946=((1.0)*cj0);
CheckValue<IkReal> x2947=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2947.valid){
continue;
}
CheckValue<IkReal> x2948 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2945))+(((-1.0)*r02*x2946)))),IkReal(((((-1.0)*gconst94*r01*x2946))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x2945))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2947.value)))+(x2948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2949=IKsin(j4);
IkReal x2950=IKcos(j4);
IkReal x2951=(gconst94*r11);
IkReal x2952=((1.0)*cj2);
IkReal x2953=(gconst94*r21);
IkReal x2954=((1.0)*sj0);
IkReal x2955=(gconst94*r01);
IkReal x2956=(cj1*sj2);
IkReal x2957=((1.0)*x2950);
IkReal x2958=(gconst95*x2950);
IkReal x2959=((1.0)*x2949);
IkReal x2960=(gconst95*x2959);
evalcond[0]=((((-1.0)*r20*x2960))+(((-1.0)*r22*x2957))+((x2949*x2953)));
evalcond[1]=(cj0+(((-1.0)*r12*x2957))+((x2949*x2951))+(((-1.0)*r10*x2960)));
evalcond[2]=((((-1.0)*r02*x2957))+(((-1.0)*x2954))+(((-1.0)*r00*x2960))+((x2949*x2955)));
evalcond[3]=((((-1.0)*x2953*x2957))+((sj1*sj2))+((r20*x2958))+(((-1.0)*r22*x2959))+(((-1.0)*cj1*x2952)));
evalcond[4]=((((-1.0)*r02*x2959))+(((-1.0)*cj0*x2956))+(((-1.0)*cj0*sj1*x2952))+(((-1.0)*x2955*x2957))+((r00*x2958)));
evalcond[5]=(((r10*x2958))+(((-1.0)*sj0*sj1*x2952))+(((-1.0)*x2954*x2956))+(((-1.0)*x2951*x2957))+(((-1.0)*r12*x2959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2961=((1.0)*gconst95);
CheckValue<IkReal> x2962=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2961))+(((-1.0)*gconst94*r10)))),-1);
if(!x2962.valid){
continue;
}
CheckValue<IkReal> x2963 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2962.value)))+(x2963.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2964=IKsin(j4);
IkReal x2965=IKcos(j4);
IkReal x2966=(gconst94*r11);
IkReal x2967=((1.0)*cj2);
IkReal x2968=(gconst94*r21);
IkReal x2969=((1.0)*sj0);
IkReal x2970=(gconst94*r01);
IkReal x2971=(cj1*sj2);
IkReal x2972=((1.0)*x2965);
IkReal x2973=(gconst95*x2965);
IkReal x2974=((1.0)*x2964);
IkReal x2975=(gconst95*x2974);
evalcond[0]=((((-1.0)*r20*x2975))+(((-1.0)*r22*x2972))+((x2964*x2968)));
evalcond[1]=(cj0+(((-1.0)*r12*x2972))+(((-1.0)*r10*x2975))+((x2964*x2966)));
evalcond[2]=(((x2964*x2970))+(((-1.0)*r02*x2972))+(((-1.0)*r00*x2975))+(((-1.0)*x2969)));
evalcond[3]=((((-1.0)*x2968*x2972))+((sj1*sj2))+(((-1.0)*r22*x2974))+(((-1.0)*cj1*x2967))+((r20*x2973)));
evalcond[4]=((((-1.0)*cj0*x2971))+(((-1.0)*r02*x2974))+((r00*x2973))+(((-1.0)*cj0*sj1*x2967))+(((-1.0)*x2970*x2972)));
evalcond[5]=((((-1.0)*r12*x2974))+((r10*x2973))+(((-1.0)*x2969*x2971))+(((-1.0)*sj0*sj1*x2967))+(((-1.0)*x2966*x2972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2976=((1.0)*gconst95);
CheckValue<IkReal> x2977=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2976)))),-1);
if(!x2977.valid){
continue;
}
CheckValue<IkReal> x2978 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2976)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2977.value)))+(x2978.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2979=IKsin(j4);
IkReal x2980=IKcos(j4);
IkReal x2981=(gconst94*r11);
IkReal x2982=((1.0)*cj2);
IkReal x2983=(gconst94*r21);
IkReal x2984=((1.0)*sj0);
IkReal x2985=(gconst94*r01);
IkReal x2986=(cj1*sj2);
IkReal x2987=((1.0)*x2980);
IkReal x2988=(gconst95*x2980);
IkReal x2989=((1.0)*x2979);
IkReal x2990=(gconst95*x2989);
evalcond[0]=((((-1.0)*r22*x2987))+(((-1.0)*r20*x2990))+((x2979*x2983)));
evalcond[1]=(cj0+(((-1.0)*r12*x2987))+(((-1.0)*r10*x2990))+((x2979*x2981)));
evalcond[2]=((((-1.0)*x2984))+(((-1.0)*r02*x2987))+((x2979*x2985))+(((-1.0)*r00*x2990)));
evalcond[3]=((((-1.0)*cj1*x2982))+((sj1*sj2))+((r20*x2988))+(((-1.0)*r22*x2989))+(((-1.0)*x2983*x2987)));
evalcond[4]=((((-1.0)*x2985*x2987))+(((-1.0)*cj0*x2986))+((r00*x2988))+(((-1.0)*cj0*sj1*x2982))+(((-1.0)*r02*x2989)));
evalcond[5]=((((-1.0)*x2984*x2986))+(((-1.0)*x2981*x2987))+(((-1.0)*r12*x2989))+(((-1.0)*sj0*sj1*x2982))+((r10*x2988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2991=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2991;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2992=((1.0)*cj5);
IkReal x2993=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2992)));
j4eval[0]=x2993;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2992)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2993);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2994=cj5*cj5;
IkReal x2995=r01*r01;
IkReal x2996=(r01*sj5);
IkReal x2997=(cj5*r00);
IkReal x2998=((((-1.0)*x2994*(r00*r00)))+(((2.0)*x2996*x2997))+(((-1.0)*(r02*r02)))+(((-1.0)*x2995))+((x2994*x2995)));
j4eval[0]=x2998;
j4eval[1]=IKsign(x2998);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2996))+x2997))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2999=cj5*cj5;
IkReal x3000=r01*r01;
IkReal x3001=(r01*sj5);
IkReal x3002=(cj5*r00);
CheckValue<IkReal> x3003=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3000))+((x2999*x3000))+(((-1.0)*(r02*r02)))+(((-1.0)*x2999*(r00*r00)))+(((2.0)*x3001*x3002)))),-1);
if(!x3003.valid){
continue;
}
CheckValue<IkReal> x3004 = IKatan2WithCheck(IkReal(((((-1.0)*x3001))+x3002)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3003.value)))+(x3004.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3005=IKsin(j4);
IkReal x3006=IKcos(j4);
IkReal x3007=(cj5*r10);
IkReal x3008=(r01*sj5);
IkReal x3009=((1.0)*cj2);
IkReal x3010=(cj5*r00);
IkReal x3011=(cj5*r20);
IkReal x3012=((1.0)*x3006);
IkReal x3013=((1.0)*x3005);
IkReal x3014=(sj5*x3005);
evalcond[0]=((((-1.0)*r22*x3012))+(((-1.0)*x3011*x3013))+((r21*x3014)));
evalcond[1]=((((-1.0)*r12*x3012))+((r11*x3014))+(((-1.0)*x3007*x3013)));
evalcond[2]=((((-1.0)*r02*x3013))+((x3006*x3010))+(((-1.0)*x3008*x3012)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3012))+(((-1.0)*x3010*x3013))+((x3005*x3008)));
evalcond[4]=((((-1.0)*r22*x3013))+(((-1.0)*r21*sj5*x3012))+((sj1*sj2))+(((-1.0)*cj1*x3009))+((x3006*x3011)));
evalcond[5]=((((-1.0)*r11*sj5*x3012))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3013))+(((-1.0)*sj1*x3009))+((x3006*x3007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3015=((1.0)*cj5);
CheckValue<IkReal> x3016=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3015)))),-1);
if(!x3016.valid){
continue;
}
CheckValue<IkReal> x3017 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3015)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3016.value)))+(x3017.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3018=IKsin(j4);
IkReal x3019=IKcos(j4);
IkReal x3020=(cj5*r10);
IkReal x3021=(r01*sj5);
IkReal x3022=((1.0)*cj2);
IkReal x3023=(cj5*r00);
IkReal x3024=(cj5*r20);
IkReal x3025=((1.0)*x3019);
IkReal x3026=((1.0)*x3018);
IkReal x3027=(sj5*x3018);
evalcond[0]=(((r21*x3027))+(((-1.0)*x3024*x3026))+(((-1.0)*r22*x3025)));
evalcond[1]=((((-1.0)*r12*x3025))+((r11*x3027))+(((-1.0)*x3020*x3026)));
evalcond[2]=(((x3019*x3023))+(((-1.0)*x3021*x3025))+(((-1.0)*r02*x3026)));
evalcond[3]=((-1.0)+(((-1.0)*x3023*x3026))+((x3018*x3021))+(((-1.0)*r02*x3025)));
evalcond[4]=(((x3019*x3024))+(((-1.0)*cj1*x3022))+((sj1*sj2))+(((-1.0)*r22*x3026))+(((-1.0)*r21*sj5*x3025)));
evalcond[5]=((((-1.0)*r12*x3026))+((x3019*x3020))+(((-1.0)*r11*sj5*x3025))+(((-1.0)*sj1*x3022))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3028=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3028.valid){
continue;
}
CheckValue<IkReal> x3029 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3028.value)))+(x3029.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3030=IKsin(j4);
IkReal x3031=IKcos(j4);
IkReal x3032=(cj5*r10);
IkReal x3033=(r01*sj5);
IkReal x3034=((1.0)*cj2);
IkReal x3035=(cj5*r00);
IkReal x3036=(cj5*r20);
IkReal x3037=((1.0)*x3031);
IkReal x3038=((1.0)*x3030);
IkReal x3039=(sj5*x3030);
evalcond[0]=((((-1.0)*x3036*x3038))+((r21*x3039))+(((-1.0)*r22*x3037)));
evalcond[1]=(((r11*x3039))+(((-1.0)*r12*x3037))+(((-1.0)*x3032*x3038)));
evalcond[2]=((((-1.0)*r02*x3038))+(((-1.0)*x3033*x3037))+((x3031*x3035)));
evalcond[3]=((-1.0)+((x3030*x3033))+(((-1.0)*x3035*x3038))+(((-1.0)*r02*x3037)));
evalcond[4]=((((-1.0)*cj1*x3034))+(((-1.0)*r21*sj5*x3037))+((sj1*sj2))+(((-1.0)*r22*x3038))+((x3031*x3036)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r12*x3038))+((x3031*x3032))+(((-1.0)*r11*sj5*x3037))+(((-1.0)*sj1*x3034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3040=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3040;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3040);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3041=((1.0)*cj5);
IkReal x3042=((((-1.0)*r21*x3041))+(((-1.0)*r20*sj5)));
j4eval[0]=x3042;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3041))+((r11*sj5))))));
j4eval[2]=IKsign(x3042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3043=cj5*cj5;
IkReal x3044=r01*r01;
IkReal x3045=(cj5*r00);
IkReal x3046=(r01*sj5);
IkReal x3047=((((-2.0)*x3045*x3046))+((x3043*(r00*r00)))+x3044+(r02*r02)+(((-1.0)*x3043*x3044)));
j4eval[0]=x3047;
j4eval[1]=((IKabs(r02))+(IKabs((x3045+(((-1.0)*x3046))))));
j4eval[2]=IKsign(x3047);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3048=cj5*cj5;
IkReal x3049=r01*r01;
IkReal x3050=(r01*sj5);
IkReal x3051=(cj5*r00);
CheckValue<IkReal> x3052 = IKatan2WithCheck(IkReal((x3051+(((-1.0)*x3050)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3052.valid){
continue;
}
CheckValue<IkReal> x3053=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3048*x3049))+(((-2.0)*x3050*x3051))+x3049+(r02*r02)+((x3048*(r00*r00))))),-1);
if(!x3053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3052.value)+(((1.5707963267949)*(x3053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3054=IKsin(j4);
IkReal x3055=IKcos(j4);
IkReal x3056=(cj5*r10);
IkReal x3057=(r01*sj5);
IkReal x3058=(cj5*r00);
IkReal x3059=(cj5*r20);
IkReal x3060=((1.0)*x3055);
IkReal x3061=((1.0)*x3054);
IkReal x3062=(sj5*x3054);
evalcond[0]=((((-1.0)*r22*x3060))+(((-1.0)*x3059*x3061))+((r21*x3062)));
evalcond[1]=((((-1.0)*r12*x3060))+((r11*x3062))+(((-1.0)*x3056*x3061)));
evalcond[2]=((((-1.0)*r02*x3061))+((x3055*x3058))+(((-1.0)*x3057*x3060)));
evalcond[3]=((1.0)+(((-1.0)*x3058*x3061))+(((-1.0)*r02*x3060))+((x3054*x3057)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x3060))+((cj1*sj2))+(((-1.0)*r12*x3061))+((x3055*x3056)));
evalcond[5]=((((-1.0)*r21*sj5*x3060))+(((-1.0)*r22*x3061))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3055*x3059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3063=((1.0)*cj5);
CheckValue<IkReal> x3064=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3063))+(((-1.0)*r20*sj5)))),-1);
if(!x3064.valid){
continue;
}
CheckValue<IkReal> x3065 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3063))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3064.value)))+(x3065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3066=IKsin(j4);
IkReal x3067=IKcos(j4);
IkReal x3068=(cj5*r10);
IkReal x3069=(r01*sj5);
IkReal x3070=(cj5*r00);
IkReal x3071=(cj5*r20);
IkReal x3072=((1.0)*x3067);
IkReal x3073=((1.0)*x3066);
IkReal x3074=(sj5*x3066);
evalcond[0]=((((-1.0)*r22*x3072))+(((-1.0)*x3071*x3073))+((r21*x3074)));
evalcond[1]=((((-1.0)*r12*x3072))+((r11*x3074))+(((-1.0)*x3068*x3073)));
evalcond[2]=((((-1.0)*r02*x3073))+(((-1.0)*x3069*x3072))+((x3067*x3070)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3072))+((x3066*x3069))+(((-1.0)*x3070*x3073)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x3072))+(((-1.0)*r12*x3073))+((x3067*x3068)));
evalcond[5]=((((-1.0)*r21*sj5*x3072))+(((-1.0)*r22*x3073))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3067*x3071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3075 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3075.valid){
continue;
}
CheckValue<IkReal> x3076=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3075.value)+(((1.5707963267949)*(x3076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3077=IKsin(j4);
IkReal x3078=IKcos(j4);
IkReal x3079=(cj5*r10);
IkReal x3080=(r01*sj5);
IkReal x3081=(cj5*r00);
IkReal x3082=(cj5*r20);
IkReal x3083=((1.0)*x3078);
IkReal x3084=((1.0)*x3077);
IkReal x3085=(sj5*x3077);
evalcond[0]=((((-1.0)*x3082*x3084))+((r21*x3085))+(((-1.0)*r22*x3083)));
evalcond[1]=((((-1.0)*x3079*x3084))+((r11*x3085))+(((-1.0)*r12*x3083)));
evalcond[2]=((((-1.0)*x3080*x3083))+(((-1.0)*r02*x3084))+((x3078*x3081)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3083))+((x3077*x3080))+(((-1.0)*x3081*x3084)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x3078*x3079))+(((-1.0)*r12*x3084))+(((-1.0)*r11*sj5*x3083)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3083))+(((-1.0)*r22*x3084))+((x3078*x3082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3086=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3086);
rxp1_1=(px*r21);
rxp1_2=(r11*x3086);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3087=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3087);
rxp1_1=(px*r21);
rxp1_2=(r11*x3087);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3088=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3088);
rxp1_1=(px*r21);
rxp1_2=(r11*x3088);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3091=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3091.valid){
continue;
}
IkReal x3089=x3091.value;
IkReal x3090=(sj0*x3089);
cj4array[0]=(((cj2*sj1*x3090))+((cj1*sj2*x3090)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3092=IKsin(j4);
IkReal x3093=IKcos(j4);
IkReal x3094=(cj5*r20);
IkReal x3095=(r21*sj5);
IkReal x3096=((1.0)*x3092);
IkReal x3097=((1.0)*x3093);
evalcond[0]=((-1.0)*r02*x3092);
evalcond[1]=((((-1.0)*r02*x3097))+(((-1.0)*sj0)));
evalcond[2]=(((x3092*x3095))+(((-1.0)*x3094*x3096)));
evalcond[3]=(((r11*sj5*x3092))+(((-1.0)*cj5*r10*x3096)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3093*x3094))+(((-1.0)*x3095*x3097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3099=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3099.valid){
continue;
}
IkReal x3098=x3099.value;
cj4array[0]=(((cj1*cj2*x3098))+(((-1.0)*sj1*sj2*x3098)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3100=IKsin(j4);
IkReal x3101=IKcos(j4);
IkReal x3102=(r11*sj5);
IkReal x3103=((1.0)*sj0);
IkReal x3104=((1.0)*x3101);
IkReal x3105=((1.0)*cj5*x3100);
evalcond[0]=((-1.0)*r02*x3100);
evalcond[1]=((((-1.0)*x3103))+(((-1.0)*r02*x3104)));
evalcond[2]=((((-1.0)*r20*x3105))+((r21*sj5*x3100)));
evalcond[3]=((((-1.0)*r10*x3105))+((x3100*x3102)));
evalcond[4]=((((-1.0)*cj1*sj2*x3103))+(((-1.0)*cj2*sj1*x3103))+((cj5*r10*x3101))+(((-1.0)*x3102*x3104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3106=IKPowWithIntegerCheck(r02,-1);
if(!x3106.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3106.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3107=IKsin(j4);
IkReal x3108=IKcos(j4);
IkReal x3109=((1.0)*sj0);
IkReal x3110=(cj5*x3108);
IkReal x3111=(sj5*x3107);
IkReal x3112=((1.0)*sj5*x3108);
IkReal x3113=((1.0)*cj5*x3107);
evalcond[0]=((-1.0)*r02*x3107);
evalcond[1]=((((-1.0)*r20*x3113))+((r21*x3111)));
evalcond[2]=((((-1.0)*r10*x3113))+((r11*x3111)));
evalcond[3]=((((-1.0)*r21*x3112))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3110)));
evalcond[4]=((((-1.0)*cj1*sj2*x3109))+(((-1.0)*cj2*sj1*x3109))+(((-1.0)*r11*x3112))+((r10*x3110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3114=((1.0)*sj0);
IkReal x3115=((1.0)*cj0);
CheckValue<IkReal> x3116 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3115))+(((-1.0)*r12*x3114)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3114))+(((-1.0)*r01*sj5*x3115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3116.valid){
continue;
}
CheckValue<IkReal> x3117=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3116.value)+(((1.5707963267949)*(x3117.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3118=IKsin(j4);
IkReal x3119=IKcos(j4);
IkReal x3120=(cj5*r10);
IkReal x3121=(r01*sj5);
IkReal x3122=((1.0)*cj2);
IkReal x3123=(cj5*r00);
IkReal x3124=((1.0)*sj0);
IkReal x3125=(cj5*r20);
IkReal x3126=(cj1*sj2);
IkReal x3127=((1.0)*x3119);
IkReal x3128=((1.0)*x3118);
IkReal x3129=(sj5*x3118);
evalcond[0]=((((-1.0)*x3125*x3128))+((r21*x3129))+(((-1.0)*r22*x3127)));
evalcond[1]=(cj0+(((-1.0)*r12*x3127))+(((-1.0)*x3120*x3128))+((r11*x3129)));
evalcond[2]=((((-1.0)*r02*x3127))+((x3118*x3121))+(((-1.0)*x3123*x3128))+(((-1.0)*x3124)));
evalcond[3]=((((-1.0)*r21*sj5*x3127))+((sj1*sj2))+((x3119*x3125))+(((-1.0)*cj1*x3122))+(((-1.0)*r22*x3128)));
evalcond[4]=((((-1.0)*cj0*sj1*x3122))+(((-1.0)*r02*x3128))+(((-1.0)*cj0*x3126))+((x3119*x3123))+(((-1.0)*x3121*x3127)));
evalcond[5]=((((-1.0)*x3124*x3126))+((x3119*x3120))+(((-1.0)*r12*x3128))+(((-1.0)*r11*sj5*x3127))+(((-1.0)*sj0*sj1*x3122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3130=((1.0)*cj5);
CheckValue<IkReal> x3131 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3130))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3131.valid){
continue;
}
CheckValue<IkReal> x3132=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3130)))),-1);
if(!x3132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3131.value)+(((1.5707963267949)*(x3132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3133=IKsin(j4);
IkReal x3134=IKcos(j4);
IkReal x3135=(cj5*r10);
IkReal x3136=(r01*sj5);
IkReal x3137=((1.0)*cj2);
IkReal x3138=(cj5*r00);
IkReal x3139=((1.0)*sj0);
IkReal x3140=(cj5*r20);
IkReal x3141=(cj1*sj2);
IkReal x3142=((1.0)*x3134);
IkReal x3143=((1.0)*x3133);
IkReal x3144=(sj5*x3133);
evalcond[0]=((((-1.0)*r22*x3142))+(((-1.0)*x3140*x3143))+((r21*x3144)));
evalcond[1]=((((-1.0)*r12*x3142))+cj0+((r11*x3144))+(((-1.0)*x3135*x3143)));
evalcond[2]=(((x3133*x3136))+(((-1.0)*r02*x3142))+(((-1.0)*x3138*x3143))+(((-1.0)*x3139)));
evalcond[3]=((((-1.0)*r22*x3143))+((sj1*sj2))+(((-1.0)*r21*sj5*x3142))+(((-1.0)*cj1*x3137))+((x3134*x3140)));
evalcond[4]=((((-1.0)*cj0*sj1*x3137))+(((-1.0)*x3136*x3142))+((x3134*x3138))+(((-1.0)*r02*x3143))+(((-1.0)*cj0*x3141)));
evalcond[5]=((((-1.0)*r12*x3143))+((x3134*x3135))+(((-1.0)*x3139*x3141))+(((-1.0)*sj0*sj1*x3137))+(((-1.0)*r11*sj5*x3142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3145=((1.0)*cj5);
CheckValue<IkReal> x3146 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3146.valid){
continue;
}
CheckValue<IkReal> x3147=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3145)))),-1);
if(!x3147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3146.value)+(((1.5707963267949)*(x3147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3148=IKsin(j4);
IkReal x3149=IKcos(j4);
IkReal x3150=(cj5*r10);
IkReal x3151=(r01*sj5);
IkReal x3152=((1.0)*cj2);
IkReal x3153=(cj5*r00);
IkReal x3154=((1.0)*sj0);
IkReal x3155=(cj5*r20);
IkReal x3156=(cj1*sj2);
IkReal x3157=((1.0)*x3149);
IkReal x3158=((1.0)*x3148);
IkReal x3159=(sj5*x3148);
evalcond[0]=((((-1.0)*r22*x3157))+(((-1.0)*x3155*x3158))+((r21*x3159)));
evalcond[1]=(cj0+((r11*x3159))+(((-1.0)*x3150*x3158))+(((-1.0)*r12*x3157)));
evalcond[2]=((((-1.0)*x3154))+(((-1.0)*x3153*x3158))+((x3148*x3151))+(((-1.0)*r02*x3157)));
evalcond[3]=((((-1.0)*r22*x3158))+(((-1.0)*cj1*x3152))+((x3149*x3155))+((sj1*sj2))+(((-1.0)*r21*sj5*x3157)));
evalcond[4]=(((x3149*x3153))+(((-1.0)*cj0*sj1*x3152))+(((-1.0)*r02*x3158))+(((-1.0)*cj0*x3156))+(((-1.0)*x3151*x3157)));
evalcond[5]=(((x3149*x3150))+(((-1.0)*sj0*sj1*x3152))+(((-1.0)*x3154*x3156))+(((-1.0)*r11*sj5*x3157))+(((-1.0)*r12*x3158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3160=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3160;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3160);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3161=r21*r21;
IkReal x3162=cj5*cj5;
IkReal x3163=(sj1*sj2);
IkReal x3164=(r21*sj5);
IkReal x3165=(cj5*r20);
IkReal x3166=(cj1*cj2);
IkReal x3167=((((-1.0)*x3161))+(((2.0)*x3164*x3165))+(((-1.0)*(r22*r22)))+((x3161*x3162))+(((-1.0)*x3162*(r20*r20))));
j4eval[0]=x3167;
j4eval[1]=((IKabs((((r22*x3163))+(((-1.0)*r22*x3166)))))+(IKabs((((x3163*x3164))+(((-1.0)*x3164*x3166))+(((-1.0)*x3163*x3165))+((x3165*x3166))))));
j4eval[2]=IKsign(x3167);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3168=IKsin(j0);
IkReal x3169=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x3168))+(((0.425)*x3169)));
evalcond[1]=((((0.10915)*x3169))+(((-1.0)*py))+(((0.425)*x3168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3170=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3170;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3170);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3171=((1.0)*cj5);
IkReal x3172=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3171)));
j4eval[0]=x3172;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3171))))));
j4eval[2]=IKsign(x3172);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3173=((1.0)*cj5);
IkReal x3174=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3173)));
j4eval[0]=x3174;
j4eval[1]=IKsign(x3174);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3173))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3175=((1.0)*cj5);
CheckValue<IkReal> x3176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3175)))),-1);
if(!x3176.valid){
continue;
}
CheckValue<IkReal> x3177 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3175))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3176.value)))+(x3177.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3178=IKcos(j4);
IkReal x3179=IKsin(j4);
IkReal x3180=((1.0)*sj0);
IkReal x3181=(cj5*r00);
IkReal x3182=(cj5*r10);
IkReal x3183=(cj5*r20);
IkReal x3184=((1.0)*x3178);
IkReal x3185=((1.0)*x3179);
IkReal x3186=(sj5*x3178);
IkReal x3187=(sj5*x3179);
evalcond[0]=((((-1.0)*x3183*x3184))+((r22*x3179))+((r21*x3186)));
evalcond[1]=((((-1.0)*x3183*x3185))+(((-1.0)*r22*x3184))+((r21*x3187)));
evalcond[2]=(cj0+(((-1.0)*x3182*x3185))+((r11*x3187))+(((-1.0)*r12*x3184)));
evalcond[3]=(((r01*x3186))+(((-1.0)*x3181*x3184))+((r02*x3179))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3182*x3184))+((r11*x3186))+(((-1.0)*x3180))+((r12*x3179)));
evalcond[5]=((((-1.0)*r02*x3184))+((r01*x3187))+(((-1.0)*x3181*x3185))+(((-1.0)*x3180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3188=((1.0)*cj5);
CheckValue<IkReal> x3189 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3188))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3189.valid){
continue;
}
CheckValue<IkReal> x3190=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3188)))),-1);
if(!x3190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3189.value)+(((1.5707963267949)*(x3190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3191=IKcos(j4);
IkReal x3192=IKsin(j4);
IkReal x3193=((1.0)*sj0);
IkReal x3194=(cj5*r00);
IkReal x3195=(cj5*r10);
IkReal x3196=(cj5*r20);
IkReal x3197=((1.0)*x3191);
IkReal x3198=((1.0)*x3192);
IkReal x3199=(sj5*x3191);
IkReal x3200=(sj5*x3192);
evalcond[0]=((((-1.0)*x3196*x3197))+((r21*x3199))+((r22*x3192)));
evalcond[1]=((((-1.0)*x3196*x3198))+(((-1.0)*r22*x3197))+((r21*x3200)));
evalcond[2]=(cj0+((r11*x3200))+(((-1.0)*r12*x3197))+(((-1.0)*x3195*x3198)));
evalcond[3]=(((r01*x3199))+((r02*x3192))+(((-1.0)*cj0))+(((-1.0)*x3194*x3197)));
evalcond[4]=(((r11*x3199))+((r12*x3192))+(((-1.0)*x3193))+(((-1.0)*x3195*x3197)));
evalcond[5]=(((r01*x3200))+(((-1.0)*r02*x3197))+(((-1.0)*x3193))+(((-1.0)*x3194*x3198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3201 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3201.valid){
continue;
}
CheckValue<IkReal> x3202=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3201.value)+(((1.5707963267949)*(x3202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3203=IKcos(j4);
IkReal x3204=IKsin(j4);
IkReal x3205=((1.0)*sj0);
IkReal x3206=(cj5*r00);
IkReal x3207=(cj5*r10);
IkReal x3208=(cj5*r20);
IkReal x3209=((1.0)*x3203);
IkReal x3210=((1.0)*x3204);
IkReal x3211=(sj5*x3203);
IkReal x3212=(sj5*x3204);
evalcond[0]=(((r22*x3204))+(((-1.0)*x3208*x3209))+((r21*x3211)));
evalcond[1]=((((-1.0)*x3208*x3210))+(((-1.0)*r22*x3209))+((r21*x3212)));
evalcond[2]=(cj0+(((-1.0)*r12*x3209))+((r11*x3212))+(((-1.0)*x3207*x3210)));
evalcond[3]=(((r01*x3211))+(((-1.0)*x3206*x3209))+((r02*x3204))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3207*x3209))+((r12*x3204))+((r11*x3211))+(((-1.0)*x3205)));
evalcond[5]=((((-1.0)*r02*x3209))+(((-1.0)*x3206*x3210))+((r01*x3212))+(((-1.0)*x3205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3213=IKsin(j0);
IkReal x3214=IKcos(j0);
evalcond[0]=((((-0.10915)*x3213))+(((-1.0)*px))+(((0.425)*x3214)));
evalcond[1]=((((0.10915)*x3214))+(((-1.0)*py))+(((0.425)*x3213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3215=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3215;
j4eval[1]=IKsign(x3215);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3216=((1.0)*cj5);
IkReal x3217=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3216)));
j4eval[0]=x3217;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3216))))));
j4eval[2]=IKsign(x3217);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3218=cj5*cj5;
IkReal x3219=((1.0)*r20);
IkReal x3220=(r01*r21);
IkReal x3221=(r21*sj5);
IkReal x3222=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3218*x3220))+((cj5*r00*x3221))+(((-1.0)*r00*x3218*x3219))+(((-1.0)*x3220)));
j4eval[0]=x3222;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3219))+((cj0*x3221)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3222);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3223=cj5*cj5;
IkReal x3224=((1.0)*r20);
IkReal x3225=(r01*r21);
IkReal x3226=(r21*sj5);
CheckValue<IkReal> x3227 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3226))+(((-1.0)*cj0*cj5*x3224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3227.valid){
continue;
}
CheckValue<IkReal> x3228=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3223*x3224))+((cj5*r00*x3226))+((x3223*x3225))+(((-1.0)*x3225)))),-1);
if(!x3228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3227.value)+(((1.5707963267949)*(x3228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3229=IKcos(j4);
IkReal x3230=IKsin(j4);
IkReal x3231=(cj5*r00);
IkReal x3232=(cj5*r10);
IkReal x3233=(cj5*r20);
IkReal x3234=((1.0)*x3229);
IkReal x3235=((1.0)*x3230);
IkReal x3236=(sj5*x3229);
IkReal x3237=(sj5*x3230);
evalcond[0]=(((r22*x3230))+(((-1.0)*x3233*x3234))+((r21*x3236)));
evalcond[1]=((((-1.0)*x3233*x3235))+(((-1.0)*r22*x3234))+((r21*x3237)));
evalcond[2]=(cj0+((r01*x3236))+(((-1.0)*x3231*x3234))+((r02*x3230)));
evalcond[3]=(sj0+((r11*x3236))+((r12*x3230))+(((-1.0)*x3232*x3234)));
evalcond[4]=(cj0+((r11*x3237))+(((-1.0)*r12*x3234))+(((-1.0)*x3232*x3235)));
evalcond[5]=((((-1.0)*r02*x3234))+(((-1.0)*sj0))+((r01*x3237))+(((-1.0)*x3231*x3235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3238=((1.0)*cj5);
CheckValue<IkReal> x3239=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3238)))),-1);
if(!x3239.valid){
continue;
}
CheckValue<IkReal> x3240 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3238)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3239.value)))+(x3240.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3241=IKcos(j4);
IkReal x3242=IKsin(j4);
IkReal x3243=(cj5*r00);
IkReal x3244=(cj5*r10);
IkReal x3245=(cj5*r20);
IkReal x3246=((1.0)*x3241);
IkReal x3247=((1.0)*x3242);
IkReal x3248=(sj5*x3241);
IkReal x3249=(sj5*x3242);
evalcond[0]=(((r22*x3242))+((r21*x3248))+(((-1.0)*x3245*x3246)));
evalcond[1]=(((r21*x3249))+(((-1.0)*x3245*x3247))+(((-1.0)*r22*x3246)));
evalcond[2]=(((r01*x3248))+(((-1.0)*x3243*x3246))+cj0+((r02*x3242)));
evalcond[3]=(sj0+(((-1.0)*x3244*x3246))+((r12*x3242))+((r11*x3248)));
evalcond[4]=(cj0+(((-1.0)*r12*x3246))+(((-1.0)*x3244*x3247))+((r11*x3249)));
evalcond[5]=(((r01*x3249))+(((-1.0)*x3243*x3247))+(((-1.0)*sj0))+(((-1.0)*r02*x3246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3250 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3250.valid){
continue;
}
CheckValue<IkReal> x3251=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3250.value)+(((1.5707963267949)*(x3251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3252=IKcos(j4);
IkReal x3253=IKsin(j4);
IkReal x3254=(cj5*r00);
IkReal x3255=(cj5*r10);
IkReal x3256=(cj5*r20);
IkReal x3257=((1.0)*x3252);
IkReal x3258=((1.0)*x3253);
IkReal x3259=(sj5*x3252);
IkReal x3260=(sj5*x3253);
evalcond[0]=(((r21*x3259))+((r22*x3253))+(((-1.0)*x3256*x3257)));
evalcond[1]=(((r21*x3260))+(((-1.0)*r22*x3257))+(((-1.0)*x3256*x3258)));
evalcond[2]=(cj0+((r02*x3253))+(((-1.0)*x3254*x3257))+((r01*x3259)));
evalcond[3]=(((r12*x3253))+sj0+((r11*x3259))+(((-1.0)*x3255*x3257)));
evalcond[4]=(cj0+((r11*x3260))+(((-1.0)*r12*x3257))+(((-1.0)*x3255*x3258)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3257))+((r01*x3260))+(((-1.0)*x3254*x3258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3261=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3261;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3261);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3262=((1.0)*cj5);
IkReal x3263=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3262)));
j4eval[0]=x3263;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3262))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3264=((1.0)*cj5);
IkReal x3265=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3264)));
j4eval[0]=x3265;
j4eval[1]=IKsign(x3265);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3264))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3266=((1.0)*cj5);
CheckValue<IkReal> x3267 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3266)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3267.valid){
continue;
}
CheckValue<IkReal> x3268=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3266)))),-1);
if(!x3268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3267.value)+(((1.5707963267949)*(x3268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3269=IKcos(j4);
IkReal x3270=IKsin(j4);
IkReal x3271=((1.0)*sj0);
IkReal x3272=(cj5*r00);
IkReal x3273=(cj5*r10);
IkReal x3274=(cj5*r20);
IkReal x3275=((1.0)*x3269);
IkReal x3276=((1.0)*x3270);
IkReal x3277=(sj5*x3269);
IkReal x3278=(sj5*x3270);
evalcond[0]=(((r21*x3277))+(((-1.0)*x3274*x3275))+((r22*x3270)));
evalcond[1]=(((r21*x3278))+(((-1.0)*x3274*x3276))+(((-1.0)*r22*x3275)));
evalcond[2]=((((-1.0)*r12*x3275))+(((-1.0)*x3273*x3276))+cj0+((r11*x3278)));
evalcond[3]=((((-1.0)*x3272*x3275))+((r01*x3277))+((r02*x3270))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3273*x3275))+(((-1.0)*x3271))+((r11*x3277))+((r12*x3270)));
evalcond[5]=((((-1.0)*x3272*x3276))+((r01*x3278))+(((-1.0)*x3271))+(((-1.0)*r02*x3275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3279=((1.0)*cj5);
CheckValue<IkReal> x3280=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3279)))),-1);
if(!x3280.valid){
continue;
}
CheckValue<IkReal> x3281 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3280.value)))+(x3281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3282=IKcos(j4);
IkReal x3283=IKsin(j4);
IkReal x3284=((1.0)*sj0);
IkReal x3285=(cj5*r00);
IkReal x3286=(cj5*r10);
IkReal x3287=(cj5*r20);
IkReal x3288=((1.0)*x3282);
IkReal x3289=((1.0)*x3283);
IkReal x3290=(sj5*x3282);
IkReal x3291=(sj5*x3283);
evalcond[0]=((((-1.0)*x3287*x3288))+((r22*x3283))+((r21*x3290)));
evalcond[1]=((((-1.0)*r22*x3288))+(((-1.0)*x3287*x3289))+((r21*x3291)));
evalcond[2]=((((-1.0)*r12*x3288))+cj0+((r11*x3291))+(((-1.0)*x3286*x3289)));
evalcond[3]=(((r01*x3290))+((r02*x3283))+(((-1.0)*cj0))+(((-1.0)*x3285*x3288)));
evalcond[4]=((((-1.0)*x3284))+((r11*x3290))+((r12*x3283))+(((-1.0)*x3286*x3288)));
evalcond[5]=(((r01*x3291))+(((-1.0)*x3284))+(((-1.0)*r02*x3288))+(((-1.0)*x3285*x3289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3292 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3292.valid){
continue;
}
CheckValue<IkReal> x3293=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3292.value)+(((1.5707963267949)*(x3293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3294=IKcos(j4);
IkReal x3295=IKsin(j4);
IkReal x3296=((1.0)*sj0);
IkReal x3297=(cj5*r00);
IkReal x3298=(cj5*r10);
IkReal x3299=(cj5*r20);
IkReal x3300=((1.0)*x3294);
IkReal x3301=((1.0)*x3295);
IkReal x3302=(sj5*x3294);
IkReal x3303=(sj5*x3295);
evalcond[0]=(((r21*x3302))+((r22*x3295))+(((-1.0)*x3299*x3300)));
evalcond[1]=(((r21*x3303))+(((-1.0)*r22*x3300))+(((-1.0)*x3299*x3301)));
evalcond[2]=(cj0+((r11*x3303))+(((-1.0)*x3298*x3301))+(((-1.0)*r12*x3300)));
evalcond[3]=(((r02*x3295))+(((-1.0)*x3297*x3300))+((r01*x3302))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3296))+((r11*x3302))+(((-1.0)*x3298*x3300))+((r12*x3295)));
evalcond[5]=((((-1.0)*x3296))+(((-1.0)*r02*x3300))+(((-1.0)*x3297*x3301))+((r01*x3303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3304=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3304;
j4eval[1]=IKsign(x3304);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3305=((1.0)*cj5);
IkReal x3306=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3305)));
j4eval[0]=x3306;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3305)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3306);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3307=cj5*cj5;
IkReal x3308=((1.0)*r20);
IkReal x3309=(r01*r21);
IkReal x3310=(r21*sj5);
IkReal x3311=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3310))+((x3307*x3309))+(((-1.0)*x3309))+(((-1.0)*r00*x3307*x3308)));
j4eval[0]=x3311;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3310))+(((-1.0)*cj0*cj5*x3308))))));
j4eval[2]=IKsign(x3311);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3312=cj5*cj5;
IkReal x3313=((1.0)*r20);
IkReal x3314=(r01*r21);
IkReal x3315=(r21*sj5);
CheckValue<IkReal> x3316 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3315))+(((-1.0)*cj0*cj5*x3313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3316.valid){
continue;
}
CheckValue<IkReal> x3317=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3315))+((x3312*x3314))+(((-1.0)*r00*x3312*x3313))+(((-1.0)*x3314)))),-1);
if(!x3317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3316.value)+(((1.5707963267949)*(x3317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3318=IKcos(j4);
IkReal x3319=IKsin(j4);
IkReal x3320=(cj5*r00);
IkReal x3321=(cj5*r10);
IkReal x3322=(cj5*r20);
IkReal x3323=((1.0)*x3318);
IkReal x3324=((1.0)*x3319);
IkReal x3325=(sj5*x3318);
IkReal x3326=(sj5*x3319);
evalcond[0]=((((-1.0)*x3322*x3323))+((r22*x3319))+((r21*x3325)));
evalcond[1]=((((-1.0)*x3322*x3324))+((r21*x3326))+(((-1.0)*r22*x3323)));
evalcond[2]=(cj0+((r01*x3325))+((r02*x3319))+(((-1.0)*x3320*x3323)));
evalcond[3]=(sj0+((r11*x3325))+(((-1.0)*x3321*x3323))+((r12*x3319)));
evalcond[4]=(cj0+((r11*x3326))+(((-1.0)*x3321*x3324))+(((-1.0)*r12*x3323)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3323))+((r01*x3326))+(((-1.0)*x3320*x3324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3327=((1.0)*cj5);
CheckValue<IkReal> x3328=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3327)))),-1);
if(!x3328.valid){
continue;
}
CheckValue<IkReal> x3329 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3327)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3328.value)))+(x3329.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3330=IKcos(j4);
IkReal x3331=IKsin(j4);
IkReal x3332=(cj5*r00);
IkReal x3333=(cj5*r10);
IkReal x3334=(cj5*r20);
IkReal x3335=((1.0)*x3330);
IkReal x3336=((1.0)*x3331);
IkReal x3337=(sj5*x3330);
IkReal x3338=(sj5*x3331);
evalcond[0]=(((r21*x3337))+((r22*x3331))+(((-1.0)*x3334*x3335)));
evalcond[1]=(((r21*x3338))+(((-1.0)*r22*x3335))+(((-1.0)*x3334*x3336)));
evalcond[2]=(cj0+((r02*x3331))+((r01*x3337))+(((-1.0)*x3332*x3335)));
evalcond[3]=(sj0+((r12*x3331))+((r11*x3337))+(((-1.0)*x3333*x3335)));
evalcond[4]=(cj0+((r11*x3338))+(((-1.0)*x3333*x3336))+(((-1.0)*r12*x3335)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3335))+((r01*x3338))+(((-1.0)*x3332*x3336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3339 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3339.valid){
continue;
}
CheckValue<IkReal> x3340=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3339.value)+(((1.5707963267949)*(x3340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3341=IKcos(j4);
IkReal x3342=IKsin(j4);
IkReal x3343=(cj5*r00);
IkReal x3344=(cj5*r10);
IkReal x3345=(cj5*r20);
IkReal x3346=((1.0)*x3341);
IkReal x3347=((1.0)*x3342);
IkReal x3348=(sj5*x3341);
IkReal x3349=(sj5*x3342);
evalcond[0]=(((r22*x3342))+((r21*x3348))+(((-1.0)*x3345*x3346)));
evalcond[1]=(((r21*x3349))+(((-1.0)*x3345*x3347))+(((-1.0)*r22*x3346)));
evalcond[2]=((((-1.0)*x3343*x3346))+cj0+((r02*x3342))+((r01*x3348)));
evalcond[3]=(sj0+((r11*x3348))+((r12*x3342))+(((-1.0)*x3344*x3346)));
evalcond[4]=(cj0+(((-1.0)*r12*x3346))+((r11*x3349))+(((-1.0)*x3344*x3347)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3343*x3347))+(((-1.0)*r02*x3346))+((r01*x3349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3350=IKcos(j0);
IkReal x3351=IKsin(j0);
evalcond[0]=((((-0.10915)*x3351))+(((-1.0)*px))+(((-0.425)*x3350)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x3350))+(((-0.425)*x3351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3352=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3352;
j4eval[1]=IKsign(x3352);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3353=((1.0)*cj5);
IkReal x3354=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3353)));
j4eval[0]=x3354;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3353)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3354);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3355=cj5*cj5;
IkReal x3356=((1.0)*r20);
IkReal x3357=(r01*r21);
IkReal x3358=(r21*sj5);
IkReal x3359=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3358))+((x3355*x3357))+(((-1.0)*r00*x3355*x3356))+(((-1.0)*x3357)));
j4eval[0]=x3359;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3356))+((cj0*x3358)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3359);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3360=cj5*cj5;
IkReal x3361=((1.0)*r20);
IkReal x3362=(r01*r21);
IkReal x3363=(r21*sj5);
CheckValue<IkReal> x3364 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3363))+(((-1.0)*cj0*cj5*x3361)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3364.valid){
continue;
}
CheckValue<IkReal> x3365=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3360*x3361))+(((-1.0)*x3362))+((x3360*x3362))+((cj5*r00*x3363)))),-1);
if(!x3365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3364.value)+(((1.5707963267949)*(x3365.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3366=IKcos(j4);
IkReal x3367=IKsin(j4);
IkReal x3368=(cj5*r00);
IkReal x3369=(cj5*r10);
IkReal x3370=(cj5*r20);
IkReal x3371=((1.0)*x3366);
IkReal x3372=((1.0)*x3367);
IkReal x3373=(sj5*x3366);
IkReal x3374=(sj5*x3367);
evalcond[0]=(((r22*x3367))+(((-1.0)*x3370*x3371))+((r21*x3373)));
evalcond[1]=((((-1.0)*r22*x3371))+(((-1.0)*x3370*x3372))+((r21*x3374)));
evalcond[2]=(((r01*x3373))+((r02*x3367))+cj0+(((-1.0)*x3368*x3371)));
evalcond[3]=(sj0+((r12*x3367))+((r11*x3373))+(((-1.0)*x3369*x3371)));
evalcond[4]=(cj0+(((-1.0)*r12*x3371))+((r11*x3374))+(((-1.0)*x3369*x3372)));
evalcond[5]=(((r01*x3374))+(((-1.0)*sj0))+(((-1.0)*r02*x3371))+(((-1.0)*x3368*x3372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3375=((1.0)*cj5);
CheckValue<IkReal> x3376 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3375)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3376.valid){
continue;
}
CheckValue<IkReal> x3377=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3375)))),-1);
if(!x3377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3376.value)+(((1.5707963267949)*(x3377.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3378=IKcos(j4);
IkReal x3379=IKsin(j4);
IkReal x3380=(cj5*r00);
IkReal x3381=(cj5*r10);
IkReal x3382=(cj5*r20);
IkReal x3383=((1.0)*x3378);
IkReal x3384=((1.0)*x3379);
IkReal x3385=(sj5*x3378);
IkReal x3386=(sj5*x3379);
evalcond[0]=((((-1.0)*x3382*x3383))+((r22*x3379))+((r21*x3385)));
evalcond[1]=((((-1.0)*x3382*x3384))+(((-1.0)*r22*x3383))+((r21*x3386)));
evalcond[2]=(((r01*x3385))+cj0+(((-1.0)*x3380*x3383))+((r02*x3379)));
evalcond[3]=(((r12*x3379))+sj0+(((-1.0)*x3381*x3383))+((r11*x3385)));
evalcond[4]=(cj0+(((-1.0)*x3381*x3384))+((r11*x3386))+(((-1.0)*r12*x3383)));
evalcond[5]=(((r01*x3386))+(((-1.0)*sj0))+(((-1.0)*x3380*x3384))+(((-1.0)*r02*x3383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3387 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3387.valid){
continue;
}
CheckValue<IkReal> x3388=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3387.value)+(((1.5707963267949)*(x3388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3389=IKcos(j4);
IkReal x3390=IKsin(j4);
IkReal x3391=(cj5*r00);
IkReal x3392=(cj5*r10);
IkReal x3393=(cj5*r20);
IkReal x3394=((1.0)*x3389);
IkReal x3395=((1.0)*x3390);
IkReal x3396=(sj5*x3389);
IkReal x3397=(sj5*x3390);
evalcond[0]=(((r21*x3396))+((r22*x3390))+(((-1.0)*x3393*x3394)));
evalcond[1]=((((-1.0)*r22*x3394))+((r21*x3397))+(((-1.0)*x3393*x3395)));
evalcond[2]=(cj0+((r01*x3396))+((r02*x3390))+(((-1.0)*x3391*x3394)));
evalcond[3]=(sj0+(((-1.0)*x3392*x3394))+((r11*x3396))+((r12*x3390)));
evalcond[4]=((((-1.0)*x3392*x3395))+cj0+((r11*x3397))+(((-1.0)*r12*x3394)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3397))+(((-1.0)*r02*x3394))+(((-1.0)*x3391*x3395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3398=IKcos(j0);
IkReal x3399=IKsin(j0);
evalcond[0]=((((-0.10915)*x3399))+(((-1.0)*px))+(((-0.425)*x3398)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x3399))+(((0.10915)*x3398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3400=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3400;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3400);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3401=((1.0)*cj5);
IkReal x3402=((((-1.0)*r01*x3401))+(((-1.0)*r00*sj5)));
j4eval[0]=x3402;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3401))))));
j4eval[2]=IKsign(x3402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3403=((1.0)*cj5);
IkReal x3404=((((-1.0)*r01*x3403))+(((-1.0)*r00*sj5)));
j4eval[0]=x3404;
j4eval[1]=IKsign(x3404);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3403))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3405=((1.0)*cj5);
CheckValue<IkReal> x3406=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3405))+(((-1.0)*r00*sj5)))),-1);
if(!x3406.valid){
continue;
}
CheckValue<IkReal> x3407 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3405))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3406.value)))+(x3407.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3408=IKcos(j4);
IkReal x3409=IKsin(j4);
IkReal x3410=((1.0)*sj0);
IkReal x3411=(cj5*r00);
IkReal x3412=(cj5*r10);
IkReal x3413=(cj5*r20);
IkReal x3414=((1.0)*x3408);
IkReal x3415=((1.0)*x3409);
IkReal x3416=(sj5*x3408);
IkReal x3417=(sj5*x3409);
evalcond[0]=(((r22*x3409))+((r21*x3416))+(((-1.0)*x3413*x3414)));
evalcond[1]=((((-1.0)*r22*x3414))+((r21*x3417))+(((-1.0)*x3413*x3415)));
evalcond[2]=((((-1.0)*x3412*x3415))+cj0+((r11*x3417))+(((-1.0)*r12*x3414)));
evalcond[3]=(((r02*x3409))+(((-1.0)*x3411*x3414))+((r01*x3416))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3412*x3414))+((r11*x3416))+((r12*x3409))+(((-1.0)*x3410)));
evalcond[5]=((((-1.0)*x3411*x3415))+(((-1.0)*r02*x3414))+((r01*x3417))+(((-1.0)*x3410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3418=((1.0)*cj5);
CheckValue<IkReal> x3419=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3418)))),-1);
if(!x3419.valid){
continue;
}
CheckValue<IkReal> x3420 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3419.value)))+(x3420.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3421=IKcos(j4);
IkReal x3422=IKsin(j4);
IkReal x3423=((1.0)*sj0);
IkReal x3424=(cj5*r00);
IkReal x3425=(cj5*r10);
IkReal x3426=(cj5*r20);
IkReal x3427=((1.0)*x3421);
IkReal x3428=((1.0)*x3422);
IkReal x3429=(sj5*x3421);
IkReal x3430=(sj5*x3422);
evalcond[0]=((((-1.0)*x3426*x3427))+((r21*x3429))+((r22*x3422)));
evalcond[1]=((((-1.0)*x3426*x3428))+(((-1.0)*r22*x3427))+((r21*x3430)));
evalcond[2]=((((-1.0)*r12*x3427))+cj0+(((-1.0)*x3425*x3428))+((r11*x3430)));
evalcond[3]=((((-1.0)*x3424*x3427))+((r02*x3422))+(((-1.0)*cj0))+((r01*x3429)));
evalcond[4]=((((-1.0)*x3423))+(((-1.0)*x3425*x3427))+((r12*x3422))+((r11*x3429)));
evalcond[5]=(((r01*x3430))+(((-1.0)*x3424*x3428))+(((-1.0)*x3423))+(((-1.0)*r02*x3427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3431 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3431.valid){
continue;
}
CheckValue<IkReal> x3432=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3431.value)+(((1.5707963267949)*(x3432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3433=IKcos(j4);
IkReal x3434=IKsin(j4);
IkReal x3435=((1.0)*sj0);
IkReal x3436=(cj5*r00);
IkReal x3437=(cj5*r10);
IkReal x3438=(cj5*r20);
IkReal x3439=((1.0)*x3433);
IkReal x3440=((1.0)*x3434);
IkReal x3441=(sj5*x3433);
IkReal x3442=(sj5*x3434);
evalcond[0]=(((r21*x3441))+(((-1.0)*x3438*x3439))+((r22*x3434)));
evalcond[1]=(((r21*x3442))+(((-1.0)*x3438*x3440))+(((-1.0)*r22*x3439)));
evalcond[2]=(((r11*x3442))+(((-1.0)*r12*x3439))+cj0+(((-1.0)*x3437*x3440)));
evalcond[3]=((((-1.0)*x3436*x3439))+((r01*x3441))+((r02*x3434))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3441))+(((-1.0)*x3437*x3439))+(((-1.0)*x3435))+((r12*x3434)));
evalcond[5]=((((-1.0)*x3435))+(((-1.0)*x3436*x3440))+((r01*x3442))+(((-1.0)*r02*x3439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3443=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3443;
j4eval[1]=IKsign(x3443);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3444=((1.0)*cj5);
IkReal x3445=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3444)));
j4eval[0]=x3445;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3444))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3445);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3446=cj5*cj5;
IkReal x3447=((1.0)*r20);
IkReal x3448=(r01*r21);
IkReal x3449=(r21*sj5);
IkReal x3450=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3446*x3448))+(((-1.0)*x3448))+(((-1.0)*r00*x3446*x3447))+((cj5*r00*x3449)));
j4eval[0]=x3450;
j4eval[1]=((IKabs((((cj0*x3449))+(((-1.0)*cj0*cj5*x3447)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3450);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3451=cj5*cj5;
IkReal x3452=((1.0)*r20);
IkReal x3453=(r01*r21);
IkReal x3454=(r21*sj5);
CheckValue<IkReal> x3455=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3451*x3452))+(((-1.0)*x3453))+((cj5*r00*x3454))+((x3451*x3453)))),-1);
if(!x3455.valid){
continue;
}
CheckValue<IkReal> x3456 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3454))+(((-1.0)*cj0*cj5*x3452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3455.value)))+(x3456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3457=IKcos(j4);
IkReal x3458=IKsin(j4);
IkReal x3459=(cj5*r00);
IkReal x3460=(cj5*r10);
IkReal x3461=(cj5*r20);
IkReal x3462=((1.0)*x3457);
IkReal x3463=((1.0)*x3458);
IkReal x3464=(sj5*x3457);
IkReal x3465=(sj5*x3458);
evalcond[0]=(((r22*x3458))+(((-1.0)*x3461*x3462))+((r21*x3464)));
evalcond[1]=((((-1.0)*x3461*x3463))+(((-1.0)*r22*x3462))+((r21*x3465)));
evalcond[2]=(cj0+((r01*x3464))+((r02*x3458))+(((-1.0)*x3459*x3462)));
evalcond[3]=(sj0+((r12*x3458))+(((-1.0)*x3460*x3462))+((r11*x3464)));
evalcond[4]=(cj0+(((-1.0)*x3460*x3463))+(((-1.0)*r12*x3462))+((r11*x3465)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3462))+((r01*x3465))+(((-1.0)*x3459*x3463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3466=((1.0)*cj5);
CheckValue<IkReal> x3467=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3466)))),-1);
if(!x3467.valid){
continue;
}
CheckValue<IkReal> x3468 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3466)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3467.value)))+(x3468.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3469=IKcos(j4);
IkReal x3470=IKsin(j4);
IkReal x3471=(cj5*r00);
IkReal x3472=(cj5*r10);
IkReal x3473=(cj5*r20);
IkReal x3474=((1.0)*x3469);
IkReal x3475=((1.0)*x3470);
IkReal x3476=(sj5*x3469);
IkReal x3477=(sj5*x3470);
evalcond[0]=((((-1.0)*x3473*x3474))+((r21*x3476))+((r22*x3470)));
evalcond[1]=((((-1.0)*x3473*x3475))+(((-1.0)*r22*x3474))+((r21*x3477)));
evalcond[2]=(cj0+((r01*x3476))+(((-1.0)*x3471*x3474))+((r02*x3470)));
evalcond[3]=(sj0+(((-1.0)*x3472*x3474))+((r12*x3470))+((r11*x3476)));
evalcond[4]=(cj0+(((-1.0)*x3472*x3475))+(((-1.0)*r12*x3474))+((r11*x3477)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3474))+((r01*x3477))+(((-1.0)*x3471*x3475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3478 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3478.valid){
continue;
}
CheckValue<IkReal> x3479=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3478.value)+(((1.5707963267949)*(x3479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3480=IKcos(j4);
IkReal x3481=IKsin(j4);
IkReal x3482=(cj5*r00);
IkReal x3483=(cj5*r10);
IkReal x3484=(cj5*r20);
IkReal x3485=((1.0)*x3480);
IkReal x3486=((1.0)*x3481);
IkReal x3487=(sj5*x3480);
IkReal x3488=(sj5*x3481);
evalcond[0]=((((-1.0)*x3484*x3485))+((r21*x3487))+((r22*x3481)));
evalcond[1]=((((-1.0)*r22*x3485))+(((-1.0)*x3484*x3486))+((r21*x3488)));
evalcond[2]=((((-1.0)*x3482*x3485))+cj0+((r01*x3487))+((r02*x3481)));
evalcond[3]=((((-1.0)*x3483*x3485))+sj0+((r12*x3481))+((r11*x3487)));
evalcond[4]=((((-1.0)*x3483*x3486))+cj0+(((-1.0)*r12*x3485))+((r11*x3488)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3482*x3486))+(((-1.0)*r02*x3485))+((r01*x3488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3489=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3489;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3489);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3490=((1.0)*cj5);
IkReal x3491=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3490)));
j4eval[0]=x3491;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3490)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3491);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3492=((1.0)*cj5);
IkReal x3493=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3492)));
j4eval[0]=x3493;
j4eval[1]=IKsign(x3493);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3492))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3494=((1.0)*cj5);
CheckValue<IkReal> x3495=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3494)))),-1);
if(!x3495.valid){
continue;
}
CheckValue<IkReal> x3496 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3494))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3495.value)))+(x3496.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3497=IKcos(j4);
IkReal x3498=IKsin(j4);
IkReal x3499=((1.0)*sj0);
IkReal x3500=(cj5*r00);
IkReal x3501=(cj5*r10);
IkReal x3502=(cj5*r20);
IkReal x3503=((1.0)*x3497);
IkReal x3504=((1.0)*x3498);
IkReal x3505=(sj5*x3497);
IkReal x3506=(sj5*x3498);
evalcond[0]=((((-1.0)*x3502*x3503))+((r22*x3498))+((r21*x3505)));
evalcond[1]=((((-1.0)*x3502*x3504))+(((-1.0)*r22*x3503))+((r21*x3506)));
evalcond[2]=((((-1.0)*r12*x3503))+cj0+(((-1.0)*x3501*x3504))+((r11*x3506)));
evalcond[3]=(((r01*x3505))+((r02*x3498))+(((-1.0)*cj0))+(((-1.0)*x3500*x3503)));
evalcond[4]=((((-1.0)*x3499))+(((-1.0)*x3501*x3503))+((r11*x3505))+((r12*x3498)));
evalcond[5]=(((r01*x3506))+(((-1.0)*x3499))+(((-1.0)*r02*x3503))+(((-1.0)*x3500*x3504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3507=((1.0)*cj5);
CheckValue<IkReal> x3508=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3507)))),-1);
if(!x3508.valid){
continue;
}
CheckValue<IkReal> x3509 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3507)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3508.value)))+(x3509.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3510=IKcos(j4);
IkReal x3511=IKsin(j4);
IkReal x3512=((1.0)*sj0);
IkReal x3513=(cj5*r00);
IkReal x3514=(cj5*r10);
IkReal x3515=(cj5*r20);
IkReal x3516=((1.0)*x3510);
IkReal x3517=((1.0)*x3511);
IkReal x3518=(sj5*x3510);
IkReal x3519=(sj5*x3511);
evalcond[0]=((((-1.0)*x3515*x3516))+((r21*x3518))+((r22*x3511)));
evalcond[1]=((((-1.0)*x3515*x3517))+((r21*x3519))+(((-1.0)*r22*x3516)));
evalcond[2]=((((-1.0)*x3514*x3517))+cj0+((r11*x3519))+(((-1.0)*r12*x3516)));
evalcond[3]=((((-1.0)*x3513*x3516))+((r01*x3518))+((r02*x3511))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3514*x3516))+(((-1.0)*x3512))+((r11*x3518))+((r12*x3511)));
evalcond[5]=((((-1.0)*r02*x3516))+(((-1.0)*x3513*x3517))+(((-1.0)*x3512))+((r01*x3519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3520 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3520.valid){
continue;
}
CheckValue<IkReal> x3521=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3520.value)+(((1.5707963267949)*(x3521.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3522=IKcos(j4);
IkReal x3523=IKsin(j4);
IkReal x3524=((1.0)*sj0);
IkReal x3525=(cj5*r00);
IkReal x3526=(cj5*r10);
IkReal x3527=(cj5*r20);
IkReal x3528=((1.0)*x3522);
IkReal x3529=((1.0)*x3523);
IkReal x3530=(sj5*x3522);
IkReal x3531=(sj5*x3523);
evalcond[0]=((((-1.0)*x3527*x3528))+((r21*x3530))+((r22*x3523)));
evalcond[1]=((((-1.0)*x3527*x3529))+(((-1.0)*r22*x3528))+((r21*x3531)));
evalcond[2]=(((r11*x3531))+(((-1.0)*x3526*x3529))+cj0+(((-1.0)*r12*x3528)));
evalcond[3]=((((-1.0)*x3525*x3528))+((r02*x3523))+((r01*x3530))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3530))+(((-1.0)*x3526*x3528))+(((-1.0)*x3524))+((r12*x3523)));
evalcond[5]=((((-1.0)*x3525*x3529))+(((-1.0)*r02*x3528))+(((-1.0)*x3524))+((r01*x3531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3532=(r00*sj5);
IkReal x3533=(cj5*r01);
IkReal x3534=(sj1*sj2);
IkReal x3535=(cj1*cj2);
IkReal x3536=((20000.0)*px);
IkReal x3537=((8500.0)*cj1);
IkReal x3538=((9738.0)*x3535);
CheckValue<IkReal> x3539=IKPowWithIntegerCheck(((((-2183.0)*x3535))+(((2183.0)*x3534))),-1);
if(!x3539.valid){
continue;
}
CheckValue<IkReal> x3540=IKPowWithIntegerCheck((x3534+(((-1.0)*x3535))),-1);
if(!x3540.valid){
continue;
}
if( IKabs(((x3539.value)*(((((-9738.0)*x3533*x3534))+((x3535*x3536))+((x3532*x3538))+((x3532*x3537))+((x3533*x3537))+((x3533*x3538))+(((-9738.0)*x3532*x3534))+(((-1.0)*x3534*x3536)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3540.value)*((x3533+x3532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3539.value)*(((((-9738.0)*x3533*x3534))+((x3535*x3536))+((x3532*x3538))+((x3532*x3537))+((x3533*x3537))+((x3533*x3538))+(((-9738.0)*x3532*x3534))+(((-1.0)*x3534*x3536))))))+IKsqr(((x3540.value)*((x3533+x3532))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3539.value)*(((((-9738.0)*x3533*x3534))+((x3535*x3536))+((x3532*x3538))+((x3532*x3537))+((x3533*x3537))+((x3533*x3538))+(((-9738.0)*x3532*x3534))+(((-1.0)*x3534*x3536))))), ((x3540.value)*((x3533+x3532))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3541=IKcos(j0);
IkReal x3542=IKsin(j0);
IkReal x3543=(cj5*r11);
IkReal x3544=(cj5*r01);
IkReal x3545=((1.0)*sj5);
IkReal x3546=((0.09465)*sj5);
IkReal x3547=(sj1*sj2);
IkReal x3548=((0.39225)*cj2);
IkReal x3549=((1.0)*cj2);
IkReal x3550=((0.39225)*x3547);
IkReal x3551=(cj1*x3541);
IkReal x3552=(cj1*x3542);
evalcond[0]=(((x3541*x3547))+(((-1.0)*r00*x3545))+(((-1.0)*x3544))+(((-1.0)*x3549*x3551)));
evalcond[1]=(((x3542*x3547))+(((-1.0)*r10*x3545))+(((-1.0)*x3543))+(((-1.0)*x3549*x3552)));
evalcond[2]=((((0.425)*x3551))+(((-0.09465)*x3544))+(((-1.0)*r00*x3546))+(((-1.0)*x3541*x3550))+((x3548*x3551))+(((-1.0)*px))+(((-0.10915)*x3542)));
evalcond[3]=((((0.425)*x3552))+(((-0.09465)*x3543))+(((0.10915)*x3541))+(((-1.0)*r10*x3546))+((x3548*x3552))+(((-1.0)*py))+(((-1.0)*x3542*x3550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3553=((1.0)*cj5);
IkReal x3554=((((-1.0)*r01*x3553))+(((-1.0)*r00*sj5)));
j4eval[0]=x3554;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3553)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3554);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3555=((1.0)*cj5);
IkReal x3556=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3555)));
j4eval[0]=x3556;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x3555))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3556);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3557=((1.0)*sj0);
IkReal x3558=((1.0)*cj0);
IkReal x3559=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3559;
j4eval[1]=((IKabs(((((-1.0)*r12*x3557))+(((-1.0)*r02*x3558)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x3558))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3557))))));
j4eval[2]=IKsign(x3559);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3560=((-1.0)*r20);
IkReal x3562 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3562)==0){
continue;
}
IkReal x3561=pow(x3562,-0.5);
CheckValue<IkReal> x3563 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3560),IKFAST_ATAN2_MAGTHRESH);
if(!x3563.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3563.value));
IkReal gconst97=(r21*x3561);
IkReal gconst98=(x3560*x3561);
CheckValue<IkReal> x3564 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3564.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3564.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3565=((-1.0)*r20);
IkReal x3566=x3561;
CheckValue<IkReal> x3568 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3565),IKFAST_ATAN2_MAGTHRESH);
if(!x3568.valid){
continue;
}
IkReal x3567=((-1.0)*(x3568.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3567;
IkReal gconst96=x3567;
IkReal gconst97=(r21*x3566);
IkReal gconst98=(x3565*x3566);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3569=((-1.0)*r20);
IkReal x3570=x3561;
CheckValue<IkReal> x3572 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3569),IKFAST_ATAN2_MAGTHRESH);
if(!x3572.valid){
continue;
}
IkReal x3571=((-1.0)*(x3572.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3571;
IkReal gconst96=x3571;
IkReal gconst97=(r21*x3570);
IkReal gconst98=(x3569*x3570);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3573=((-1.0)*r20);
IkReal x3574=x3561;
CheckValue<IkReal> x3576 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3573),IKFAST_ATAN2_MAGTHRESH);
if(!x3576.valid){
continue;
}
IkReal x3575=((-1.0)*(x3576.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3575;
IkReal gconst96=x3575;
IkReal gconst97=(r21*x3574);
IkReal gconst98=(x3573*x3574);
IkReal x3577=((1.0)*(r22*r22));
CheckValue<IkReal> x3581=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3577))),-1);
if(!x3581.valid){
continue;
}
IkReal x3578=x3581.value;
IkReal x3579=((1.0)*x3578);
IkReal x3580=((((-1.0)*x3579*(r20*r20*r20*r20)))+(((-2.0)*x3578*(r20*r20)*(r21*r21)))+(((-1.0)*x3577))+(((-1.0)*x3579*(r21*r21*r21*r21))));
j4eval[0]=x3580;
j4eval[1]=IKsign(x3580);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3582=(cj1*cj2);
IkReal x3583=(gconst98*r20);
IkReal x3584=(sj1*sj2);
IkReal x3585=(gconst97*r21);
CheckValue<IkReal> x3586=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3583*x3583)))+(((2.0)*x3583*x3585))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3585*x3585))))),-1);
if(!x3586.valid){
continue;
}
CheckValue<IkReal> x3587 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3582))+((r22*x3584)))),IkReal((((x3584*x3585))+(((-1.0)*x3583*x3584))+(((-1.0)*x3582*x3585))+((x3582*x3583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3586.value)))+(x3587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3588=IKsin(j4);
IkReal x3589=IKcos(j4);
IkReal x3590=(gconst98*r10);
IkReal x3591=(gconst97*r21);
IkReal x3592=(gconst98*r20);
IkReal x3593=((1.0)*cj2);
IkReal x3594=((1.0)*sj0);
IkReal x3595=(gconst98*r00);
IkReal x3596=(cj1*sj2);
IkReal x3597=((1.0)*x3589);
IkReal x3598=((1.0)*x3588);
IkReal x3599=(gconst97*x3588);
IkReal x3600=(gconst97*x3589);
evalcond[0]=((((-1.0)*r22*x3597))+((x3588*x3591))+(((-1.0)*x3592*x3598)));
evalcond[1]=(cj0+((r11*x3599))+(((-1.0)*x3590*x3598))+(((-1.0)*r12*x3597)));
evalcond[2]=((((-1.0)*r02*x3597))+(((-1.0)*x3595*x3598))+((r01*x3599))+(((-1.0)*x3594)));
evalcond[3]=((((-1.0)*cj1*x3593))+((x3589*x3591))+((sj1*sj2))+(((-1.0)*x3592*x3597))+((r22*x3588)));
evalcond[4]=(((r02*x3588))+(((-1.0)*cj0*x3596))+((r01*x3600))+(((-1.0)*x3595*x3597))+(((-1.0)*cj0*sj1*x3593)));
evalcond[5]=((((-1.0)*x3594*x3596))+((r11*x3600))+((r12*x3588))+(((-1.0)*x3590*x3597))+(((-1.0)*sj0*sj1*x3593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3601=((1.0)*gconst98);
CheckValue<IkReal> x3602 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3602.valid){
continue;
}
CheckValue<IkReal> x3603=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3601))+(((-1.0)*gconst97*r10)))),-1);
if(!x3603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3602.value)+(((1.5707963267949)*(x3603.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3604=IKsin(j4);
IkReal x3605=IKcos(j4);
IkReal x3606=(gconst98*r10);
IkReal x3607=(gconst97*r21);
IkReal x3608=(gconst98*r20);
IkReal x3609=((1.0)*cj2);
IkReal x3610=((1.0)*sj0);
IkReal x3611=(gconst98*r00);
IkReal x3612=(cj1*sj2);
IkReal x3613=((1.0)*x3605);
IkReal x3614=((1.0)*x3604);
IkReal x3615=(gconst97*x3604);
IkReal x3616=(gconst97*x3605);
evalcond[0]=(((x3604*x3607))+(((-1.0)*r22*x3613))+(((-1.0)*x3608*x3614)));
evalcond[1]=(((r11*x3615))+cj0+(((-1.0)*r12*x3613))+(((-1.0)*x3606*x3614)));
evalcond[2]=((((-1.0)*x3611*x3614))+(((-1.0)*r02*x3613))+((r01*x3615))+(((-1.0)*x3610)));
evalcond[3]=(((r22*x3604))+((sj1*sj2))+(((-1.0)*x3608*x3613))+(((-1.0)*cj1*x3609))+((x3605*x3607)));
evalcond[4]=(((r02*x3604))+(((-1.0)*x3611*x3613))+((r01*x3616))+(((-1.0)*cj0*sj1*x3609))+(((-1.0)*cj0*x3612)));
evalcond[5]=(((r11*x3616))+(((-1.0)*sj0*sj1*x3609))+(((-1.0)*x3610*x3612))+((r12*x3604))+(((-1.0)*x3606*x3613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3617=((1.0)*gconst98);
CheckValue<IkReal> x3618 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x3617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3618.valid){
continue;
}
CheckValue<IkReal> x3619=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3617))+(((-1.0)*gconst97*r00)))),-1);
if(!x3619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3618.value)+(((1.5707963267949)*(x3619.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3620=IKsin(j4);
IkReal x3621=IKcos(j4);
IkReal x3622=(gconst98*r10);
IkReal x3623=(gconst97*r21);
IkReal x3624=(gconst98*r20);
IkReal x3625=((1.0)*cj2);
IkReal x3626=((1.0)*sj0);
IkReal x3627=(gconst98*r00);
IkReal x3628=(cj1*sj2);
IkReal x3629=((1.0)*x3621);
IkReal x3630=((1.0)*x3620);
IkReal x3631=(gconst97*x3620);
IkReal x3632=(gconst97*x3621);
evalcond[0]=(((x3620*x3623))+(((-1.0)*x3624*x3630))+(((-1.0)*r22*x3629)));
evalcond[1]=(((r11*x3631))+cj0+(((-1.0)*r12*x3629))+(((-1.0)*x3622*x3630)));
evalcond[2]=((((-1.0)*x3627*x3630))+(((-1.0)*x3626))+((r01*x3631))+(((-1.0)*r02*x3629)));
evalcond[3]=((((-1.0)*x3624*x3629))+((sj1*sj2))+((x3621*x3623))+(((-1.0)*cj1*x3625))+((r22*x3620)));
evalcond[4]=((((-1.0)*cj0*x3628))+((r02*x3620))+(((-1.0)*x3627*x3629))+((r01*x3632))+(((-1.0)*cj0*sj1*x3625)));
evalcond[5]=(((r11*x3632))+(((-1.0)*x3626*x3628))+(((-1.0)*x3622*x3629))+((r12*x3620))+(((-1.0)*sj0*sj1*x3625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3633=((-1.0)*r21);
IkReal x3635 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3635)==0){
continue;
}
IkReal x3634=pow(x3635,-0.5);
CheckValue<IkReal> x3636 = IKatan2WithCheck(IkReal(x3633),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3636.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3636.value))));
IkReal gconst100=(x3633*x3634);
IkReal gconst101=((1.0)*r20*x3634);
CheckValue<IkReal> x3637 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3637.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3637.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3638=((-1.0)*r21);
CheckValue<IkReal> x3641 = IKatan2WithCheck(IkReal(x3638),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3641.valid){
continue;
}
IkReal x3639=((1.0)*(x3641.value));
IkReal x3640=x3634;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3639)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3639)));
IkReal gconst100=(x3638*x3640);
IkReal gconst101=((1.0)*r20*x3640);
IkReal x3642=r22*r22;
IkReal x3643=((1.0)*x3642);
CheckValue<IkReal> x3647=IKPowWithIntegerCheck(((-1.0)+x3642),-1);
if(!x3647.valid){
continue;
}
IkReal x3644=x3647.value;
if((((1.0)+(((-1.0)*x3643)))) < -0.00001)
continue;
IkReal x3645=IKsqrt(((1.0)+(((-1.0)*x3643))));
IkReal x3646=(cj0*x3644*x3645);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x3643*x3646))+x3646))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3648=((-1.0)*r21);
CheckValue<IkReal> x3651 = IKatan2WithCheck(IkReal(x3648),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3651.valid){
continue;
}
IkReal x3649=((1.0)*(x3651.value));
IkReal x3650=x3634;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3649)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3649)));
IkReal gconst100=(x3648*x3650);
IkReal gconst101=((1.0)*r20*x3650);
IkReal x3652=r22*r22;
IkReal x3653=((1.0)*x3652);
CheckValue<IkReal> x3657=IKPowWithIntegerCheck(((-1.0)+x3652),-1);
if(!x3657.valid){
continue;
}
IkReal x3654=x3657.value;
if((((1.0)+(((-1.0)*x3653)))) < -0.00001)
continue;
IkReal x3655=IKsqrt(((1.0)+(((-1.0)*x3653))));
IkReal x3656=(sj0*x3654*x3655);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3653*x3656))+x3656))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3658=((-1.0)*r21);
CheckValue<IkReal> x3661 = IKatan2WithCheck(IkReal(x3658),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3661.valid){
continue;
}
IkReal x3659=((1.0)*(x3661.value));
IkReal x3660=x3634;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3659)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3659)));
IkReal gconst100=(x3658*x3660);
IkReal gconst101=((1.0)*r20*x3660);
IkReal x3662=r22*r22;
IkReal x3663=(r12*sj0);
IkReal x3664=(cj0*r02);
CheckValue<IkReal> x3668=IKPowWithIntegerCheck(((-1.0)+x3662),-1);
if(!x3668.valid){
continue;
}
IkReal x3665=x3668.value;
if((((1.0)+(((-1.0)*x3662)))) < -0.00001)
continue;
IkReal x3666=IKsqrt(((1.0)+(((-1.0)*x3662))));
IkReal x3667=(r22*x3665*x3666);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3664*x3667))+((x3663*x3667)))))+(IKabs(((((-1.0)*x3664))+(((-1.0)*x3663))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3669=((1.0)*sj0);
IkReal x3670=((1.0)*gconst100);
CheckValue<IkReal> x3671 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3669)))),IkReal(((((-1.0)*gconst100*r11*x3669))+((gconst101*r10*sj0))+(((-1.0)*cj0*r01*x3670))+((cj0*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3671.valid){
continue;
}
CheckValue<IkReal> x3672=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3670))+(((-1.0)*gconst101*r21)))),-1);
if(!x3672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3671.value)+(((1.5707963267949)*(x3672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3673=IKsin(j4);
IkReal x3674=IKcos(j4);
IkReal x3675=(gconst101*r20);
IkReal x3676=(gconst101*r10);
IkReal x3677=((1.0)*cj2);
IkReal x3678=(gconst101*r00);
IkReal x3679=((1.0)*sj0);
IkReal x3680=(cj1*sj2);
IkReal x3681=((1.0)*x3674);
IkReal x3682=((1.0)*x3673);
IkReal x3683=(gconst100*x3673);
IkReal x3684=(gconst100*x3674);
evalcond[0]=((((-1.0)*r22*x3681))+((r21*x3683))+(((-1.0)*x3675*x3682)));
evalcond[1]=(cj0+(((-1.0)*x3676*x3682))+(((-1.0)*r12*x3681))+((r11*x3683)));
evalcond[2]=(((r01*x3683))+(((-1.0)*x3678*x3682))+(((-1.0)*x3679))+(((-1.0)*r02*x3681)));
evalcond[3]=(((r21*x3684))+((sj1*sj2))+(((-1.0)*x3675*x3681))+((r22*x3673))+(((-1.0)*cj1*x3677)));
evalcond[4]=(((r01*x3684))+(((-1.0)*cj0*x3680))+((r02*x3673))+(((-1.0)*cj0*sj1*x3677))+(((-1.0)*x3678*x3681)));
evalcond[5]=(((r12*x3673))+(((-1.0)*x3676*x3681))+(((-1.0)*x3679*x3680))+((r11*x3684))+(((-1.0)*sj0*sj1*x3677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3685=((1.0)*gconst101);
CheckValue<IkReal> x3686=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3685)))),-1);
if(!x3686.valid){
continue;
}
CheckValue<IkReal> x3687 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3685))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3686.value)))+(x3687.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3688=IKsin(j4);
IkReal x3689=IKcos(j4);
IkReal x3690=(gconst101*r20);
IkReal x3691=(gconst101*r10);
IkReal x3692=((1.0)*cj2);
IkReal x3693=(gconst101*r00);
IkReal x3694=((1.0)*sj0);
IkReal x3695=(cj1*sj2);
IkReal x3696=((1.0)*x3689);
IkReal x3697=((1.0)*x3688);
IkReal x3698=(gconst100*x3688);
IkReal x3699=(gconst100*x3689);
evalcond[0]=((((-1.0)*r22*x3696))+((r21*x3698))+(((-1.0)*x3690*x3697)));
evalcond[1]=(cj0+(((-1.0)*r12*x3696))+((r11*x3698))+(((-1.0)*x3691*x3697)));
evalcond[2]=(((r01*x3698))+(((-1.0)*r02*x3696))+(((-1.0)*x3694))+(((-1.0)*x3693*x3697)));
evalcond[3]=((((-1.0)*cj1*x3692))+((sj1*sj2))+((r21*x3699))+((r22*x3688))+(((-1.0)*x3690*x3696)));
evalcond[4]=(((r01*x3699))+(((-1.0)*cj0*x3695))+(((-1.0)*cj0*sj1*x3692))+((r02*x3688))+(((-1.0)*x3693*x3696)));
evalcond[5]=(((r12*x3688))+(((-1.0)*sj0*sj1*x3692))+((r11*x3699))+(((-1.0)*x3694*x3695))+(((-1.0)*x3691*x3696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3700=((1.0)*gconst101);
CheckValue<IkReal> x3701=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3700))+(((-1.0)*gconst100*r00)))),-1);
if(!x3701.valid){
continue;
}
CheckValue<IkReal> x3702 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3701.value)))+(x3702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3703=IKsin(j4);
IkReal x3704=IKcos(j4);
IkReal x3705=(gconst101*r20);
IkReal x3706=(gconst101*r10);
IkReal x3707=((1.0)*cj2);
IkReal x3708=(gconst101*r00);
IkReal x3709=((1.0)*sj0);
IkReal x3710=(cj1*sj2);
IkReal x3711=((1.0)*x3704);
IkReal x3712=((1.0)*x3703);
IkReal x3713=(gconst100*x3703);
IkReal x3714=(gconst100*x3704);
evalcond[0]=((((-1.0)*x3705*x3712))+((r21*x3713))+(((-1.0)*r22*x3711)));
evalcond[1]=(((r11*x3713))+cj0+(((-1.0)*r12*x3711))+(((-1.0)*x3706*x3712)));
evalcond[2]=((((-1.0)*r02*x3711))+(((-1.0)*x3709))+((r01*x3713))+(((-1.0)*x3708*x3712)));
evalcond[3]=((((-1.0)*cj1*x3707))+(((-1.0)*x3705*x3711))+((sj1*sj2))+((r21*x3714))+((r22*x3703)));
evalcond[4]=((((-1.0)*cj0*sj1*x3707))+(((-1.0)*cj0*x3710))+((r01*x3714))+(((-1.0)*x3708*x3711))+((r02*x3703)));
evalcond[5]=(((r11*x3714))+((r12*x3703))+(((-1.0)*sj0*sj1*x3707))+(((-1.0)*x3706*x3711))+(((-1.0)*x3709*x3710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3715=((-1.0)*r10);
IkReal x3717 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3717)==0){
continue;
}
IkReal x3716=pow(x3717,-0.5);
CheckValue<IkReal> x3718 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3715),IKFAST_ATAN2_MAGTHRESH);
if(!x3718.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3718.value));
IkReal gconst103=(r11*x3716);
IkReal gconst104=(x3715*x3716);
CheckValue<IkReal> x3719 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3719.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3719.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3720=((-1.0)*r10);
IkReal x3721=x3716;
CheckValue<IkReal> x3723 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3720),IKFAST_ATAN2_MAGTHRESH);
if(!x3723.valid){
continue;
}
IkReal x3722=((-1.0)*(x3723.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3722;
IkReal gconst102=x3722;
IkReal gconst103=(r11*x3721);
IkReal gconst104=(x3720*x3721);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3724=((1.0)*sj0);
IkReal x3725=((1.0)*gconst103);
CheckValue<IkReal> x3726 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3724))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3725))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x3724))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3726.valid){
continue;
}
CheckValue<IkReal> x3727=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3725)))),-1);
if(!x3727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3726.value)+(((1.5707963267949)*(x3727.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3728=IKsin(j4);
IkReal x3729=IKcos(j4);
IkReal x3730=(gconst103*r11);
IkReal x3731=((1.0)*cj2);
IkReal x3732=((1.0)*sj0);
IkReal x3733=(cj1*sj2);
IkReal x3734=((1.0)*x3729);
IkReal x3735=(gconst103*x3729);
IkReal x3736=(gconst103*x3728);
IkReal x3737=((1.0)*gconst104*x3728);
evalcond[0]=((((-1.0)*r20*x3737))+(((-1.0)*r22*x3734))+((r21*x3736)));
evalcond[1]=(cj0+(((-1.0)*r12*x3734))+(((-1.0)*r10*x3737))+((x3728*x3730)));
evalcond[2]=((((-1.0)*x3732))+((r01*x3736))+(((-1.0)*r00*x3737))+(((-1.0)*r02*x3734)));
evalcond[3]=((((-1.0)*cj1*x3731))+((r22*x3728))+((sj1*sj2))+(((-1.0)*gconst104*r20*x3734))+((r21*x3735)));
evalcond[4]=((((-1.0)*gconst104*r00*x3734))+((r01*x3735))+(((-1.0)*cj0*x3733))+((r02*x3728))+(((-1.0)*cj0*sj1*x3731)));
evalcond[5]=((((-1.0)*sj0*sj1*x3731))+((x3729*x3730))+((r12*x3728))+(((-1.0)*x3732*x3733))+(((-1.0)*gconst104*r10*x3734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3738=((1.0)*gconst104);
CheckValue<IkReal> x3739=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3738)))),-1);
if(!x3739.valid){
continue;
}
CheckValue<IkReal> x3740 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3738))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3739.value)))+(x3740.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3741=IKsin(j4);
IkReal x3742=IKcos(j4);
IkReal x3743=(gconst103*r11);
IkReal x3744=((1.0)*cj2);
IkReal x3745=((1.0)*sj0);
IkReal x3746=(cj1*sj2);
IkReal x3747=((1.0)*x3742);
IkReal x3748=(gconst103*x3742);
IkReal x3749=(gconst103*x3741);
IkReal x3750=((1.0)*gconst104*x3741);
evalcond[0]=((((-1.0)*r22*x3747))+(((-1.0)*r20*x3750))+((r21*x3749)));
evalcond[1]=(cj0+(((-1.0)*r12*x3747))+(((-1.0)*r10*x3750))+((x3741*x3743)));
evalcond[2]=(((r01*x3749))+(((-1.0)*r00*x3750))+(((-1.0)*x3745))+(((-1.0)*r02*x3747)));
evalcond[3]=((((-1.0)*gconst104*r20*x3747))+((sj1*sj2))+((r22*x3741))+((r21*x3748))+(((-1.0)*cj1*x3744)));
evalcond[4]=((((-1.0)*gconst104*r00*x3747))+((r01*x3748))+(((-1.0)*cj0*x3746))+((r02*x3741))+(((-1.0)*cj0*sj1*x3744)));
evalcond[5]=(((x3742*x3743))+(((-1.0)*sj0*sj1*x3744))+((r12*x3741))+(((-1.0)*x3745*x3746))+(((-1.0)*gconst104*r10*x3747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3751=((-1.0)*r11);
IkReal x3753 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3753)==0){
continue;
}
IkReal x3752=pow(x3753,-0.5);
CheckValue<IkReal> x3754 = IKatan2WithCheck(IkReal(x3751),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3754.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3754.value))));
IkReal gconst106=(x3751*x3752);
IkReal gconst107=((1.0)*r10*x3752);
CheckValue<IkReal> x3755 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3755.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3755.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3756=((-1.0)*r11);
CheckValue<IkReal> x3759 = IKatan2WithCheck(IkReal(x3756),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3759.valid){
continue;
}
IkReal x3757=((1.0)*(x3759.value));
IkReal x3758=x3752;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3757)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3757)));
IkReal gconst106=(x3756*x3758);
IkReal gconst107=((1.0)*r10*x3758);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3760=((-1.0)*r11);
CheckValue<IkReal> x3763 = IKatan2WithCheck(IkReal(x3760),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3763.valid){
continue;
}
IkReal x3761=((1.0)*(x3763.value));
IkReal x3762=x3752;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3761)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3761)));
IkReal gconst106=(x3760*x3762);
IkReal gconst107=((1.0)*r10*x3762);
IkReal x3764=r12*r12;
IkReal x3765=((1.0)*sj0);
IkReal x3766=(cj0*r02);
IkReal x3767=x3752;
j4eval[0]=((IKabs((((r12*x3766*x3767))+((sj0*x3764*x3767))+(((-1.0)*x3765*x3767)))))+(IKabs(((((-1.0)*x3766))+(((-1.0)*r12*x3765))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3768=((-1.0)*r11);
CheckValue<IkReal> x3771 = IKatan2WithCheck(IkReal(x3768),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3771.valid){
continue;
}
IkReal x3769=((1.0)*(x3771.value));
IkReal x3770=x3752;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3769)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3769)));
IkReal gconst106=(x3768*x3770);
IkReal gconst107=((1.0)*r10*x3770);
IkReal x3772=r12*r12;
IkReal x3773=((1.0)+(((-1.0)*x3772)));
IkReal x3774=(r22*sj1*sj2);
IkReal x3775=(cj1*cj2*r22);
CheckValue<IkReal> x3782=IKPowWithIntegerCheck(x3773,-1);
if(!x3782.valid){
continue;
}
IkReal x3776=x3782.value;
CheckValue<IkReal> x3783=IKPowWithIntegerCheck(((-1.0)+x3772),-1);
if(!x3783.valid){
continue;
}
IkReal x3777=x3783.value;
IkReal x3778=((1.0)*x3776);
if((x3773) < -0.00001)
continue;
IkReal x3779=IKsqrt(x3773);
IkReal x3780=(r12*x3777*x3779);
IkReal x3781=((((-2.0)*r10*r11*r20*r21*x3776))+(((-1.0)*x3778*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x3778*(r11*r11)*(r21*r21))));
j4eval[0]=x3781;
j4eval[1]=((IKabs((((x3775*x3780))+(((-1.0)*x3774*x3780)))))+(IKabs(((((-1.0)*x3775))+x3774))));
j4eval[2]=IKsign(x3781);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3784=(sj1*sj2);
IkReal x3785=(gconst106*r21);
IkReal x3786=(gconst107*r20);
IkReal x3787=(cj1*cj2);
CheckValue<IkReal> x3788 = IKatan2WithCheck(IkReal((((r22*x3784))+(((-1.0)*r22*x3787)))),IkReal((((x3784*x3785))+(((-1.0)*x3784*x3786))+(((-1.0)*x3785*x3787))+((x3786*x3787)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3788.valid){
continue;
}
CheckValue<IkReal> x3789=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3786*x3786)))+(((-1.0)*(r22*r22)))+(((2.0)*x3785*x3786))+(((-1.0)*(x3785*x3785))))),-1);
if(!x3789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3788.value)+(((1.5707963267949)*(x3789.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3790=IKsin(j4);
IkReal x3791=IKcos(j4);
IkReal x3792=(gconst107*r10);
IkReal x3793=(gconst107*r00);
IkReal x3794=((1.0)*cj2);
IkReal x3795=(gconst107*r20);
IkReal x3796=((1.0)*sj0);
IkReal x3797=(cj1*sj2);
IkReal x3798=((1.0)*x3791);
IkReal x3799=(gconst106*x3791);
IkReal x3800=(gconst106*x3790);
IkReal x3801=((1.0)*x3790);
evalcond[0]=(((r21*x3800))+(((-1.0)*r22*x3798))+(((-1.0)*x3795*x3801)));
evalcond[1]=((((-1.0)*r12*x3798))+((r11*x3800))+cj0+(((-1.0)*x3792*x3801)));
evalcond[2]=((((-1.0)*x3796))+((r01*x3800))+(((-1.0)*r02*x3798))+(((-1.0)*x3793*x3801)));
evalcond[3]=(((r21*x3799))+((r22*x3790))+((sj1*sj2))+(((-1.0)*x3795*x3798))+(((-1.0)*cj1*x3794)));
evalcond[4]=(((r02*x3790))+(((-1.0)*cj0*sj1*x3794))+(((-1.0)*x3793*x3798))+(((-1.0)*cj0*x3797))+((r01*x3799)));
evalcond[5]=((((-1.0)*sj0*sj1*x3794))+(((-1.0)*x3796*x3797))+((r12*x3790))+((r11*x3799))+(((-1.0)*x3792*x3798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3802=((1.0)*sj0);
IkReal x3803=((1.0)*gconst106);
CheckValue<IkReal> x3804=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3803)))),-1);
if(!x3804.valid){
continue;
}
CheckValue<IkReal> x3805 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3802)))),IkReal(((((-1.0)*gconst106*r11*x3802))+(((-1.0)*cj0*r01*x3803))+((gconst107*r10*sj0))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3804.value)))+(x3805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3806=IKsin(j4);
IkReal x3807=IKcos(j4);
IkReal x3808=(gconst107*r10);
IkReal x3809=(gconst107*r00);
IkReal x3810=((1.0)*cj2);
IkReal x3811=(gconst107*r20);
IkReal x3812=((1.0)*sj0);
IkReal x3813=(cj1*sj2);
IkReal x3814=((1.0)*x3807);
IkReal x3815=(gconst106*x3807);
IkReal x3816=(gconst106*x3806);
IkReal x3817=((1.0)*x3806);
evalcond[0]=((((-1.0)*r22*x3814))+((r21*x3816))+(((-1.0)*x3811*x3817)));
evalcond[1]=((((-1.0)*r12*x3814))+cj0+((r11*x3816))+(((-1.0)*x3808*x3817)));
evalcond[2]=((((-1.0)*r02*x3814))+(((-1.0)*x3809*x3817))+(((-1.0)*x3812))+((r01*x3816)));
evalcond[3]=(((r21*x3815))+((r22*x3806))+(((-1.0)*cj1*x3810))+((sj1*sj2))+(((-1.0)*x3811*x3814)));
evalcond[4]=((((-1.0)*cj0*x3813))+(((-1.0)*x3809*x3814))+((r02*x3806))+(((-1.0)*cj0*sj1*x3810))+((r01*x3815)));
evalcond[5]=((((-1.0)*sj0*sj1*x3810))+((r11*x3815))+((r12*x3806))+(((-1.0)*x3808*x3814))+(((-1.0)*x3812*x3813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3818=((1.0)*gconst107);
CheckValue<IkReal> x3819 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3819.valid){
continue;
}
CheckValue<IkReal> x3820=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3818))+(((-1.0)*gconst106*r00)))),-1);
if(!x3820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3819.value)+(((1.5707963267949)*(x3820.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3821=IKsin(j4);
IkReal x3822=IKcos(j4);
IkReal x3823=(gconst107*r10);
IkReal x3824=(gconst107*r00);
IkReal x3825=((1.0)*cj2);
IkReal x3826=(gconst107*r20);
IkReal x3827=((1.0)*sj0);
IkReal x3828=(cj1*sj2);
IkReal x3829=((1.0)*x3822);
IkReal x3830=(gconst106*x3822);
IkReal x3831=(gconst106*x3821);
IkReal x3832=((1.0)*x3821);
evalcond[0]=((((-1.0)*r22*x3829))+((r21*x3831))+(((-1.0)*x3826*x3832)));
evalcond[1]=((((-1.0)*r12*x3829))+cj0+((r11*x3831))+(((-1.0)*x3823*x3832)));
evalcond[2]=((((-1.0)*r02*x3829))+((r01*x3831))+(((-1.0)*x3827))+(((-1.0)*x3824*x3832)));
evalcond[3]=((((-1.0)*x3826*x3829))+((sj1*sj2))+(((-1.0)*cj1*x3825))+((r22*x3821))+((r21*x3830)));
evalcond[4]=((((-1.0)*x3824*x3829))+(((-1.0)*cj0*x3828))+((r01*x3830))+((r02*x3821))+(((-1.0)*cj0*sj1*x3825)));
evalcond[5]=(((r12*x3821))+(((-1.0)*sj0*sj1*x3825))+(((-1.0)*x3827*x3828))+(((-1.0)*x3823*x3829))+((r11*x3830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3833=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3833;
j4eval[1]=IKsign(x3833);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3834=((1.0)*cj5);
IkReal x3835=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3834)));
j4eval[0]=x3835;
j4eval[1]=((IKabs(((((-1.0)*r20*x3834))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3835);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3836=(sj1*sj2);
IkReal x3837=(cj5*r10);
IkReal x3838=(r11*sj5);
IkReal x3839=(cj1*cj2);
IkReal x3840=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3840;
j4eval[1]=((IKabs(((((-1.0)*r12*x3836))+((r12*x3839)))))+(IKabs(((((-1.0)*x3836*x3837))+(((-1.0)*x3838*x3839))+((x3836*x3838))+((x3837*x3839))))));
j4eval[2]=IKsign(x3840);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3841=(sj1*sj2);
IkReal x3842=(cj5*r10);
IkReal x3843=(r11*sj5);
IkReal x3844=(cj1*cj2);
CheckValue<IkReal> x3845=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3845.valid){
continue;
}
CheckValue<IkReal> x3846 = IKatan2WithCheck(IkReal((((x3841*x3843))+(((-1.0)*x3843*x3844))+((x3842*x3844))+(((-1.0)*x3841*x3842)))),IkReal((((r12*x3844))+(((-1.0)*r12*x3841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3845.value)))+(x3846.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3847=IKcos(j4);
IkReal x3848=IKsin(j4);
IkReal x3849=(cj5*r00);
IkReal x3850=(cj5*r10);
IkReal x3851=(r21*sj5);
IkReal x3852=((1.0)*cj2);
IkReal x3853=(cj5*r20);
IkReal x3854=((1.0)*x3847);
IkReal x3855=((1.0)*x3848);
IkReal x3856=(sj5*x3848);
IkReal x3857=(sj5*x3847);
evalcond[0]=(((r12*x3848))+((r11*x3857))+(((-1.0)*x3850*x3854)));
evalcond[1]=(((x3848*x3851))+(((-1.0)*x3853*x3855))+(((-1.0)*r22*x3854)));
evalcond[2]=(((r01*x3856))+(((-1.0)*r02*x3854))+(((-1.0)*x3849*x3855)));
evalcond[3]=((1.0)+((r11*x3856))+(((-1.0)*x3850*x3855))+(((-1.0)*r12*x3854)));
evalcond[4]=(((x3847*x3851))+((sj1*sj2))+(((-1.0)*cj1*x3852))+(((-1.0)*x3853*x3854))+((r22*x3848)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3852))+((r01*x3857))+((r02*x3848))+(((-1.0)*x3849*x3854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3858=((1.0)*cj5);
CheckValue<IkReal> x3859=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3858)))),-1);
if(!x3859.valid){
continue;
}
CheckValue<IkReal> x3860 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3858))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3859.value)))+(x3860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3861=IKcos(j4);
IkReal x3862=IKsin(j4);
IkReal x3863=(cj5*r00);
IkReal x3864=(cj5*r10);
IkReal x3865=(r21*sj5);
IkReal x3866=((1.0)*cj2);
IkReal x3867=(cj5*r20);
IkReal x3868=((1.0)*x3861);
IkReal x3869=((1.0)*x3862);
IkReal x3870=(sj5*x3862);
IkReal x3871=(sj5*x3861);
evalcond[0]=((((-1.0)*x3864*x3868))+((r11*x3871))+((r12*x3862)));
evalcond[1]=((((-1.0)*x3867*x3869))+((x3862*x3865))+(((-1.0)*r22*x3868)));
evalcond[2]=((((-1.0)*r02*x3868))+((r01*x3870))+(((-1.0)*x3863*x3869)));
evalcond[3]=((1.0)+(((-1.0)*x3864*x3869))+(((-1.0)*r12*x3868))+((r11*x3870)));
evalcond[4]=((((-1.0)*x3867*x3868))+((sj1*sj2))+(((-1.0)*cj1*x3866))+((x3861*x3865))+((r22*x3862)));
evalcond[5]=(((r02*x3862))+((r01*x3871))+(((-1.0)*x3863*x3868))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3872=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3872.valid){
continue;
}
CheckValue<IkReal> x3873 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3872.value)))+(x3873.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3874=IKcos(j4);
IkReal x3875=IKsin(j4);
IkReal x3876=(cj5*r00);
IkReal x3877=(cj5*r10);
IkReal x3878=(r21*sj5);
IkReal x3879=((1.0)*cj2);
IkReal x3880=(cj5*r20);
IkReal x3881=((1.0)*x3874);
IkReal x3882=((1.0)*x3875);
IkReal x3883=(sj5*x3875);
IkReal x3884=(sj5*x3874);
evalcond[0]=(((r11*x3884))+(((-1.0)*x3877*x3881))+((r12*x3875)));
evalcond[1]=((((-1.0)*x3880*x3882))+(((-1.0)*r22*x3881))+((x3875*x3878)));
evalcond[2]=((((-1.0)*r02*x3881))+((r01*x3883))+(((-1.0)*x3876*x3882)));
evalcond[3]=((1.0)+((r11*x3883))+(((-1.0)*x3877*x3882))+(((-1.0)*r12*x3881)));
evalcond[4]=((((-1.0)*x3880*x3881))+((sj1*sj2))+((x3874*x3878))+(((-1.0)*cj1*x3879))+((r22*x3875)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x3884))+(((-1.0)*sj1*x3879))+((r02*x3875))+(((-1.0)*x3876*x3881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3885=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3885;
j4eval[1]=IKsign(x3885);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3886=((1.0)*cj5);
IkReal x3887=((((-1.0)*r21*x3886))+(((-1.0)*r20*sj5)));
j4eval[0]=x3887;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3886))))));
j4eval[2]=IKsign(x3887);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3888=cj5*cj5;
IkReal x3889=r11*r11;
IkReal x3890=(r11*sj5);
IkReal x3891=(cj5*r10);
IkReal x3892=((r12*r12)+(((-1.0)*x3888*x3889))+(((-2.0)*x3890*x3891))+((x3888*(r10*r10)))+x3889);
j4eval[0]=x3892;
j4eval[1]=IKsign(x3892);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3891))+x3890))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3893=cj5*cj5;
IkReal x3894=r11*r11;
IkReal x3895=(cj5*r10);
IkReal x3896=(r11*sj5);
CheckValue<IkReal> x3897 = IKatan2WithCheck(IkReal(((((-1.0)*x3895))+x3896)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3897.valid){
continue;
}
CheckValue<IkReal> x3898=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x3893*x3894))+(((-2.0)*x3895*x3896))+((x3893*(r10*r10)))+x3894)),-1);
if(!x3898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3897.value)+(((1.5707963267949)*(x3898.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3899=IKcos(j4);
IkReal x3900=IKsin(j4);
IkReal x3901=(cj5*r00);
IkReal x3902=(cj5*r10);
IkReal x3903=(r21*sj5);
IkReal x3904=(cj5*r20);
IkReal x3905=((1.0)*x3899);
IkReal x3906=((1.0)*x3900);
IkReal x3907=(sj5*x3900);
IkReal x3908=(sj5*x3899);
evalcond[0]=((((-1.0)*x3902*x3905))+((r12*x3900))+((r11*x3908)));
evalcond[1]=(((x3900*x3903))+(((-1.0)*x3904*x3906))+(((-1.0)*r22*x3905)));
evalcond[2]=((((-1.0)*x3901*x3906))+((r01*x3907))+(((-1.0)*r02*x3905)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3905))+(((-1.0)*x3902*x3906))+((r11*x3907)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3901*x3905))+((cj1*sj2))+((r01*x3908))+((r02*x3900)));
evalcond[5]=((((-1.0)*x3904*x3905))+((r22*x3900))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3899*x3903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3909=((1.0)*cj5);
CheckValue<IkReal> x3910=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3909))+(((-1.0)*r20*sj5)))),-1);
if(!x3910.valid){
continue;
}
CheckValue<IkReal> x3911 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3910.value)))+(x3911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3912=IKcos(j4);
IkReal x3913=IKsin(j4);
IkReal x3914=(cj5*r00);
IkReal x3915=(cj5*r10);
IkReal x3916=(r21*sj5);
IkReal x3917=(cj5*r20);
IkReal x3918=((1.0)*x3912);
IkReal x3919=((1.0)*x3913);
IkReal x3920=(sj5*x3913);
IkReal x3921=(sj5*x3912);
evalcond[0]=((((-1.0)*x3915*x3918))+((r11*x3921))+((r12*x3913)));
evalcond[1]=((((-1.0)*r22*x3918))+(((-1.0)*x3917*x3919))+((x3913*x3916)));
evalcond[2]=((((-1.0)*r02*x3918))+(((-1.0)*x3914*x3919))+((r01*x3920)));
evalcond[3]=((-1.0)+(((-1.0)*x3915*x3919))+((r11*x3920))+(((-1.0)*r12*x3918)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3914*x3918))+((cj1*sj2))+((r02*x3913))+((r01*x3921)));
evalcond[5]=((((-1.0)*x3917*x3918))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3912*x3916))+((r22*x3913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3922 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3922.valid){
continue;
}
CheckValue<IkReal> x3923=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3922.value)+(((1.5707963267949)*(x3923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3924=IKcos(j4);
IkReal x3925=IKsin(j4);
IkReal x3926=(cj5*r00);
IkReal x3927=(cj5*r10);
IkReal x3928=(r21*sj5);
IkReal x3929=(cj5*r20);
IkReal x3930=((1.0)*x3924);
IkReal x3931=((1.0)*x3925);
IkReal x3932=(sj5*x3925);
IkReal x3933=(sj5*x3924);
evalcond[0]=(((r12*x3925))+(((-1.0)*x3927*x3930))+((r11*x3933)));
evalcond[1]=((((-1.0)*x3929*x3931))+(((-1.0)*r22*x3930))+((x3925*x3928)));
evalcond[2]=(((r01*x3932))+(((-1.0)*x3926*x3931))+(((-1.0)*r02*x3930)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3930))+(((-1.0)*x3927*x3931))+((r11*x3932)));
evalcond[4]=(((cj2*sj1))+((r01*x3933))+((cj1*sj2))+((r02*x3925))+(((-1.0)*x3926*x3930)));
evalcond[5]=((((-1.0)*x3929*x3930))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3925))+((x3924*x3928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3934=((-1.0)*r00);
IkReal x3936 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3936)==0){
continue;
}
IkReal x3935=pow(x3936,-0.5);
CheckValue<IkReal> x3937 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3934),IKFAST_ATAN2_MAGTHRESH);
if(!x3937.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3937.value));
IkReal gconst109=(r01*x3935);
IkReal gconst110=(x3934*x3935);
CheckValue<IkReal> x3938 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3938.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3938.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3939=((-1.0)*r00);
IkReal x3940=x3935;
CheckValue<IkReal> x3942 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3939),IKFAST_ATAN2_MAGTHRESH);
if(!x3942.valid){
continue;
}
IkReal x3941=((-1.0)*(x3942.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3941;
IkReal gconst108=x3941;
IkReal gconst109=(r01*x3940);
IkReal gconst110=(x3939*x3940);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3943=((1.0)*sj0);
IkReal x3944=((1.0)*gconst109);
CheckValue<IkReal> x3945=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3944))+(((-1.0)*gconst110*r21)))),-1);
if(!x3945.valid){
continue;
}
CheckValue<IkReal> x3946 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3943)))),IkReal(((((-1.0)*cj0*r01*x3944))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x3943)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3945.value)))+(x3946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3947=IKsin(j4);
IkReal x3948=IKcos(j4);
IkReal x3949=(gconst109*r21);
IkReal x3950=((1.0)*cj2);
IkReal x3951=((1.0)*sj0);
IkReal x3952=(cj1*sj2);
IkReal x3953=((1.0)*x3948);
IkReal x3954=(gconst109*x3947);
IkReal x3955=(gconst109*x3948);
IkReal x3956=((1.0)*gconst110*x3947);
evalcond[0]=((((-1.0)*r22*x3953))+((x3947*x3949))+(((-1.0)*r20*x3956)));
evalcond[1]=(cj0+(((-1.0)*r12*x3953))+((r11*x3954))+(((-1.0)*r10*x3956)));
evalcond[2]=(((r01*x3954))+(((-1.0)*r00*x3956))+(((-1.0)*x3951))+(((-1.0)*r02*x3953)));
evalcond[3]=(((r22*x3947))+((sj1*sj2))+(((-1.0)*cj1*x3950))+(((-1.0)*gconst110*r20*x3953))+((x3948*x3949)));
evalcond[4]=((((-1.0)*cj0*sj1*x3950))+((r01*x3955))+(((-1.0)*cj0*x3952))+(((-1.0)*gconst110*r00*x3953))+((r02*x3947)));
evalcond[5]=((((-1.0)*sj0*sj1*x3950))+(((-1.0)*x3951*x3952))+((r11*x3955))+((r12*x3947))+(((-1.0)*gconst110*r10*x3953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3957=((1.0)*gconst110);
CheckValue<IkReal> x3958 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3957))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3958.valid){
continue;
}
CheckValue<IkReal> x3959=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3957))+(((-1.0)*gconst109*r10)))),-1);
if(!x3959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3958.value)+(((1.5707963267949)*(x3959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3960=IKsin(j4);
IkReal x3961=IKcos(j4);
IkReal x3962=(gconst109*r21);
IkReal x3963=((1.0)*cj2);
IkReal x3964=((1.0)*sj0);
IkReal x3965=(cj1*sj2);
IkReal x3966=((1.0)*x3961);
IkReal x3967=(gconst109*x3960);
IkReal x3968=(gconst109*x3961);
IkReal x3969=((1.0)*gconst110*x3960);
evalcond[0]=((((-1.0)*r20*x3969))+((x3960*x3962))+(((-1.0)*r22*x3966)));
evalcond[1]=(cj0+((r11*x3967))+(((-1.0)*r10*x3969))+(((-1.0)*r12*x3966)));
evalcond[2]=((((-1.0)*x3964))+(((-1.0)*r02*x3966))+((r01*x3967))+(((-1.0)*r00*x3969)));
evalcond[3]=((((-1.0)*gconst110*r20*x3966))+((r22*x3960))+((sj1*sj2))+((x3961*x3962))+(((-1.0)*cj1*x3963)));
evalcond[4]=((((-1.0)*cj0*x3965))+(((-1.0)*gconst110*r00*x3966))+((r02*x3960))+(((-1.0)*cj0*sj1*x3963))+((r01*x3968)));
evalcond[5]=((((-1.0)*gconst110*r10*x3966))+((r11*x3968))+((r12*x3960))+(((-1.0)*x3964*x3965))+(((-1.0)*sj0*sj1*x3963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3970=((-1.0)*r01);
IkReal x3972 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3972)==0){
continue;
}
IkReal x3971=pow(x3972,-0.5);
CheckValue<IkReal> x3973 = IKatan2WithCheck(IkReal(x3970),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3973.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3973.value))));
IkReal gconst112=(x3970*x3971);
IkReal gconst113=((1.0)*r00*x3971);
CheckValue<IkReal> x3974 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3974.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3974.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3975=((-1.0)*r01);
CheckValue<IkReal> x3978 = IKatan2WithCheck(IkReal(x3975),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3978.valid){
continue;
}
IkReal x3976=((1.0)*(x3978.value));
IkReal x3977=x3971;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3976)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3976)));
IkReal gconst112=(x3975*x3977);
IkReal gconst113=((1.0)*r00*x3977);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3979=((-1.0)*r01);
CheckValue<IkReal> x3982 = IKatan2WithCheck(IkReal(x3979),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3982.valid){
continue;
}
IkReal x3980=((1.0)*(x3982.value));
IkReal x3981=x3971;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3980)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3980)));
IkReal gconst112=(x3979*x3981);
IkReal gconst113=((1.0)*r00*x3981);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3983=((-1.0)*r01);
CheckValue<IkReal> x3986 = IKatan2WithCheck(IkReal(x3983),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3986.valid){
continue;
}
IkReal x3984=((1.0)*(x3986.value));
IkReal x3985=x3971;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3984)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3984)));
IkReal gconst112=(x3983*x3985);
IkReal gconst113=((1.0)*r00*x3985);
IkReal x3987=r02*r02;
IkReal x3988=(r12*sj0);
IkReal x3989=((1.0)*cj0);
IkReal x3990=x3971;
j4eval[0]=((IKabs(((((-1.0)*r02*x3989))+(((-1.0)*x3988)))))+(IKabs((((r02*x3988*x3990))+(((-1.0)*x3989*x3990))+((cj0*x3987*x3990))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3991=((1.0)*sj0);
IkReal x3992=((1.0)*gconst112);
CheckValue<IkReal> x3993=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x3992)))),-1);
if(!x3993.valid){
continue;
}
CheckValue<IkReal> x3994 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3991))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3992))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x3991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3993.value)))+(x3994.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3995=IKsin(j4);
IkReal x3996=IKcos(j4);
IkReal x3997=(gconst113*r20);
IkReal x3998=(gconst112*r21);
IkReal x3999=((1.0)*cj2);
IkReal x4000=(gconst113*r00);
IkReal x4001=(gconst113*r10);
IkReal x4002=((1.0)*sj0);
IkReal x4003=(cj1*sj2);
IkReal x4004=((1.0)*x3996);
IkReal x4005=((1.0)*x3995);
IkReal x4006=(gconst112*x3996);
IkReal x4007=(gconst112*x3995);
evalcond[0]=((((-1.0)*r22*x4004))+((x3995*x3998))+(((-1.0)*x3997*x4005)));
evalcond[1]=(cj0+(((-1.0)*x4001*x4005))+(((-1.0)*r12*x4004))+((r11*x4007)));
evalcond[2]=((((-1.0)*r02*x4004))+(((-1.0)*x4002))+((r01*x4007))+(((-1.0)*x4000*x4005)));
evalcond[3]=(((x3996*x3998))+((sj1*sj2))+((r22*x3995))+(((-1.0)*x3997*x4004))+(((-1.0)*cj1*x3999)));
evalcond[4]=((((-1.0)*cj0*x4003))+((r01*x4006))+(((-1.0)*x4000*x4004))+(((-1.0)*cj0*sj1*x3999))+((r02*x3995)));
evalcond[5]=((((-1.0)*x4002*x4003))+(((-1.0)*x4001*x4004))+((r12*x3995))+(((-1.0)*sj0*sj1*x3999))+((r11*x4006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4008=((1.0)*gconst113);
CheckValue<IkReal> x4009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4008))+(((-1.0)*gconst112*r10)))),-1);
if(!x4009.valid){
continue;
}
CheckValue<IkReal> x4010 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4008)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4009.value)))+(x4010.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4011=IKsin(j4);
IkReal x4012=IKcos(j4);
IkReal x4013=(gconst113*r20);
IkReal x4014=(gconst112*r21);
IkReal x4015=((1.0)*cj2);
IkReal x4016=(gconst113*r00);
IkReal x4017=(gconst113*r10);
IkReal x4018=((1.0)*sj0);
IkReal x4019=(cj1*sj2);
IkReal x4020=((1.0)*x4012);
IkReal x4021=((1.0)*x4011);
IkReal x4022=(gconst112*x4012);
IkReal x4023=(gconst112*x4011);
evalcond[0]=((((-1.0)*r22*x4020))+(((-1.0)*x4013*x4021))+((x4011*x4014)));
evalcond[1]=((((-1.0)*r12*x4020))+cj0+((r11*x4023))+(((-1.0)*x4017*x4021)));
evalcond[2]=((((-1.0)*r02*x4020))+((r01*x4023))+(((-1.0)*x4018))+(((-1.0)*x4016*x4021)));
evalcond[3]=((((-1.0)*x4013*x4020))+(((-1.0)*cj1*x4015))+((sj1*sj2))+((x4012*x4014))+((r22*x4011)));
evalcond[4]=(((r02*x4011))+(((-1.0)*cj0*x4019))+(((-1.0)*cj0*sj1*x4015))+((r01*x4022))+(((-1.0)*x4016*x4020)));
evalcond[5]=((((-1.0)*x4018*x4019))+(((-1.0)*sj0*sj1*x4015))+((r12*x4011))+((r11*x4022))+(((-1.0)*x4017*x4020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4024=((1.0)*gconst113);
CheckValue<IkReal> x4025=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4024))+(((-1.0)*gconst112*r00)))),-1);
if(!x4025.valid){
continue;
}
CheckValue<IkReal> x4026 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4024)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4025.value)))+(x4026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4027=IKsin(j4);
IkReal x4028=IKcos(j4);
IkReal x4029=(gconst113*r20);
IkReal x4030=(gconst112*r21);
IkReal x4031=((1.0)*cj2);
IkReal x4032=(gconst113*r00);
IkReal x4033=(gconst113*r10);
IkReal x4034=((1.0)*sj0);
IkReal x4035=(cj1*sj2);
IkReal x4036=((1.0)*x4028);
IkReal x4037=((1.0)*x4027);
IkReal x4038=(gconst112*x4028);
IkReal x4039=(gconst112*x4027);
evalcond[0]=((((-1.0)*r22*x4036))+((x4027*x4030))+(((-1.0)*x4029*x4037)));
evalcond[1]=(cj0+(((-1.0)*r12*x4036))+(((-1.0)*x4033*x4037))+((r11*x4039)));
evalcond[2]=(((r01*x4039))+(((-1.0)*x4034))+(((-1.0)*r02*x4036))+(((-1.0)*x4032*x4037)));
evalcond[3]=(((x4028*x4030))+(((-1.0)*cj1*x4031))+((sj1*sj2))+(((-1.0)*x4029*x4036))+((r22*x4027)));
evalcond[4]=((((-1.0)*cj0*x4035))+((r01*x4038))+(((-1.0)*x4032*x4036))+(((-1.0)*cj0*sj1*x4031))+((r02*x4027)));
evalcond[5]=((((-1.0)*x4034*x4035))+((r12*x4027))+(((-1.0)*x4033*x4036))+((r11*x4038))+(((-1.0)*sj0*sj1*x4031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4040=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4040;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4040);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4041=((1.0)*cj5);
IkReal x4042=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4041)));
j4eval[0]=x4042;
j4eval[1]=((IKabs(((((-1.0)*r20*x4041))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4043=cj5*cj5;
IkReal x4044=r01*r01;
IkReal x4045=(cj5*r00);
IkReal x4046=(r01*sj5);
IkReal x4047=((((-1.0)*x4043*x4044))+((x4043*(r00*r00)))+x4044+(((-2.0)*x4045*x4046))+(r02*r02));
j4eval[0]=x4047;
j4eval[1]=IKsign(x4047);
j4eval[2]=((IKabs(r02))+(IKabs((x4046+(((-1.0)*x4045))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4048=cj5*cj5;
IkReal x4049=r01*r01;
IkReal x4050=(r01*sj5);
IkReal x4051=(cj5*r00);
CheckValue<IkReal> x4052=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4050*x4051))+((x4048*(r00*r00)))+x4049+(((-1.0)*x4048*x4049))+(r02*r02))),-1);
if(!x4052.valid){
continue;
}
CheckValue<IkReal> x4053 = IKatan2WithCheck(IkReal((x4050+(((-1.0)*x4051)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4052.value)))+(x4053.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4054=IKcos(j4);
IkReal x4055=IKsin(j4);
IkReal x4056=(cj5*r00);
IkReal x4057=(cj5*r10);
IkReal x4058=(r21*sj5);
IkReal x4059=((1.0)*cj2);
IkReal x4060=(cj5*r20);
IkReal x4061=((1.0)*x4054);
IkReal x4062=((1.0)*x4055);
IkReal x4063=(sj5*x4055);
IkReal x4064=(sj5*x4054);
evalcond[0]=(((r02*x4055))+((r01*x4064))+(((-1.0)*x4056*x4061)));
evalcond[1]=((((-1.0)*x4060*x4062))+((x4055*x4058))+(((-1.0)*r22*x4061)));
evalcond[2]=((((-1.0)*r12*x4061))+((r11*x4063))+(((-1.0)*x4057*x4062)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4061))+((r01*x4063))+(((-1.0)*x4056*x4062)));
evalcond[4]=((((-1.0)*x4060*x4061))+((sj1*sj2))+((x4054*x4058))+(((-1.0)*cj1*x4059))+((r22*x4055)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4064))+((r12*x4055))+(((-1.0)*x4057*x4061))+(((-1.0)*sj1*x4059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4065=((1.0)*cj5);
CheckValue<IkReal> x4066=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4065)))),-1);
if(!x4066.valid){
continue;
}
CheckValue<IkReal> x4067 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4065))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4066.value)))+(x4067.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4068=IKcos(j4);
IkReal x4069=IKsin(j4);
IkReal x4070=(cj5*r00);
IkReal x4071=(cj5*r10);
IkReal x4072=(r21*sj5);
IkReal x4073=((1.0)*cj2);
IkReal x4074=(cj5*r20);
IkReal x4075=((1.0)*x4068);
IkReal x4076=((1.0)*x4069);
IkReal x4077=(sj5*x4069);
IkReal x4078=(sj5*x4068);
evalcond[0]=((((-1.0)*x4070*x4075))+((r02*x4069))+((r01*x4078)));
evalcond[1]=((((-1.0)*r22*x4075))+(((-1.0)*x4074*x4076))+((x4069*x4072)));
evalcond[2]=((((-1.0)*x4071*x4076))+(((-1.0)*r12*x4075))+((r11*x4077)));
evalcond[3]=((-1.0)+(((-1.0)*x4070*x4076))+(((-1.0)*r02*x4075))+((r01*x4077)));
evalcond[4]=((((-1.0)*x4074*x4075))+((sj1*sj2))+(((-1.0)*cj1*x4073))+((x4068*x4072))+((r22*x4069)));
evalcond[5]=((((-1.0)*x4071*x4075))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4073))+((r12*x4069))+((r11*x4078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4079=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4079.valid){
continue;
}
CheckValue<IkReal> x4080 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4079.value)))+(x4080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4081=IKcos(j4);
IkReal x4082=IKsin(j4);
IkReal x4083=(cj5*r00);
IkReal x4084=(cj5*r10);
IkReal x4085=(r21*sj5);
IkReal x4086=((1.0)*cj2);
IkReal x4087=(cj5*r20);
IkReal x4088=((1.0)*x4081);
IkReal x4089=((1.0)*x4082);
IkReal x4090=(sj5*x4082);
IkReal x4091=(sj5*x4081);
evalcond[0]=(((r01*x4091))+(((-1.0)*x4083*x4088))+((r02*x4082)));
evalcond[1]=(((x4082*x4085))+(((-1.0)*r22*x4088))+(((-1.0)*x4087*x4089)));
evalcond[2]=((((-1.0)*r12*x4088))+((r11*x4090))+(((-1.0)*x4084*x4089)));
evalcond[3]=((-1.0)+((r01*x4090))+(((-1.0)*r02*x4088))+(((-1.0)*x4083*x4089)));
evalcond[4]=(((sj1*sj2))+((x4081*x4085))+(((-1.0)*cj1*x4086))+(((-1.0)*x4087*x4088))+((r22*x4082)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4091))+(((-1.0)*sj1*x4086))+((r12*x4082))+(((-1.0)*x4084*x4088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4092=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4092;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4092);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4093=((1.0)*cj5);
IkReal x4094=((((-1.0)*r21*x4093))+(((-1.0)*r20*sj5)));
j4eval[0]=x4094;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4093))+((r11*sj5))))));
j4eval[2]=IKsign(x4094);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4095=cj5*cj5;
IkReal x4096=r01*r01;
IkReal x4097=(r01*sj5);
IkReal x4098=(cj5*r00);
IkReal x4099=((((-1.0)*(r02*r02)))+(((-1.0)*x4095*(r00*r00)))+((x4095*x4096))+(((-1.0)*x4096))+(((2.0)*x4097*x4098)));
j4eval[0]=x4099;
j4eval[1]=IKsign(x4099);
j4eval[2]=((IKabs(r02))+(IKabs((x4097+(((-1.0)*x4098))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4100=cj5*cj5;
IkReal x4101=r01*r01;
IkReal x4102=(r01*sj5);
IkReal x4103=(cj5*r00);
CheckValue<IkReal> x4104=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4101))+(((-1.0)*(r02*r02)))+((x4100*x4101))+(((2.0)*x4102*x4103))+(((-1.0)*x4100*(r00*r00))))),-1);
if(!x4104.valid){
continue;
}
CheckValue<IkReal> x4105 = IKatan2WithCheck(IkReal(((((-1.0)*x4103))+x4102)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4104.value)))+(x4105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4106=IKcos(j4);
IkReal x4107=IKsin(j4);
IkReal x4108=(cj5*r00);
IkReal x4109=(cj5*r10);
IkReal x4110=(r21*sj5);
IkReal x4111=(cj5*r20);
IkReal x4112=((1.0)*x4106);
IkReal x4113=((1.0)*x4107);
IkReal x4114=(sj5*x4107);
IkReal x4115=(sj5*x4106);
evalcond[0]=((((-1.0)*x4108*x4112))+((r02*x4107))+((r01*x4115)));
evalcond[1]=((((-1.0)*r22*x4112))+(((-1.0)*x4111*x4113))+((x4107*x4110)));
evalcond[2]=((((-1.0)*x4109*x4113))+(((-1.0)*r12*x4112))+((r11*x4114)));
evalcond[3]=((1.0)+(((-1.0)*x4108*x4113))+(((-1.0)*r02*x4112))+((r01*x4114)));
evalcond[4]=((((-1.0)*x4109*x4112))+((cj2*sj1))+((cj1*sj2))+((r12*x4107))+((r11*x4115)));
evalcond[5]=(((r22*x4107))+(((-1.0)*x4111*x4112))+((x4106*x4110))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4116=((1.0)*cj5);
CheckValue<IkReal> x4117=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4116))+(((-1.0)*r20*sj5)))),-1);
if(!x4117.valid){
continue;
}
CheckValue<IkReal> x4118 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4116)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4117.value)))+(x4118.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4119=IKcos(j4);
IkReal x4120=IKsin(j4);
IkReal x4121=(cj5*r00);
IkReal x4122=(cj5*r10);
IkReal x4123=(r21*sj5);
IkReal x4124=(cj5*r20);
IkReal x4125=((1.0)*x4119);
IkReal x4126=((1.0)*x4120);
IkReal x4127=(sj5*x4120);
IkReal x4128=(sj5*x4119);
evalcond[0]=(((r02*x4120))+(((-1.0)*x4121*x4125))+((r01*x4128)));
evalcond[1]=((((-1.0)*r22*x4125))+((x4120*x4123))+(((-1.0)*x4124*x4126)));
evalcond[2]=((((-1.0)*r12*x4125))+(((-1.0)*x4122*x4126))+((r11*x4127)));
evalcond[3]=((1.0)+(((-1.0)*x4121*x4126))+(((-1.0)*r02*x4125))+((r01*x4127)));
evalcond[4]=(((r12*x4120))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4122*x4125))+((r11*x4128)));
evalcond[5]=((((-1.0)*x4124*x4125))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4120))+((x4119*x4123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4129 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4129.valid){
continue;
}
CheckValue<IkReal> x4130=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4129.value)+(((1.5707963267949)*(x4130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4131=IKcos(j4);
IkReal x4132=IKsin(j4);
IkReal x4133=(cj5*r00);
IkReal x4134=(cj5*r10);
IkReal x4135=(r21*sj5);
IkReal x4136=(cj5*r20);
IkReal x4137=((1.0)*x4131);
IkReal x4138=((1.0)*x4132);
IkReal x4139=(sj5*x4132);
IkReal x4140=(sj5*x4131);
evalcond[0]=(((r01*x4140))+(((-1.0)*x4133*x4137))+((r02*x4132)));
evalcond[1]=(((x4132*x4135))+(((-1.0)*r22*x4137))+(((-1.0)*x4136*x4138)));
evalcond[2]=(((r11*x4139))+(((-1.0)*x4134*x4138))+(((-1.0)*r12*x4137)));
evalcond[3]=((1.0)+((r01*x4139))+(((-1.0)*r02*x4137))+(((-1.0)*x4133*x4138)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4134*x4137))+((r11*x4140))+((r12*x4132)));
evalcond[5]=(((r22*x4132))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4131*x4135))+(((-1.0)*x4136*x4137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4141=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4141);
rxp1_1=(px*r21);
rxp1_2=(r11*x4141);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4142=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4142);
rxp1_1=(px*r21);
rxp1_2=(r11*x4142);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4143=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4143);
rxp1_1=(px*r21);
rxp1_2=(r11*x4143);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4146=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4146.valid){
continue;
}
IkReal x4144=x4146.value;
IkReal x4145=(sj0*x4144);
cj4array[0]=(((cj1*sj2*x4145))+((cj2*sj1*x4145)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4147=IKsin(j4);
IkReal x4148=IKcos(j4);
IkReal x4149=(r21*sj5);
IkReal x4150=((1.0)*cj5*r20);
evalcond[0]=(r02*x4147);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4148)));
evalcond[2]=((((-1.0)*x4147*x4150))+((x4147*x4149)));
evalcond[3]=((((-1.0)*cj5*r10*x4147))+((r11*sj5*x4147)));
evalcond[4]=((((-1.0)*x4148*x4150))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4148*x4149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4152=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4152.valid){
continue;
}
IkReal x4151=x4152.value;
cj4array[0]=(((cj1*cj2*x4151))+(((-1.0)*sj1*sj2*x4151)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4153=IKsin(j4);
IkReal x4154=IKcos(j4);
IkReal x4155=((1.0)*sj0);
IkReal x4156=((1.0)*cj5);
IkReal x4157=(sj5*x4153);
evalcond[0]=(r02*x4153);
evalcond[1]=((((-1.0)*x4155))+(((-1.0)*r02*x4154)));
evalcond[2]=(((r21*x4157))+(((-1.0)*r20*x4153*x4156)));
evalcond[3]=(((r11*x4157))+(((-1.0)*r10*x4153*x4156)));
evalcond[4]=(((r11*sj5*x4154))+(((-1.0)*cj1*sj2*x4155))+(((-1.0)*r10*x4154*x4156))+(((-1.0)*cj2*sj1*x4155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4158=IKPowWithIntegerCheck(r02,-1);
if(!x4158.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4158.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4159=IKsin(j4);
IkReal x4160=IKcos(j4);
IkReal x4161=((1.0)*cj1);
IkReal x4162=(r21*sj5);
IkReal x4163=((1.0)*cj5);
IkReal x4164=(r11*sj5);
evalcond[0]=(r02*x4159);
evalcond[1]=(((x4159*x4162))+(((-1.0)*r20*x4159*x4163)));
evalcond[2]=((((-1.0)*r10*x4159*x4163))+((x4159*x4164)));
evalcond[3]=((((-1.0)*cj2*x4161))+((sj1*sj2))+(((-1.0)*r20*x4160*x4163))+((x4160*x4162)));
evalcond[4]=((((-1.0)*sj0*sj2*x4161))+(((-1.0)*cj2*sj0*sj1))+((x4160*x4164))+(((-1.0)*r10*x4160*x4163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4165=((1.0)*sj0);
IkReal x4166=((1.0)*cj0);
CheckValue<IkReal> x4167 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4166))+(((-1.0)*r12*x4165)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4166))+(((-1.0)*r11*sj5*x4165)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4167.valid){
continue;
}
CheckValue<IkReal> x4168=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4167.value)+(((1.5707963267949)*(x4168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4169=IKsin(j4);
IkReal x4170=IKcos(j4);
IkReal x4171=(cj5*r00);
IkReal x4172=(cj5*r10);
IkReal x4173=(r21*sj5);
IkReal x4174=((1.0)*cj2);
IkReal x4175=((1.0)*sj0);
IkReal x4176=(cj1*sj2);
IkReal x4177=(cj5*r20);
IkReal x4178=((1.0)*x4170);
IkReal x4179=((1.0)*x4169);
IkReal x4180=(sj5*x4169);
IkReal x4181=(sj5*x4170);
evalcond[0]=((((-1.0)*x4177*x4179))+((x4169*x4173))+(((-1.0)*r22*x4178)));
evalcond[1]=(cj0+(((-1.0)*x4172*x4179))+((r11*x4180))+(((-1.0)*r12*x4178)));
evalcond[2]=((((-1.0)*x4175))+(((-1.0)*x4171*x4179))+((r01*x4180))+(((-1.0)*r02*x4178)));
evalcond[3]=(((r22*x4169))+(((-1.0)*x4177*x4178))+(((-1.0)*cj1*x4174))+((x4170*x4173))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x4171*x4178))+(((-1.0)*cj0*x4176))+((r01*x4181))+((r02*x4169))+(((-1.0)*cj0*sj1*x4174)));
evalcond[5]=((((-1.0)*x4172*x4178))+((r11*x4181))+(((-1.0)*x4175*x4176))+(((-1.0)*sj0*sj1*x4174))+((r12*x4169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4182=((1.0)*cj5);
CheckValue<IkReal> x4183 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4182))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4183.valid){
continue;
}
CheckValue<IkReal> x4184=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4182))+(((-1.0)*r10*sj5)))),-1);
if(!x4184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4183.value)+(((1.5707963267949)*(x4184.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4185=IKsin(j4);
IkReal x4186=IKcos(j4);
IkReal x4187=(cj5*r00);
IkReal x4188=(cj5*r10);
IkReal x4189=(r21*sj5);
IkReal x4190=((1.0)*cj2);
IkReal x4191=((1.0)*sj0);
IkReal x4192=(cj1*sj2);
IkReal x4193=(cj5*r20);
IkReal x4194=((1.0)*x4186);
IkReal x4195=((1.0)*x4185);
IkReal x4196=(sj5*x4185);
IkReal x4197=(sj5*x4186);
evalcond[0]=((((-1.0)*x4193*x4195))+((x4185*x4189))+(((-1.0)*r22*x4194)));
evalcond[1]=((((-1.0)*r12*x4194))+((r11*x4196))+cj0+(((-1.0)*x4188*x4195)));
evalcond[2]=((((-1.0)*x4191))+(((-1.0)*x4187*x4195))+(((-1.0)*r02*x4194))+((r01*x4196)));
evalcond[3]=(((x4186*x4189))+((sj1*sj2))+((r22*x4185))+(((-1.0)*x4193*x4194))+(((-1.0)*cj1*x4190)));
evalcond[4]=(((r02*x4185))+(((-1.0)*cj0*sj1*x4190))+(((-1.0)*cj0*x4192))+(((-1.0)*x4187*x4194))+((r01*x4197)));
evalcond[5]=(((r12*x4185))+((r11*x4197))+(((-1.0)*x4191*x4192))+(((-1.0)*x4188*x4194))+(((-1.0)*sj0*sj1*x4190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4198=((1.0)*cj5);
CheckValue<IkReal> x4199=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4198))+(((-1.0)*r00*sj5)))),-1);
if(!x4199.valid){
continue;
}
CheckValue<IkReal> x4200 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4198))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4199.value)))+(x4200.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4201=IKsin(j4);
IkReal x4202=IKcos(j4);
IkReal x4203=(cj5*r00);
IkReal x4204=(cj5*r10);
IkReal x4205=(r21*sj5);
IkReal x4206=((1.0)*cj2);
IkReal x4207=((1.0)*sj0);
IkReal x4208=(cj1*sj2);
IkReal x4209=(cj5*r20);
IkReal x4210=((1.0)*x4202);
IkReal x4211=((1.0)*x4201);
IkReal x4212=(sj5*x4201);
IkReal x4213=(sj5*x4202);
evalcond[0]=(((x4201*x4205))+(((-1.0)*r22*x4210))+(((-1.0)*x4209*x4211)));
evalcond[1]=((((-1.0)*x4204*x4211))+cj0+((r11*x4212))+(((-1.0)*r12*x4210)));
evalcond[2]=((((-1.0)*r02*x4210))+(((-1.0)*x4207))+((r01*x4212))+(((-1.0)*x4203*x4211)));
evalcond[3]=(((r22*x4201))+((sj1*sj2))+(((-1.0)*cj1*x4206))+((x4202*x4205))+(((-1.0)*x4209*x4210)));
evalcond[4]=(((r02*x4201))+(((-1.0)*cj0*x4208))+(((-1.0)*cj0*sj1*x4206))+((r01*x4213))+(((-1.0)*x4203*x4210)));
evalcond[5]=((((-1.0)*x4204*x4210))+((r11*x4213))+(((-1.0)*x4207*x4208))+(((-1.0)*sj0*sj1*x4206))+((r12*x4201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4214=r21*r21;
IkReal x4215=cj5*cj5;
IkReal x4216=(sj1*sj2);
IkReal x4217=(r21*sj5);
IkReal x4218=(cj1*cj2);
IkReal x4219=(cj5*r20);
CheckValue<IkReal> x4220 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4218))+((r22*x4216)))),IkReal((((x4218*x4219))+(((-1.0)*x4217*x4218))+(((-1.0)*x4216*x4219))+((x4216*x4217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4220.valid){
continue;
}
CheckValue<IkReal> x4221=IKPowWithIntegerCheck(IKsign((((x4214*x4215))+(((-1.0)*x4215*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x4214))+(((2.0)*x4217*x4219)))),-1);
if(!x4221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4220.value)+(((1.5707963267949)*(x4221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4222=IKsin(j4);
IkReal x4223=IKcos(j4);
IkReal x4224=(r21*sj5);
IkReal x4225=(cj5*r20);
IkReal x4226=((1.0)*x4223);
evalcond[0]=((((-1.0)*r22*x4226))+((x4222*x4224))+(((-1.0)*x4222*x4225)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4222))+((x4223*x4224))+(((-1.0)*x4225*x4226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4227=(cj5*sj4);
IkReal x4228=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x4228))+(((-1.0)*r00*x4227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4227))+(((-1.0)*r11*x4228))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x4228))+(((-1.0)*r00*x4227))))+IKsqr((((r10*x4227))+(((-1.0)*r11*x4228))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x4228))+(((-1.0)*r00*x4227))), (((r10*x4227))+(((-1.0)*r11*x4228))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4229=IKcos(j0);
IkReal x4230=IKsin(j0);
IkReal x4231=((1.0)*cj1);
IkReal x4232=((0.39225)*sj1);
IkReal x4233=(r11*sj5);
IkReal x4234=(cj5*r11);
IkReal x4235=((1.0)*sj5);
IkReal x4236=((1.0)*sj1);
IkReal x4237=((0.09465)*sj5);
IkReal x4238=((1.0)*cj5);
IkReal x4239=((0.425)*cj1);
IkReal x4240=((1.0)*cj4);
IkReal x4241=(r01*sj5);
IkReal x4242=(sj2*x4229);
IkReal x4243=(sj2*x4230);
IkReal x4244=(cj4*x4238);
IkReal x4245=((0.39225)*cj1*cj2);
IkReal x4246=(cj2*x4229);
IkReal x4247=(cj2*x4230);
evalcond[0]=(((sj4*x4233))+(((-1.0)*r10*sj4*x4238))+(((-1.0)*r12*x4240))+x4229);
evalcond[1]=(((sj4*x4241))+(((-1.0)*x4230))+(((-1.0)*r00*sj4*x4238))+(((-1.0)*r02*x4240)));
evalcond[2]=((((-1.0)*x4231*x4246))+((sj1*x4242))+(((-1.0)*r01*x4238))+(((-1.0)*r00*x4235)));
evalcond[3]=((((-1.0)*x4231*x4247))+((sj1*x4243))+(((-1.0)*x4234))+(((-1.0)*r10*x4235)));
evalcond[4]=(((cj4*x4241))+(((-1.0)*x4231*x4242))+((r02*sj4))+(((-1.0)*x4236*x4246))+(((-1.0)*r00*x4244)));
evalcond[5]=(((cj4*x4233))+(((-1.0)*x4231*x4243))+((r12*sj4))+(((-1.0)*x4236*x4247))+(((-1.0)*r10*x4244)));
evalcond[6]=(((x4229*x4245))+(((-0.09465)*cj5*r01))+(((-0.10915)*x4230))+(((-1.0)*px))+(((-1.0)*x4232*x4242))+(((-1.0)*r00*x4237))+((x4229*x4239)));
evalcond[7]=(((x4230*x4239))+((x4230*x4245))+(((-0.09465)*x4234))+(((0.10915)*x4229))+(((-1.0)*r10*x4237))+(((-1.0)*py))+(((-1.0)*x4232*x4243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4248 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4248.valid){
continue;
}
CheckValue<IkReal> x4249=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4249.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4248.value)+(((1.5707963267949)*(x4249.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4250=IKcos(j0);
IkReal x4251=IKsin(j0);
IkReal x4252=(cj5*r11);
IkReal x4253=(cj5*r01);
IkReal x4254=((1.0)*sj5);
IkReal x4255=((0.09465)*sj5);
IkReal x4256=(sj1*sj2);
IkReal x4257=((0.39225)*cj2);
IkReal x4258=((1.0)*cj2);
IkReal x4259=((0.39225)*x4256);
IkReal x4260=(cj1*x4250);
IkReal x4261=(cj1*x4251);
evalcond[0]=((((-1.0)*x4258*x4260))+((x4250*x4256))+(((-1.0)*x4253))+(((-1.0)*r00*x4254)));
evalcond[1]=((((-1.0)*x4258*x4261))+((x4251*x4256))+(((-1.0)*x4252))+(((-1.0)*r10*x4254)));
evalcond[2]=((((-0.10915)*x4251))+((x4257*x4260))+(((-1.0)*px))+(((-0.09465)*x4253))+(((0.425)*x4260))+(((-1.0)*r00*x4255))+(((-1.0)*x4250*x4259)));
evalcond[3]=((((-1.0)*x4251*x4259))+((x4257*x4261))+(((-1.0)*py))+(((-0.09465)*x4252))+(((0.425)*x4261))+(((0.10915)*x4250))+(((-1.0)*r10*x4255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4262=((1.0)*cj5);
IkReal x4263=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4262)));
j4eval[0]=x4263;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4262)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4264=((1.0)*cj5);
IkReal x4265=((((-1.0)*r11*x4264))+(((-1.0)*r10*sj5)));
j4eval[0]=x4265;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x4264))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4265);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4266=((1.0)*sj0);
IkReal x4267=((1.0)*cj0);
IkReal x4268=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4268;
j4eval[1]=((IKabs(((((-1.0)*r12*x4266))+(((-1.0)*r02*x4267)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4267))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4266))))));
j4eval[2]=IKsign(x4268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4269=((-1.0)*r20);
IkReal x4271 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4271)==0){
continue;
}
IkReal x4270=pow(x4271,-0.5);
CheckValue<IkReal> x4272 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4269),IKFAST_ATAN2_MAGTHRESH);
if(!x4272.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4272.value));
IkReal gconst97=(r21*x4270);
IkReal gconst98=(x4269*x4270);
CheckValue<IkReal> x4273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4273.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4273.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4274=((-1.0)*r20);
IkReal x4275=x4270;
CheckValue<IkReal> x4277 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4274),IKFAST_ATAN2_MAGTHRESH);
if(!x4277.valid){
continue;
}
IkReal x4276=((-1.0)*(x4277.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4276;
IkReal gconst96=x4276;
IkReal gconst97=(r21*x4275);
IkReal gconst98=(x4274*x4275);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4278=((-1.0)*r20);
IkReal x4279=x4270;
CheckValue<IkReal> x4281 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4278),IKFAST_ATAN2_MAGTHRESH);
if(!x4281.valid){
continue;
}
IkReal x4280=((-1.0)*(x4281.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4280;
IkReal gconst96=x4280;
IkReal gconst97=(r21*x4279);
IkReal gconst98=(x4278*x4279);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4282=((-1.0)*r20);
IkReal x4283=x4270;
CheckValue<IkReal> x4285 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4282),IKFAST_ATAN2_MAGTHRESH);
if(!x4285.valid){
continue;
}
IkReal x4284=((-1.0)*(x4285.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4284;
IkReal gconst96=x4284;
IkReal gconst97=(r21*x4283);
IkReal gconst98=(x4282*x4283);
IkReal x4286=((1.0)*(r22*r22));
CheckValue<IkReal> x4290=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4286))),-1);
if(!x4290.valid){
continue;
}
IkReal x4287=x4290.value;
IkReal x4288=((1.0)*x4287);
IkReal x4289=((((-1.0)*x4286))+(((-1.0)*x4288*(r20*r20*r20*r20)))+(((-2.0)*x4287*(r20*r20)*(r21*r21)))+(((-1.0)*x4288*(r21*r21*r21*r21))));
j4eval[0]=x4289;
j4eval[1]=IKsign(x4289);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4291=(cj1*cj2);
IkReal x4292=(gconst98*r20);
IkReal x4293=(sj1*sj2);
IkReal x4294=(gconst97*r21);
CheckValue<IkReal> x4295=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4294*x4294)))+(((-1.0)*(r22*r22)))+(((2.0)*x4292*x4294))+(((-1.0)*(x4292*x4292))))),-1);
if(!x4295.valid){
continue;
}
CheckValue<IkReal> x4296 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4291))+((r22*x4293)))),IkReal((((x4293*x4294))+(((-1.0)*x4291*x4294))+((x4291*x4292))+(((-1.0)*x4292*x4293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4295.value)))+(x4296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4297=IKsin(j4);
IkReal x4298=IKcos(j4);
IkReal x4299=(gconst98*r10);
IkReal x4300=(gconst97*r21);
IkReal x4301=(gconst98*r20);
IkReal x4302=((1.0)*cj2);
IkReal x4303=((1.0)*sj0);
IkReal x4304=(gconst98*r00);
IkReal x4305=(cj1*sj2);
IkReal x4306=((1.0)*x4298);
IkReal x4307=((1.0)*x4297);
IkReal x4308=(gconst97*x4297);
IkReal x4309=(gconst97*x4298);
evalcond[0]=((((-1.0)*r22*x4306))+(((-1.0)*x4301*x4307))+((x4297*x4300)));
evalcond[1]=((((-1.0)*r12*x4306))+((r11*x4308))+cj0+(((-1.0)*x4299*x4307)));
evalcond[2]=(((r01*x4308))+(((-1.0)*r02*x4306))+(((-1.0)*x4304*x4307))+(((-1.0)*x4303)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4302))+((x4298*x4300))+((r22*x4297))+(((-1.0)*x4301*x4306)));
evalcond[4]=((((-1.0)*cj0*sj1*x4302))+(((-1.0)*cj0*x4305))+((r01*x4309))+(((-1.0)*x4304*x4306))+((r02*x4297)));
evalcond[5]=(((r11*x4309))+(((-1.0)*sj0*sj1*x4302))+(((-1.0)*x4303*x4305))+((r12*x4297))+(((-1.0)*x4299*x4306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4310=((1.0)*gconst98);
CheckValue<IkReal> x4311 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4311.valid){
continue;
}
CheckValue<IkReal> x4312=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4310))+(((-1.0)*gconst97*r10)))),-1);
if(!x4312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4311.value)+(((1.5707963267949)*(x4312.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4313=IKsin(j4);
IkReal x4314=IKcos(j4);
IkReal x4315=(gconst98*r10);
IkReal x4316=(gconst97*r21);
IkReal x4317=(gconst98*r20);
IkReal x4318=((1.0)*cj2);
IkReal x4319=((1.0)*sj0);
IkReal x4320=(gconst98*r00);
IkReal x4321=(cj1*sj2);
IkReal x4322=((1.0)*x4314);
IkReal x4323=((1.0)*x4313);
IkReal x4324=(gconst97*x4313);
IkReal x4325=(gconst97*x4314);
evalcond[0]=((((-1.0)*x4317*x4323))+(((-1.0)*r22*x4322))+((x4313*x4316)));
evalcond[1]=(cj0+(((-1.0)*x4315*x4323))+(((-1.0)*r12*x4322))+((r11*x4324)));
evalcond[2]=((((-1.0)*r02*x4322))+(((-1.0)*x4319))+(((-1.0)*x4320*x4323))+((r01*x4324)));
evalcond[3]=((((-1.0)*cj1*x4318))+(((-1.0)*x4317*x4322))+((sj1*sj2))+((x4314*x4316))+((r22*x4313)));
evalcond[4]=((((-1.0)*x4320*x4322))+(((-1.0)*cj0*x4321))+(((-1.0)*cj0*sj1*x4318))+((r02*x4313))+((r01*x4325)));
evalcond[5]=((((-1.0)*x4315*x4322))+((r12*x4313))+(((-1.0)*sj0*sj1*x4318))+((r11*x4325))+(((-1.0)*x4319*x4321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4326=((1.0)*gconst98);
CheckValue<IkReal> x4327 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4326))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4327.valid){
continue;
}
CheckValue<IkReal> x4328=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4326))+(((-1.0)*gconst97*r00)))),-1);
if(!x4328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4327.value)+(((1.5707963267949)*(x4328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4329=IKsin(j4);
IkReal x4330=IKcos(j4);
IkReal x4331=(gconst98*r10);
IkReal x4332=(gconst97*r21);
IkReal x4333=(gconst98*r20);
IkReal x4334=((1.0)*cj2);
IkReal x4335=((1.0)*sj0);
IkReal x4336=(gconst98*r00);
IkReal x4337=(cj1*sj2);
IkReal x4338=((1.0)*x4330);
IkReal x4339=((1.0)*x4329);
IkReal x4340=(gconst97*x4329);
IkReal x4341=(gconst97*x4330);
evalcond[0]=((((-1.0)*x4333*x4339))+(((-1.0)*r22*x4338))+((x4329*x4332)));
evalcond[1]=(cj0+(((-1.0)*x4331*x4339))+(((-1.0)*r12*x4338))+((r11*x4340)));
evalcond[2]=((((-1.0)*r02*x4338))+(((-1.0)*x4335))+(((-1.0)*x4336*x4339))+((r01*x4340)));
evalcond[3]=((((-1.0)*x4333*x4338))+((sj1*sj2))+(((-1.0)*cj1*x4334))+((r22*x4329))+((x4330*x4332)));
evalcond[4]=((((-1.0)*cj0*sj1*x4334))+((r02*x4329))+(((-1.0)*cj0*x4337))+(((-1.0)*x4336*x4338))+((r01*x4341)));
evalcond[5]=((((-1.0)*x4331*x4338))+(((-1.0)*sj0*sj1*x4334))+((r12*x4329))+((r11*x4341))+(((-1.0)*x4335*x4337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4342=((-1.0)*r21);
IkReal x4344 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4344)==0){
continue;
}
IkReal x4343=pow(x4344,-0.5);
CheckValue<IkReal> x4345 = IKatan2WithCheck(IkReal(x4342),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4345.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4345.value))));
IkReal gconst100=(x4342*x4343);
IkReal gconst101=((1.0)*r20*x4343);
CheckValue<IkReal> x4346 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4346.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4346.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4347=((-1.0)*r21);
CheckValue<IkReal> x4350 = IKatan2WithCheck(IkReal(x4347),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4350.valid){
continue;
}
IkReal x4348=((1.0)*(x4350.value));
IkReal x4349=x4343;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4348)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4348)));
IkReal gconst100=(x4347*x4349);
IkReal gconst101=((1.0)*r20*x4349);
IkReal x4351=r22*r22;
IkReal x4352=((1.0)*x4351);
CheckValue<IkReal> x4356=IKPowWithIntegerCheck(((-1.0)+x4351),-1);
if(!x4356.valid){
continue;
}
IkReal x4353=x4356.value;
if((((1.0)+(((-1.0)*x4352)))) < -0.00001)
continue;
IkReal x4354=IKsqrt(((1.0)+(((-1.0)*x4352))));
IkReal x4355=(cj0*x4353*x4354);
j4eval[0]=((IKabs(((((-1.0)*x4352*x4355))+x4355)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4357=((-1.0)*r21);
CheckValue<IkReal> x4360 = IKatan2WithCheck(IkReal(x4357),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4360.valid){
continue;
}
IkReal x4358=((1.0)*(x4360.value));
IkReal x4359=x4343;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4358)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4358)));
IkReal gconst100=(x4357*x4359);
IkReal gconst101=((1.0)*r20*x4359);
IkReal x4361=r22*r22;
IkReal x4362=((1.0)*x4361);
CheckValue<IkReal> x4366=IKPowWithIntegerCheck(((-1.0)+x4361),-1);
if(!x4366.valid){
continue;
}
IkReal x4363=x4366.value;
if((((1.0)+(((-1.0)*x4362)))) < -0.00001)
continue;
IkReal x4364=IKsqrt(((1.0)+(((-1.0)*x4362))));
IkReal x4365=(sj0*x4363*x4364);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4362*x4365))+x4365))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4367=((-1.0)*r21);
CheckValue<IkReal> x4370 = IKatan2WithCheck(IkReal(x4367),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4370.valid){
continue;
}
IkReal x4368=((1.0)*(x4370.value));
IkReal x4369=x4343;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4368)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4368)));
IkReal gconst100=(x4367*x4369);
IkReal gconst101=((1.0)*r20*x4369);
IkReal x4371=r22*r22;
IkReal x4372=(r12*sj0);
IkReal x4373=(cj0*r02);
CheckValue<IkReal> x4377=IKPowWithIntegerCheck(((-1.0)+x4371),-1);
if(!x4377.valid){
continue;
}
IkReal x4374=x4377.value;
if((((1.0)+(((-1.0)*x4371)))) < -0.00001)
continue;
IkReal x4375=IKsqrt(((1.0)+(((-1.0)*x4371))));
IkReal x4376=(r22*x4374*x4375);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4372))+(((-1.0)*x4373)))))+(IKabs((((x4372*x4376))+((x4373*x4376))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4378=((1.0)*sj0);
IkReal x4379=((1.0)*gconst100);
CheckValue<IkReal> x4380=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4379))+(((-1.0)*gconst101*r21)))),-1);
if(!x4380.valid){
continue;
}
CheckValue<IkReal> x4381 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4378)))),IkReal((((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x4379))+(((-1.0)*gconst100*r11*x4378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4380.value)))+(x4381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4382=IKsin(j4);
IkReal x4383=IKcos(j4);
IkReal x4384=(gconst101*r20);
IkReal x4385=(gconst101*r10);
IkReal x4386=((1.0)*cj2);
IkReal x4387=(gconst101*r00);
IkReal x4388=((1.0)*sj0);
IkReal x4389=(cj1*sj2);
IkReal x4390=((1.0)*x4383);
IkReal x4391=((1.0)*x4382);
IkReal x4392=(gconst100*x4382);
IkReal x4393=(gconst100*x4383);
evalcond[0]=((((-1.0)*r22*x4390))+((r21*x4392))+(((-1.0)*x4384*x4391)));
evalcond[1]=((((-1.0)*r12*x4390))+cj0+((r11*x4392))+(((-1.0)*x4385*x4391)));
evalcond[2]=(((r01*x4392))+(((-1.0)*r02*x4390))+(((-1.0)*x4387*x4391))+(((-1.0)*x4388)));
evalcond[3]=(((r22*x4382))+((sj1*sj2))+((r21*x4393))+(((-1.0)*cj1*x4386))+(((-1.0)*x4384*x4390)));
evalcond[4]=(((r01*x4393))+(((-1.0)*x4387*x4390))+(((-1.0)*cj0*sj1*x4386))+((r02*x4382))+(((-1.0)*cj0*x4389)));
evalcond[5]=((((-1.0)*x4388*x4389))+((r11*x4393))+((r12*x4382))+(((-1.0)*x4385*x4390))+(((-1.0)*sj0*sj1*x4386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4394=((1.0)*gconst101);
CheckValue<IkReal> x4395=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4394))+(((-1.0)*gconst100*r10)))),-1);
if(!x4395.valid){
continue;
}
CheckValue<IkReal> x4396 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4394))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4395.value)))+(x4396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4397=IKsin(j4);
IkReal x4398=IKcos(j4);
IkReal x4399=(gconst101*r20);
IkReal x4400=(gconst101*r10);
IkReal x4401=((1.0)*cj2);
IkReal x4402=(gconst101*r00);
IkReal x4403=((1.0)*sj0);
IkReal x4404=(cj1*sj2);
IkReal x4405=((1.0)*x4398);
IkReal x4406=((1.0)*x4397);
IkReal x4407=(gconst100*x4397);
IkReal x4408=(gconst100*x4398);
evalcond[0]=(((r21*x4407))+(((-1.0)*x4399*x4406))+(((-1.0)*r22*x4405)));
evalcond[1]=(((r11*x4407))+cj0+(((-1.0)*x4400*x4406))+(((-1.0)*r12*x4405)));
evalcond[2]=(((r01*x4407))+(((-1.0)*r02*x4405))+(((-1.0)*x4403))+(((-1.0)*x4402*x4406)));
evalcond[3]=(((r21*x4408))+((r22*x4397))+((sj1*sj2))+(((-1.0)*x4399*x4405))+(((-1.0)*cj1*x4401)));
evalcond[4]=((((-1.0)*cj0*x4404))+((r02*x4397))+((r01*x4408))+(((-1.0)*x4402*x4405))+(((-1.0)*cj0*sj1*x4401)));
evalcond[5]=(((r11*x4408))+(((-1.0)*x4403*x4404))+(((-1.0)*x4400*x4405))+(((-1.0)*sj0*sj1*x4401))+((r12*x4397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4409=((1.0)*gconst101);
CheckValue<IkReal> x4410 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4409))+((cj0*gconst100*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4410.valid){
continue;
}
CheckValue<IkReal> x4411=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4409)))),-1);
if(!x4411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4410.value)+(((1.5707963267949)*(x4411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4412=IKsin(j4);
IkReal x4413=IKcos(j4);
IkReal x4414=(gconst101*r20);
IkReal x4415=(gconst101*r10);
IkReal x4416=((1.0)*cj2);
IkReal x4417=(gconst101*r00);
IkReal x4418=((1.0)*sj0);
IkReal x4419=(cj1*sj2);
IkReal x4420=((1.0)*x4413);
IkReal x4421=((1.0)*x4412);
IkReal x4422=(gconst100*x4412);
IkReal x4423=(gconst100*x4413);
evalcond[0]=((((-1.0)*x4414*x4421))+(((-1.0)*r22*x4420))+((r21*x4422)));
evalcond[1]=((((-1.0)*x4415*x4421))+cj0+(((-1.0)*r12*x4420))+((r11*x4422)));
evalcond[2]=((((-1.0)*x4417*x4421))+(((-1.0)*x4418))+((r01*x4422))+(((-1.0)*r02*x4420)));
evalcond[3]=((((-1.0)*x4414*x4420))+((r22*x4412))+((sj1*sj2))+((r21*x4423))+(((-1.0)*cj1*x4416)));
evalcond[4]=((((-1.0)*cj0*sj1*x4416))+(((-1.0)*cj0*x4419))+(((-1.0)*x4417*x4420))+((r01*x4423))+((r02*x4412)));
evalcond[5]=((((-1.0)*x4415*x4420))+(((-1.0)*x4418*x4419))+((r12*x4412))+(((-1.0)*sj0*sj1*x4416))+((r11*x4423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4424=((-1.0)*r10);
IkReal x4426 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4426)==0){
continue;
}
IkReal x4425=pow(x4426,-0.5);
CheckValue<IkReal> x4427 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4424),IKFAST_ATAN2_MAGTHRESH);
if(!x4427.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4427.value));
IkReal gconst103=(r11*x4425);
IkReal gconst104=(x4424*x4425);
CheckValue<IkReal> x4428 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4428.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4428.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4429=((-1.0)*r10);
IkReal x4430=x4425;
CheckValue<IkReal> x4432 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4429),IKFAST_ATAN2_MAGTHRESH);
if(!x4432.valid){
continue;
}
IkReal x4431=((-1.0)*(x4432.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4431;
IkReal gconst102=x4431;
IkReal gconst103=(r11*x4430);
IkReal gconst104=(x4429*x4430);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4433=((1.0)*sj0);
IkReal x4434=((1.0)*gconst103);
CheckValue<IkReal> x4435 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4433)))),IkReal(((((-1.0)*gconst103*r11*x4433))+(((-1.0)*cj0*r01*x4434))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4435.valid){
continue;
}
CheckValue<IkReal> x4436=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4434)))),-1);
if(!x4436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4435.value)+(((1.5707963267949)*(x4436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4437=IKsin(j4);
IkReal x4438=IKcos(j4);
IkReal x4439=(gconst103*r11);
IkReal x4440=((1.0)*cj2);
IkReal x4441=((1.0)*sj0);
IkReal x4442=(cj1*sj2);
IkReal x4443=((1.0)*x4438);
IkReal x4444=(gconst103*x4438);
IkReal x4445=(gconst103*x4437);
IkReal x4446=((1.0)*gconst104*x4437);
evalcond[0]=(((r21*x4445))+(((-1.0)*r22*x4443))+(((-1.0)*r20*x4446)));
evalcond[1]=(cj0+(((-1.0)*r12*x4443))+((x4437*x4439))+(((-1.0)*r10*x4446)));
evalcond[2]=((((-1.0)*x4441))+((r01*x4445))+(((-1.0)*r02*x4443))+(((-1.0)*r00*x4446)));
evalcond[3]=(((r22*x4437))+((r21*x4444))+((sj1*sj2))+(((-1.0)*cj1*x4440))+(((-1.0)*gconst104*r20*x4443)));
evalcond[4]=((((-1.0)*gconst104*r00*x4443))+((r01*x4444))+(((-1.0)*cj0*sj1*x4440))+(((-1.0)*cj0*x4442))+((r02*x4437)));
evalcond[5]=(((r12*x4437))+((x4438*x4439))+(((-1.0)*gconst104*r10*x4443))+(((-1.0)*x4441*x4442))+(((-1.0)*sj0*sj1*x4440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4447=((1.0)*gconst104);
CheckValue<IkReal> x4448 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4447))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4448.valid){
continue;
}
CheckValue<IkReal> x4449=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4447)))),-1);
if(!x4449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4448.value)+(((1.5707963267949)*(x4449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4450=IKsin(j4);
IkReal x4451=IKcos(j4);
IkReal x4452=(gconst103*r11);
IkReal x4453=((1.0)*cj2);
IkReal x4454=((1.0)*sj0);
IkReal x4455=(cj1*sj2);
IkReal x4456=((1.0)*x4451);
IkReal x4457=(gconst103*x4451);
IkReal x4458=(gconst103*x4450);
IkReal x4459=((1.0)*gconst104*x4450);
evalcond[0]=(((r21*x4458))+(((-1.0)*r22*x4456))+(((-1.0)*r20*x4459)));
evalcond[1]=(cj0+((x4450*x4452))+(((-1.0)*r12*x4456))+(((-1.0)*r10*x4459)));
evalcond[2]=((((-1.0)*x4454))+((r01*x4458))+(((-1.0)*r02*x4456))+(((-1.0)*r00*x4459)));
evalcond[3]=((((-1.0)*gconst104*r20*x4456))+((r21*x4457))+((sj1*sj2))+(((-1.0)*cj1*x4453))+((r22*x4450)));
evalcond[4]=((((-1.0)*gconst104*r00*x4456))+((r01*x4457))+(((-1.0)*cj0*sj1*x4453))+(((-1.0)*cj0*x4455))+((r02*x4450)));
evalcond[5]=(((x4451*x4452))+(((-1.0)*x4454*x4455))+(((-1.0)*gconst104*r10*x4456))+((r12*x4450))+(((-1.0)*sj0*sj1*x4453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4460=((-1.0)*r11);
IkReal x4462 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4462)==0){
continue;
}
IkReal x4461=pow(x4462,-0.5);
CheckValue<IkReal> x4463 = IKatan2WithCheck(IkReal(x4460),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4463.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4463.value))));
IkReal gconst106=(x4460*x4461);
IkReal gconst107=((1.0)*r10*x4461);
CheckValue<IkReal> x4464 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4464.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4464.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4465=((-1.0)*r11);
CheckValue<IkReal> x4468 = IKatan2WithCheck(IkReal(x4465),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4468.valid){
continue;
}
IkReal x4466=((1.0)*(x4468.value));
IkReal x4467=x4461;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4466)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4466)));
IkReal gconst106=(x4465*x4467);
IkReal gconst107=((1.0)*r10*x4467);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4469=((-1.0)*r11);
CheckValue<IkReal> x4472 = IKatan2WithCheck(IkReal(x4469),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4472.valid){
continue;
}
IkReal x4470=((1.0)*(x4472.value));
IkReal x4471=x4461;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4470)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4470)));
IkReal gconst106=(x4469*x4471);
IkReal gconst107=((1.0)*r10*x4471);
IkReal x4473=r12*r12;
IkReal x4474=((1.0)*sj0);
IkReal x4475=(cj0*r02);
IkReal x4476=x4461;
j4eval[0]=((IKabs(((((-1.0)*r12*x4474))+(((-1.0)*x4475)))))+(IKabs(((((-1.0)*x4474*x4476))+((r12*x4475*x4476))+((sj0*x4473*x4476))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4477=((-1.0)*r11);
CheckValue<IkReal> x4480 = IKatan2WithCheck(IkReal(x4477),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4480.valid){
continue;
}
IkReal x4478=((1.0)*(x4480.value));
IkReal x4479=x4461;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4478)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4478)));
IkReal gconst106=(x4477*x4479);
IkReal gconst107=((1.0)*r10*x4479);
IkReal x4481=r12*r12;
IkReal x4482=((1.0)+(((-1.0)*x4481)));
IkReal x4483=(r22*sj1*sj2);
IkReal x4484=(cj1*cj2*r22);
CheckValue<IkReal> x4491=IKPowWithIntegerCheck(x4482,-1);
if(!x4491.valid){
continue;
}
IkReal x4485=x4491.value;
CheckValue<IkReal> x4492=IKPowWithIntegerCheck(((-1.0)+x4481),-1);
if(!x4492.valid){
continue;
}
IkReal x4486=x4492.value;
IkReal x4487=((1.0)*x4485);
if((x4482) < -0.00001)
continue;
IkReal x4488=IKsqrt(x4482);
IkReal x4489=(r12*x4486*x4488);
IkReal x4490=((((-2.0)*r10*r11*r20*r21*x4485))+(((-1.0)*(r22*r22)))+(((-1.0)*x4487*(r11*r11)*(r21*r21)))+(((-1.0)*x4487*(r10*r10)*(r20*r20))));
j4eval[0]=x4490;
j4eval[1]=((IKabs((((x4484*x4489))+(((-1.0)*x4483*x4489)))))+(IKabs(((((-1.0)*x4484))+x4483))));
j4eval[2]=IKsign(x4490);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4493=(sj1*sj2);
IkReal x4494=(gconst106*r21);
IkReal x4495=(gconst107*r20);
IkReal x4496=(cj1*cj2);
CheckValue<IkReal> x4497 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4496))+((r22*x4493)))),IkReal(((((-1.0)*x4494*x4496))+(((-1.0)*x4493*x4495))+((x4493*x4494))+((x4495*x4496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4497.valid){
continue;
}
CheckValue<IkReal> x4498=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4495*x4495)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4494*x4494)))+(((2.0)*x4494*x4495)))),-1);
if(!x4498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4497.value)+(((1.5707963267949)*(x4498.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4499=IKsin(j4);
IkReal x4500=IKcos(j4);
IkReal x4501=(gconst107*r10);
IkReal x4502=(gconst107*r00);
IkReal x4503=((1.0)*cj2);
IkReal x4504=(gconst107*r20);
IkReal x4505=((1.0)*sj0);
IkReal x4506=(cj1*sj2);
IkReal x4507=((1.0)*x4500);
IkReal x4508=(gconst106*x4500);
IkReal x4509=(gconst106*x4499);
IkReal x4510=((1.0)*x4499);
evalcond[0]=((((-1.0)*x4504*x4510))+((r21*x4509))+(((-1.0)*r22*x4507)));
evalcond[1]=(cj0+((r11*x4509))+(((-1.0)*x4501*x4510))+(((-1.0)*r12*x4507)));
evalcond[2]=((((-1.0)*x4505))+(((-1.0)*r02*x4507))+(((-1.0)*x4502*x4510))+((r01*x4509)));
evalcond[3]=((((-1.0)*cj1*x4503))+((r21*x4508))+((sj1*sj2))+((r22*x4499))+(((-1.0)*x4504*x4507)));
evalcond[4]=(((r02*x4499))+(((-1.0)*cj0*x4506))+((r01*x4508))+(((-1.0)*cj0*sj1*x4503))+(((-1.0)*x4502*x4507)));
evalcond[5]=(((r12*x4499))+((r11*x4508))+(((-1.0)*x4501*x4507))+(((-1.0)*sj0*sj1*x4503))+(((-1.0)*x4505*x4506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4511=((1.0)*sj0);
IkReal x4512=((1.0)*gconst106);
CheckValue<IkReal> x4513=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4512)))),-1);
if(!x4513.valid){
continue;
}
CheckValue<IkReal> x4514 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4511))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4512))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x4511))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4513.value)))+(x4514.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4515=IKsin(j4);
IkReal x4516=IKcos(j4);
IkReal x4517=(gconst107*r10);
IkReal x4518=(gconst107*r00);
IkReal x4519=((1.0)*cj2);
IkReal x4520=(gconst107*r20);
IkReal x4521=((1.0)*sj0);
IkReal x4522=(cj1*sj2);
IkReal x4523=((1.0)*x4516);
IkReal x4524=(gconst106*x4516);
IkReal x4525=(gconst106*x4515);
IkReal x4526=((1.0)*x4515);
evalcond[0]=(((r21*x4525))+(((-1.0)*x4520*x4526))+(((-1.0)*r22*x4523)));
evalcond[1]=((((-1.0)*r12*x4523))+((r11*x4525))+cj0+(((-1.0)*x4517*x4526)));
evalcond[2]=(((r01*x4525))+(((-1.0)*x4521))+(((-1.0)*r02*x4523))+(((-1.0)*x4518*x4526)));
evalcond[3]=((((-1.0)*cj1*x4519))+((r21*x4524))+(((-1.0)*x4520*x4523))+((sj1*sj2))+((r22*x4515)));
evalcond[4]=(((r02*x4515))+((r01*x4524))+(((-1.0)*cj0*sj1*x4519))+(((-1.0)*cj0*x4522))+(((-1.0)*x4518*x4523)));
evalcond[5]=(((r11*x4524))+(((-1.0)*sj0*sj1*x4519))+(((-1.0)*x4521*x4522))+(((-1.0)*x4517*x4523))+((r12*x4515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4527=((1.0)*gconst107);
CheckValue<IkReal> x4528 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4527))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4528.valid){
continue;
}
CheckValue<IkReal> x4529=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4527)))),-1);
if(!x4529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4528.value)+(((1.5707963267949)*(x4529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4530=IKsin(j4);
IkReal x4531=IKcos(j4);
IkReal x4532=(gconst107*r10);
IkReal x4533=(gconst107*r00);
IkReal x4534=((1.0)*cj2);
IkReal x4535=(gconst107*r20);
IkReal x4536=((1.0)*sj0);
IkReal x4537=(cj1*sj2);
IkReal x4538=((1.0)*x4531);
IkReal x4539=(gconst106*x4531);
IkReal x4540=(gconst106*x4530);
IkReal x4541=((1.0)*x4530);
evalcond[0]=((((-1.0)*x4535*x4541))+(((-1.0)*r22*x4538))+((r21*x4540)));
evalcond[1]=((((-1.0)*x4532*x4541))+cj0+((r11*x4540))+(((-1.0)*r12*x4538)));
evalcond[2]=((((-1.0)*x4536))+(((-1.0)*x4533*x4541))+((r01*x4540))+(((-1.0)*r02*x4538)));
evalcond[3]=(((r21*x4539))+(((-1.0)*cj1*x4534))+((sj1*sj2))+((r22*x4530))+(((-1.0)*x4535*x4538)));
evalcond[4]=(((r01*x4539))+((r02*x4530))+(((-1.0)*x4533*x4538))+(((-1.0)*cj0*x4537))+(((-1.0)*cj0*sj1*x4534)));
evalcond[5]=(((r12*x4530))+(((-1.0)*x4536*x4537))+(((-1.0)*x4532*x4538))+((r11*x4539))+(((-1.0)*sj0*sj1*x4534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4542=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4542;
j4eval[1]=IKsign(x4542);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4543=((1.0)*cj5);
IkReal x4544=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4543)));
j4eval[0]=x4544;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4543))))));
j4eval[2]=IKsign(x4544);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4545=(sj1*sj2);
IkReal x4546=(cj5*r10);
IkReal x4547=(r11*sj5);
IkReal x4548=(cj1*cj2);
IkReal x4549=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4549;
j4eval[1]=((IKabs((((x4546*x4548))+(((-1.0)*x4545*x4546))+((x4545*x4547))+(((-1.0)*x4547*x4548)))))+(IKabs((((r12*x4548))+(((-1.0)*r12*x4545))))));
j4eval[2]=IKsign(x4549);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4550=(sj1*sj2);
IkReal x4551=(cj5*r10);
IkReal x4552=(r11*sj5);
IkReal x4553=(cj1*cj2);
CheckValue<IkReal> x4554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4554.valid){
continue;
}
CheckValue<IkReal> x4555 = IKatan2WithCheck(IkReal((((x4550*x4552))+((x4551*x4553))+(((-1.0)*x4552*x4553))+(((-1.0)*x4550*x4551)))),IkReal((((r12*x4553))+(((-1.0)*r12*x4550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4554.value)))+(x4555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4556=IKcos(j4);
IkReal x4557=IKsin(j4);
IkReal x4558=(cj5*r00);
IkReal x4559=(cj5*r10);
IkReal x4560=(r21*sj5);
IkReal x4561=((1.0)*cj2);
IkReal x4562=(cj5*r20);
IkReal x4563=((1.0)*x4556);
IkReal x4564=((1.0)*x4557);
IkReal x4565=(sj5*x4557);
IkReal x4566=(sj5*x4556);
evalcond[0]=(((r11*x4566))+((r12*x4557))+(((-1.0)*x4559*x4563)));
evalcond[1]=(((x4557*x4560))+(((-1.0)*r22*x4563))+(((-1.0)*x4562*x4564)));
evalcond[2]=((((-1.0)*r02*x4563))+(((-1.0)*x4558*x4564))+((r01*x4565)));
evalcond[3]=((1.0)+((r11*x4565))+(((-1.0)*x4559*x4564))+(((-1.0)*r12*x4563)));
evalcond[4]=((((-1.0)*cj1*x4561))+((x4556*x4560))+((sj1*sj2))+((r22*x4557))+(((-1.0)*x4562*x4563)));
evalcond[5]=((((-1.0)*sj1*x4561))+(((-1.0)*cj1*sj2))+((r02*x4557))+(((-1.0)*x4558*x4563))+((r01*x4566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4567=((1.0)*cj5);
CheckValue<IkReal> x4568=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4567))+(((-1.0)*r00*sj5)))),-1);
if(!x4568.valid){
continue;
}
CheckValue<IkReal> x4569 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4567))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4568.value)))+(x4569.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4570=IKcos(j4);
IkReal x4571=IKsin(j4);
IkReal x4572=(cj5*r00);
IkReal x4573=(cj5*r10);
IkReal x4574=(r21*sj5);
IkReal x4575=((1.0)*cj2);
IkReal x4576=(cj5*r20);
IkReal x4577=((1.0)*x4570);
IkReal x4578=((1.0)*x4571);
IkReal x4579=(sj5*x4571);
IkReal x4580=(sj5*x4570);
evalcond[0]=(((r12*x4571))+((r11*x4580))+(((-1.0)*x4573*x4577)));
evalcond[1]=((((-1.0)*x4576*x4578))+((x4571*x4574))+(((-1.0)*r22*x4577)));
evalcond[2]=((((-1.0)*r02*x4577))+(((-1.0)*x4572*x4578))+((r01*x4579)));
evalcond[3]=((1.0)+((r11*x4579))+(((-1.0)*x4573*x4578))+(((-1.0)*r12*x4577)));
evalcond[4]=((((-1.0)*cj1*x4575))+(((-1.0)*x4576*x4577))+((r22*x4571))+((sj1*sj2))+((x4570*x4574)));
evalcond[5]=((((-1.0)*sj1*x4575))+((r02*x4571))+(((-1.0)*cj1*sj2))+(((-1.0)*x4572*x4577))+((r01*x4580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4581=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4581.valid){
continue;
}
CheckValue<IkReal> x4582 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4581.value)))+(x4582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4583=IKcos(j4);
IkReal x4584=IKsin(j4);
IkReal x4585=(cj5*r00);
IkReal x4586=(cj5*r10);
IkReal x4587=(r21*sj5);
IkReal x4588=((1.0)*cj2);
IkReal x4589=(cj5*r20);
IkReal x4590=((1.0)*x4583);
IkReal x4591=((1.0)*x4584);
IkReal x4592=(sj5*x4584);
IkReal x4593=(sj5*x4583);
evalcond[0]=((((-1.0)*x4586*x4590))+((r11*x4593))+((r12*x4584)));
evalcond[1]=((((-1.0)*r22*x4590))+(((-1.0)*x4589*x4591))+((x4584*x4587)));
evalcond[2]=((((-1.0)*x4585*x4591))+(((-1.0)*r02*x4590))+((r01*x4592)));
evalcond[3]=((1.0)+(((-1.0)*x4586*x4591))+((r11*x4592))+(((-1.0)*r12*x4590)));
evalcond[4]=(((r22*x4584))+(((-1.0)*x4589*x4590))+((sj1*sj2))+((x4583*x4587))+(((-1.0)*cj1*x4588)));
evalcond[5]=((((-1.0)*x4585*x4590))+((r02*x4584))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4588))+((r01*x4593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4594=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4594;
j4eval[1]=IKsign(x4594);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4595=((1.0)*cj5);
IkReal x4596=((((-1.0)*r21*x4595))+(((-1.0)*r20*sj5)));
j4eval[0]=x4596;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4595))))));
j4eval[2]=IKsign(x4596);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4597=cj5*cj5;
IkReal x4598=r11*r11;
IkReal x4599=(r11*sj5);
IkReal x4600=(cj5*r10);
IkReal x4601=((r12*r12)+x4598+((x4597*(r10*r10)))+(((-2.0)*x4599*x4600))+(((-1.0)*x4597*x4598)));
j4eval[0]=x4601;
j4eval[1]=IKsign(x4601);
j4eval[2]=((IKabs(((((-1.0)*x4600))+x4599)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4602=cj5*cj5;
IkReal x4603=r11*r11;
IkReal x4604=(cj5*r10);
IkReal x4605=(r11*sj5);
CheckValue<IkReal> x4606=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x4602*(r10*r10)))+x4603+(((-2.0)*x4604*x4605))+(((-1.0)*x4602*x4603)))),-1);
if(!x4606.valid){
continue;
}
CheckValue<IkReal> x4607 = IKatan2WithCheck(IkReal(((((-1.0)*x4604))+x4605)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4606.value)))+(x4607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4608=IKcos(j4);
IkReal x4609=IKsin(j4);
IkReal x4610=(cj5*r00);
IkReal x4611=(cj5*r10);
IkReal x4612=(r21*sj5);
IkReal x4613=(cj5*r20);
IkReal x4614=((1.0)*x4608);
IkReal x4615=((1.0)*x4609);
IkReal x4616=(sj5*x4609);
IkReal x4617=(sj5*x4608);
evalcond[0]=(((r12*x4609))+((r11*x4617))+(((-1.0)*x4611*x4614)));
evalcond[1]=(((x4609*x4612))+(((-1.0)*r22*x4614))+(((-1.0)*x4613*x4615)));
evalcond[2]=((((-1.0)*r02*x4614))+((r01*x4616))+(((-1.0)*x4610*x4615)));
evalcond[3]=((-1.0)+((r11*x4616))+(((-1.0)*r12*x4614))+(((-1.0)*x4611*x4615)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4617))+((r02*x4609))+(((-1.0)*x4610*x4614)));
evalcond[5]=(((x4608*x4612))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4609))+(((-1.0)*x4613*x4614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4618=((1.0)*cj5);
CheckValue<IkReal> x4619 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4619.valid){
continue;
}
CheckValue<IkReal> x4620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4618))+(((-1.0)*r20*sj5)))),-1);
if(!x4620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4619.value)+(((1.5707963267949)*(x4620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4621=IKcos(j4);
IkReal x4622=IKsin(j4);
IkReal x4623=(cj5*r00);
IkReal x4624=(cj5*r10);
IkReal x4625=(r21*sj5);
IkReal x4626=(cj5*r20);
IkReal x4627=((1.0)*x4621);
IkReal x4628=((1.0)*x4622);
IkReal x4629=(sj5*x4622);
IkReal x4630=(sj5*x4621);
evalcond[0]=(((r12*x4622))+((r11*x4630))+(((-1.0)*x4624*x4627)));
evalcond[1]=((((-1.0)*x4626*x4628))+(((-1.0)*r22*x4627))+((x4622*x4625)));
evalcond[2]=((((-1.0)*r02*x4627))+(((-1.0)*x4623*x4628))+((r01*x4629)));
evalcond[3]=((-1.0)+((r11*x4629))+(((-1.0)*r12*x4627))+(((-1.0)*x4624*x4628)));
evalcond[4]=(((cj2*sj1))+((r01*x4630))+((cj1*sj2))+((r02*x4622))+(((-1.0)*x4623*x4627)));
evalcond[5]=((((-1.0)*x4626*x4627))+((x4621*x4625))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4631 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4631.valid){
continue;
}
CheckValue<IkReal> x4632=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4631.value)+(((1.5707963267949)*(x4632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4633=IKcos(j4);
IkReal x4634=IKsin(j4);
IkReal x4635=(cj5*r00);
IkReal x4636=(cj5*r10);
IkReal x4637=(r21*sj5);
IkReal x4638=(cj5*r20);
IkReal x4639=((1.0)*x4633);
IkReal x4640=((1.0)*x4634);
IkReal x4641=(sj5*x4634);
IkReal x4642=(sj5*x4633);
evalcond[0]=(((r12*x4634))+((r11*x4642))+(((-1.0)*x4636*x4639)));
evalcond[1]=(((x4634*x4637))+(((-1.0)*x4638*x4640))+(((-1.0)*r22*x4639)));
evalcond[2]=((((-1.0)*r02*x4639))+((r01*x4641))+(((-1.0)*x4635*x4640)));
evalcond[3]=((-1.0)+(((-1.0)*x4636*x4640))+((r11*x4641))+(((-1.0)*r12*x4639)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4635*x4639))+((cj1*sj2))+((r01*x4642))+((r02*x4634)));
evalcond[5]=(((x4633*x4637))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4634))+(((-1.0)*x4638*x4639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4643=((-1.0)*r00);
IkReal x4645 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4645)==0){
continue;
}
IkReal x4644=pow(x4645,-0.5);
CheckValue<IkReal> x4646 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4643),IKFAST_ATAN2_MAGTHRESH);
if(!x4646.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4646.value));
IkReal gconst109=(r01*x4644);
IkReal gconst110=(x4643*x4644);
CheckValue<IkReal> x4647 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4647.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4647.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4648=((-1.0)*r00);
IkReal x4649=x4644;
CheckValue<IkReal> x4651 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4648),IKFAST_ATAN2_MAGTHRESH);
if(!x4651.valid){
continue;
}
IkReal x4650=((-1.0)*(x4651.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4650;
IkReal gconst108=x4650;
IkReal gconst109=(r01*x4649);
IkReal gconst110=(x4648*x4649);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4652=((1.0)*sj0);
IkReal x4653=((1.0)*gconst109);
CheckValue<IkReal> x4654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4653))+(((-1.0)*gconst110*r21)))),-1);
if(!x4654.valid){
continue;
}
CheckValue<IkReal> x4655 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4652)))),IkReal(((((-1.0)*cj0*r01*x4653))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4654.value)))+(x4655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4656=IKsin(j4);
IkReal x4657=IKcos(j4);
IkReal x4658=(gconst109*r21);
IkReal x4659=((1.0)*cj2);
IkReal x4660=((1.0)*sj0);
IkReal x4661=(cj1*sj2);
IkReal x4662=((1.0)*x4657);
IkReal x4663=(gconst109*x4656);
IkReal x4664=(gconst109*x4657);
IkReal x4665=((1.0)*gconst110*x4656);
evalcond[0]=((((-1.0)*r20*x4665))+((x4656*x4658))+(((-1.0)*r22*x4662)));
evalcond[1]=(cj0+(((-1.0)*r10*x4665))+((r11*x4663))+(((-1.0)*r12*x4662)));
evalcond[2]=(((r01*x4663))+(((-1.0)*r00*x4665))+(((-1.0)*x4660))+(((-1.0)*r02*x4662)));
evalcond[3]=((((-1.0)*cj1*x4659))+(((-1.0)*gconst110*r20*x4662))+((sj1*sj2))+((x4657*x4658))+((r22*x4656)));
evalcond[4]=((((-1.0)*cj0*x4661))+((r01*x4664))+((r02*x4656))+(((-1.0)*gconst110*r00*x4662))+(((-1.0)*cj0*sj1*x4659)));
evalcond[5]=(((r12*x4656))+(((-1.0)*gconst110*r10*x4662))+(((-1.0)*x4660*x4661))+((r11*x4664))+(((-1.0)*sj0*sj1*x4659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4666=((1.0)*gconst110);
CheckValue<IkReal> x4667 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4666))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4667.valid){
continue;
}
CheckValue<IkReal> x4668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4666))+(((-1.0)*gconst109*r10)))),-1);
if(!x4668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4667.value)+(((1.5707963267949)*(x4668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4669=IKsin(j4);
IkReal x4670=IKcos(j4);
IkReal x4671=(gconst109*r21);
IkReal x4672=((1.0)*cj2);
IkReal x4673=((1.0)*sj0);
IkReal x4674=(cj1*sj2);
IkReal x4675=((1.0)*x4670);
IkReal x4676=(gconst109*x4669);
IkReal x4677=(gconst109*x4670);
IkReal x4678=((1.0)*gconst110*x4669);
evalcond[0]=(((x4669*x4671))+(((-1.0)*r20*x4678))+(((-1.0)*r22*x4675)));
evalcond[1]=(cj0+((r11*x4676))+(((-1.0)*r12*x4675))+(((-1.0)*r10*x4678)));
evalcond[2]=((((-1.0)*r02*x4675))+(((-1.0)*x4673))+((r01*x4676))+(((-1.0)*r00*x4678)));
evalcond[3]=((((-1.0)*cj1*x4672))+((x4670*x4671))+((sj1*sj2))+(((-1.0)*gconst110*r20*x4675))+((r22*x4669)));
evalcond[4]=((((-1.0)*cj0*x4674))+((r02*x4669))+(((-1.0)*cj0*sj1*x4672))+((r01*x4677))+(((-1.0)*gconst110*r00*x4675)));
evalcond[5]=((((-1.0)*gconst110*r10*x4675))+((r12*x4669))+((r11*x4677))+(((-1.0)*sj0*sj1*x4672))+(((-1.0)*x4673*x4674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4679=((-1.0)*r01);
IkReal x4681 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4681)==0){
continue;
}
IkReal x4680=pow(x4681,-0.5);
CheckValue<IkReal> x4682 = IKatan2WithCheck(IkReal(x4679),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4682.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4682.value))));
IkReal gconst112=(x4679*x4680);
IkReal gconst113=((1.0)*r00*x4680);
CheckValue<IkReal> x4683 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4683.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4683.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4684=((-1.0)*r01);
CheckValue<IkReal> x4687 = IKatan2WithCheck(IkReal(x4684),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4687.valid){
continue;
}
IkReal x4685=((1.0)*(x4687.value));
IkReal x4686=x4680;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4685)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4685)));
IkReal gconst112=(x4684*x4686);
IkReal gconst113=((1.0)*r00*x4686);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4688=((-1.0)*r01);
CheckValue<IkReal> x4691 = IKatan2WithCheck(IkReal(x4688),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4691.valid){
continue;
}
IkReal x4689=((1.0)*(x4691.value));
IkReal x4690=x4680;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4689)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4689)));
IkReal gconst112=(x4688*x4690);
IkReal gconst113=((1.0)*r00*x4690);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4692=((-1.0)*r01);
CheckValue<IkReal> x4695 = IKatan2WithCheck(IkReal(x4692),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4695.valid){
continue;
}
IkReal x4693=((1.0)*(x4695.value));
IkReal x4694=x4680;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4693)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4693)));
IkReal gconst112=(x4692*x4694);
IkReal gconst113=((1.0)*r00*x4694);
IkReal x4696=r02*r02;
IkReal x4697=(r12*sj0);
IkReal x4698=((1.0)*cj0);
IkReal x4699=x4680;
j4eval[0]=((IKabs(((((-1.0)*r02*x4698))+(((-1.0)*x4697)))))+(IKabs(((((-1.0)*x4698*x4699))+((r02*x4697*x4699))+((cj0*x4696*x4699))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4700=((1.0)*sj0);
IkReal x4701=((1.0)*gconst112);
CheckValue<IkReal> x4702=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x4701)))),-1);
if(!x4702.valid){
continue;
}
CheckValue<IkReal> x4703 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4700))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4701))+(((-1.0)*gconst112*r11*x4700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4702.value)))+(x4703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4704=IKsin(j4);
IkReal x4705=IKcos(j4);
IkReal x4706=(gconst113*r20);
IkReal x4707=(gconst112*r21);
IkReal x4708=((1.0)*cj2);
IkReal x4709=(gconst113*r00);
IkReal x4710=(gconst113*r10);
IkReal x4711=((1.0)*sj0);
IkReal x4712=(cj1*sj2);
IkReal x4713=((1.0)*x4705);
IkReal x4714=((1.0)*x4704);
IkReal x4715=(gconst112*x4705);
IkReal x4716=(gconst112*x4704);
evalcond[0]=((((-1.0)*r22*x4713))+((x4704*x4707))+(((-1.0)*x4706*x4714)));
evalcond[1]=(cj0+(((-1.0)*x4710*x4714))+(((-1.0)*r12*x4713))+((r11*x4716)));
evalcond[2]=((((-1.0)*r02*x4713))+(((-1.0)*x4709*x4714))+((r01*x4716))+(((-1.0)*x4711)));
evalcond[3]=(((x4705*x4707))+((sj1*sj2))+(((-1.0)*cj1*x4708))+(((-1.0)*x4706*x4713))+((r22*x4704)));
evalcond[4]=((((-1.0)*x4709*x4713))+(((-1.0)*cj0*x4712))+(((-1.0)*cj0*sj1*x4708))+((r01*x4715))+((r02*x4704)));
evalcond[5]=((((-1.0)*sj0*sj1*x4708))+(((-1.0)*x4710*x4713))+(((-1.0)*x4711*x4712))+((r11*x4715))+((r12*x4704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4717=((1.0)*gconst113);
CheckValue<IkReal> x4718=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4717))+(((-1.0)*gconst112*r10)))),-1);
if(!x4718.valid){
continue;
}
CheckValue<IkReal> x4719 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4718.value)))+(x4719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4720=IKsin(j4);
IkReal x4721=IKcos(j4);
IkReal x4722=(gconst113*r20);
IkReal x4723=(gconst112*r21);
IkReal x4724=((1.0)*cj2);
IkReal x4725=(gconst113*r00);
IkReal x4726=(gconst113*r10);
IkReal x4727=((1.0)*sj0);
IkReal x4728=(cj1*sj2);
IkReal x4729=((1.0)*x4721);
IkReal x4730=((1.0)*x4720);
IkReal x4731=(gconst112*x4721);
IkReal x4732=(gconst112*x4720);
evalcond[0]=(((x4720*x4723))+(((-1.0)*x4722*x4730))+(((-1.0)*r22*x4729)));
evalcond[1]=(((r11*x4732))+cj0+(((-1.0)*r12*x4729))+(((-1.0)*x4726*x4730)));
evalcond[2]=((((-1.0)*x4727))+(((-1.0)*x4725*x4730))+(((-1.0)*r02*x4729))+((r01*x4732)));
evalcond[3]=((((-1.0)*x4722*x4729))+((x4721*x4723))+(((-1.0)*cj1*x4724))+((sj1*sj2))+((r22*x4720)));
evalcond[4]=((((-1.0)*x4725*x4729))+((r02*x4720))+(((-1.0)*cj0*sj1*x4724))+(((-1.0)*cj0*x4728))+((r01*x4731)));
evalcond[5]=(((r11*x4731))+(((-1.0)*x4727*x4728))+(((-1.0)*sj0*sj1*x4724))+(((-1.0)*x4726*x4729))+((r12*x4720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4733=((1.0)*gconst113);
CheckValue<IkReal> x4734 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4733))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4734.valid){
continue;
}
CheckValue<IkReal> x4735=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4733))+(((-1.0)*gconst112*r00)))),-1);
if(!x4735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4734.value)+(((1.5707963267949)*(x4735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4736=IKsin(j4);
IkReal x4737=IKcos(j4);
IkReal x4738=(gconst113*r20);
IkReal x4739=(gconst112*r21);
IkReal x4740=((1.0)*cj2);
IkReal x4741=(gconst113*r00);
IkReal x4742=(gconst113*r10);
IkReal x4743=((1.0)*sj0);
IkReal x4744=(cj1*sj2);
IkReal x4745=((1.0)*x4737);
IkReal x4746=((1.0)*x4736);
IkReal x4747=(gconst112*x4737);
IkReal x4748=(gconst112*x4736);
evalcond[0]=(((x4736*x4739))+(((-1.0)*r22*x4745))+(((-1.0)*x4738*x4746)));
evalcond[1]=(((r11*x4748))+(((-1.0)*r12*x4745))+cj0+(((-1.0)*x4742*x4746)));
evalcond[2]=(((r01*x4748))+(((-1.0)*x4743))+(((-1.0)*x4741*x4746))+(((-1.0)*r02*x4745)));
evalcond[3]=((((-1.0)*cj1*x4740))+((x4737*x4739))+((sj1*sj2))+((r22*x4736))+(((-1.0)*x4738*x4745)));
evalcond[4]=((((-1.0)*cj0*x4744))+((r01*x4747))+((r02*x4736))+(((-1.0)*x4741*x4745))+(((-1.0)*cj0*sj1*x4740)));
evalcond[5]=(((r11*x4747))+(((-1.0)*x4742*x4745))+(((-1.0)*sj0*sj1*x4740))+(((-1.0)*x4743*x4744))+((r12*x4736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4749=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4749;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4749);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4750=((1.0)*cj5);
IkReal x4751=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4750)));
j4eval[0]=x4751;
j4eval[1]=((IKabs(((((-1.0)*r20*x4750))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4751);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4752=cj5*cj5;
IkReal x4753=r01*r01;
IkReal x4754=(cj5*r00);
IkReal x4755=(r01*sj5);
IkReal x4756=((((-1.0)*x4752*x4753))+((x4752*(r00*r00)))+x4753+(((-2.0)*x4754*x4755))+(r02*r02));
j4eval[0]=x4756;
j4eval[1]=IKsign(x4756);
j4eval[2]=((IKabs(r02))+(IKabs((x4755+(((-1.0)*x4754))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4757=cj5*cj5;
IkReal x4758=r01*r01;
IkReal x4759=(r01*sj5);
IkReal x4760=(cj5*r00);
CheckValue<IkReal> x4761 = IKatan2WithCheck(IkReal(((((-1.0)*x4760))+x4759)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4761.valid){
continue;
}
CheckValue<IkReal> x4762=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4759*x4760))+((x4757*(r00*r00)))+x4758+(r02*r02)+(((-1.0)*x4757*x4758)))),-1);
if(!x4762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4761.value)+(((1.5707963267949)*(x4762.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4763=IKcos(j4);
IkReal x4764=IKsin(j4);
IkReal x4765=(cj5*r00);
IkReal x4766=(cj5*r10);
IkReal x4767=(r21*sj5);
IkReal x4768=((1.0)*cj2);
IkReal x4769=(cj5*r20);
IkReal x4770=((1.0)*x4763);
IkReal x4771=((1.0)*x4764);
IkReal x4772=(sj5*x4764);
IkReal x4773=(sj5*x4763);
evalcond[0]=(((r02*x4764))+((r01*x4773))+(((-1.0)*x4765*x4770)));
evalcond[1]=((((-1.0)*x4769*x4771))+(((-1.0)*r22*x4770))+((x4764*x4767)));
evalcond[2]=(((r11*x4772))+(((-1.0)*r12*x4770))+(((-1.0)*x4766*x4771)));
evalcond[3]=((-1.0)+((r01*x4772))+(((-1.0)*x4765*x4771))+(((-1.0)*r02*x4770)));
evalcond[4]=(((r22*x4764))+(((-1.0)*x4769*x4770))+((sj1*sj2))+(((-1.0)*cj1*x4768))+((x4763*x4767)));
evalcond[5]=(((r11*x4773))+(((-1.0)*x4766*x4770))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4768))+((r12*x4764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4774=((1.0)*cj5);
CheckValue<IkReal> x4775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4774))+(((-1.0)*r10*sj5)))),-1);
if(!x4775.valid){
continue;
}
CheckValue<IkReal> x4776 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4775.value)))+(x4776.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4777=IKcos(j4);
IkReal x4778=IKsin(j4);
IkReal x4779=(cj5*r00);
IkReal x4780=(cj5*r10);
IkReal x4781=(r21*sj5);
IkReal x4782=((1.0)*cj2);
IkReal x4783=(cj5*r20);
IkReal x4784=((1.0)*x4777);
IkReal x4785=((1.0)*x4778);
IkReal x4786=(sj5*x4778);
IkReal x4787=(sj5*x4777);
evalcond[0]=((((-1.0)*x4779*x4784))+((r01*x4787))+((r02*x4778)));
evalcond[1]=(((x4778*x4781))+(((-1.0)*x4783*x4785))+(((-1.0)*r22*x4784)));
evalcond[2]=(((r11*x4786))+(((-1.0)*x4780*x4785))+(((-1.0)*r12*x4784)));
evalcond[3]=((-1.0)+(((-1.0)*x4779*x4785))+((r01*x4786))+(((-1.0)*r02*x4784)));
evalcond[4]=(((x4777*x4781))+(((-1.0)*x4783*x4784))+((sj1*sj2))+(((-1.0)*cj1*x4782))+((r22*x4778)));
evalcond[5]=(((r12*x4778))+(((-1.0)*cj1*sj2))+((r11*x4787))+(((-1.0)*sj1*x4782))+(((-1.0)*x4780*x4784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4788=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4788.valid){
continue;
}
CheckValue<IkReal> x4789 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4788.value)))+(x4789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4790=IKcos(j4);
IkReal x4791=IKsin(j4);
IkReal x4792=(cj5*r00);
IkReal x4793=(cj5*r10);
IkReal x4794=(r21*sj5);
IkReal x4795=((1.0)*cj2);
IkReal x4796=(cj5*r20);
IkReal x4797=((1.0)*x4790);
IkReal x4798=((1.0)*x4791);
IkReal x4799=(sj5*x4791);
IkReal x4800=(sj5*x4790);
evalcond[0]=(((r01*x4800))+((r02*x4791))+(((-1.0)*x4792*x4797)));
evalcond[1]=((((-1.0)*r22*x4797))+((x4791*x4794))+(((-1.0)*x4796*x4798)));
evalcond[2]=((((-1.0)*r12*x4797))+((r11*x4799))+(((-1.0)*x4793*x4798)));
evalcond[3]=((-1.0)+((r01*x4799))+(((-1.0)*r02*x4797))+(((-1.0)*x4792*x4798)));
evalcond[4]=(((x4790*x4794))+((sj1*sj2))+(((-1.0)*x4796*x4797))+(((-1.0)*cj1*x4795))+((r22*x4791)));
evalcond[5]=((((-1.0)*sj1*x4795))+(((-1.0)*cj1*sj2))+((r12*x4791))+(((-1.0)*x4793*x4797))+((r11*x4800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4801=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4801;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4801);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4802=((1.0)*cj5);
IkReal x4803=((((-1.0)*r21*x4802))+(((-1.0)*r20*sj5)));
j4eval[0]=x4803;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4802))))));
j4eval[2]=IKsign(x4803);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4804=cj5*cj5;
IkReal x4805=r01*r01;
IkReal x4806=(r01*sj5);
IkReal x4807=(cj5*r00);
IkReal x4808=((((-1.0)*x4804*(r00*r00)))+(((-1.0)*(r02*r02)))+((x4804*x4805))+(((2.0)*x4806*x4807))+(((-1.0)*x4805)));
j4eval[0]=x4808;
j4eval[1]=IKsign(x4808);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4807))+x4806))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4809=cj5*cj5;
IkReal x4810=r01*r01;
IkReal x4811=(r01*sj5);
IkReal x4812=(cj5*r00);
CheckValue<IkReal> x4813=IKPowWithIntegerCheck(IKsign((((x4809*x4810))+(((-1.0)*x4810))+(((-1.0)*(r02*r02)))+(((2.0)*x4811*x4812))+(((-1.0)*x4809*(r00*r00))))),-1);
if(!x4813.valid){
continue;
}
CheckValue<IkReal> x4814 = IKatan2WithCheck(IkReal(((((-1.0)*x4812))+x4811)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4813.value)))+(x4814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4815=IKcos(j4);
IkReal x4816=IKsin(j4);
IkReal x4817=(cj5*r00);
IkReal x4818=(cj5*r10);
IkReal x4819=(r21*sj5);
IkReal x4820=(cj5*r20);
IkReal x4821=((1.0)*x4815);
IkReal x4822=((1.0)*x4816);
IkReal x4823=(sj5*x4816);
IkReal x4824=(sj5*x4815);
evalcond[0]=((((-1.0)*x4817*x4821))+((r02*x4816))+((r01*x4824)));
evalcond[1]=(((x4816*x4819))+(((-1.0)*r22*x4821))+(((-1.0)*x4820*x4822)));
evalcond[2]=(((r11*x4823))+(((-1.0)*x4818*x4822))+(((-1.0)*r12*x4821)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4821))+(((-1.0)*x4817*x4822))+((r01*x4823)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4824))+((r12*x4816))+(((-1.0)*x4818*x4821)));
evalcond[5]=(((x4815*x4819))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4820*x4821))+((r22*x4816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4825=((1.0)*cj5);
CheckValue<IkReal> x4826=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4825))+(((-1.0)*r20*sj5)))),-1);
if(!x4826.valid){
continue;
}
CheckValue<IkReal> x4827 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4825))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4826.value)))+(x4827.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4828=IKcos(j4);
IkReal x4829=IKsin(j4);
IkReal x4830=(cj5*r00);
IkReal x4831=(cj5*r10);
IkReal x4832=(r21*sj5);
IkReal x4833=(cj5*r20);
IkReal x4834=((1.0)*x4828);
IkReal x4835=((1.0)*x4829);
IkReal x4836=(sj5*x4829);
IkReal x4837=(sj5*x4828);
evalcond[0]=(((r01*x4837))+(((-1.0)*x4830*x4834))+((r02*x4829)));
evalcond[1]=((((-1.0)*x4833*x4835))+(((-1.0)*r22*x4834))+((x4829*x4832)));
evalcond[2]=(((r11*x4836))+(((-1.0)*x4831*x4835))+(((-1.0)*r12*x4834)));
evalcond[3]=((1.0)+((r01*x4836))+(((-1.0)*x4830*x4835))+(((-1.0)*r02*x4834)));
evalcond[4]=(((cj2*sj1))+((r11*x4837))+(((-1.0)*x4831*x4834))+((cj1*sj2))+((r12*x4829)));
evalcond[5]=(((r22*x4829))+(((-1.0)*x4833*x4834))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4828*x4832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4838 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4838.valid){
continue;
}
CheckValue<IkReal> x4839=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4838.value)+(((1.5707963267949)*(x4839.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4840=IKcos(j4);
IkReal x4841=IKsin(j4);
IkReal x4842=(cj5*r00);
IkReal x4843=(cj5*r10);
IkReal x4844=(r21*sj5);
IkReal x4845=(cj5*r20);
IkReal x4846=((1.0)*x4840);
IkReal x4847=((1.0)*x4841);
IkReal x4848=(sj5*x4841);
IkReal x4849=(sj5*x4840);
evalcond[0]=(((r02*x4841))+(((-1.0)*x4842*x4846))+((r01*x4849)));
evalcond[1]=(((x4841*x4844))+(((-1.0)*x4845*x4847))+(((-1.0)*r22*x4846)));
evalcond[2]=(((r11*x4848))+(((-1.0)*r12*x4846))+(((-1.0)*x4843*x4847)));
evalcond[3]=((1.0)+(((-1.0)*x4842*x4847))+(((-1.0)*r02*x4846))+((r01*x4848)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4849))+((r12*x4841))+(((-1.0)*x4843*x4846)));
evalcond[5]=((((-1.0)*cj1*cj2))+((x4840*x4844))+((sj1*sj2))+((r22*x4841))+(((-1.0)*x4845*x4846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4850=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4850);
rxp1_1=(px*r21);
rxp1_2=(r11*x4850);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4851=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4851);
rxp1_1=(px*r21);
rxp1_2=(r11*x4851);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4852=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4852);
rxp1_1=(px*r21);
rxp1_2=(r11*x4852);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4855=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4855.valid){
continue;
}
IkReal x4853=x4855.value;
IkReal x4854=(sj0*x4853);
cj4array[0]=(((cj1*sj2*x4854))+((cj2*sj1*x4854)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4856=IKsin(j4);
IkReal x4857=IKcos(j4);
IkReal x4858=(r21*sj5);
IkReal x4859=((1.0)*cj5*r20);
evalcond[0]=(r02*x4856);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4857)));
evalcond[2]=((((-1.0)*x4856*x4859))+((x4856*x4858)));
evalcond[3]=(((r11*sj5*x4856))+(((-1.0)*cj5*r10*x4856)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4857*x4859))+((x4857*x4858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4861=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4861.valid){
continue;
}
IkReal x4860=x4861.value;
cj4array[0]=(((cj1*cj2*x4860))+(((-1.0)*sj1*sj2*x4860)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4862=IKsin(j4);
IkReal x4863=IKcos(j4);
IkReal x4864=((1.0)*sj0);
IkReal x4865=((1.0)*cj5);
IkReal x4866=(sj5*x4862);
evalcond[0]=(r02*x4862);
evalcond[1]=((((-1.0)*r02*x4863))+(((-1.0)*x4864)));
evalcond[2]=((((-1.0)*r20*x4862*x4865))+((r21*x4866)));
evalcond[3]=(((r11*x4866))+(((-1.0)*r10*x4862*x4865)));
evalcond[4]=((((-1.0)*r10*x4863*x4865))+(((-1.0)*cj2*sj1*x4864))+((r11*sj5*x4863))+(((-1.0)*cj1*sj2*x4864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4867=IKPowWithIntegerCheck(r02,-1);
if(!x4867.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4867.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4868=IKsin(j4);
IkReal x4869=IKcos(j4);
IkReal x4870=((1.0)*cj1);
IkReal x4871=(r21*sj5);
IkReal x4872=((1.0)*cj5);
IkReal x4873=(r11*sj5);
evalcond[0]=(r02*x4868);
evalcond[1]=(((x4868*x4871))+(((-1.0)*r20*x4868*x4872)));
evalcond[2]=(((x4868*x4873))+(((-1.0)*r10*x4868*x4872)));
evalcond[3]=(((x4869*x4871))+(((-1.0)*cj2*x4870))+((sj1*sj2))+(((-1.0)*r20*x4869*x4872)));
evalcond[4]=(((x4869*x4873))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4870))+(((-1.0)*r10*x4869*x4872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4874=((1.0)*sj0);
IkReal x4875=((1.0)*cj0);
CheckValue<IkReal> x4876 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4874))+(((-1.0)*r02*x4875)))),IkReal(((((-1.0)*r01*sj5*x4875))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4876.valid){
continue;
}
CheckValue<IkReal> x4877=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4876.value)+(((1.5707963267949)*(x4877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4878=IKsin(j4);
IkReal x4879=IKcos(j4);
IkReal x4880=(cj5*r00);
IkReal x4881=(cj5*r10);
IkReal x4882=(r21*sj5);
IkReal x4883=((1.0)*cj2);
IkReal x4884=((1.0)*sj0);
IkReal x4885=(cj1*sj2);
IkReal x4886=(cj5*r20);
IkReal x4887=((1.0)*x4879);
IkReal x4888=((1.0)*x4878);
IkReal x4889=(sj5*x4878);
IkReal x4890=(sj5*x4879);
evalcond[0]=(((x4878*x4882))+(((-1.0)*x4886*x4888))+(((-1.0)*r22*x4887)));
evalcond[1]=(((r11*x4889))+cj0+(((-1.0)*r12*x4887))+(((-1.0)*x4881*x4888)));
evalcond[2]=((((-1.0)*x4884))+(((-1.0)*x4880*x4888))+(((-1.0)*r02*x4887))+((r01*x4889)));
evalcond[3]=((((-1.0)*cj1*x4883))+((sj1*sj2))+((x4879*x4882))+(((-1.0)*x4886*x4887))+((r22*x4878)));
evalcond[4]=((((-1.0)*cj0*x4885))+((r02*x4878))+(((-1.0)*x4880*x4887))+(((-1.0)*cj0*sj1*x4883))+((r01*x4890)));
evalcond[5]=(((r11*x4890))+(((-1.0)*x4881*x4887))+(((-1.0)*x4884*x4885))+(((-1.0)*sj0*sj1*x4883))+((r12*x4878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4891=((1.0)*cj5);
CheckValue<IkReal> x4892 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4891))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4892.valid){
continue;
}
CheckValue<IkReal> x4893=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4891))+(((-1.0)*r10*sj5)))),-1);
if(!x4893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4892.value)+(((1.5707963267949)*(x4893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4894=IKsin(j4);
IkReal x4895=IKcos(j4);
IkReal x4896=(cj5*r00);
IkReal x4897=(cj5*r10);
IkReal x4898=(r21*sj5);
IkReal x4899=((1.0)*cj2);
IkReal x4900=((1.0)*sj0);
IkReal x4901=(cj1*sj2);
IkReal x4902=(cj5*r20);
IkReal x4903=((1.0)*x4895);
IkReal x4904=((1.0)*x4894);
IkReal x4905=(sj5*x4894);
IkReal x4906=(sj5*x4895);
evalcond[0]=((((-1.0)*x4902*x4904))+(((-1.0)*r22*x4903))+((x4894*x4898)));
evalcond[1]=((((-1.0)*r12*x4903))+cj0+(((-1.0)*x4897*x4904))+((r11*x4905)));
evalcond[2]=((((-1.0)*x4900))+(((-1.0)*r02*x4903))+(((-1.0)*x4896*x4904))+((r01*x4905)));
evalcond[3]=((((-1.0)*cj1*x4899))+(((-1.0)*x4902*x4903))+((sj1*sj2))+((x4895*x4898))+((r22*x4894)));
evalcond[4]=((((-1.0)*cj0*x4901))+((r02*x4894))+(((-1.0)*cj0*sj1*x4899))+(((-1.0)*x4896*x4903))+((r01*x4906)));
evalcond[5]=(((r12*x4894))+(((-1.0)*x4897*x4903))+(((-1.0)*sj0*sj1*x4899))+((r11*x4906))+(((-1.0)*x4900*x4901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4907=((1.0)*cj5);
CheckValue<IkReal> x4908 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4908.valid){
continue;
}
CheckValue<IkReal> x4909=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4907))+(((-1.0)*r00*sj5)))),-1);
if(!x4909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4908.value)+(((1.5707963267949)*(x4909.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4910=IKsin(j4);
IkReal x4911=IKcos(j4);
IkReal x4912=(cj5*r00);
IkReal x4913=(cj5*r10);
IkReal x4914=(r21*sj5);
IkReal x4915=((1.0)*cj2);
IkReal x4916=((1.0)*sj0);
IkReal x4917=(cj1*sj2);
IkReal x4918=(cj5*r20);
IkReal x4919=((1.0)*x4911);
IkReal x4920=((1.0)*x4910);
IkReal x4921=(sj5*x4910);
IkReal x4922=(sj5*x4911);
evalcond[0]=((((-1.0)*x4918*x4920))+((x4910*x4914))+(((-1.0)*r22*x4919)));
evalcond[1]=(cj0+(((-1.0)*r12*x4919))+(((-1.0)*x4913*x4920))+((r11*x4921)));
evalcond[2]=((((-1.0)*r02*x4919))+(((-1.0)*x4916))+(((-1.0)*x4912*x4920))+((r01*x4921)));
evalcond[3]=(((x4911*x4914))+(((-1.0)*x4918*x4919))+((sj1*sj2))+(((-1.0)*cj1*x4915))+((r22*x4910)));
evalcond[4]=((((-1.0)*x4912*x4919))+(((-1.0)*cj0*sj1*x4915))+((r02*x4910))+((r01*x4922))+(((-1.0)*cj0*x4917)));
evalcond[5]=((((-1.0)*sj0*sj1*x4915))+(((-1.0)*x4913*x4919))+((r12*x4910))+(((-1.0)*x4916*x4917))+((r11*x4922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4923=((1.0)*cj5);
IkReal x4924=((1.0)*sj5);
IkReal x4925=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4925;
j0eval[1]=((IKabs(((((-1.0)*r01*x4923))+(((-1.0)*r00*x4924)))))+(IKabs(((((-1.0)*r11*x4923))+(((-1.0)*r10*x4924))))));
j0eval[2]=IKsign(x4925);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4926=r21*r21;
IkReal x4927=cj5*cj5;
IkReal x4928=(cj2*sj1);
IkReal x4929=(cj1*sj2);
IkReal x4930=(r21*sj5);
IkReal x4931=((1.0)*cj5*r20);
IkReal x4932=((((2.0)*cj5*r20*x4930))+(((-1.0)*x4926))+((x4926*x4927))+(((-1.0)*x4927*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x4932;
j4eval[1]=((IKabs((((r22*x4929))+((r22*x4928)))))+(IKabs((((x4929*x4930))+(((-1.0)*x4929*x4931))+((x4928*x4930))+(((-1.0)*x4928*x4931))))));
j4eval[2]=IKsign(x4932);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4933=cj1*cj1;
IkReal x4934=(cj2*sj2);
IkReal x4935=(cj2*sj1);
IkReal x4936=(cj1*sj1);
j0eval[0]=(x4934+x4936+(((-1.08349267049076)*cj1*x4935))+(((-1.08349267049076)*sj2*x4933))+(((-2.0)*cj1*cj2*x4935))+(((-2.0)*x4933*x4934)));
j0eval[1]=((((-1.0)*x4935))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4937=IKsin(j0);
IkReal x4938=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.81725)*x4938))+(((-0.10915)*x4937)));
evalcond[1]=((((0.10915)*x4938))+(((-1.0)*py))+(((0.81725)*x4937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4939=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4939;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4939);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4940=((1.0)*cj5);
IkReal x4941=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4940)));
j4eval[0]=x4941;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x4940))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4941);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4942=((1.0)*cj5);
IkReal x4943=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4942)));
j4eval[0]=x4943;
j4eval[1]=IKsign(x4943);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4942))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4944=((1.0)*cj5);
CheckValue<IkReal> x4945=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4944)))),-1);
if(!x4945.valid){
continue;
}
CheckValue<IkReal> x4946 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4944))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4945.value)))+(x4946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4947=IKcos(j4);
IkReal x4948=IKsin(j4);
IkReal x4949=((1.0)*sj0);
IkReal x4950=(cj5*r00);
IkReal x4951=(cj5*r10);
IkReal x4952=(cj5*r20);
IkReal x4953=((1.0)*x4947);
IkReal x4954=((1.0)*x4948);
IkReal x4955=(sj5*x4947);
IkReal x4956=(sj5*x4948);
evalcond[0]=((((-1.0)*x4952*x4953))+((r21*x4955))+((r22*x4948)));
evalcond[1]=((((-1.0)*r22*x4953))+(((-1.0)*x4952*x4954))+((r21*x4956)));
evalcond[2]=(cj0+((r11*x4956))+(((-1.0)*r12*x4953))+(((-1.0)*x4951*x4954)));
evalcond[3]=(((r02*x4948))+(((-1.0)*x4950*x4953))+((r01*x4955))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4949))+((r12*x4948))+((r11*x4955))+(((-1.0)*x4951*x4953)));
evalcond[5]=((((-1.0)*x4949))+(((-1.0)*r02*x4953))+(((-1.0)*x4950*x4954))+((r01*x4956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4957=((1.0)*cj5);
CheckValue<IkReal> x4958=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4957)))),-1);
if(!x4958.valid){
continue;
}
CheckValue<IkReal> x4959 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4957)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4958.value)))+(x4959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4960=IKcos(j4);
IkReal x4961=IKsin(j4);
IkReal x4962=((1.0)*sj0);
IkReal x4963=(cj5*r00);
IkReal x4964=(cj5*r10);
IkReal x4965=(cj5*r20);
IkReal x4966=((1.0)*x4960);
IkReal x4967=((1.0)*x4961);
IkReal x4968=(sj5*x4960);
IkReal x4969=(sj5*x4961);
evalcond[0]=(((r22*x4961))+(((-1.0)*x4965*x4966))+((r21*x4968)));
evalcond[1]=((((-1.0)*r22*x4966))+(((-1.0)*x4965*x4967))+((r21*x4969)));
evalcond[2]=(cj0+((r11*x4969))+(((-1.0)*r12*x4966))+(((-1.0)*x4964*x4967)));
evalcond[3]=((((-1.0)*x4963*x4966))+((r02*x4961))+((r01*x4968))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4961))+(((-1.0)*x4962))+((r11*x4968))+(((-1.0)*x4964*x4966)));
evalcond[5]=((((-1.0)*x4962))+(((-1.0)*x4963*x4967))+(((-1.0)*r02*x4966))+((r01*x4969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4970 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4970.valid){
continue;
}
CheckValue<IkReal> x4971=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4970.value)+(((1.5707963267949)*(x4971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4972=IKcos(j4);
IkReal x4973=IKsin(j4);
IkReal x4974=((1.0)*sj0);
IkReal x4975=(cj5*r00);
IkReal x4976=(cj5*r10);
IkReal x4977=(cj5*r20);
IkReal x4978=((1.0)*x4972);
IkReal x4979=((1.0)*x4973);
IkReal x4980=(sj5*x4972);
IkReal x4981=(sj5*x4973);
evalcond[0]=(((r22*x4973))+((r21*x4980))+(((-1.0)*x4977*x4978)));
evalcond[1]=(((r21*x4981))+(((-1.0)*r22*x4978))+(((-1.0)*x4977*x4979)));
evalcond[2]=(cj0+((r11*x4981))+(((-1.0)*r12*x4978))+(((-1.0)*x4976*x4979)));
evalcond[3]=(((r01*x4980))+(((-1.0)*x4975*x4978))+((r02*x4973))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x4980))+((r12*x4973))+(((-1.0)*x4974))+(((-1.0)*x4976*x4978)));
evalcond[5]=(((r01*x4981))+(((-1.0)*x4975*x4979))+(((-1.0)*x4974))+(((-1.0)*r02*x4978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4982=IKsin(j0);
IkReal x4983=IKcos(j0);
evalcond[0]=((((-0.10915)*x4982))+(((0.03275)*x4983))+(((-1.0)*px)));
evalcond[1]=((((0.03275)*x4982))+(((-1.0)*py))+(((0.10915)*x4983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4984=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4984;
j4eval[1]=IKsign(x4984);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4985=((1.0)*cj5);
IkReal x4986=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4985)));
j4eval[0]=x4986;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4985))))));
j4eval[2]=IKsign(x4986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4987=cj5*cj5;
IkReal x4988=((1.0)*r20);
IkReal x4989=(r01*r21);
IkReal x4990=(r21*sj5);
IkReal x4991=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4987*x4988))+((x4987*x4989))+(((-1.0)*x4989))+((cj5*r00*x4990)));
j4eval[0]=x4991;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4988))+((cj0*x4990)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4992=cj5*cj5;
IkReal x4993=((1.0)*r20);
IkReal x4994=(r01*r21);
IkReal x4995=(r21*sj5);
CheckValue<IkReal> x4996=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x4992*x4994))+(((-1.0)*r00*x4992*x4993))+(((-1.0)*x4994))+((cj5*r00*x4995)))),-1);
if(!x4996.valid){
continue;
}
CheckValue<IkReal> x4997 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4993))+((cj0*x4995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4996.value)))+(x4997.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4998=IKcos(j4);
IkReal x4999=IKsin(j4);
IkReal x5000=(cj5*r00);
IkReal x5001=(cj5*r10);
IkReal x5002=(cj5*r20);
IkReal x5003=((1.0)*x4998);
IkReal x5004=((1.0)*x4999);
IkReal x5005=(sj5*x4998);
IkReal x5006=(sj5*x4999);
evalcond[0]=(((r22*x4999))+(((-1.0)*x5002*x5003))+((r21*x5005)));
evalcond[1]=((((-1.0)*x5002*x5004))+((r21*x5006))+(((-1.0)*r22*x5003)));
evalcond[2]=(cj0+((r02*x4999))+(((-1.0)*x5000*x5003))+((r01*x5005)));
evalcond[3]=(sj0+((r11*x5005))+(((-1.0)*x5001*x5003))+((r12*x4999)));
evalcond[4]=(((r11*x5006))+cj0+(((-1.0)*x5001*x5004))+(((-1.0)*r12*x5003)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5000*x5004))+((r01*x5006))+(((-1.0)*r02*x5003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5007=((1.0)*cj5);
CheckValue<IkReal> x5008 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5007)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5008.valid){
continue;
}
CheckValue<IkReal> x5009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5007)))),-1);
if(!x5009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5008.value)+(((1.5707963267949)*(x5009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5010=IKcos(j4);
IkReal x5011=IKsin(j4);
IkReal x5012=(cj5*r00);
IkReal x5013=(cj5*r10);
IkReal x5014=(cj5*r20);
IkReal x5015=((1.0)*x5010);
IkReal x5016=((1.0)*x5011);
IkReal x5017=(sj5*x5010);
IkReal x5018=(sj5*x5011);
evalcond[0]=((((-1.0)*x5014*x5015))+((r21*x5017))+((r22*x5011)));
evalcond[1]=((((-1.0)*x5014*x5016))+(((-1.0)*r22*x5015))+((r21*x5018)));
evalcond[2]=(cj0+((r02*x5011))+(((-1.0)*x5012*x5015))+((r01*x5017)));
evalcond[3]=(sj0+(((-1.0)*x5013*x5015))+((r11*x5017))+((r12*x5011)));
evalcond[4]=(cj0+(((-1.0)*x5013*x5016))+(((-1.0)*r12*x5015))+((r11*x5018)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5015))+(((-1.0)*x5012*x5016))+((r01*x5018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5019 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5019.valid){
continue;
}
CheckValue<IkReal> x5020=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5019.value)+(((1.5707963267949)*(x5020.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5021=IKcos(j4);
IkReal x5022=IKsin(j4);
IkReal x5023=(cj5*r00);
IkReal x5024=(cj5*r10);
IkReal x5025=(cj5*r20);
IkReal x5026=((1.0)*x5021);
IkReal x5027=((1.0)*x5022);
IkReal x5028=(sj5*x5021);
IkReal x5029=(sj5*x5022);
evalcond[0]=((((-1.0)*x5025*x5026))+((r22*x5022))+((r21*x5028)));
evalcond[1]=((((-1.0)*x5025*x5027))+(((-1.0)*r22*x5026))+((r21*x5029)));
evalcond[2]=(((r02*x5022))+cj0+(((-1.0)*x5023*x5026))+((r01*x5028)));
evalcond[3]=(((r11*x5028))+sj0+((r12*x5022))+(((-1.0)*x5024*x5026)));
evalcond[4]=(((r11*x5029))+cj0+(((-1.0)*r12*x5026))+(((-1.0)*x5024*x5027)));
evalcond[5]=((((-1.0)*r02*x5026))+(((-1.0)*sj0))+(((-1.0)*x5023*x5027))+((r01*x5029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5030=IKsin(j0);
IkReal x5031=IKcos(j0);
IkReal x5032=(r00*sj5);
IkReal x5033=(r10*sj5);
IkReal x5034=(cj5*r11);
IkReal x5035=(cj5*r01);
evalcond[0]=((((-1.0)*x5031))+x5035+x5032);
evalcond[1]=((((-1.0)*x5030))+x5034+x5033);
evalcond[2]=((((-0.09465)*x5035))+(((-0.09465)*x5032))+(((-1.0)*px))+(((-0.10915)*x5030)));
evalcond[3]=((((-0.09465)*x5034))+(((-0.09465)*x5033))+(((0.10915)*x5031))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5036=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5036;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5036);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5037=((1.0)*cj5);
IkReal x5038=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5037)));
j4eval[0]=x5038;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5037))))));
j4eval[2]=IKsign(x5038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5039=cj5*cj5;
IkReal x5040=(r01*r11);
IkReal x5041=((1.0)*r00);
IkReal x5042=(r01*sj5);
IkReal x5043=((((-1.0)*r02*r12))+((x5039*x5040))+(((-1.0)*x5040))+(((-1.0)*r10*x5039*x5041))+((cj5*r10*x5042))+((cj5*r00*r11*sj5)));
j4eval[0]=x5043;
j4eval[1]=IKsign(x5043);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5042))+(((-1.0)*cj0*cj5*x5041))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5044=cj5*cj5;
IkReal x5045=(r01*r11);
IkReal x5046=(cj5*r00);
IkReal x5047=(r01*sj5);
CheckValue<IkReal> x5048=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+(((-1.0)*x5045))+(((-1.0)*r00*r10*x5044))+((x5044*x5045))+((cj5*r10*x5047))+((r11*sj5*x5046)))),-1);
if(!x5048.valid){
continue;
}
CheckValue<IkReal> x5049 = IKatan2WithCheck(IkReal((((cj0*x5047))+(((-1.0)*cj0*x5046)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5048.value)))+(x5049.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5050=IKcos(j4);
IkReal x5051=IKsin(j4);
IkReal x5052=(cj5*r00);
IkReal x5053=(r01*sj5);
IkReal x5054=(cj5*r10);
IkReal x5055=(cj5*r20);
IkReal x5056=((1.0)*x5050);
IkReal x5057=((1.0)*x5051);
IkReal x5058=(sj5*x5051);
IkReal x5059=(sj5*x5050);
evalcond[0]=(((x5050*x5053))+(((-1.0)*x5052*x5056))+((r02*x5051)));
evalcond[1]=((((-1.0)*x5054*x5056))+((r12*x5051))+((r11*x5059)));
evalcond[2]=(((r21*x5058))+(((-1.0)*x5055*x5057))+(((-1.0)*r22*x5056)));
evalcond[3]=((1.0)+((r21*x5059))+((r22*x5051))+(((-1.0)*x5055*x5056)));
evalcond[4]=(cj0+(((-1.0)*x5054*x5057))+(((-1.0)*r12*x5056))+((r11*x5058)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5052*x5057))+((x5051*x5053))+(((-1.0)*r02*x5056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5060=((1.0)*cj5);
CheckValue<IkReal> x5061 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5060)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5061.valid){
continue;
}
CheckValue<IkReal> x5062=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5060)))),-1);
if(!x5062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5061.value)+(((1.5707963267949)*(x5062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5063=IKcos(j4);
IkReal x5064=IKsin(j4);
IkReal x5065=(cj5*r00);
IkReal x5066=(r01*sj5);
IkReal x5067=(cj5*r10);
IkReal x5068=(cj5*r20);
IkReal x5069=((1.0)*x5063);
IkReal x5070=((1.0)*x5064);
IkReal x5071=(sj5*x5064);
IkReal x5072=(sj5*x5063);
evalcond[0]=(((x5063*x5066))+((r02*x5064))+(((-1.0)*x5065*x5069)));
evalcond[1]=(((r12*x5064))+((r11*x5072))+(((-1.0)*x5067*x5069)));
evalcond[2]=(((r21*x5071))+(((-1.0)*r22*x5069))+(((-1.0)*x5068*x5070)));
evalcond[3]=((1.0)+((r21*x5072))+((r22*x5064))+(((-1.0)*x5068*x5069)));
evalcond[4]=((((-1.0)*x5067*x5070))+cj0+(((-1.0)*r12*x5069))+((r11*x5071)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5069))+((x5064*x5066))+(((-1.0)*x5065*x5070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5073 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5073.valid){
continue;
}
CheckValue<IkReal> x5074=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5073.value)+(((1.5707963267949)*(x5074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5075=IKcos(j4);
IkReal x5076=IKsin(j4);
IkReal x5077=(cj5*r00);
IkReal x5078=(r01*sj5);
IkReal x5079=(cj5*r10);
IkReal x5080=(cj5*r20);
IkReal x5081=((1.0)*x5075);
IkReal x5082=((1.0)*x5076);
IkReal x5083=(sj5*x5076);
IkReal x5084=(sj5*x5075);
evalcond[0]=((((-1.0)*x5077*x5081))+((r02*x5076))+((x5075*x5078)));
evalcond[1]=(((r11*x5084))+(((-1.0)*x5079*x5081))+((r12*x5076)));
evalcond[2]=(((r21*x5083))+(((-1.0)*x5080*x5082))+(((-1.0)*r22*x5081)));
evalcond[3]=((1.0)+((r21*x5084))+(((-1.0)*x5080*x5081))+((r22*x5076)));
evalcond[4]=((((-1.0)*r12*x5081))+cj0+((r11*x5083))+(((-1.0)*x5079*x5082)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5077*x5082))+((x5076*x5078))+(((-1.0)*r02*x5081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5085=IKcos(j0);
IkReal x5086=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.39225)*x5085))+(((-0.10915)*x5086)));
evalcond[1]=((((0.10915)*x5085))+(((-1.0)*py))+(((-0.39225)*x5086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5087=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5087;
j4eval[1]=IKsign(x5087);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5088=((1.0)*cj5);
IkReal x5089=((((-1.0)*r11*x5088))+(((-1.0)*r10*sj5)));
j4eval[0]=x5089;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5088)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5090=cj5*cj5;
IkReal x5091=((1.0)*r20);
IkReal x5092=(r01*r21);
IkReal x5093=(r21*sj5);
IkReal x5094=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5092))+((cj5*r00*x5093))+((x5090*x5092))+(((-1.0)*r00*x5090*x5091)));
j4eval[0]=x5094;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x5093))+(((-1.0)*cj0*cj5*x5091))))));
j4eval[2]=IKsign(x5094);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5095=cj5*cj5;
IkReal x5096=((1.0)*r20);
IkReal x5097=(r01*r21);
IkReal x5098=(r21*sj5);
CheckValue<IkReal> x5099 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5098))+(((-1.0)*cj0*cj5*x5096)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5099.valid){
continue;
}
CheckValue<IkReal> x5100=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5097))+((x5095*x5097))+((cj5*r00*x5098))+(((-1.0)*r00*x5095*x5096)))),-1);
if(!x5100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5099.value)+(((1.5707963267949)*(x5100.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5101=IKcos(j4);
IkReal x5102=IKsin(j4);
IkReal x5103=(cj5*r00);
IkReal x5104=(cj5*r10);
IkReal x5105=(cj5*r20);
IkReal x5106=((1.0)*x5101);
IkReal x5107=((1.0)*x5102);
IkReal x5108=(sj5*x5101);
IkReal x5109=(sj5*x5102);
evalcond[0]=(((r22*x5102))+((r21*x5108))+(((-1.0)*x5105*x5106)));
evalcond[1]=((((-1.0)*r22*x5106))+((r21*x5109))+(((-1.0)*x5105*x5107)));
evalcond[2]=(((r01*x5108))+cj0+((r02*x5102))+(((-1.0)*x5103*x5106)));
evalcond[3]=(((r12*x5102))+sj0+(((-1.0)*x5104*x5106))+((r11*x5108)));
evalcond[4]=(cj0+(((-1.0)*x5104*x5107))+((r11*x5109))+(((-1.0)*r12*x5106)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5109))+(((-1.0)*r02*x5106))+(((-1.0)*x5103*x5107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5110=((1.0)*cj5);
CheckValue<IkReal> x5111 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5110)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5111.valid){
continue;
}
CheckValue<IkReal> x5112=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5110)))),-1);
if(!x5112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5111.value)+(((1.5707963267949)*(x5112.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5113=IKcos(j4);
IkReal x5114=IKsin(j4);
IkReal x5115=(cj5*r00);
IkReal x5116=(cj5*r10);
IkReal x5117=(cj5*r20);
IkReal x5118=((1.0)*x5113);
IkReal x5119=((1.0)*x5114);
IkReal x5120=(sj5*x5113);
IkReal x5121=(sj5*x5114);
evalcond[0]=((((-1.0)*x5117*x5118))+((r22*x5114))+((r21*x5120)));
evalcond[1]=((((-1.0)*r22*x5118))+(((-1.0)*x5117*x5119))+((r21*x5121)));
evalcond[2]=(cj0+((r02*x5114))+(((-1.0)*x5115*x5118))+((r01*x5120)));
evalcond[3]=(sj0+(((-1.0)*x5116*x5118))+((r11*x5120))+((r12*x5114)));
evalcond[4]=(cj0+(((-1.0)*x5116*x5119))+((r11*x5121))+(((-1.0)*r12*x5118)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5118))+(((-1.0)*x5115*x5119))+((r01*x5121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5122 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5122.valid){
continue;
}
CheckValue<IkReal> x5123=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5122.value)+(((1.5707963267949)*(x5123.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5124=IKcos(j4);
IkReal x5125=IKsin(j4);
IkReal x5126=(cj5*r00);
IkReal x5127=(cj5*r10);
IkReal x5128=(cj5*r20);
IkReal x5129=((1.0)*x5124);
IkReal x5130=((1.0)*x5125);
IkReal x5131=(sj5*x5124);
IkReal x5132=(sj5*x5125);
evalcond[0]=(((r22*x5125))+(((-1.0)*x5128*x5129))+((r21*x5131)));
evalcond[1]=((((-1.0)*x5128*x5130))+((r21*x5132))+(((-1.0)*r22*x5129)));
evalcond[2]=(cj0+(((-1.0)*x5126*x5129))+((r01*x5131))+((r02*x5125)));
evalcond[3]=(sj0+((r12*x5125))+((r11*x5131))+(((-1.0)*x5127*x5129)));
evalcond[4]=(cj0+((r11*x5132))+(((-1.0)*r12*x5129))+(((-1.0)*x5127*x5130)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5126*x5130))+((r01*x5132))+(((-1.0)*r02*x5129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5133=((1.0)*sj5);
IkReal x5134=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5133))+(((-1.0)*r11*x5134)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5134))+(((-1.0)*r00*x5133)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5133))+(((-1.0)*r11*x5134))))+IKsqr(((((-1.0)*r01*x5134))+(((-1.0)*r00*x5133))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5133))+(((-1.0)*r11*x5134))), ((((-1.0)*r01*x5134))+(((-1.0)*r00*x5133))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5135=IKsin(j0);
IkReal x5136=IKcos(j0);
IkReal x5137=(r00*sj5);
IkReal x5138=(r10*sj5);
IkReal x5139=(cj5*r11);
IkReal x5140=(cj5*r01);
evalcond[0]=(x5140+x5137+x5136);
evalcond[1]=(x5139+x5138+x5135);
evalcond[2]=((((-0.09465)*x5140))+(((-0.10915)*x5135))+(((-0.09465)*x5137))+(((-1.0)*px)));
evalcond[3]=((((0.10915)*x5136))+(((-0.09465)*x5139))+(((-0.09465)*x5138))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5141=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5141;
j4eval[1]=IKsign(x5141);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5142=((1.0)*cj5);
IkReal x5143=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5142)));
j4eval[0]=x5143;
j4eval[1]=IKsign(x5143);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5142))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5144=cj5*cj5;
IkReal x5145=(r01*r11);
IkReal x5146=((1.0)*r00);
IkReal x5147=(r01*sj5);
IkReal x5148=(((x5144*x5145))+(((-1.0)*r02*r12))+(((-1.0)*x5145))+(((-1.0)*r10*x5144*x5146))+((cj5*r10*x5147))+((cj5*r00*r11*sj5)));
j4eval[0]=x5148;
j4eval[1]=IKsign(x5148);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5147))+(((-1.0)*cj0*cj5*x5146))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5149=cj5*cj5;
IkReal x5150=(r01*r11);
IkReal x5151=(cj5*r00);
IkReal x5152=(r01*sj5);
CheckValue<IkReal> x5153=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5152))+(((-1.0)*r02*r12))+((x5149*x5150))+(((-1.0)*x5150))+(((-1.0)*r00*r10*x5149))+((r11*sj5*x5151)))),-1);
if(!x5153.valid){
continue;
}
CheckValue<IkReal> x5154 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5151))+((cj0*x5152)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5153.value)))+(x5154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5155=IKcos(j4);
IkReal x5156=IKsin(j4);
IkReal x5157=(cj5*r00);
IkReal x5158=(r01*sj5);
IkReal x5159=(cj5*r10);
IkReal x5160=(cj5*r20);
IkReal x5161=((1.0)*x5155);
IkReal x5162=((1.0)*x5156);
IkReal x5163=(sj5*x5156);
IkReal x5164=(sj5*x5155);
evalcond[0]=((((-1.0)*x5157*x5161))+((x5155*x5158))+((r02*x5156)));
evalcond[1]=(((r12*x5156))+(((-1.0)*x5159*x5161))+((r11*x5164)));
evalcond[2]=((((-1.0)*r22*x5161))+((r21*x5163))+(((-1.0)*x5160*x5162)));
evalcond[3]=((-1.0)+((r21*x5164))+(((-1.0)*x5160*x5161))+((r22*x5156)));
evalcond[4]=(cj0+(((-1.0)*r12*x5161))+(((-1.0)*x5159*x5162))+((r11*x5163)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5157*x5162))+(((-1.0)*r02*x5161))+((x5156*x5158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5165=((1.0)*cj5);
CheckValue<IkReal> x5166 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5165)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5166.valid){
continue;
}
CheckValue<IkReal> x5167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5165)))),-1);
if(!x5167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5166.value)+(((1.5707963267949)*(x5167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5168=IKcos(j4);
IkReal x5169=IKsin(j4);
IkReal x5170=(cj5*r00);
IkReal x5171=(r01*sj5);
IkReal x5172=(cj5*r10);
IkReal x5173=(cj5*r20);
IkReal x5174=((1.0)*x5168);
IkReal x5175=((1.0)*x5169);
IkReal x5176=(sj5*x5169);
IkReal x5177=(sj5*x5168);
evalcond[0]=((((-1.0)*x5170*x5174))+((r02*x5169))+((x5168*x5171)));
evalcond[1]=((((-1.0)*x5172*x5174))+((r12*x5169))+((r11*x5177)));
evalcond[2]=((((-1.0)*x5173*x5175))+(((-1.0)*r22*x5174))+((r21*x5176)));
evalcond[3]=((-1.0)+(((-1.0)*x5173*x5174))+((r22*x5169))+((r21*x5177)));
evalcond[4]=(cj0+(((-1.0)*x5172*x5175))+(((-1.0)*r12*x5174))+((r11*x5176)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5170*x5175))+(((-1.0)*r02*x5174))+((x5169*x5171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5178=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5178.valid){
continue;
}
CheckValue<IkReal> x5179 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5178.value)))+(x5179.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5180=IKcos(j4);
IkReal x5181=IKsin(j4);
IkReal x5182=(cj5*r00);
IkReal x5183=(r01*sj5);
IkReal x5184=(cj5*r10);
IkReal x5185=(cj5*r20);
IkReal x5186=((1.0)*x5180);
IkReal x5187=((1.0)*x5181);
IkReal x5188=(sj5*x5181);
IkReal x5189=(sj5*x5180);
evalcond[0]=((((-1.0)*x5182*x5186))+((x5180*x5183))+((r02*x5181)));
evalcond[1]=((((-1.0)*x5184*x5186))+((r11*x5189))+((r12*x5181)));
evalcond[2]=((((-1.0)*r22*x5186))+(((-1.0)*x5185*x5187))+((r21*x5188)));
evalcond[3]=((-1.0)+((r22*x5181))+(((-1.0)*x5185*x5186))+((r21*x5189)));
evalcond[4]=(cj0+(((-1.0)*x5184*x5187))+(((-1.0)*r12*x5186))+((r11*x5188)));
evalcond[5]=((((-1.0)*sj0))+((x5181*x5183))+(((-1.0)*r02*x5186))+(((-1.0)*x5182*x5187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5190=IKsin(j0);
IkReal x5191=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x5190))+(((0.39225)*x5191)));
evalcond[1]=((((0.10915)*x5191))+(((-1.0)*py))+(((0.39225)*x5190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5192=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5192;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5192);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5193=((1.0)*cj5);
IkReal x5194=((((-1.0)*r01*x5193))+(((-1.0)*r00*sj5)));
j4eval[0]=x5194;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5193)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5194);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5195=((1.0)*cj5);
IkReal x5196=((((-1.0)*r01*x5195))+(((-1.0)*r00*sj5)));
j4eval[0]=x5196;
j4eval[1]=IKsign(x5196);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5195))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5197=((1.0)*cj5);
CheckValue<IkReal> x5198 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5197)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5198.valid){
continue;
}
CheckValue<IkReal> x5199=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5197))+(((-1.0)*r00*sj5)))),-1);
if(!x5199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5198.value)+(((1.5707963267949)*(x5199.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5200=IKcos(j4);
IkReal x5201=IKsin(j4);
IkReal x5202=((1.0)*sj0);
IkReal x5203=(cj5*r00);
IkReal x5204=(cj5*r10);
IkReal x5205=(cj5*r20);
IkReal x5206=((1.0)*x5200);
IkReal x5207=((1.0)*x5201);
IkReal x5208=(sj5*x5200);
IkReal x5209=(sj5*x5201);
evalcond[0]=(((r22*x5201))+(((-1.0)*x5205*x5206))+((r21*x5208)));
evalcond[1]=((((-1.0)*r22*x5206))+(((-1.0)*x5205*x5207))+((r21*x5209)));
evalcond[2]=(cj0+((r11*x5209))+(((-1.0)*x5204*x5207))+(((-1.0)*r12*x5206)));
evalcond[3]=((((-1.0)*x5203*x5206))+((r01*x5208))+((r02*x5201))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5202))+((r11*x5208))+((r12*x5201))+(((-1.0)*x5204*x5206)));
evalcond[5]=((((-1.0)*x5202))+(((-1.0)*x5203*x5207))+(((-1.0)*r02*x5206))+((r01*x5209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5210=((1.0)*cj5);
CheckValue<IkReal> x5211 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5211.valid){
continue;
}
CheckValue<IkReal> x5212=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5210)))),-1);
if(!x5212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5211.value)+(((1.5707963267949)*(x5212.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5213=IKcos(j4);
IkReal x5214=IKsin(j4);
IkReal x5215=((1.0)*sj0);
IkReal x5216=(cj5*r00);
IkReal x5217=(cj5*r10);
IkReal x5218=(cj5*r20);
IkReal x5219=((1.0)*x5213);
IkReal x5220=((1.0)*x5214);
IkReal x5221=(sj5*x5213);
IkReal x5222=(sj5*x5214);
evalcond[0]=(((r21*x5221))+(((-1.0)*x5218*x5219))+((r22*x5214)));
evalcond[1]=(((r21*x5222))+(((-1.0)*x5218*x5220))+(((-1.0)*r22*x5219)));
evalcond[2]=(cj0+(((-1.0)*x5217*x5220))+((r11*x5222))+(((-1.0)*r12*x5219)));
evalcond[3]=(((r02*x5214))+((r01*x5221))+(((-1.0)*cj0))+(((-1.0)*x5216*x5219)));
evalcond[4]=((((-1.0)*x5217*x5219))+(((-1.0)*x5215))+((r12*x5214))+((r11*x5221)));
evalcond[5]=((((-1.0)*x5215))+(((-1.0)*x5216*x5220))+((r01*x5222))+(((-1.0)*r02*x5219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5223 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5223.valid){
continue;
}
CheckValue<IkReal> x5224=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5223.value)+(((1.5707963267949)*(x5224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5225=IKcos(j4);
IkReal x5226=IKsin(j4);
IkReal x5227=((1.0)*sj0);
IkReal x5228=(cj5*r00);
IkReal x5229=(cj5*r10);
IkReal x5230=(cj5*r20);
IkReal x5231=((1.0)*x5225);
IkReal x5232=((1.0)*x5226);
IkReal x5233=(sj5*x5225);
IkReal x5234=(sj5*x5226);
evalcond[0]=(((r22*x5226))+((r21*x5233))+(((-1.0)*x5230*x5231)));
evalcond[1]=((((-1.0)*r22*x5231))+((r21*x5234))+(((-1.0)*x5230*x5232)));
evalcond[2]=(cj0+((r11*x5234))+(((-1.0)*r12*x5231))+(((-1.0)*x5229*x5232)));
evalcond[3]=(((r02*x5226))+((r01*x5233))+(((-1.0)*x5228*x5231))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5233))+(((-1.0)*x5229*x5231))+(((-1.0)*x5227))+((r12*x5226)));
evalcond[5]=((((-1.0)*r02*x5231))+((r01*x5234))+(((-1.0)*x5228*x5232))+(((-1.0)*x5227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5235=IKcos(j0);
IkReal x5236=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x5235))+(((-0.10915)*x5236)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x5235))+(((-0.81725)*x5236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5237=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5237;
j4eval[1]=IKsign(x5237);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5238=((1.0)*cj5);
IkReal x5239=((((-1.0)*r11*x5238))+(((-1.0)*r10*sj5)));
j4eval[0]=x5239;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5238))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5239);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5240=cj5*cj5;
IkReal x5241=((1.0)*r20);
IkReal x5242=(r01*r21);
IkReal x5243=(r21*sj5);
IkReal x5244=(((cj5*r01*r20*sj5))+((x5240*x5242))+(((-1.0)*r02*r22))+(((-1.0)*x5242))+(((-1.0)*r00*x5240*x5241))+((cj5*r00*x5243)));
j4eval[0]=x5244;
j4eval[1]=((IKabs((((cj0*x5243))+(((-1.0)*cj0*cj5*x5241)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5245=cj5*cj5;
IkReal x5246=((1.0)*r20);
IkReal x5247=(r01*r21);
IkReal x5248=(r21*sj5);
CheckValue<IkReal> x5249 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5248))+(((-1.0)*cj0*cj5*x5246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5249.valid){
continue;
}
CheckValue<IkReal> x5250=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x5245*x5247))+(((-1.0)*r02*r22))+(((-1.0)*x5247))+((cj5*r00*x5248))+(((-1.0)*r00*x5245*x5246)))),-1);
if(!x5250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5249.value)+(((1.5707963267949)*(x5250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5251=IKcos(j4);
IkReal x5252=IKsin(j4);
IkReal x5253=(cj5*r00);
IkReal x5254=(cj5*r10);
IkReal x5255=(cj5*r20);
IkReal x5256=((1.0)*x5251);
IkReal x5257=((1.0)*x5252);
IkReal x5258=(sj5*x5251);
IkReal x5259=(sj5*x5252);
evalcond[0]=(((r22*x5252))+(((-1.0)*x5255*x5256))+((r21*x5258)));
evalcond[1]=((((-1.0)*x5255*x5257))+((r21*x5259))+(((-1.0)*r22*x5256)));
evalcond[2]=(((r01*x5258))+cj0+(((-1.0)*x5253*x5256))+((r02*x5252)));
evalcond[3]=(sj0+((r12*x5252))+(((-1.0)*x5254*x5256))+((r11*x5258)));
evalcond[4]=(cj0+(((-1.0)*x5254*x5257))+(((-1.0)*r12*x5256))+((r11*x5259)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5256))+((r01*x5259))+(((-1.0)*x5253*x5257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5260=((1.0)*cj5);
CheckValue<IkReal> x5261=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5260)))),-1);
if(!x5261.valid){
continue;
}
CheckValue<IkReal> x5262 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5260)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5261.value)))+(x5262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5263=IKcos(j4);
IkReal x5264=IKsin(j4);
IkReal x5265=(cj5*r00);
IkReal x5266=(cj5*r10);
IkReal x5267=(cj5*r20);
IkReal x5268=((1.0)*x5263);
IkReal x5269=((1.0)*x5264);
IkReal x5270=(sj5*x5263);
IkReal x5271=(sj5*x5264);
evalcond[0]=(((r21*x5270))+(((-1.0)*x5267*x5268))+((r22*x5264)));
evalcond[1]=(((r21*x5271))+(((-1.0)*x5267*x5269))+(((-1.0)*r22*x5268)));
evalcond[2]=(((r02*x5264))+cj0+((r01*x5270))+(((-1.0)*x5265*x5268)));
evalcond[3]=(sj0+((r12*x5264))+(((-1.0)*x5266*x5268))+((r11*x5270)));
evalcond[4]=(cj0+(((-1.0)*r12*x5268))+(((-1.0)*x5266*x5269))+((r11*x5271)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5268))+((r01*x5271))+(((-1.0)*x5265*x5269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5272 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5272.valid){
continue;
}
CheckValue<IkReal> x5273=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5272.value)+(((1.5707963267949)*(x5273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5274=IKcos(j4);
IkReal x5275=IKsin(j4);
IkReal x5276=(cj5*r00);
IkReal x5277=(cj5*r10);
IkReal x5278=(cj5*r20);
IkReal x5279=((1.0)*x5274);
IkReal x5280=((1.0)*x5275);
IkReal x5281=(sj5*x5274);
IkReal x5282=(sj5*x5275);
evalcond[0]=(((r22*x5275))+(((-1.0)*x5278*x5279))+((r21*x5281)));
evalcond[1]=((((-1.0)*x5278*x5280))+((r21*x5282))+(((-1.0)*r22*x5279)));
evalcond[2]=(((r02*x5275))+cj0+(((-1.0)*x5276*x5279))+((r01*x5281)));
evalcond[3]=(sj0+(((-1.0)*x5277*x5279))+((r11*x5281))+((r12*x5275)));
evalcond[4]=(cj0+(((-1.0)*r12*x5279))+(((-1.0)*x5277*x5280))+((r11*x5282)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5276*x5280))+((r01*x5282))+(((-1.0)*r02*x5279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5283=IKcos(j0);
IkReal x5284=IKsin(j0);
evalcond[0]=((((-0.03275)*x5283))+(((-1.0)*px))+(((-0.10915)*x5284)));
evalcond[1]=((((-0.03275)*x5284))+(((-1.0)*py))+(((0.10915)*x5283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5285=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5285;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5285);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5286=((1.0)*cj5);
IkReal x5287=((((-1.0)*r01*x5286))+(((-1.0)*r00*sj5)));
j4eval[0]=x5287;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5286))))));
j4eval[2]=IKsign(x5287);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5288=((1.0)*cj5);
IkReal x5289=((((-1.0)*r01*x5288))+(((-1.0)*r00*sj5)));
j4eval[0]=x5289;
j4eval[1]=IKsign(x5289);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5288))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5290=((1.0)*cj5);
CheckValue<IkReal> x5291 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5290)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5291.valid){
continue;
}
CheckValue<IkReal> x5292=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5290))+(((-1.0)*r00*sj5)))),-1);
if(!x5292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5291.value)+(((1.5707963267949)*(x5292.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5293=IKcos(j4);
IkReal x5294=IKsin(j4);
IkReal x5295=((1.0)*sj0);
IkReal x5296=(cj5*r00);
IkReal x5297=(cj5*r10);
IkReal x5298=(cj5*r20);
IkReal x5299=((1.0)*x5293);
IkReal x5300=((1.0)*x5294);
IkReal x5301=(sj5*x5293);
IkReal x5302=(sj5*x5294);
evalcond[0]=(((r21*x5301))+((r22*x5294))+(((-1.0)*x5298*x5299)));
evalcond[1]=(((r21*x5302))+(((-1.0)*r22*x5299))+(((-1.0)*x5298*x5300)));
evalcond[2]=((((-1.0)*x5297*x5300))+cj0+(((-1.0)*r12*x5299))+((r11*x5302)));
evalcond[3]=(((r02*x5294))+(((-1.0)*x5296*x5299))+((r01*x5301))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5294))+(((-1.0)*x5295))+(((-1.0)*x5297*x5299))+((r11*x5301)));
evalcond[5]=((((-1.0)*x5296*x5300))+(((-1.0)*x5295))+(((-1.0)*r02*x5299))+((r01*x5302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5303=((1.0)*cj5);
CheckValue<IkReal> x5304 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5303)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5304.valid){
continue;
}
CheckValue<IkReal> x5305=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5303)))),-1);
if(!x5305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5304.value)+(((1.5707963267949)*(x5305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5306=IKcos(j4);
IkReal x5307=IKsin(j4);
IkReal x5308=((1.0)*sj0);
IkReal x5309=(cj5*r00);
IkReal x5310=(cj5*r10);
IkReal x5311=(cj5*r20);
IkReal x5312=((1.0)*x5306);
IkReal x5313=((1.0)*x5307);
IkReal x5314=(sj5*x5306);
IkReal x5315=(sj5*x5307);
evalcond[0]=(((r21*x5314))+((r22*x5307))+(((-1.0)*x5311*x5312)));
evalcond[1]=(((r21*x5315))+(((-1.0)*r22*x5312))+(((-1.0)*x5311*x5313)));
evalcond[2]=((((-1.0)*x5310*x5313))+(((-1.0)*r12*x5312))+cj0+((r11*x5315)));
evalcond[3]=(((r01*x5314))+((r02*x5307))+(((-1.0)*x5309*x5312))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5310*x5312))+(((-1.0)*x5308))+((r12*x5307))+((r11*x5314)));
evalcond[5]=(((r01*x5315))+(((-1.0)*x5308))+(((-1.0)*x5309*x5313))+(((-1.0)*r02*x5312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5316 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5316.valid){
continue;
}
CheckValue<IkReal> x5317=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5316.value)+(((1.5707963267949)*(x5317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5318=IKcos(j4);
IkReal x5319=IKsin(j4);
IkReal x5320=((1.0)*sj0);
IkReal x5321=(cj5*r00);
IkReal x5322=(cj5*r10);
IkReal x5323=(cj5*r20);
IkReal x5324=((1.0)*x5318);
IkReal x5325=((1.0)*x5319);
IkReal x5326=(sj5*x5318);
IkReal x5327=(sj5*x5319);
evalcond[0]=(((r22*x5319))+(((-1.0)*x5323*x5324))+((r21*x5326)));
evalcond[1]=((((-1.0)*x5323*x5325))+(((-1.0)*r22*x5324))+((r21*x5327)));
evalcond[2]=(((r11*x5327))+cj0+(((-1.0)*x5322*x5325))+(((-1.0)*r12*x5324)));
evalcond[3]=((((-1.0)*x5321*x5324))+((r02*x5319))+((r01*x5326))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5326))+(((-1.0)*x5322*x5324))+(((-1.0)*x5320))+((r12*x5319)));
evalcond[5]=((((-1.0)*x5321*x5325))+(((-1.0)*r02*x5324))+((r01*x5327))+(((-1.0)*x5320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5328=((1.0)*sj5);
IkReal x5329=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5329))+(((-1.0)*r10*x5328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5328))+(((-1.0)*r01*x5329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5329))+(((-1.0)*r10*x5328))))+IKsqr(((((-1.0)*r00*x5328))+(((-1.0)*r01*x5329))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5329))+(((-1.0)*r10*x5328))), ((((-1.0)*r00*x5328))+(((-1.0)*r01*x5329))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5330=IKsin(j0);
IkReal x5331=IKcos(j0);
IkReal x5332=(r00*sj5);
IkReal x5333=(r10*sj5);
IkReal x5334=(cj5*r11);
IkReal x5335=(cj5*r01);
evalcond[0]=(x5331+x5332+x5335);
evalcond[1]=(x5330+x5333+x5334);
evalcond[2]=((((-1.0)*px))+(((-0.09465)*x5332))+(((-0.09465)*x5335))+(((-0.10915)*x5330)));
evalcond[3]=((((-1.0)*py))+(((0.10915)*x5331))+(((-0.09465)*x5334))+(((-0.09465)*x5333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5336=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5336;
j4eval[1]=IKsign(x5336);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5337=((1.0)*cj5);
IkReal x5338=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5337)));
j4eval[0]=x5338;
j4eval[1]=IKsign(x5338);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5337))+((r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5339=cj5*cj5;
IkReal x5340=(r01*r11);
IkReal x5341=((1.0)*r00);
IkReal x5342=(r01*sj5);
IkReal x5343=(((cj5*r10*x5342))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5339*x5341))+((x5339*x5340))+(((-1.0)*x5340))+((cj5*r00*r11*sj5)));
j4eval[0]=x5343;
j4eval[1]=IKsign(x5343);
j4eval[2]=((IKabs((((cj0*x5342))+(((-1.0)*cj0*cj5*x5341)))))+(IKabs((cj0*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5344=cj5*cj5;
IkReal x5345=(r01*r11);
IkReal x5346=(cj5*r00);
IkReal x5347=(r01*sj5);
CheckValue<IkReal> x5348 = IKatan2WithCheck(IkReal((((cj0*x5347))+(((-1.0)*cj0*x5346)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5348.valid){
continue;
}
CheckValue<IkReal> x5349=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5347))+(((-1.0)*r00*r10*x5344))+(((-1.0)*r02*r12))+((r11*sj5*x5346))+((x5344*x5345))+(((-1.0)*x5345)))),-1);
if(!x5349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5348.value)+(((1.5707963267949)*(x5349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5350=IKcos(j4);
IkReal x5351=IKsin(j4);
IkReal x5352=(cj5*r00);
IkReal x5353=(r01*sj5);
IkReal x5354=(cj5*r10);
IkReal x5355=(cj5*r20);
IkReal x5356=((1.0)*x5350);
IkReal x5357=((1.0)*x5351);
IkReal x5358=(sj5*x5351);
IkReal x5359=(sj5*x5350);
evalcond[0]=((((-1.0)*x5352*x5356))+((r02*x5351))+((x5350*x5353)));
evalcond[1]=(((r11*x5359))+(((-1.0)*x5354*x5356))+((r12*x5351)));
evalcond[2]=((((-1.0)*x5355*x5357))+(((-1.0)*r22*x5356))+((r21*x5358)));
evalcond[3]=((-1.0)+(((-1.0)*x5355*x5356))+((r22*x5351))+((r21*x5359)));
evalcond[4]=(cj0+((r11*x5358))+(((-1.0)*r12*x5356))+(((-1.0)*x5354*x5357)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5356))+(((-1.0)*x5352*x5357))+((x5351*x5353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5360=((1.0)*cj5);
CheckValue<IkReal> x5361=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5360)))),-1);
if(!x5361.valid){
continue;
}
CheckValue<IkReal> x5362 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5360)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5361.value)))+(x5362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5363=IKcos(j4);
IkReal x5364=IKsin(j4);
IkReal x5365=(cj5*r00);
IkReal x5366=(r01*sj5);
IkReal x5367=(cj5*r10);
IkReal x5368=(cj5*r20);
IkReal x5369=((1.0)*x5363);
IkReal x5370=((1.0)*x5364);
IkReal x5371=(sj5*x5364);
IkReal x5372=(sj5*x5363);
evalcond[0]=(((r02*x5364))+(((-1.0)*x5365*x5369))+((x5363*x5366)));
evalcond[1]=(((r12*x5364))+(((-1.0)*x5367*x5369))+((r11*x5372)));
evalcond[2]=((((-1.0)*r22*x5369))+((r21*x5371))+(((-1.0)*x5368*x5370)));
evalcond[3]=((-1.0)+((r22*x5364))+((r21*x5372))+(((-1.0)*x5368*x5369)));
evalcond[4]=(cj0+(((-1.0)*x5367*x5370))+((r11*x5371))+(((-1.0)*r12*x5369)));
evalcond[5]=((((-1.0)*sj0))+((x5364*x5366))+(((-1.0)*r02*x5369))+(((-1.0)*x5365*x5370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5373=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5373.valid){
continue;
}
CheckValue<IkReal> x5374 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5373.value)))+(x5374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5375=IKcos(j4);
IkReal x5376=IKsin(j4);
IkReal x5377=(cj5*r00);
IkReal x5378=(r01*sj5);
IkReal x5379=(cj5*r10);
IkReal x5380=(cj5*r20);
IkReal x5381=((1.0)*x5375);
IkReal x5382=((1.0)*x5376);
IkReal x5383=(sj5*x5376);
IkReal x5384=(sj5*x5375);
evalcond[0]=(((r02*x5376))+(((-1.0)*x5377*x5381))+((x5375*x5378)));
evalcond[1]=(((r11*x5384))+(((-1.0)*x5379*x5381))+((r12*x5376)));
evalcond[2]=((((-1.0)*x5380*x5382))+(((-1.0)*r22*x5381))+((r21*x5383)));
evalcond[3]=((-1.0)+((r22*x5376))+(((-1.0)*x5380*x5381))+((r21*x5384)));
evalcond[4]=(cj0+((r11*x5383))+(((-1.0)*x5379*x5382))+(((-1.0)*r12*x5381)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5381))+((x5376*x5378))+(((-1.0)*x5377*x5382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5385=IKsin(j0);
IkReal x5386=IKcos(j0);
evalcond[0]=((((-0.10915)*x5385))+(((0.39225)*x5386))+(((-1.0)*px)));
evalcond[1]=((((0.39225)*x5385))+(((0.10915)*x5386))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5387=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5387;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5387);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5388=((1.0)*cj5);
IkReal x5389=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5388)));
j4eval[0]=x5389;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5388))))));
j4eval[2]=IKsign(x5389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5390=((1.0)*cj5);
IkReal x5391=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5390)));
j4eval[0]=x5391;
j4eval[1]=IKsign(x5391);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5390))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5392=((1.0)*cj5);
CheckValue<IkReal> x5393=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5392)))),-1);
if(!x5393.valid){
continue;
}
CheckValue<IkReal> x5394 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5392))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5393.value)))+(x5394.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5395=IKcos(j4);
IkReal x5396=IKsin(j4);
IkReal x5397=((1.0)*sj0);
IkReal x5398=(cj5*r00);
IkReal x5399=(cj5*r10);
IkReal x5400=(cj5*r20);
IkReal x5401=((1.0)*x5395);
IkReal x5402=((1.0)*x5396);
IkReal x5403=(sj5*x5395);
IkReal x5404=(sj5*x5396);
evalcond[0]=(((r21*x5403))+((r22*x5396))+(((-1.0)*x5400*x5401)));
evalcond[1]=(((r21*x5404))+(((-1.0)*x5400*x5402))+(((-1.0)*r22*x5401)));
evalcond[2]=(cj0+(((-1.0)*x5399*x5402))+(((-1.0)*r12*x5401))+((r11*x5404)));
evalcond[3]=(((r02*x5396))+(((-1.0)*x5398*x5401))+((r01*x5403))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5399*x5401))+((r12*x5396))+(((-1.0)*x5397))+((r11*x5403)));
evalcond[5]=((((-1.0)*x5398*x5402))+(((-1.0)*r02*x5401))+(((-1.0)*x5397))+((r01*x5404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5405=((1.0)*cj5);
CheckValue<IkReal> x5406=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5405))+(((-1.0)*r00*sj5)))),-1);
if(!x5406.valid){
continue;
}
CheckValue<IkReal> x5407 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5405))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5406.value)))+(x5407.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5408=IKcos(j4);
IkReal x5409=IKsin(j4);
IkReal x5410=((1.0)*sj0);
IkReal x5411=(cj5*r00);
IkReal x5412=(cj5*r10);
IkReal x5413=(cj5*r20);
IkReal x5414=((1.0)*x5408);
IkReal x5415=((1.0)*x5409);
IkReal x5416=(sj5*x5408);
IkReal x5417=(sj5*x5409);
evalcond[0]=(((r22*x5409))+((r21*x5416))+(((-1.0)*x5413*x5414)));
evalcond[1]=((((-1.0)*r22*x5414))+((r21*x5417))+(((-1.0)*x5413*x5415)));
evalcond[2]=((((-1.0)*x5412*x5415))+((r11*x5417))+cj0+(((-1.0)*r12*x5414)));
evalcond[3]=(((r02*x5409))+((r01*x5416))+(((-1.0)*x5411*x5414))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5409))+(((-1.0)*x5412*x5414))+((r11*x5416))+(((-1.0)*x5410)));
evalcond[5]=((((-1.0)*r02*x5414))+(((-1.0)*x5410))+((r01*x5417))+(((-1.0)*x5411*x5415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5418 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5418.valid){
continue;
}
CheckValue<IkReal> x5419=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5418.value)+(((1.5707963267949)*(x5419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5420=IKcos(j4);
IkReal x5421=IKsin(j4);
IkReal x5422=((1.0)*sj0);
IkReal x5423=(cj5*r00);
IkReal x5424=(cj5*r10);
IkReal x5425=(cj5*r20);
IkReal x5426=((1.0)*x5420);
IkReal x5427=((1.0)*x5421);
IkReal x5428=(sj5*x5420);
IkReal x5429=(sj5*x5421);
evalcond[0]=(((r22*x5421))+((r21*x5428))+(((-1.0)*x5425*x5426)));
evalcond[1]=(((r21*x5429))+(((-1.0)*x5425*x5427))+(((-1.0)*r22*x5426)));
evalcond[2]=(cj0+(((-1.0)*x5424*x5427))+((r11*x5429))+(((-1.0)*r12*x5426)));
evalcond[3]=(((r01*x5428))+((r02*x5421))+(((-1.0)*cj0))+(((-1.0)*x5423*x5426)));
evalcond[4]=((((-1.0)*x5422))+((r12*x5421))+(((-1.0)*x5424*x5426))+((r11*x5428)));
evalcond[5]=((((-1.0)*x5422))+((r01*x5429))+(((-1.0)*r02*x5426))+(((-1.0)*x5423*x5427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5430=IKsin(j0);
IkReal x5431=IKcos(j0);
IkReal x5432=(r00*sj5);
IkReal x5433=(r10*sj5);
IkReal x5434=(cj5*r11);
IkReal x5435=(cj5*r01);
evalcond[0]=(x5432+x5435+(((-1.0)*x5431)));
evalcond[1]=(x5433+x5434+(((-1.0)*x5430)));
evalcond[2]=((((-0.10915)*x5430))+(((-0.09465)*x5435))+(((-0.09465)*x5432))+(((-1.0)*px)));
evalcond[3]=((((-0.09465)*x5433))+(((-0.09465)*x5434))+(((-1.0)*py))+(((0.10915)*x5431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5436=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5436;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5436);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5437=((1.0)*cj5);
IkReal x5438=((((-1.0)*r01*x5437))+(((-1.0)*r00*sj5)));
j4eval[0]=x5438;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5437))))));
j4eval[2]=IKsign(x5438);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5439=cj5*cj5;
IkReal x5440=(r01*r11);
IkReal x5441=((1.0)*r00);
IkReal x5442=(r01*sj5);
IkReal x5443=((((-1.0)*x5440))+(((-1.0)*r02*r12))+((cj5*r10*x5442))+((x5439*x5440))+(((-1.0)*r10*x5439*x5441))+((cj5*r00*r11*sj5)));
j4eval[0]=x5443;
j4eval[1]=IKsign(x5443);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5441))+((cj0*x5442))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5444=cj5*cj5;
IkReal x5445=(r01*r11);
IkReal x5446=(cj5*r00);
IkReal x5447=(r01*sj5);
CheckValue<IkReal> x5448 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5446))+((cj0*x5447)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5448.valid){
continue;
}
CheckValue<IkReal> x5449=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5445))+(((-1.0)*r02*r12))+((x5444*x5445))+((cj5*r10*x5447))+(((-1.0)*r00*r10*x5444))+((r11*sj5*x5446)))),-1);
if(!x5449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5448.value)+(((1.5707963267949)*(x5449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5450=IKcos(j4);
IkReal x5451=IKsin(j4);
IkReal x5452=(cj5*r00);
IkReal x5453=(r01*sj5);
IkReal x5454=(cj5*r10);
IkReal x5455=(cj5*r20);
IkReal x5456=((1.0)*x5450);
IkReal x5457=((1.0)*x5451);
IkReal x5458=(sj5*x5451);
IkReal x5459=(sj5*x5450);
evalcond[0]=((((-1.0)*x5452*x5456))+((r02*x5451))+((x5450*x5453)));
evalcond[1]=(((r12*x5451))+(((-1.0)*x5454*x5456))+((r11*x5459)));
evalcond[2]=((((-1.0)*x5455*x5457))+((r21*x5458))+(((-1.0)*r22*x5456)));
evalcond[3]=((1.0)+(((-1.0)*x5455*x5456))+((r21*x5459))+((r22*x5451)));
evalcond[4]=((((-1.0)*r12*x5456))+(((-1.0)*x5454*x5457))+cj0+((r11*x5458)));
evalcond[5]=((((-1.0)*x5452*x5457))+(((-1.0)*sj0))+(((-1.0)*r02*x5456))+((x5451*x5453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5460=((1.0)*cj5);
CheckValue<IkReal> x5461 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5460))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5461.valid){
continue;
}
CheckValue<IkReal> x5462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5460))+(((-1.0)*r00*sj5)))),-1);
if(!x5462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5461.value)+(((1.5707963267949)*(x5462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5463=IKcos(j4);
IkReal x5464=IKsin(j4);
IkReal x5465=(cj5*r00);
IkReal x5466=(r01*sj5);
IkReal x5467=(cj5*r10);
IkReal x5468=(cj5*r20);
IkReal x5469=((1.0)*x5463);
IkReal x5470=((1.0)*x5464);
IkReal x5471=(sj5*x5464);
IkReal x5472=(sj5*x5463);
evalcond[0]=(((r02*x5464))+((x5463*x5466))+(((-1.0)*x5465*x5469)));
evalcond[1]=((((-1.0)*x5467*x5469))+((r12*x5464))+((r11*x5472)));
evalcond[2]=((((-1.0)*x5468*x5470))+((r21*x5471))+(((-1.0)*r22*x5469)));
evalcond[3]=((1.0)+((r22*x5464))+(((-1.0)*x5468*x5469))+((r21*x5472)));
evalcond[4]=(cj0+(((-1.0)*x5467*x5470))+(((-1.0)*r12*x5469))+((r11*x5471)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5469))+(((-1.0)*x5465*x5470))+((x5464*x5466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5473 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5473.valid){
continue;
}
CheckValue<IkReal> x5474=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5473.value)+(((1.5707963267949)*(x5474.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5475=IKcos(j4);
IkReal x5476=IKsin(j4);
IkReal x5477=(cj5*r00);
IkReal x5478=(r01*sj5);
IkReal x5479=(cj5*r10);
IkReal x5480=(cj5*r20);
IkReal x5481=((1.0)*x5475);
IkReal x5482=((1.0)*x5476);
IkReal x5483=(sj5*x5476);
IkReal x5484=(sj5*x5475);
evalcond[0]=(((x5475*x5478))+(((-1.0)*x5477*x5481))+((r02*x5476)));
evalcond[1]=((((-1.0)*x5479*x5481))+((r11*x5484))+((r12*x5476)));
evalcond[2]=((((-1.0)*r22*x5481))+((r21*x5483))+(((-1.0)*x5480*x5482)));
evalcond[3]=((1.0)+((r21*x5484))+((r22*x5476))+(((-1.0)*x5480*x5481)));
evalcond[4]=((((-1.0)*x5479*x5482))+(((-1.0)*r12*x5481))+cj0+((r11*x5483)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5477*x5482))+(((-1.0)*r02*x5481))+((x5476*x5478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5485=IKcos(j0);
IkReal x5486=IKsin(j0);
evalcond[0]=((((-0.39225)*x5485))+(((-0.10915)*x5486))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x5485))+(((-0.39225)*x5486))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5487=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5487;
j4eval[1]=IKsign(x5487);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5488=((1.0)*cj5);
IkReal x5489=((((-1.0)*r11*x5488))+(((-1.0)*r10*sj5)));
j4eval[0]=x5489;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5488)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5489);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5490=cj5*cj5;
IkReal x5491=((1.0)*r20);
IkReal x5492=(r01*r21);
IkReal x5493=(r21*sj5);
IkReal x5494=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5490*x5491))+((cj5*r00*x5493))+(((-1.0)*x5492))+((x5490*x5492)));
j4eval[0]=x5494;
j4eval[1]=((IKabs((((cj0*x5493))+(((-1.0)*cj0*cj5*x5491)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5494);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5495=cj5*cj5;
IkReal x5496=((1.0)*r20);
IkReal x5497=(r01*r21);
IkReal x5498=(r21*sj5);
CheckValue<IkReal> x5499 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5498))+(((-1.0)*cj0*cj5*x5496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5499.valid){
continue;
}
CheckValue<IkReal> x5500=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x5495*x5497))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5495*x5496))+((cj5*r00*x5498))+(((-1.0)*x5497)))),-1);
if(!x5500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5499.value)+(((1.5707963267949)*(x5500.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5501=IKcos(j4);
IkReal x5502=IKsin(j4);
IkReal x5503=(cj5*r00);
IkReal x5504=(cj5*r10);
IkReal x5505=(cj5*r20);
IkReal x5506=((1.0)*x5501);
IkReal x5507=((1.0)*x5502);
IkReal x5508=(sj5*x5501);
IkReal x5509=(sj5*x5502);
evalcond[0]=(((r21*x5508))+((r22*x5502))+(((-1.0)*x5505*x5506)));
evalcond[1]=((((-1.0)*r22*x5506))+((r21*x5509))+(((-1.0)*x5505*x5507)));
evalcond[2]=((((-1.0)*x5503*x5506))+cj0+((r02*x5502))+((r01*x5508)));
evalcond[3]=(sj0+((r12*x5502))+(((-1.0)*x5504*x5506))+((r11*x5508)));
evalcond[4]=(cj0+(((-1.0)*r12*x5506))+(((-1.0)*x5504*x5507))+((r11*x5509)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5503*x5507))+(((-1.0)*r02*x5506))+((r01*x5509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5510=((1.0)*cj5);
CheckValue<IkReal> x5511=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5510)))),-1);
if(!x5511.valid){
continue;
}
CheckValue<IkReal> x5512 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5510)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5511.value)))+(x5512.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5513=IKcos(j4);
IkReal x5514=IKsin(j4);
IkReal x5515=(cj5*r00);
IkReal x5516=(cj5*r10);
IkReal x5517=(cj5*r20);
IkReal x5518=((1.0)*x5513);
IkReal x5519=((1.0)*x5514);
IkReal x5520=(sj5*x5513);
IkReal x5521=(sj5*x5514);
evalcond[0]=(((r21*x5520))+((r22*x5514))+(((-1.0)*x5517*x5518)));
evalcond[1]=((((-1.0)*r22*x5518))+((r21*x5521))+(((-1.0)*x5517*x5519)));
evalcond[2]=(cj0+((r02*x5514))+(((-1.0)*x5515*x5518))+((r01*x5520)));
evalcond[3]=(sj0+((r12*x5514))+((r11*x5520))+(((-1.0)*x5516*x5518)));
evalcond[4]=(cj0+(((-1.0)*r12*x5518))+((r11*x5521))+(((-1.0)*x5516*x5519)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5518))+(((-1.0)*x5515*x5519))+((r01*x5521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5522 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5522.valid){
continue;
}
CheckValue<IkReal> x5523=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5522.value)+(((1.5707963267949)*(x5523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5524=IKcos(j4);
IkReal x5525=IKsin(j4);
IkReal x5526=(cj5*r00);
IkReal x5527=(cj5*r10);
IkReal x5528=(cj5*r20);
IkReal x5529=((1.0)*x5524);
IkReal x5530=((1.0)*x5525);
IkReal x5531=(sj5*x5524);
IkReal x5532=(sj5*x5525);
evalcond[0]=((((-1.0)*x5528*x5529))+((r22*x5525))+((r21*x5531)));
evalcond[1]=((((-1.0)*r22*x5529))+(((-1.0)*x5528*x5530))+((r21*x5532)));
evalcond[2]=(((r02*x5525))+cj0+(((-1.0)*x5526*x5529))+((r01*x5531)));
evalcond[3]=((((-1.0)*x5527*x5529))+sj0+((r11*x5531))+((r12*x5525)));
evalcond[4]=(cj0+(((-1.0)*x5527*x5530))+((r11*x5532))+(((-1.0)*r12*x5529)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5529))+(((-1.0)*x5526*x5530))+((r01*x5532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5533=cj1*cj1;
IkReal x5534=(cj1*sj1);
IkReal x5535=(cj5*r01);
IkReal x5536=(r00*sj5);
IkReal x5537=(r10*sj5);
IkReal x5538=(cj5*r11);
IkReal x5539=(cj1*sj2);
IkReal x5540=((20000.0)*py);
IkReal x5541=(cj2*sj1);
IkReal x5542=((1893.0)*x5541);
IkReal x5543=(sj2*x5533);
CheckValue<IkReal> x5544=IKPowWithIntegerCheck(((((-15690.0)*x5534*(cj2*cj2)))+(((-8500.0)*cj2*x5534))+(((7845.0)*x5534))+(((-8500.0)*x5543))+(((-15690.0)*cj2*x5543))+(((7845.0)*cj2*sj2))),-1);
if(!x5544.valid){
continue;
}
CheckValue<IkReal> x5545=IKPowWithIntegerCheck(((((-1.0)*x5539))+(((-1.0)*x5541))),-1);
if(!x5545.valid){
continue;
}
if( IKabs(((x5544.value)*(((((-1.0)*x5538*x5542))+(((-1.0)*x5539*x5540))+(((-1.0)*x5537*x5542))+(((-1.0)*x5540*x5541))+(((-1893.0)*x5538*x5539))+(((2183.0)*x5535))+(((2183.0)*x5536))+(((-1893.0)*x5537*x5539)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5545.value)*(((((-1.0)*x5536))+(((-1.0)*x5535)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5544.value)*(((((-1.0)*x5538*x5542))+(((-1.0)*x5539*x5540))+(((-1.0)*x5537*x5542))+(((-1.0)*x5540*x5541))+(((-1893.0)*x5538*x5539))+(((2183.0)*x5535))+(((2183.0)*x5536))+(((-1893.0)*x5537*x5539))))))+IKsqr(((x5545.value)*(((((-1.0)*x5536))+(((-1.0)*x5535))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5544.value)*(((((-1.0)*x5538*x5542))+(((-1.0)*x5539*x5540))+(((-1.0)*x5537*x5542))+(((-1.0)*x5540*x5541))+(((-1893.0)*x5538*x5539))+(((2183.0)*x5535))+(((2183.0)*x5536))+(((-1893.0)*x5537*x5539))))), ((x5545.value)*(((((-1.0)*x5536))+(((-1.0)*x5535))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5546=IKcos(j0);
IkReal x5547=IKsin(j0);
IkReal x5548=(cj5*r01);
IkReal x5549=((1.0)*cj1);
IkReal x5550=((0.39225)*sj1);
IkReal x5551=(cj5*r11);
IkReal x5552=(r00*sj5);
IkReal x5553=((0.39225)*cj2);
IkReal x5554=(r10*sj5);
IkReal x5555=(sj2*x5546);
IkReal x5556=(sj2*x5547);
IkReal x5557=(cj1*x5546);
IkReal x5558=((1.0)*cj2*sj1);
IkReal x5559=(cj1*x5547);
evalcond[0]=(x5548+x5552+(((-1.0)*x5549*x5555))+(((-1.0)*x5546*x5558)));
evalcond[1]=(x5554+x5551+(((-1.0)*x5549*x5556))+(((-1.0)*x5547*x5558)));
evalcond[2]=((((-0.10915)*x5547))+(((-1.0)*x5550*x5555))+(((-0.09465)*x5548))+(((-0.09465)*x5552))+(((0.425)*x5557))+(((-1.0)*px))+((x5553*x5557)));
evalcond[3]=((((0.10915)*x5546))+(((-1.0)*x5550*x5556))+(((-0.09465)*x5554))+(((-0.09465)*x5551))+(((0.425)*x5559))+(((-1.0)*py))+((x5553*x5559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5560=((1.0)*cj5);
IkReal x5561=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5560)));
j4eval[0]=x5561;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x5560))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x5561);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5562=((1.0)*cj5);
IkReal x5563=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5562)));
j4eval[0]=x5563;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5562)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5564=((1.0)*sj0);
IkReal x5565=((1.0)*cj0);
IkReal x5566=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5566;
j4eval[1]=((IKabs(((((-1.0)*r12*x5564))+(((-1.0)*r02*x5565)))))+(IKabs(((((-1.0)*r01*sj5*x5565))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5564))))));
j4eval[2]=IKsign(x5566);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5567=((-1.0)*r20);
IkReal x5569 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5569)==0){
continue;
}
IkReal x5568=pow(x5569,-0.5);
CheckValue<IkReal> x5570 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5567),IKFAST_ATAN2_MAGTHRESH);
if(!x5570.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5570.value));
IkReal gconst115=(r21*x5568);
IkReal gconst116=(x5567*x5568);
CheckValue<IkReal> x5571 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5571.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5571.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5572=((-1.0)*r20);
IkReal x5573=x5568;
CheckValue<IkReal> x5575 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5572),IKFAST_ATAN2_MAGTHRESH);
if(!x5575.valid){
continue;
}
IkReal x5574=((-1.0)*(x5575.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5574;
IkReal gconst114=x5574;
IkReal gconst115=(r21*x5573);
IkReal gconst116=(x5572*x5573);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5576=((-1.0)*r20);
IkReal x5577=x5568;
CheckValue<IkReal> x5579 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5576),IKFAST_ATAN2_MAGTHRESH);
if(!x5579.valid){
continue;
}
IkReal x5578=((-1.0)*(x5579.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5578;
IkReal gconst114=x5578;
IkReal gconst115=(r21*x5577);
IkReal gconst116=(x5576*x5577);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5580=((-1.0)*r20);
IkReal x5581=x5568;
CheckValue<IkReal> x5583 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5580),IKFAST_ATAN2_MAGTHRESH);
if(!x5583.valid){
continue;
}
IkReal x5582=((-1.0)*(x5583.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5582;
IkReal gconst114=x5582;
IkReal gconst115=(r21*x5581);
IkReal gconst116=(x5580*x5581);
IkReal x5584=((1.0)*(r22*r22));
CheckValue<IkReal> x5588=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5584))),-1);
if(!x5588.valid){
continue;
}
IkReal x5585=x5588.value;
IkReal x5586=((1.0)*x5585);
IkReal x5587=((((-1.0)*x5586*(r21*r21*r21*r21)))+(((-1.0)*x5584))+(((-1.0)*x5586*(r20*r20*r20*r20)))+(((-2.0)*x5585*(r20*r20)*(r21*r21))));
j4eval[0]=x5587;
j4eval[1]=IKsign(x5587);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5589=(cj2*sj1);
IkReal x5590=(gconst115*r21);
IkReal x5591=(cj1*sj2);
IkReal x5592=((1.0)*gconst116*r20);
CheckValue<IkReal> x5593 = IKatan2WithCheck(IkReal((((r22*x5589))+((r22*x5591)))),IkReal((((x5590*x5591))+(((-1.0)*x5591*x5592))+((x5589*x5590))+(((-1.0)*x5589*x5592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5593.valid){
continue;
}
CheckValue<IkReal> x5594=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5590))+(((-1.0)*gconst116*r20*x5592))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5590*x5590))))),-1);
if(!x5594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5593.value)+(((1.5707963267949)*(x5594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5595=IKsin(j4);
IkReal x5596=IKcos(j4);
IkReal x5597=(sj1*sj2);
IkReal x5598=((1.0)*x5596);
IkReal x5599=((1.0)*cj1*cj2);
IkReal x5600=(gconst115*x5595);
IkReal x5601=(gconst115*x5596);
IkReal x5602=((1.0)*gconst116*x5595);
evalcond[0]=(((r21*x5600))+(((-1.0)*r22*x5598))+(((-1.0)*r20*x5602)));
evalcond[1]=((((-1.0)*r10*x5602))+(((-1.0)*r12*x5598))+cj0+((r11*x5600)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5602))+(((-1.0)*r02*x5598))+((r01*x5600)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5598))+((r21*x5601))+((r22*x5595)));
evalcond[4]=((((-1.0)*cj0*x5599))+((cj0*x5597))+((r02*x5595))+((r01*x5601))+(((-1.0)*gconst116*r00*x5598)));
evalcond[5]=(((sj0*x5597))+((r12*x5595))+(((-1.0)*gconst116*r10*x5598))+((r11*x5601))+(((-1.0)*sj0*x5599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5603=((1.0)*gconst116);
CheckValue<IkReal> x5604 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5603)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5604.valid){
continue;
}
CheckValue<IkReal> x5605=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5603)))),-1);
if(!x5605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5604.value)+(((1.5707963267949)*(x5605.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5606=IKsin(j4);
IkReal x5607=IKcos(j4);
IkReal x5608=(sj1*sj2);
IkReal x5609=((1.0)*x5607);
IkReal x5610=((1.0)*cj1*cj2);
IkReal x5611=(gconst115*x5606);
IkReal x5612=(gconst115*x5607);
IkReal x5613=((1.0)*gconst116*x5606);
evalcond[0]=((((-1.0)*r22*x5609))+((r21*x5611))+(((-1.0)*r20*x5613)));
evalcond[1]=(cj0+(((-1.0)*r10*x5613))+(((-1.0)*r12*x5609))+((r11*x5611)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5613))+((r01*x5611))+(((-1.0)*r02*x5609)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5609))+((r21*x5612))+((r22*x5606)));
evalcond[4]=(((r02*x5606))+(((-1.0)*cj0*x5610))+((r01*x5612))+(((-1.0)*gconst116*r00*x5609))+((cj0*x5608)));
evalcond[5]=(((sj0*x5608))+((r12*x5606))+(((-1.0)*gconst116*r10*x5609))+(((-1.0)*sj0*x5610))+((r11*x5612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5614=((1.0)*gconst116);
CheckValue<IkReal> x5615=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5614))+(((-1.0)*gconst115*r00)))),-1);
if(!x5615.valid){
continue;
}
CheckValue<IkReal> x5616 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5614))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5615.value)))+(x5616.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5617=IKsin(j4);
IkReal x5618=IKcos(j4);
IkReal x5619=(sj1*sj2);
IkReal x5620=((1.0)*x5618);
IkReal x5621=((1.0)*cj1*cj2);
IkReal x5622=(gconst115*x5617);
IkReal x5623=(gconst115*x5618);
IkReal x5624=((1.0)*gconst116*x5617);
evalcond[0]=((((-1.0)*r22*x5620))+((r21*x5622))+(((-1.0)*r20*x5624)));
evalcond[1]=(cj0+(((-1.0)*r10*x5624))+(((-1.0)*r12*x5620))+((r11*x5622)));
evalcond[2]=((((-1.0)*r00*x5624))+(((-1.0)*sj0))+((r01*x5622))+(((-1.0)*r02*x5620)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5620))+((r21*x5623))+((r22*x5617)));
evalcond[4]=(((cj0*x5619))+((r02*x5617))+(((-1.0)*cj0*x5621))+((r01*x5623))+(((-1.0)*gconst116*r00*x5620)));
evalcond[5]=(((sj0*x5619))+(((-1.0)*gconst116*r10*x5620))+((r12*x5617))+((r11*x5623))+(((-1.0)*sj0*x5621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5625=((-1.0)*r21);
IkReal x5627 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5627)==0){
continue;
}
IkReal x5626=pow(x5627,-0.5);
CheckValue<IkReal> x5628 = IKatan2WithCheck(IkReal(x5625),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5628.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5628.value))));
IkReal gconst118=(x5625*x5626);
IkReal gconst119=((1.0)*r20*x5626);
CheckValue<IkReal> x5629 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5629.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5629.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5630=((-1.0)*r21);
CheckValue<IkReal> x5633 = IKatan2WithCheck(IkReal(x5630),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5633.valid){
continue;
}
IkReal x5631=((1.0)*(x5633.value));
IkReal x5632=x5626;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5631)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5631)));
IkReal gconst118=(x5630*x5632);
IkReal gconst119=((1.0)*r20*x5632);
IkReal x5634=r22*r22;
IkReal x5635=((1.0)*x5634);
CheckValue<IkReal> x5639=IKPowWithIntegerCheck(((-1.0)+x5634),-1);
if(!x5639.valid){
continue;
}
IkReal x5636=x5639.value;
if((((1.0)+(((-1.0)*x5635)))) < -0.00001)
continue;
IkReal x5637=IKsqrt(((1.0)+(((-1.0)*x5635))));
IkReal x5638=(cj0*x5636*x5637);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x5638+(((-1.0)*x5635*x5638))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5640=((-1.0)*r21);
CheckValue<IkReal> x5643 = IKatan2WithCheck(IkReal(x5640),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5643.valid){
continue;
}
IkReal x5641=((1.0)*(x5643.value));
IkReal x5642=x5626;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5641)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5641)));
IkReal gconst118=(x5640*x5642);
IkReal gconst119=((1.0)*r20*x5642);
IkReal x5644=r22*r22;
IkReal x5645=((1.0)*x5644);
CheckValue<IkReal> x5649=IKPowWithIntegerCheck(((-1.0)+x5644),-1);
if(!x5649.valid){
continue;
}
IkReal x5646=x5649.value;
if((((1.0)+(((-1.0)*x5645)))) < -0.00001)
continue;
IkReal x5647=IKsqrt(((1.0)+(((-1.0)*x5645))));
IkReal x5648=(sj0*x5646*x5647);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5648+(((-1.0)*x5645*x5648))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5650=((-1.0)*r21);
CheckValue<IkReal> x5653 = IKatan2WithCheck(IkReal(x5650),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5653.valid){
continue;
}
IkReal x5651=((1.0)*(x5653.value));
IkReal x5652=x5626;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5651)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5651)));
IkReal gconst118=(x5650*x5652);
IkReal gconst119=((1.0)*r20*x5652);
IkReal x5654=r22*r22;
IkReal x5655=(r12*sj0);
IkReal x5656=(cj0*r02);
CheckValue<IkReal> x5660=IKPowWithIntegerCheck(((-1.0)+x5654),-1);
if(!x5660.valid){
continue;
}
IkReal x5657=x5660.value;
if((((1.0)+(((-1.0)*x5654)))) < -0.00001)
continue;
IkReal x5658=IKsqrt(((1.0)+(((-1.0)*x5654))));
IkReal x5659=(r22*x5657*x5658);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5656))+(((-1.0)*x5655)))))+(IKabs((((x5656*x5659))+((x5655*x5659))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5661=((1.0)*sj0);
IkReal x5662=((1.0)*gconst118);
CheckValue<IkReal> x5663 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5661)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5662))+(((-1.0)*gconst118*r11*x5661))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5663.valid){
continue;
}
CheckValue<IkReal> x5664=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5662)))),-1);
if(!x5664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5663.value)+(((1.5707963267949)*(x5664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5665=IKsin(j4);
IkReal x5666=IKcos(j4);
IkReal x5667=(gconst118*r01);
IkReal x5668=(sj1*sj2);
IkReal x5669=(gconst119*r20);
IkReal x5670=(gconst119*r10);
IkReal x5671=(gconst119*r00);
IkReal x5672=(gconst118*r21);
IkReal x5673=(gconst118*r11);
IkReal x5674=((1.0)*x5666);
IkReal x5675=((1.0)*cj1*cj2);
IkReal x5676=((1.0)*x5665);
evalcond[0]=((((-1.0)*r22*x5674))+(((-1.0)*x5669*x5676))+((x5665*x5672)));
evalcond[1]=((((-1.0)*x5670*x5676))+cj0+(((-1.0)*r12*x5674))+((x5665*x5673)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5671*x5676))+((x5665*x5667))+(((-1.0)*r02*x5674)));
evalcond[3]=(((cj2*sj1))+((r22*x5665))+(((-1.0)*x5669*x5674))+((cj1*sj2))+((x5666*x5672)));
evalcond[4]=((((-1.0)*x5671*x5674))+((r02*x5665))+((x5666*x5667))+(((-1.0)*cj0*x5675))+((cj0*x5668)));
evalcond[5]=((((-1.0)*x5670*x5674))+((x5666*x5673))+((sj0*x5668))+((r12*x5665))+(((-1.0)*sj0*x5675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5677=((1.0)*gconst119);
CheckValue<IkReal> x5678 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5677))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5678.valid){
continue;
}
CheckValue<IkReal> x5679=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5677)))),-1);
if(!x5679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5678.value)+(((1.5707963267949)*(x5679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5680=IKsin(j4);
IkReal x5681=IKcos(j4);
IkReal x5682=(gconst118*r01);
IkReal x5683=(sj1*sj2);
IkReal x5684=(gconst119*r20);
IkReal x5685=(gconst119*r10);
IkReal x5686=(gconst119*r00);
IkReal x5687=(gconst118*r21);
IkReal x5688=(gconst118*r11);
IkReal x5689=((1.0)*x5681);
IkReal x5690=((1.0)*cj1*cj2);
IkReal x5691=((1.0)*x5680);
evalcond[0]=(((x5680*x5687))+(((-1.0)*r22*x5689))+(((-1.0)*x5684*x5691)));
evalcond[1]=(cj0+((x5680*x5688))+(((-1.0)*x5685*x5691))+(((-1.0)*r12*x5689)));
evalcond[2]=((((-1.0)*r02*x5689))+(((-1.0)*sj0))+(((-1.0)*x5686*x5691))+((x5680*x5682)));
evalcond[3]=(((cj2*sj1))+((x5681*x5687))+((r22*x5680))+((cj1*sj2))+(((-1.0)*x5684*x5689)));
evalcond[4]=((((-1.0)*x5686*x5689))+((x5681*x5682))+(((-1.0)*cj0*x5690))+((r02*x5680))+((cj0*x5683)));
evalcond[5]=(((x5681*x5688))+(((-1.0)*x5685*x5689))+(((-1.0)*sj0*x5690))+((sj0*x5683))+((r12*x5680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5692=((1.0)*gconst119);
CheckValue<IkReal> x5693 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5692)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5693.valid){
continue;
}
CheckValue<IkReal> x5694=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5692)))),-1);
if(!x5694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5693.value)+(((1.5707963267949)*(x5694.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5695=IKsin(j4);
IkReal x5696=IKcos(j4);
IkReal x5697=(gconst118*r01);
IkReal x5698=(sj1*sj2);
IkReal x5699=(gconst119*r20);
IkReal x5700=(gconst119*r10);
IkReal x5701=(gconst119*r00);
IkReal x5702=(gconst118*r21);
IkReal x5703=(gconst118*r11);
IkReal x5704=((1.0)*x5696);
IkReal x5705=((1.0)*cj1*cj2);
IkReal x5706=((1.0)*x5695);
evalcond[0]=((((-1.0)*r22*x5704))+((x5695*x5702))+(((-1.0)*x5699*x5706)));
evalcond[1]=((((-1.0)*r12*x5704))+cj0+(((-1.0)*x5700*x5706))+((x5695*x5703)));
evalcond[2]=((((-1.0)*sj0))+((x5695*x5697))+(((-1.0)*x5701*x5706))+(((-1.0)*r02*x5704)));
evalcond[3]=(((cj2*sj1))+((r22*x5695))+((x5696*x5702))+((cj1*sj2))+(((-1.0)*x5699*x5704)));
evalcond[4]=(((x5696*x5697))+(((-1.0)*x5701*x5704))+((r02*x5695))+(((-1.0)*cj0*x5705))+((cj0*x5698)));
evalcond[5]=(((x5696*x5703))+(((-1.0)*x5700*x5704))+((sj0*x5698))+(((-1.0)*sj0*x5705))+((r12*x5695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5707=((-1.0)*r10);
IkReal x5709 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5709)==0){
continue;
}
IkReal x5708=pow(x5709,-0.5);
CheckValue<IkReal> x5710 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5707),IKFAST_ATAN2_MAGTHRESH);
if(!x5710.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5710.value));
IkReal gconst121=(r11*x5708);
IkReal gconst122=(x5707*x5708);
CheckValue<IkReal> x5711 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5711.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5711.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5712=((-1.0)*r10);
IkReal x5713=x5708;
CheckValue<IkReal> x5715 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5712),IKFAST_ATAN2_MAGTHRESH);
if(!x5715.valid){
continue;
}
IkReal x5714=((-1.0)*(x5715.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5714;
IkReal gconst120=x5714;
IkReal gconst121=(r11*x5713);
IkReal gconst122=(x5712*x5713);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5716=((1.0)*sj0);
IkReal x5717=((1.0)*gconst121);
CheckValue<IkReal> x5718 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5716)))),IkReal((((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5716))+(((-1.0)*cj0*r01*x5717))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5718.valid){
continue;
}
CheckValue<IkReal> x5719=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5717)))),-1);
if(!x5719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5718.value)+(((1.5707963267949)*(x5719.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5720=IKsin(j4);
IkReal x5721=IKcos(j4);
IkReal x5722=(gconst121*r11);
IkReal x5723=(sj1*sj2);
IkReal x5724=(gconst122*r00);
IkReal x5725=(gconst122*r10);
IkReal x5726=(gconst122*r20);
IkReal x5727=((1.0)*x5721);
IkReal x5728=((1.0)*cj1*cj2);
IkReal x5729=((1.0)*x5720);
IkReal x5730=(gconst121*x5720);
IkReal x5731=(gconst121*x5721);
evalcond[0]=(((r21*x5730))+(((-1.0)*r22*x5727))+(((-1.0)*x5726*x5729)));
evalcond[1]=((((-1.0)*x5725*x5729))+cj0+(((-1.0)*r12*x5727))+((x5720*x5722)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5730))+(((-1.0)*x5724*x5729))+(((-1.0)*r02*x5727)));
evalcond[3]=(((cj2*sj1))+((r21*x5731))+((cj1*sj2))+(((-1.0)*x5726*x5727))+((r22*x5720)));
evalcond[4]=(((r01*x5731))+(((-1.0)*x5724*x5727))+(((-1.0)*cj0*x5728))+((cj0*x5723))+((r02*x5720)));
evalcond[5]=(((x5721*x5722))+((sj0*x5723))+(((-1.0)*x5725*x5727))+((r12*x5720))+(((-1.0)*sj0*x5728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5732=((1.0)*gconst122);
CheckValue<IkReal> x5733 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5732))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5733.valid){
continue;
}
CheckValue<IkReal> x5734=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5732)))),-1);
if(!x5734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5733.value)+(((1.5707963267949)*(x5734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5735=IKsin(j4);
IkReal x5736=IKcos(j4);
IkReal x5737=(gconst121*r11);
IkReal x5738=(sj1*sj2);
IkReal x5739=(gconst122*r00);
IkReal x5740=(gconst122*r10);
IkReal x5741=(gconst122*r20);
IkReal x5742=((1.0)*x5736);
IkReal x5743=((1.0)*cj1*cj2);
IkReal x5744=((1.0)*x5735);
IkReal x5745=(gconst121*x5735);
IkReal x5746=(gconst121*x5736);
evalcond[0]=((((-1.0)*x5741*x5744))+(((-1.0)*r22*x5742))+((r21*x5745)));
evalcond[1]=(cj0+((x5735*x5737))+(((-1.0)*x5740*x5744))+(((-1.0)*r12*x5742)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5745))+(((-1.0)*r02*x5742))+(((-1.0)*x5739*x5744)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5741*x5742))+((r21*x5746))+((r22*x5735)));
evalcond[4]=(((r01*x5746))+(((-1.0)*cj0*x5743))+((cj0*x5738))+((r02*x5735))+(((-1.0)*x5739*x5742)));
evalcond[5]=(((r12*x5735))+(((-1.0)*x5740*x5742))+((x5736*x5737))+((sj0*x5738))+(((-1.0)*sj0*x5743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5747=((-1.0)*r11);
IkReal x5749 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5749)==0){
continue;
}
IkReal x5748=pow(x5749,-0.5);
CheckValue<IkReal> x5750 = IKatan2WithCheck(IkReal(x5747),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5750.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5750.value))));
IkReal gconst124=(x5747*x5748);
IkReal gconst125=((1.0)*r10*x5748);
CheckValue<IkReal> x5751 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5751.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5751.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5752=((-1.0)*r11);
CheckValue<IkReal> x5755 = IKatan2WithCheck(IkReal(x5752),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5755.valid){
continue;
}
IkReal x5753=((1.0)*(x5755.value));
IkReal x5754=x5748;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5753)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5753)));
IkReal gconst124=(x5752*x5754);
IkReal gconst125=((1.0)*r10*x5754);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5756=((-1.0)*r11);
CheckValue<IkReal> x5759 = IKatan2WithCheck(IkReal(x5756),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5759.valid){
continue;
}
IkReal x5757=((1.0)*(x5759.value));
IkReal x5758=x5748;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5757)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5757)));
IkReal gconst124=(x5756*x5758);
IkReal gconst125=((1.0)*r10*x5758);
IkReal x5760=r12*r12;
IkReal x5761=((1.0)*sj0);
IkReal x5762=(cj0*r02);
IkReal x5763=x5748;
j4eval[0]=((IKabs(((((-1.0)*x5761*x5763))+((r12*x5762*x5763))+((sj0*x5760*x5763)))))+(IKabs(((((-1.0)*r12*x5761))+(((-1.0)*x5762))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5764=((-1.0)*r11);
CheckValue<IkReal> x5767 = IKatan2WithCheck(IkReal(x5764),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5767.valid){
continue;
}
IkReal x5765=((1.0)*(x5767.value));
IkReal x5766=x5748;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5765)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5765)));
IkReal gconst124=(x5764*x5766);
IkReal gconst125=((1.0)*r10*x5766);
IkReal x5768=r12*r12;
IkReal x5769=((1.0)+(((-1.0)*x5768)));
IkReal x5770=(cj2*r22*sj1);
IkReal x5771=(cj1*r22*sj2);
CheckValue<IkReal> x5778=IKPowWithIntegerCheck(x5769,-1);
if(!x5778.valid){
continue;
}
IkReal x5772=x5778.value;
CheckValue<IkReal> x5779=IKPowWithIntegerCheck(((-1.0)+x5768),-1);
if(!x5779.valid){
continue;
}
IkReal x5773=x5779.value;
IkReal x5774=((1.0)*x5772);
if((x5769) < -0.00001)
continue;
IkReal x5775=IKsqrt(x5769);
IkReal x5776=((1.0)*r12*x5773*x5775);
IkReal x5777=((((-2.0)*r10*r11*r20*r21*x5772))+(((-1.0)*(r22*r22)))+(((-1.0)*x5774*(r10*r10)*(r20*r20)))+(((-1.0)*x5774*(r11*r11)*(r21*r21))));
j4eval[0]=x5777;
j4eval[1]=IKsign(x5777);
j4eval[2]=((IKabs((x5771+x5770)))+(IKabs(((((-1.0)*x5770*x5776))+(((-1.0)*x5771*x5776))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5780=(gconst124*r21);
IkReal x5781=(cj1*sj2);
IkReal x5782=(cj2*sj1);
IkReal x5783=(gconst125*r20);
CheckValue<IkReal> x5784=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5783*x5783)))+(((-1.0)*(x5780*x5780)))+(((-1.0)*(r22*r22)))+(((2.0)*x5780*x5783)))),-1);
if(!x5784.valid){
continue;
}
CheckValue<IkReal> x5785 = IKatan2WithCheck(IkReal((((r22*x5781))+((r22*x5782)))),IkReal(((((-1.0)*x5781*x5783))+(((-1.0)*x5782*x5783))+((x5780*x5781))+((x5780*x5782)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5784.value)))+(x5785.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5786=IKsin(j4);
IkReal x5787=IKcos(j4);
IkReal x5788=(sj1*sj2);
IkReal x5789=(gconst125*r20);
IkReal x5790=(gconst124*r01);
IkReal x5791=(gconst125*r00);
IkReal x5792=(gconst125*r10);
IkReal x5793=((1.0)*x5787);
IkReal x5794=((1.0)*cj1*cj2);
IkReal x5795=((1.0)*x5786);
IkReal x5796=(gconst124*x5786);
IkReal x5797=(gconst124*x5787);
evalcond[0]=(((r21*x5796))+(((-1.0)*r22*x5793))+(((-1.0)*x5789*x5795)));
evalcond[1]=(cj0+(((-1.0)*x5792*x5795))+((r11*x5796))+(((-1.0)*r12*x5793)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5791*x5795))+(((-1.0)*r02*x5793))+((x5786*x5790)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5797))+((r22*x5786))+(((-1.0)*x5789*x5793)));
evalcond[4]=((((-1.0)*x5791*x5793))+(((-1.0)*cj0*x5794))+((x5787*x5790))+((r02*x5786))+((cj0*x5788)));
evalcond[5]=((((-1.0)*x5792*x5793))+((r12*x5786))+((r11*x5797))+((sj0*x5788))+(((-1.0)*sj0*x5794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5798=((1.0)*sj0);
IkReal x5799=((1.0)*cj0);
CheckValue<IkReal> x5800 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5798))+(((-1.0)*r02*x5799)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5799))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r11*x5798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5800.valid){
continue;
}
CheckValue<IkReal> x5801=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5800.value)+(((1.5707963267949)*(x5801.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5802=IKsin(j4);
IkReal x5803=IKcos(j4);
IkReal x5804=(sj1*sj2);
IkReal x5805=(gconst125*r20);
IkReal x5806=(gconst124*r01);
IkReal x5807=(gconst125*r00);
IkReal x5808=(gconst125*r10);
IkReal x5809=((1.0)*x5803);
IkReal x5810=((1.0)*cj1*cj2);
IkReal x5811=((1.0)*x5802);
IkReal x5812=(gconst124*x5802);
IkReal x5813=(gconst124*x5803);
evalcond[0]=(((r21*x5812))+(((-1.0)*r22*x5809))+(((-1.0)*x5805*x5811)));
evalcond[1]=(cj0+(((-1.0)*x5808*x5811))+(((-1.0)*r12*x5809))+((r11*x5812)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5809))+(((-1.0)*x5807*x5811))+((x5802*x5806)));
evalcond[3]=(((r21*x5813))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5805*x5809))+((r22*x5802)));
evalcond[4]=((((-1.0)*cj0*x5810))+((cj0*x5804))+((r02*x5802))+(((-1.0)*x5807*x5809))+((x5803*x5806)));
evalcond[5]=((((-1.0)*sj0*x5810))+((r11*x5813))+(((-1.0)*x5808*x5809))+((r12*x5802))+((sj0*x5804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5814=((1.0)*gconst125);
CheckValue<IkReal> x5815 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5814))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5815.valid){
continue;
}
CheckValue<IkReal> x5816=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5814)))),-1);
if(!x5816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5815.value)+(((1.5707963267949)*(x5816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5817=IKsin(j4);
IkReal x5818=IKcos(j4);
IkReal x5819=(sj1*sj2);
IkReal x5820=(gconst125*r20);
IkReal x5821=(gconst124*r01);
IkReal x5822=(gconst125*r00);
IkReal x5823=(gconst125*r10);
IkReal x5824=((1.0)*x5818);
IkReal x5825=((1.0)*cj1*cj2);
IkReal x5826=((1.0)*x5817);
IkReal x5827=(gconst124*x5817);
IkReal x5828=(gconst124*x5818);
evalcond[0]=((((-1.0)*r22*x5824))+((r21*x5827))+(((-1.0)*x5820*x5826)));
evalcond[1]=((((-1.0)*x5823*x5826))+cj0+((r11*x5827))+(((-1.0)*r12*x5824)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5824))+(((-1.0)*x5822*x5826))+((x5817*x5821)));
evalcond[3]=(((r21*x5828))+((cj2*sj1))+((r22*x5817))+((cj1*sj2))+(((-1.0)*x5820*x5824)));
evalcond[4]=(((r02*x5817))+((cj0*x5819))+((x5818*x5821))+(((-1.0)*cj0*x5825))+(((-1.0)*x5822*x5824)));
evalcond[5]=((((-1.0)*x5823*x5824))+((sj0*x5819))+((r11*x5828))+((r12*x5817))+(((-1.0)*sj0*x5825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5829=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5829;
j4eval[1]=IKsign(x5829);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5830=((1.0)*cj5);
IkReal x5831=((((-1.0)*r01*x5830))+(((-1.0)*r00*sj5)));
j4eval[0]=x5831;
j4eval[1]=((IKabs(((((-1.0)*r20*x5830))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5831);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5832=cj5*cj5;
IkReal x5833=r11*r11;
IkReal x5834=(cj5*r10);
IkReal x5835=(r11*sj5);
IkReal x5836=((((-1.0)*x5832*(r10*r10)))+((x5832*x5833))+(((2.0)*x5834*x5835))+(((-1.0)*(r12*r12)))+(((-1.0)*x5833)));
j4eval[0]=x5836;
j4eval[1]=IKsign(x5836);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5834))+x5835))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5837=cj5*cj5;
IkReal x5838=r11*r11;
IkReal x5839=(cj5*r10);
IkReal x5840=(r11*sj5);
CheckValue<IkReal> x5841 = IKatan2WithCheck(IkReal(((((-1.0)*x5839))+x5840)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5841.valid){
continue;
}
CheckValue<IkReal> x5842=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5837*(r10*r10)))+((x5837*x5838))+(((2.0)*x5839*x5840))+(((-1.0)*(r12*r12)))+(((-1.0)*x5838)))),-1);
if(!x5842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5841.value)+(((1.5707963267949)*(x5842.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5843=IKcos(j4);
IkReal x5844=IKsin(j4);
IkReal x5845=(cj5*r00);
IkReal x5846=(cj5*r10);
IkReal x5847=(r21*sj5);
IkReal x5848=(cj5*r20);
IkReal x5849=((1.0)*x5843);
IkReal x5850=((1.0)*x5844);
IkReal x5851=(sj5*x5844);
IkReal x5852=(sj5*x5843);
evalcond[0]=(((r11*x5852))+((r12*x5844))+(((-1.0)*x5846*x5849)));
evalcond[1]=(((x5844*x5847))+(((-1.0)*x5848*x5850))+(((-1.0)*r22*x5849)));
evalcond[2]=((((-1.0)*r02*x5849))+((r01*x5851))+(((-1.0)*x5845*x5850)));
evalcond[3]=((1.0)+((r11*x5851))+(((-1.0)*x5846*x5850))+(((-1.0)*r12*x5849)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5843*x5847))+(((-1.0)*x5848*x5849))+((r22*x5844)));
evalcond[5]=(((r01*x5852))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5845*x5849))+((r02*x5844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5853=((1.0)*cj5);
CheckValue<IkReal> x5854=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5853)))),-1);
if(!x5854.valid){
continue;
}
CheckValue<IkReal> x5855 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5853))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5854.value)))+(x5855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5856=IKcos(j4);
IkReal x5857=IKsin(j4);
IkReal x5858=(cj5*r00);
IkReal x5859=(cj5*r10);
IkReal x5860=(r21*sj5);
IkReal x5861=(cj5*r20);
IkReal x5862=((1.0)*x5856);
IkReal x5863=((1.0)*x5857);
IkReal x5864=(sj5*x5857);
IkReal x5865=(sj5*x5856);
evalcond[0]=(((r12*x5857))+((r11*x5865))+(((-1.0)*x5859*x5862)));
evalcond[1]=((((-1.0)*r22*x5862))+(((-1.0)*x5861*x5863))+((x5857*x5860)));
evalcond[2]=((((-1.0)*x5858*x5863))+(((-1.0)*r02*x5862))+((r01*x5864)));
evalcond[3]=((1.0)+((r11*x5864))+(((-1.0)*x5859*x5863))+(((-1.0)*r12*x5862)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5861*x5862))+((cj1*sj2))+((x5856*x5860))+((r22*x5857)));
evalcond[5]=((((-1.0)*x5858*x5862))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5857))+((r01*x5865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5866=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5866.valid){
continue;
}
CheckValue<IkReal> x5867 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5866.value)))+(x5867.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5868=IKcos(j4);
IkReal x5869=IKsin(j4);
IkReal x5870=(cj5*r00);
IkReal x5871=(cj5*r10);
IkReal x5872=(r21*sj5);
IkReal x5873=(cj5*r20);
IkReal x5874=((1.0)*x5868);
IkReal x5875=((1.0)*x5869);
IkReal x5876=(sj5*x5869);
IkReal x5877=(sj5*x5868);
evalcond[0]=(((r11*x5877))+(((-1.0)*x5871*x5874))+((r12*x5869)));
evalcond[1]=((((-1.0)*r22*x5874))+(((-1.0)*x5873*x5875))+((x5869*x5872)));
evalcond[2]=((((-1.0)*r02*x5874))+(((-1.0)*x5870*x5875))+((r01*x5876)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5874))+((r11*x5876))+(((-1.0)*x5871*x5875)));
evalcond[4]=(((cj2*sj1))+((r22*x5869))+((cj1*sj2))+(((-1.0)*x5873*x5874))+((x5868*x5872)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5869))+(((-1.0)*x5870*x5874))+((r01*x5877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5878=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5878;
j4eval[1]=IKsign(x5878);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5879=((1.0)*cj5);
IkReal x5880=((((-1.0)*r21*x5879))+(((-1.0)*r20*sj5)));
j4eval[0]=x5880;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5879))))));
j4eval[2]=IKsign(x5880);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5881=cj5*cj5;
IkReal x5882=r11*r11;
IkReal x5883=(r11*sj5);
IkReal x5884=(cj5*r10);
IkReal x5885=((r12*r12)+((x5881*(r10*r10)))+(((-1.0)*x5881*x5882))+(((-2.0)*x5883*x5884))+x5882);
j4eval[0]=x5885;
j4eval[1]=IKsign(x5885);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5884))+x5883))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5886=cj5*cj5;
IkReal x5887=r11*r11;
IkReal x5888=(cj5*r10);
IkReal x5889=(r11*sj5);
CheckValue<IkReal> x5890=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x5886*x5887))+(((-2.0)*x5888*x5889))+((x5886*(r10*r10)))+x5887)),-1);
if(!x5890.valid){
continue;
}
CheckValue<IkReal> x5891 = IKatan2WithCheck(IkReal(((((-1.0)*x5888))+x5889)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5890.value)))+(x5891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5892=IKcos(j4);
IkReal x5893=IKsin(j4);
IkReal x5894=(cj5*r00);
IkReal x5895=(cj5*r10);
IkReal x5896=(r21*sj5);
IkReal x5897=(cj5*r20);
IkReal x5898=((1.0)*x5892);
IkReal x5899=((1.0)*x5893);
IkReal x5900=(sj5*x5893);
IkReal x5901=(sj5*x5892);
evalcond[0]=((((-1.0)*x5895*x5898))+((r12*x5893))+((r11*x5901)));
evalcond[1]=((((-1.0)*r22*x5898))+(((-1.0)*x5897*x5899))+((x5893*x5896)));
evalcond[2]=((((-1.0)*r02*x5898))+(((-1.0)*x5894*x5899))+((r01*x5900)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5898))+(((-1.0)*x5895*x5899))+((r11*x5900)));
evalcond[4]=(((r22*x5893))+((cj2*sj1))+(((-1.0)*x5897*x5898))+((cj1*sj2))+((x5892*x5896)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x5893))+(((-1.0)*x5894*x5898))+((cj1*cj2))+((r01*x5901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5902=((1.0)*cj5);
CheckValue<IkReal> x5903=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5902))+(((-1.0)*r20*sj5)))),-1);
if(!x5903.valid){
continue;
}
CheckValue<IkReal> x5904 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x5902))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5903.value)))+(x5904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5905=IKcos(j4);
IkReal x5906=IKsin(j4);
IkReal x5907=(cj5*r00);
IkReal x5908=(cj5*r10);
IkReal x5909=(r21*sj5);
IkReal x5910=(cj5*r20);
IkReal x5911=((1.0)*x5905);
IkReal x5912=((1.0)*x5906);
IkReal x5913=(sj5*x5906);
IkReal x5914=(sj5*x5905);
evalcond[0]=(((r12*x5906))+(((-1.0)*x5908*x5911))+((r11*x5914)));
evalcond[1]=((((-1.0)*r22*x5911))+(((-1.0)*x5910*x5912))+((x5906*x5909)));
evalcond[2]=(((r01*x5913))+(((-1.0)*x5907*x5912))+(((-1.0)*r02*x5911)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5911))+(((-1.0)*x5908*x5912))+((r11*x5913)));
evalcond[4]=(((cj2*sj1))+((r22*x5906))+((cj1*sj2))+(((-1.0)*x5910*x5911))+((x5905*x5909)));
evalcond[5]=(((r01*x5914))+(((-1.0)*x5907*x5911))+(((-1.0)*sj1*sj2))+((r02*x5906))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5915 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5915.valid){
continue;
}
CheckValue<IkReal> x5916=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5915.value)+(((1.5707963267949)*(x5916.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5917=IKcos(j4);
IkReal x5918=IKsin(j4);
IkReal x5919=(cj5*r00);
IkReal x5920=(cj5*r10);
IkReal x5921=(r21*sj5);
IkReal x5922=(cj5*r20);
IkReal x5923=((1.0)*x5917);
IkReal x5924=((1.0)*x5918);
IkReal x5925=(sj5*x5918);
IkReal x5926=(sj5*x5917);
evalcond[0]=(((r12*x5918))+((r11*x5926))+(((-1.0)*x5920*x5923)));
evalcond[1]=((((-1.0)*r22*x5923))+((x5918*x5921))+(((-1.0)*x5922*x5924)));
evalcond[2]=((((-1.0)*r02*x5923))+(((-1.0)*x5919*x5924))+((r01*x5925)));
evalcond[3]=((-1.0)+((r11*x5925))+(((-1.0)*x5920*x5924))+(((-1.0)*r12*x5923)));
evalcond[4]=(((cj2*sj1))+((r22*x5918))+((cj1*sj2))+((x5917*x5921))+(((-1.0)*x5922*x5923)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x5918))+(((-1.0)*x5919*x5923))+((cj1*cj2))+((r01*x5926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5927=((-1.0)*r00);
IkReal x5929 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5929)==0){
continue;
}
IkReal x5928=pow(x5929,-0.5);
CheckValue<IkReal> x5930 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5927),IKFAST_ATAN2_MAGTHRESH);
if(!x5930.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5930.value));
IkReal gconst127=(r01*x5928);
IkReal gconst128=(x5927*x5928);
CheckValue<IkReal> x5931 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5931.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5931.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5932=((-1.0)*r00);
IkReal x5933=x5928;
CheckValue<IkReal> x5935 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5932),IKFAST_ATAN2_MAGTHRESH);
if(!x5935.valid){
continue;
}
IkReal x5934=((-1.0)*(x5935.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5934;
IkReal gconst126=x5934;
IkReal gconst127=(r01*x5933);
IkReal gconst128=(x5932*x5933);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5936=((1.0)*sj0);
IkReal x5937=((1.0)*gconst127);
CheckValue<IkReal> x5938 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5936)))),IkReal(((((-1.0)*cj0*r01*x5937))+((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5936)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5938.valid){
continue;
}
CheckValue<IkReal> x5939=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5937)))),-1);
if(!x5939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5938.value)+(((1.5707963267949)*(x5939.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5940=IKsin(j4);
IkReal x5941=IKcos(j4);
IkReal x5942=(gconst127*r01);
IkReal x5943=(sj1*sj2);
IkReal x5944=(gconst128*r10);
IkReal x5945=(gconst128*r00);
IkReal x5946=(gconst128*r20);
IkReal x5947=((1.0)*x5941);
IkReal x5948=((1.0)*cj1*cj2);
IkReal x5949=((1.0)*x5940);
IkReal x5950=(gconst127*x5941);
IkReal x5951=(gconst127*x5940);
evalcond[0]=((((-1.0)*r22*x5947))+((r21*x5951))+(((-1.0)*x5946*x5949)));
evalcond[1]=((((-1.0)*x5944*x5949))+cj0+((r11*x5951))+(((-1.0)*r12*x5947)));
evalcond[2]=((((-1.0)*x5945*x5949))+(((-1.0)*sj0))+((x5940*x5942))+(((-1.0)*r02*x5947)));
evalcond[3]=(((cj2*sj1))+((r21*x5950))+((cj1*sj2))+((r22*x5940))+(((-1.0)*x5946*x5947)));
evalcond[4]=((((-1.0)*x5945*x5947))+((cj0*x5943))+(((-1.0)*cj0*x5948))+((x5941*x5942))+((r02*x5940)));
evalcond[5]=((((-1.0)*x5944*x5947))+((r11*x5950))+(((-1.0)*sj0*x5948))+((r12*x5940))+((sj0*x5943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5952=((1.0)*gconst128);
CheckValue<IkReal> x5953=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5952))+(((-1.0)*gconst127*r10)))),-1);
if(!x5953.valid){
continue;
}
CheckValue<IkReal> x5954 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5952)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5953.value)))+(x5954.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5955=IKsin(j4);
IkReal x5956=IKcos(j4);
IkReal x5957=(gconst127*r01);
IkReal x5958=(sj1*sj2);
IkReal x5959=(gconst128*r10);
IkReal x5960=(gconst128*r00);
IkReal x5961=(gconst128*r20);
IkReal x5962=((1.0)*x5956);
IkReal x5963=((1.0)*cj1*cj2);
IkReal x5964=((1.0)*x5955);
IkReal x5965=(gconst127*x5956);
IkReal x5966=(gconst127*x5955);
evalcond[0]=((((-1.0)*r22*x5962))+((r21*x5966))+(((-1.0)*x5961*x5964)));
evalcond[1]=(cj0+(((-1.0)*r12*x5962))+((r11*x5966))+(((-1.0)*x5959*x5964)));
evalcond[2]=((((-1.0)*sj0))+((x5955*x5957))+(((-1.0)*x5960*x5964))+(((-1.0)*r02*x5962)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5965))+(((-1.0)*x5961*x5962))+((r22*x5955)));
evalcond[4]=(((x5956*x5957))+((r02*x5955))+(((-1.0)*x5960*x5962))+(((-1.0)*cj0*x5963))+((cj0*x5958)));
evalcond[5]=(((sj0*x5958))+(((-1.0)*sj0*x5963))+((r12*x5955))+((r11*x5965))+(((-1.0)*x5959*x5962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5967=((-1.0)*r01);
IkReal x5969 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5969)==0){
continue;
}
IkReal x5968=pow(x5969,-0.5);
CheckValue<IkReal> x5970 = IKatan2WithCheck(IkReal(x5967),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5970.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5970.value))));
IkReal gconst130=(x5967*x5968);
IkReal gconst131=((1.0)*r00*x5968);
CheckValue<IkReal> x5971 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5971.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5971.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5972=((-1.0)*r01);
CheckValue<IkReal> x5975 = IKatan2WithCheck(IkReal(x5972),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5975.valid){
continue;
}
IkReal x5973=((1.0)*(x5975.value));
IkReal x5974=x5968;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5973)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5973)));
IkReal gconst130=(x5972*x5974);
IkReal gconst131=((1.0)*r00*x5974);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5976=((-1.0)*r01);
CheckValue<IkReal> x5979 = IKatan2WithCheck(IkReal(x5976),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5979.valid){
continue;
}
IkReal x5977=((1.0)*(x5979.value));
IkReal x5978=x5968;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5977)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5977)));
IkReal gconst130=(x5976*x5978);
IkReal gconst131=((1.0)*r00*x5978);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5980=((-1.0)*r01);
CheckValue<IkReal> x5983 = IKatan2WithCheck(IkReal(x5980),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5983.valid){
continue;
}
IkReal x5981=((1.0)*(x5983.value));
IkReal x5982=x5968;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5981)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5981)));
IkReal gconst130=(x5980*x5982);
IkReal gconst131=((1.0)*r00*x5982);
IkReal x5984=r02*r02;
IkReal x5985=(r12*sj0);
IkReal x5986=((1.0)*cj0);
IkReal x5987=x5968;
j4eval[0]=((IKabs((((r02*x5985*x5987))+(((-1.0)*x5986*x5987))+((cj0*x5984*x5987)))))+(IKabs(((((-1.0)*x5985))+(((-1.0)*r02*x5986))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5988=((1.0)*sj0);
IkReal x5989=((1.0)*gconst130);
CheckValue<IkReal> x5990 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5988))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst130*r11*x5988))+((gconst131*r10*sj0))+((cj0*gconst131*r00))+(((-1.0)*cj0*r01*x5989)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5990.valid){
continue;
}
CheckValue<IkReal> x5991=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x5989)))),-1);
if(!x5991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5990.value)+(((1.5707963267949)*(x5991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5992=IKsin(j4);
IkReal x5993=IKcos(j4);
IkReal x5994=(gconst131*r10);
IkReal x5995=(sj1*sj2);
IkReal x5996=(gconst131*r20);
IkReal x5997=(gconst131*r00);
IkReal x5998=((1.0)*x5993);
IkReal x5999=((1.0)*cj1*cj2);
IkReal x6000=(gconst130*x5992);
IkReal x6001=((1.0)*x5992);
IkReal x6002=(gconst130*x5993);
evalcond[0]=(((r21*x6000))+(((-1.0)*x5996*x6001))+(((-1.0)*r22*x5998)));
evalcond[1]=((((-1.0)*r12*x5998))+cj0+((r11*x6000))+(((-1.0)*x5994*x6001)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5998))+(((-1.0)*x5997*x6001))+((r01*x6000)));
evalcond[3]=(((r21*x6002))+((cj2*sj1))+(((-1.0)*x5996*x5998))+((cj1*sj2))+((r22*x5992)));
evalcond[4]=((((-1.0)*x5997*x5998))+((r02*x5992))+((cj0*x5995))+((r01*x6002))+(((-1.0)*cj0*x5999)));
evalcond[5]=(((r12*x5992))+((sj0*x5995))+((r11*x6002))+(((-1.0)*sj0*x5999))+(((-1.0)*x5994*x5998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6003=((1.0)*gconst131);
CheckValue<IkReal> x6004=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6003))+(((-1.0)*gconst130*r10)))),-1);
if(!x6004.valid){
continue;
}
CheckValue<IkReal> x6005 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6004.value)))+(x6005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6006=IKsin(j4);
IkReal x6007=IKcos(j4);
IkReal x6008=(gconst131*r10);
IkReal x6009=(sj1*sj2);
IkReal x6010=(gconst131*r20);
IkReal x6011=(gconst131*r00);
IkReal x6012=((1.0)*x6007);
IkReal x6013=((1.0)*cj1*cj2);
IkReal x6014=(gconst130*x6006);
IkReal x6015=((1.0)*x6006);
IkReal x6016=(gconst130*x6007);
evalcond[0]=(((r21*x6014))+(((-1.0)*x6010*x6015))+(((-1.0)*r22*x6012)));
evalcond[1]=(((r11*x6014))+cj0+(((-1.0)*r12*x6012))+(((-1.0)*x6008*x6015)));
evalcond[2]=(((r01*x6014))+(((-1.0)*sj0))+(((-1.0)*r02*x6012))+(((-1.0)*x6011*x6015)));
evalcond[3]=(((cj2*sj1))+((r22*x6006))+((r21*x6016))+(((-1.0)*x6010*x6012))+((cj1*sj2)));
evalcond[4]=(((r01*x6016))+((cj0*x6009))+(((-1.0)*x6011*x6012))+((r02*x6006))+(((-1.0)*cj0*x6013)));
evalcond[5]=(((r12*x6006))+((r11*x6016))+(((-1.0)*x6008*x6012))+(((-1.0)*sj0*x6013))+((sj0*x6009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6017=((1.0)*gconst131);
CheckValue<IkReal> x6018=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6017))+(((-1.0)*gconst130*r00)))),-1);
if(!x6018.valid){
continue;
}
CheckValue<IkReal> x6019 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6018.value)))+(x6019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6020=IKsin(j4);
IkReal x6021=IKcos(j4);
IkReal x6022=(gconst131*r10);
IkReal x6023=(sj1*sj2);
IkReal x6024=(gconst131*r20);
IkReal x6025=(gconst131*r00);
IkReal x6026=((1.0)*x6021);
IkReal x6027=((1.0)*cj1*cj2);
IkReal x6028=(gconst130*x6020);
IkReal x6029=((1.0)*x6020);
IkReal x6030=(gconst130*x6021);
evalcond[0]=((((-1.0)*x6024*x6029))+(((-1.0)*r22*x6026))+((r21*x6028)));
evalcond[1]=(cj0+((r11*x6028))+(((-1.0)*x6022*x6029))+(((-1.0)*r12*x6026)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6025*x6029))+((r01*x6028))+(((-1.0)*r02*x6026)));
evalcond[3]=(((cj2*sj1))+((r21*x6030))+(((-1.0)*x6024*x6026))+((cj1*sj2))+((r22*x6020)));
evalcond[4]=((((-1.0)*x6025*x6026))+((r02*x6020))+(((-1.0)*cj0*x6027))+((cj0*x6023))+((r01*x6030)));
evalcond[5]=(((sj0*x6023))+((r11*x6030))+(((-1.0)*sj0*x6027))+((r12*x6020))+(((-1.0)*x6022*x6026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6031=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6031;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6032=((1.0)*cj5);
IkReal x6033=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6032)));
j4eval[0]=x6033;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6032)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6034=cj5*cj5;
IkReal x6035=r01*r01;
IkReal x6036=(cj5*r00);
IkReal x6037=(r01*sj5);
IkReal x6038=((((-1.0)*x6034*x6035))+x6035+((x6034*(r00*r00)))+(r02*r02)+(((-2.0)*x6036*x6037)));
j4eval[0]=x6038;
j4eval[1]=IKsign(x6038);
j4eval[2]=((IKabs(r02))+(IKabs((x6037+(((-1.0)*x6036))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6039=cj5*cj5;
IkReal x6040=r01*r01;
IkReal x6041=(r01*sj5);
IkReal x6042=(cj5*r00);
CheckValue<IkReal> x6043=IKPowWithIntegerCheck(IKsign((x6040+(((-2.0)*x6041*x6042))+((x6039*(r00*r00)))+(((-1.0)*x6039*x6040))+(r02*r02))),-1);
if(!x6043.valid){
continue;
}
CheckValue<IkReal> x6044 = IKatan2WithCheck(IkReal((x6041+(((-1.0)*x6042)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6043.value)))+(x6044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6045=IKcos(j4);
IkReal x6046=IKsin(j4);
IkReal x6047=(cj5*r00);
IkReal x6048=(cj5*r10);
IkReal x6049=(r21*sj5);
IkReal x6050=(cj5*r20);
IkReal x6051=((1.0)*x6045);
IkReal x6052=((1.0)*x6046);
IkReal x6053=(sj5*x6046);
IkReal x6054=(sj5*x6045);
evalcond[0]=(((r01*x6054))+(((-1.0)*x6047*x6051))+((r02*x6046)));
evalcond[1]=(((x6046*x6049))+(((-1.0)*x6050*x6052))+(((-1.0)*r22*x6051)));
evalcond[2]=((((-1.0)*x6048*x6052))+(((-1.0)*r12*x6051))+((r11*x6053)));
evalcond[3]=((-1.0)+((r01*x6053))+(((-1.0)*r02*x6051))+(((-1.0)*x6047*x6052)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6050*x6051))+((cj1*sj2))+((r22*x6046))+((x6045*x6049)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6048*x6051))+((r12*x6046))+((r11*x6054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6055=((1.0)*cj5);
CheckValue<IkReal> x6056=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6055)))),-1);
if(!x6056.valid){
continue;
}
CheckValue<IkReal> x6057 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6055)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6056.value)))+(x6057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6058=IKcos(j4);
IkReal x6059=IKsin(j4);
IkReal x6060=(cj5*r00);
IkReal x6061=(cj5*r10);
IkReal x6062=(r21*sj5);
IkReal x6063=(cj5*r20);
IkReal x6064=((1.0)*x6058);
IkReal x6065=((1.0)*x6059);
IkReal x6066=(sj5*x6059);
IkReal x6067=(sj5*x6058);
evalcond[0]=(((r01*x6067))+(((-1.0)*x6060*x6064))+((r02*x6059)));
evalcond[1]=((((-1.0)*r22*x6064))+((x6059*x6062))+(((-1.0)*x6063*x6065)));
evalcond[2]=((((-1.0)*x6061*x6065))+((r11*x6066))+(((-1.0)*r12*x6064)));
evalcond[3]=((-1.0)+((r01*x6066))+(((-1.0)*x6060*x6065))+(((-1.0)*r02*x6064)));
evalcond[4]=(((cj2*sj1))+((r22*x6059))+((cj1*sj2))+(((-1.0)*x6063*x6064))+((x6058*x6062)));
evalcond[5]=(((r12*x6059))+(((-1.0)*x6061*x6064))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6068=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6068.valid){
continue;
}
CheckValue<IkReal> x6069 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6068.value)))+(x6069.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6070=IKcos(j4);
IkReal x6071=IKsin(j4);
IkReal x6072=(cj5*r00);
IkReal x6073=(cj5*r10);
IkReal x6074=(r21*sj5);
IkReal x6075=(cj5*r20);
IkReal x6076=((1.0)*x6070);
IkReal x6077=((1.0)*x6071);
IkReal x6078=(sj5*x6071);
IkReal x6079=(sj5*x6070);
evalcond[0]=(((r01*x6079))+(((-1.0)*x6072*x6076))+((r02*x6071)));
evalcond[1]=(((x6071*x6074))+(((-1.0)*r22*x6076))+(((-1.0)*x6075*x6077)));
evalcond[2]=(((r11*x6078))+(((-1.0)*x6073*x6077))+(((-1.0)*r12*x6076)));
evalcond[3]=((-1.0)+((r01*x6078))+(((-1.0)*r02*x6076))+(((-1.0)*x6072*x6077)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6071))+((x6070*x6074))+(((-1.0)*x6075*x6076)));
evalcond[5]=(((r11*x6079))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6073*x6076))+((r12*x6071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6080=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6080;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6080);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6081=((1.0)*cj5);
IkReal x6082=((((-1.0)*r21*x6081))+(((-1.0)*r20*sj5)));
j4eval[0]=x6082;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x6081)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6082);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6083=(r01*sj5);
IkReal x6084=(cj1*sj2);
IkReal x6085=(cj2*sj1);
IkReal x6086=((1.0)*r02);
IkReal x6087=((1.0)*cj5*r00);
IkReal x6088=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6088;
j4eval[1]=((IKabs(((((-1.0)*x6085*x6086))+(((-1.0)*x6084*x6086)))))+(IKabs(((((-1.0)*x6085*x6087))+((x6083*x6085))+((x6083*x6084))+(((-1.0)*x6084*x6087))))));
j4eval[2]=IKsign(x6088);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6089=(r01*sj5);
IkReal x6090=(cj1*sj2);
IkReal x6091=(cj2*sj1);
IkReal x6092=((1.0)*r02);
IkReal x6093=((1.0)*cj5*r00);
CheckValue<IkReal> x6094 = IKatan2WithCheck(IkReal(((((-1.0)*x6091*x6093))+((x6089*x6090))+((x6089*x6091))+(((-1.0)*x6090*x6093)))),IkReal(((((-1.0)*x6091*x6092))+(((-1.0)*x6090*x6092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6094.valid){
continue;
}
CheckValue<IkReal> x6095=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6094.value)+(((1.5707963267949)*(x6095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6096=IKcos(j4);
IkReal x6097=IKsin(j4);
IkReal x6098=(cj5*r00);
IkReal x6099=(cj5*r10);
IkReal x6100=(r21*sj5);
IkReal x6101=(cj5*r20);
IkReal x6102=((1.0)*x6096);
IkReal x6103=((1.0)*x6097);
IkReal x6104=(sj5*x6097);
IkReal x6105=(sj5*x6096);
evalcond[0]=((((-1.0)*x6098*x6102))+((r01*x6105))+((r02*x6097)));
evalcond[1]=((((-1.0)*x6101*x6103))+(((-1.0)*r22*x6102))+((x6097*x6100)));
evalcond[2]=(((r11*x6104))+(((-1.0)*x6099*x6103))+(((-1.0)*r12*x6102)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6102))+(((-1.0)*x6098*x6103))+((r01*x6104)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6101*x6102))+((r22*x6097))+((x6096*x6100)));
evalcond[5]=(((r11*x6105))+(((-1.0)*sj1*sj2))+(((-1.0)*x6099*x6102))+((r12*x6097))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6106=((1.0)*cj5);
CheckValue<IkReal> x6107 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6107.valid){
continue;
}
CheckValue<IkReal> x6108=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6106))+(((-1.0)*r20*sj5)))),-1);
if(!x6108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6107.value)+(((1.5707963267949)*(x6108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6109=IKcos(j4);
IkReal x6110=IKsin(j4);
IkReal x6111=(cj5*r00);
IkReal x6112=(cj5*r10);
IkReal x6113=(r21*sj5);
IkReal x6114=(cj5*r20);
IkReal x6115=((1.0)*x6109);
IkReal x6116=((1.0)*x6110);
IkReal x6117=(sj5*x6110);
IkReal x6118=(sj5*x6109);
evalcond[0]=(((r02*x6110))+(((-1.0)*x6111*x6115))+((r01*x6118)));
evalcond[1]=((((-1.0)*r22*x6115))+((x6110*x6113))+(((-1.0)*x6114*x6116)));
evalcond[2]=((((-1.0)*r12*x6115))+(((-1.0)*x6112*x6116))+((r11*x6117)));
evalcond[3]=((1.0)+(((-1.0)*x6111*x6116))+(((-1.0)*r02*x6115))+((r01*x6117)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6110))+(((-1.0)*x6114*x6115))+((x6109*x6113)));
evalcond[5]=((((-1.0)*x6112*x6115))+(((-1.0)*sj1*sj2))+((r12*x6110))+((r11*x6118))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6119 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6119.valid){
continue;
}
CheckValue<IkReal> x6120=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6119.value)+(((1.5707963267949)*(x6120.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6121=IKcos(j4);
IkReal x6122=IKsin(j4);
IkReal x6123=(cj5*r00);
IkReal x6124=(cj5*r10);
IkReal x6125=(r21*sj5);
IkReal x6126=(cj5*r20);
IkReal x6127=((1.0)*x6121);
IkReal x6128=((1.0)*x6122);
IkReal x6129=(sj5*x6122);
IkReal x6130=(sj5*x6121);
evalcond[0]=(((r02*x6122))+((r01*x6130))+(((-1.0)*x6123*x6127)));
evalcond[1]=((((-1.0)*x6126*x6128))+(((-1.0)*r22*x6127))+((x6122*x6125)));
evalcond[2]=((((-1.0)*x6124*x6128))+(((-1.0)*r12*x6127))+((r11*x6129)));
evalcond[3]=((1.0)+((r01*x6129))+(((-1.0)*r02*x6127))+(((-1.0)*x6123*x6128)));
evalcond[4]=(((cj2*sj1))+((x6121*x6125))+((cj1*sj2))+(((-1.0)*x6126*x6127))+((r22*x6122)));
evalcond[5]=(((r11*x6130))+((r12*x6122))+(((-1.0)*x6124*x6127))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6131=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6131);
rxp1_1=(px*r21);
rxp1_2=(r11*x6131);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6132=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6132);
rxp1_1=(px*r21);
rxp1_2=(r11*x6132);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6133=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6133);
rxp1_1=(px*r21);
rxp1_2=(r11*x6133);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6136=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6136.valid){
continue;
}
IkReal x6134=x6136.value;
IkReal x6135=(sj0*x6134);
cj4array[0]=(((cj1*cj2*x6135))+(((-1.0)*sj1*sj2*x6135)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6137=IKsin(j4);
IkReal x6138=IKcos(j4);
IkReal x6139=(r21*sj5);
IkReal x6140=((1.0)*cj5*r20);
evalcond[0]=(r02*x6137);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6138)));
evalcond[2]=(((x6137*x6139))+(((-1.0)*x6137*x6140)));
evalcond[3]=(((r11*sj5*x6137))+(((-1.0)*cj5*r10*x6137)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6138*x6140))+((x6138*x6139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6143=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6143.valid){
continue;
}
IkReal x6141=x6143.value;
IkReal x6142=((1.0)*x6141);
cj4array[0]=((((-1.0)*cj2*sj1*x6142))+(((-1.0)*cj1*sj2*x6142)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6144=IKsin(j4);
IkReal x6145=IKcos(j4);
IkReal x6146=((1.0)*sj0);
IkReal x6147=((1.0)*cj5);
IkReal x6148=(sj5*x6144);
evalcond[0]=(r02*x6144);
evalcond[1]=((((-1.0)*x6146))+(((-1.0)*r02*x6145)));
evalcond[2]=((((-1.0)*r20*x6144*x6147))+((r21*x6148)));
evalcond[3]=(((r11*x6148))+(((-1.0)*r10*x6144*x6147)));
evalcond[4]=(((r11*sj5*x6145))+(((-1.0)*r10*x6145*x6147))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6149=IKPowWithIntegerCheck(r02,-1);
if(!x6149.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6149.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6150=IKsin(j4);
IkReal x6151=IKcos(j4);
IkReal x6152=(r21*sj5);
IkReal x6153=((1.0)*cj5);
IkReal x6154=(r11*sj5);
evalcond[0]=(r02*x6150);
evalcond[1]=((((-1.0)*r20*x6150*x6153))+((x6150*x6152)));
evalcond[2]=((((-1.0)*r10*x6150*x6153))+((x6150*x6154)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x6151*x6153))+((cj1*sj2))+((x6151*x6152)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x6151*x6154))+(((-1.0)*r10*x6151*x6153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6155=((1.0)*sj0);
IkReal x6156=((1.0)*cj0);
CheckValue<IkReal> x6157 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6156))+(((-1.0)*r12*x6155)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6156))+(((-1.0)*r11*sj5*x6155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6157.valid){
continue;
}
CheckValue<IkReal> x6158=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6157.value)+(((1.5707963267949)*(x6158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6159=IKsin(j4);
IkReal x6160=IKcos(j4);
IkReal x6161=(cj5*r00);
IkReal x6162=(cj5*r10);
IkReal x6163=(r21*sj5);
IkReal x6164=(sj1*sj2);
IkReal x6165=(cj5*r20);
IkReal x6166=((1.0)*x6160);
IkReal x6167=((1.0)*cj1*cj2);
IkReal x6168=((1.0)*x6159);
IkReal x6169=(sj5*x6159);
IkReal x6170=(sj5*x6160);
evalcond[0]=(((x6159*x6163))+(((-1.0)*r22*x6166))+(((-1.0)*x6165*x6168)));
evalcond[1]=(cj0+(((-1.0)*r12*x6166))+((r11*x6169))+(((-1.0)*x6162*x6168)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6169))+(((-1.0)*r02*x6166))+(((-1.0)*x6161*x6168)));
evalcond[3]=(((r22*x6159))+((cj2*sj1))+((cj1*sj2))+((x6160*x6163))+(((-1.0)*x6165*x6166)));
evalcond[4]=((((-1.0)*cj0*x6167))+((r02*x6159))+((r01*x6170))+((cj0*x6164))+(((-1.0)*x6161*x6166)));
evalcond[5]=(((r12*x6159))+(((-1.0)*sj0*x6167))+((sj0*x6164))+((r11*x6170))+(((-1.0)*x6162*x6166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6171=((1.0)*cj5);
CheckValue<IkReal> x6172 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6171))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6172.valid){
continue;
}
CheckValue<IkReal> x6173=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6171)))),-1);
if(!x6173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6172.value)+(((1.5707963267949)*(x6173.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6174=IKsin(j4);
IkReal x6175=IKcos(j4);
IkReal x6176=(cj5*r00);
IkReal x6177=(cj5*r10);
IkReal x6178=(r21*sj5);
IkReal x6179=(sj1*sj2);
IkReal x6180=(cj5*r20);
IkReal x6181=((1.0)*x6175);
IkReal x6182=((1.0)*cj1*cj2);
IkReal x6183=((1.0)*x6174);
IkReal x6184=(sj5*x6174);
IkReal x6185=(sj5*x6175);
evalcond[0]=(((x6174*x6178))+(((-1.0)*r22*x6181))+(((-1.0)*x6180*x6183)));
evalcond[1]=(cj0+(((-1.0)*r12*x6181))+(((-1.0)*x6177*x6183))+((r11*x6184)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6181))+((r01*x6184))+(((-1.0)*x6176*x6183)));
evalcond[3]=(((cj2*sj1))+((x6175*x6178))+((cj1*sj2))+((r22*x6174))+(((-1.0)*x6180*x6181)));
evalcond[4]=(((r01*x6185))+((r02*x6174))+(((-1.0)*x6176*x6181))+(((-1.0)*cj0*x6182))+((cj0*x6179)));
evalcond[5]=(((r12*x6174))+((sj0*x6179))+(((-1.0)*x6177*x6181))+((r11*x6185))+(((-1.0)*sj0*x6182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6186=((1.0)*cj5);
CheckValue<IkReal> x6187 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6187.valid){
continue;
}
CheckValue<IkReal> x6188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6186))+(((-1.0)*r00*sj5)))),-1);
if(!x6188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6187.value)+(((1.5707963267949)*(x6188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6189=IKsin(j4);
IkReal x6190=IKcos(j4);
IkReal x6191=(cj5*r00);
IkReal x6192=(cj5*r10);
IkReal x6193=(r21*sj5);
IkReal x6194=(sj1*sj2);
IkReal x6195=(cj5*r20);
IkReal x6196=((1.0)*x6190);
IkReal x6197=((1.0)*cj1*cj2);
IkReal x6198=((1.0)*x6189);
IkReal x6199=(sj5*x6189);
IkReal x6200=(sj5*x6190);
evalcond[0]=((((-1.0)*x6195*x6198))+(((-1.0)*r22*x6196))+((x6189*x6193)));
evalcond[1]=(cj0+((r11*x6199))+(((-1.0)*r12*x6196))+(((-1.0)*x6192*x6198)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6191*x6198))+((r01*x6199))+(((-1.0)*r02*x6196)));
evalcond[3]=(((x6190*x6193))+((cj2*sj1))+((r22*x6189))+((cj1*sj2))+(((-1.0)*x6195*x6196)));
evalcond[4]=(((r01*x6200))+(((-1.0)*cj0*x6197))+(((-1.0)*x6191*x6196))+((r02*x6189))+((cj0*x6194)));
evalcond[5]=((((-1.0)*x6192*x6196))+(((-1.0)*sj0*x6197))+((sj0*x6194))+((r11*x6200))+((r12*x6189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6201=r21*r21;
IkReal x6202=cj5*cj5;
IkReal x6203=(cj2*sj1);
IkReal x6204=(cj1*sj2);
IkReal x6205=(r21*sj5);
IkReal x6206=((1.0)*cj5*r20);
CheckValue<IkReal> x6207 = IKatan2WithCheck(IkReal((((r22*x6204))+((r22*x6203)))),IkReal((((x6203*x6205))+((x6204*x6205))+(((-1.0)*x6204*x6206))+(((-1.0)*x6203*x6206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6207.valid){
continue;
}
CheckValue<IkReal> x6208=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6201))+(((-1.0)*(r22*r22)))+(((2.0)*cj5*r20*x6205))+(((-1.0)*x6202*(r20*r20)))+((x6201*x6202)))),-1);
if(!x6208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6207.value)+(((1.5707963267949)*(x6208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6209=IKsin(j4);
IkReal x6210=IKcos(j4);
IkReal x6211=(r21*sj5);
IkReal x6212=(cj5*r20);
IkReal x6213=((1.0)*x6210);
evalcond[0]=(((x6209*x6211))+(((-1.0)*x6209*x6212))+(((-1.0)*r22*x6213)));
evalcond[1]=(((cj2*sj1))+((r22*x6209))+((x6210*x6211))+((cj1*sj2))+(((-1.0)*x6212*x6213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6214=(cj5*sj4);
IkReal x6215=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6215))+(((-1.0)*r00*x6214)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6214))+(((-1.0)*r11*x6215))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6215))+(((-1.0)*r00*x6214))))+IKsqr((((r10*x6214))+(((-1.0)*r11*x6215))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6215))+(((-1.0)*r00*x6214))), (((r10*x6214))+(((-1.0)*r11*x6215))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6216=IKcos(j0);
IkReal x6217=IKsin(j0);
IkReal x6218=(cj5*r01);
IkReal x6219=((1.0)*cj1);
IkReal x6220=((0.39225)*sj1);
IkReal x6221=(r11*sj5);
IkReal x6222=((0.39225)*cj2);
IkReal x6223=((1.0)*sj1);
IkReal x6224=(r00*sj5);
IkReal x6225=(cj5*r11);
IkReal x6226=((1.0)*cj4);
IkReal x6227=(r01*sj5);
IkReal x6228=(r10*sj5);
IkReal x6229=(sj2*x6216);
IkReal x6230=(sj2*x6217);
IkReal x6231=(cj5*x6226);
IkReal x6232=(cj1*x6216);
IkReal x6233=(cj1*x6217);
IkReal x6234=(cj2*x6216);
IkReal x6235=((1.0)*cj5*sj4);
IkReal x6236=(cj2*x6217);
evalcond[0]=(x6216+(((-1.0)*r10*x6235))+(((-1.0)*r12*x6226))+((sj4*x6221)));
evalcond[1]=((((-1.0)*x6217))+((sj4*x6227))+(((-1.0)*r00*x6235))+(((-1.0)*r02*x6226)));
evalcond[2]=(x6218+x6224+(((-1.0)*x6219*x6229))+(((-1.0)*x6223*x6234)));
evalcond[3]=(x6225+x6228+(((-1.0)*x6219*x6230))+(((-1.0)*x6223*x6236)));
evalcond[4]=(((sj1*x6229))+((r02*sj4))+(((-1.0)*r00*x6231))+((cj4*x6227))+(((-1.0)*x6219*x6234)));
evalcond[5]=((((-1.0)*r10*x6231))+((sj1*x6230))+((r12*sj4))+((cj4*x6221))+(((-1.0)*x6219*x6236)));
evalcond[6]=((((-0.09465)*x6224))+((x6222*x6232))+(((-0.10915)*x6217))+(((-1.0)*px))+(((-1.0)*x6220*x6229))+(((0.425)*x6232))+(((-0.09465)*x6218)));
evalcond[7]=((((-0.09465)*x6225))+(((-0.09465)*x6228))+(((0.10915)*x6216))+((x6222*x6233))+(((-1.0)*py))+(((0.425)*x6233))+(((-1.0)*x6220*x6230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6237=((1.0)*cj5);
IkReal x6238=((1.0)*sj5);
CheckValue<IkReal> x6239 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6237))+(((-1.0)*r10*x6238)))),IkReal(((((-1.0)*r00*x6238))+(((-1.0)*r01*x6237)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6239.valid){
continue;
}
CheckValue<IkReal> x6240=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6240.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6239.value)+(((1.5707963267949)*(x6240.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6241=IKcos(j0);
IkReal x6242=IKsin(j0);
IkReal x6243=(cj5*r01);
IkReal x6244=((1.0)*cj1);
IkReal x6245=((0.39225)*sj1);
IkReal x6246=(cj5*r11);
IkReal x6247=(r00*sj5);
IkReal x6248=((0.39225)*cj2);
IkReal x6249=(r10*sj5);
IkReal x6250=(sj2*x6241);
IkReal x6251=(sj2*x6242);
IkReal x6252=(cj1*x6241);
IkReal x6253=((1.0)*cj2*sj1);
IkReal x6254=(cj1*x6242);
evalcond[0]=(x6243+x6247+(((-1.0)*x6244*x6250))+(((-1.0)*x6241*x6253)));
evalcond[1]=(x6249+x6246+(((-1.0)*x6242*x6253))+(((-1.0)*x6244*x6251)));
evalcond[2]=((((-0.09465)*x6247))+(((-0.09465)*x6243))+(((-1.0)*x6245*x6250))+(((-1.0)*px))+(((-0.10915)*x6242))+(((0.425)*x6252))+((x6248*x6252)));
evalcond[3]=((((-0.09465)*x6249))+(((-0.09465)*x6246))+(((-1.0)*x6245*x6251))+(((-1.0)*py))+(((0.425)*x6254))+((x6248*x6254))+(((0.10915)*x6241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6255=((1.0)*cj5);
IkReal x6256=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6255)));
j4eval[0]=x6256;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6255))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6256);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6257=((1.0)*cj5);
IkReal x6258=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6257)));
j4eval[0]=x6258;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6257)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6259=((1.0)*sj0);
IkReal x6260=((1.0)*cj0);
IkReal x6261=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6261;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6259))+(((-1.0)*r01*sj5*x6260)))))+(IKabs(((((-1.0)*r02*x6260))+(((-1.0)*r12*x6259))))));
j4eval[2]=IKsign(x6261);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6262=((-1.0)*r20);
IkReal x6264 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6264)==0){
continue;
}
IkReal x6263=pow(x6264,-0.5);
CheckValue<IkReal> x6265 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6262),IKFAST_ATAN2_MAGTHRESH);
if(!x6265.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6265.value));
IkReal gconst115=(r21*x6263);
IkReal gconst116=(x6262*x6263);
CheckValue<IkReal> x6266 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6266.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6266.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6267=((-1.0)*r20);
IkReal x6268=x6263;
CheckValue<IkReal> x6270 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6267),IKFAST_ATAN2_MAGTHRESH);
if(!x6270.valid){
continue;
}
IkReal x6269=((-1.0)*(x6270.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6269;
IkReal gconst114=x6269;
IkReal gconst115=(r21*x6268);
IkReal gconst116=(x6267*x6268);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6271=((-1.0)*r20);
IkReal x6272=x6263;
CheckValue<IkReal> x6274 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6271),IKFAST_ATAN2_MAGTHRESH);
if(!x6274.valid){
continue;
}
IkReal x6273=((-1.0)*(x6274.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6273;
IkReal gconst114=x6273;
IkReal gconst115=(r21*x6272);
IkReal gconst116=(x6271*x6272);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6275=((-1.0)*r20);
IkReal x6276=x6263;
CheckValue<IkReal> x6278 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6275),IKFAST_ATAN2_MAGTHRESH);
if(!x6278.valid){
continue;
}
IkReal x6277=((-1.0)*(x6278.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6277;
IkReal gconst114=x6277;
IkReal gconst115=(r21*x6276);
IkReal gconst116=(x6275*x6276);
IkReal x6279=((1.0)*(r22*r22));
CheckValue<IkReal> x6283=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6279))),-1);
if(!x6283.valid){
continue;
}
IkReal x6280=x6283.value;
IkReal x6281=((1.0)*x6280);
IkReal x6282=((((-1.0)*x6279))+(((-2.0)*x6280*(r20*r20)*(r21*r21)))+(((-1.0)*x6281*(r20*r20*r20*r20)))+(((-1.0)*x6281*(r21*r21*r21*r21))));
j4eval[0]=x6282;
j4eval[1]=IKsign(x6282);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6284=(cj2*sj1);
IkReal x6285=(gconst115*r21);
IkReal x6286=(cj1*sj2);
IkReal x6287=((1.0)*gconst116*r20);
CheckValue<IkReal> x6288=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x6287))+(((2.0)*gconst116*r20*x6285))+(((-1.0)*(x6285*x6285)))+(((-1.0)*(r22*r22))))),-1);
if(!x6288.valid){
continue;
}
CheckValue<IkReal> x6289 = IKatan2WithCheck(IkReal((((r22*x6284))+((r22*x6286)))),IkReal((((x6284*x6285))+((x6285*x6286))+(((-1.0)*x6284*x6287))+(((-1.0)*x6286*x6287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6288.value)))+(x6289.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6290=IKsin(j4);
IkReal x6291=IKcos(j4);
IkReal x6292=(sj1*sj2);
IkReal x6293=((1.0)*x6291);
IkReal x6294=((1.0)*cj1*cj2);
IkReal x6295=(gconst115*x6290);
IkReal x6296=(gconst115*x6291);
IkReal x6297=((1.0)*gconst116*x6290);
evalcond[0]=((((-1.0)*r20*x6297))+(((-1.0)*r22*x6293))+((r21*x6295)));
evalcond[1]=(cj0+((r11*x6295))+(((-1.0)*r10*x6297))+(((-1.0)*r12*x6293)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6297))+((r01*x6295))+(((-1.0)*r02*x6293)));
evalcond[3]=(((cj2*sj1))+((r22*x6290))+((cj1*sj2))+(((-1.0)*gconst116*r20*x6293))+((r21*x6296)));
evalcond[4]=(((r01*x6296))+(((-1.0)*gconst116*r00*x6293))+((cj0*x6292))+((r02*x6290))+(((-1.0)*cj0*x6294)));
evalcond[5]=(((r11*x6296))+((r12*x6290))+(((-1.0)*gconst116*r10*x6293))+((sj0*x6292))+(((-1.0)*sj0*x6294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6298=((1.0)*gconst116);
CheckValue<IkReal> x6299 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6298))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6299.valid){
continue;
}
CheckValue<IkReal> x6300=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6298)))),-1);
if(!x6300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6299.value)+(((1.5707963267949)*(x6300.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6301=IKsin(j4);
IkReal x6302=IKcos(j4);
IkReal x6303=(sj1*sj2);
IkReal x6304=((1.0)*x6302);
IkReal x6305=((1.0)*cj1*cj2);
IkReal x6306=(gconst115*x6301);
IkReal x6307=(gconst115*x6302);
IkReal x6308=((1.0)*gconst116*x6301);
evalcond[0]=(((r21*x6306))+(((-1.0)*r20*x6308))+(((-1.0)*r22*x6304)));
evalcond[1]=(cj0+(((-1.0)*r10*x6308))+(((-1.0)*r12*x6304))+((r11*x6306)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6304))+((r01*x6306))+(((-1.0)*r00*x6308)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6301))+((r21*x6307))+(((-1.0)*gconst116*r20*x6304)));
evalcond[4]=(((r01*x6307))+((r02*x6301))+((cj0*x6303))+(((-1.0)*gconst116*r00*x6304))+(((-1.0)*cj0*x6305)));
evalcond[5]=(((r11*x6307))+(((-1.0)*sj0*x6305))+((r12*x6301))+(((-1.0)*gconst116*r10*x6304))+((sj0*x6303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6309=((1.0)*gconst116);
CheckValue<IkReal> x6310=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6309)))),-1);
if(!x6310.valid){
continue;
}
CheckValue<IkReal> x6311 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6310.value)))+(x6311.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6312=IKsin(j4);
IkReal x6313=IKcos(j4);
IkReal x6314=(sj1*sj2);
IkReal x6315=((1.0)*x6313);
IkReal x6316=((1.0)*cj1*cj2);
IkReal x6317=(gconst115*x6312);
IkReal x6318=(gconst115*x6313);
IkReal x6319=((1.0)*gconst116*x6312);
evalcond[0]=((((-1.0)*r22*x6315))+((r21*x6317))+(((-1.0)*r20*x6319)));
evalcond[1]=(cj0+(((-1.0)*r12*x6315))+(((-1.0)*r10*x6319))+((r11*x6317)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6315))+((r01*x6317))+(((-1.0)*r00*x6319)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6312))+((r21*x6318))+(((-1.0)*gconst116*r20*x6315)));
evalcond[4]=(((r01*x6318))+((r02*x6312))+((cj0*x6314))+(((-1.0)*gconst116*r00*x6315))+(((-1.0)*cj0*x6316)));
evalcond[5]=(((r11*x6318))+(((-1.0)*sj0*x6316))+(((-1.0)*gconst116*r10*x6315))+((r12*x6312))+((sj0*x6314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6320=((-1.0)*r21);
IkReal x6322 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6322)==0){
continue;
}
IkReal x6321=pow(x6322,-0.5);
CheckValue<IkReal> x6323 = IKatan2WithCheck(IkReal(x6320),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6323.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6323.value))));
IkReal gconst118=(x6320*x6321);
IkReal gconst119=((1.0)*r20*x6321);
CheckValue<IkReal> x6324 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6324.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6324.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6325=((-1.0)*r21);
CheckValue<IkReal> x6328 = IKatan2WithCheck(IkReal(x6325),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6328.valid){
continue;
}
IkReal x6326=((1.0)*(x6328.value));
IkReal x6327=x6321;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6326)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6326)));
IkReal gconst118=(x6325*x6327);
IkReal gconst119=((1.0)*r20*x6327);
IkReal x6329=r22*r22;
IkReal x6330=((1.0)*x6329);
CheckValue<IkReal> x6334=IKPowWithIntegerCheck(((-1.0)+x6329),-1);
if(!x6334.valid){
continue;
}
IkReal x6331=x6334.value;
if((((1.0)+(((-1.0)*x6330)))) < -0.00001)
continue;
IkReal x6332=IKsqrt(((1.0)+(((-1.0)*x6330))));
IkReal x6333=(cj0*x6331*x6332);
j4eval[0]=((IKabs((x6333+(((-1.0)*x6330*x6333)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6335=((-1.0)*r21);
CheckValue<IkReal> x6338 = IKatan2WithCheck(IkReal(x6335),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6338.valid){
continue;
}
IkReal x6336=((1.0)*(x6338.value));
IkReal x6337=x6321;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6336)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6336)));
IkReal gconst118=(x6335*x6337);
IkReal gconst119=((1.0)*r20*x6337);
IkReal x6339=r22*r22;
IkReal x6340=((1.0)*x6339);
CheckValue<IkReal> x6344=IKPowWithIntegerCheck(((-1.0)+x6339),-1);
if(!x6344.valid){
continue;
}
IkReal x6341=x6344.value;
if((((1.0)+(((-1.0)*x6340)))) < -0.00001)
continue;
IkReal x6342=IKsqrt(((1.0)+(((-1.0)*x6340))));
IkReal x6343=(sj0*x6341*x6342);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x6340*x6343))+x6343))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6345=((-1.0)*r21);
CheckValue<IkReal> x6348 = IKatan2WithCheck(IkReal(x6345),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6348.valid){
continue;
}
IkReal x6346=((1.0)*(x6348.value));
IkReal x6347=x6321;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6346)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6346)));
IkReal gconst118=(x6345*x6347);
IkReal gconst119=((1.0)*r20*x6347);
IkReal x6349=r22*r22;
IkReal x6350=(r12*sj0);
IkReal x6351=(cj0*r02);
CheckValue<IkReal> x6355=IKPowWithIntegerCheck(((-1.0)+x6349),-1);
if(!x6355.valid){
continue;
}
IkReal x6352=x6355.value;
if((((1.0)+(((-1.0)*x6349)))) < -0.00001)
continue;
IkReal x6353=IKsqrt(((1.0)+(((-1.0)*x6349))));
IkReal x6354=(r22*x6352*x6353);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x6350*x6354))+((x6351*x6354)))))+(IKabs(((((-1.0)*x6350))+(((-1.0)*x6351))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6356=((1.0)*sj0);
IkReal x6357=((1.0)*gconst118);
CheckValue<IkReal> x6358 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6356)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x6356))+(((-1.0)*cj0*r01*x6357))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6358.valid){
continue;
}
CheckValue<IkReal> x6359=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6357)))),-1);
if(!x6359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6358.value)+(((1.5707963267949)*(x6359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6360=IKsin(j4);
IkReal x6361=IKcos(j4);
IkReal x6362=(gconst118*r01);
IkReal x6363=(sj1*sj2);
IkReal x6364=(gconst119*r20);
IkReal x6365=(gconst119*r10);
IkReal x6366=(gconst119*r00);
IkReal x6367=(gconst118*r21);
IkReal x6368=(gconst118*r11);
IkReal x6369=((1.0)*x6361);
IkReal x6370=((1.0)*cj1*cj2);
IkReal x6371=((1.0)*x6360);
evalcond[0]=(((x6360*x6367))+(((-1.0)*x6364*x6371))+(((-1.0)*r22*x6369)));
evalcond[1]=(cj0+(((-1.0)*x6365*x6371))+((x6360*x6368))+(((-1.0)*r12*x6369)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6366*x6371))+(((-1.0)*r02*x6369))+((x6360*x6362)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6361*x6367))+(((-1.0)*x6364*x6369))+((r22*x6360)));
evalcond[4]=((((-1.0)*x6366*x6369))+((x6361*x6362))+((cj0*x6363))+((r02*x6360))+(((-1.0)*cj0*x6370)));
evalcond[5]=((((-1.0)*x6365*x6369))+(((-1.0)*sj0*x6370))+((x6361*x6368))+((r12*x6360))+((sj0*x6363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6372=((1.0)*gconst119);
CheckValue<IkReal> x6373=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6372)))),-1);
if(!x6373.valid){
continue;
}
CheckValue<IkReal> x6374 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6372))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6373.value)))+(x6374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6375=IKsin(j4);
IkReal x6376=IKcos(j4);
IkReal x6377=(gconst118*r01);
IkReal x6378=(sj1*sj2);
IkReal x6379=(gconst119*r20);
IkReal x6380=(gconst119*r10);
IkReal x6381=(gconst119*r00);
IkReal x6382=(gconst118*r21);
IkReal x6383=(gconst118*r11);
IkReal x6384=((1.0)*x6376);
IkReal x6385=((1.0)*cj1*cj2);
IkReal x6386=((1.0)*x6375);
evalcond[0]=((((-1.0)*x6379*x6386))+(((-1.0)*r22*x6384))+((x6375*x6382)));
evalcond[1]=(cj0+(((-1.0)*x6380*x6386))+(((-1.0)*r12*x6384))+((x6375*x6383)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6381*x6386))+((x6375*x6377))+(((-1.0)*r02*x6384)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6379*x6384))+((cj1*sj2))+((x6376*x6382))+((r22*x6375)));
evalcond[4]=((((-1.0)*x6381*x6384))+(((-1.0)*cj0*x6385))+((cj0*x6378))+((r02*x6375))+((x6376*x6377)));
evalcond[5]=((((-1.0)*x6380*x6384))+((r12*x6375))+((x6376*x6383))+((sj0*x6378))+(((-1.0)*sj0*x6385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6387=((1.0)*gconst119);
CheckValue<IkReal> x6388 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6388.valid){
continue;
}
CheckValue<IkReal> x6389=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6387)))),-1);
if(!x6389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6388.value)+(((1.5707963267949)*(x6389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6390=IKsin(j4);
IkReal x6391=IKcos(j4);
IkReal x6392=(gconst118*r01);
IkReal x6393=(sj1*sj2);
IkReal x6394=(gconst119*r20);
IkReal x6395=(gconst119*r10);
IkReal x6396=(gconst119*r00);
IkReal x6397=(gconst118*r21);
IkReal x6398=(gconst118*r11);
IkReal x6399=((1.0)*x6391);
IkReal x6400=((1.0)*cj1*cj2);
IkReal x6401=((1.0)*x6390);
evalcond[0]=(((x6390*x6397))+(((-1.0)*r22*x6399))+(((-1.0)*x6394*x6401)));
evalcond[1]=(((x6390*x6398))+cj0+(((-1.0)*r12*x6399))+(((-1.0)*x6395*x6401)));
evalcond[2]=(((x6390*x6392))+(((-1.0)*sj0))+(((-1.0)*x6396*x6401))+(((-1.0)*r02*x6399)));
evalcond[3]=(((x6391*x6397))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6394*x6399))+((r22*x6390)));
evalcond[4]=(((cj0*x6393))+((x6391*x6392))+(((-1.0)*x6396*x6399))+(((-1.0)*cj0*x6400))+((r02*x6390)));
evalcond[5]=((((-1.0)*x6395*x6399))+((x6391*x6398))+((r12*x6390))+((sj0*x6393))+(((-1.0)*sj0*x6400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6402=((-1.0)*r10);
IkReal x6404 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6404)==0){
continue;
}
IkReal x6403=pow(x6404,-0.5);
CheckValue<IkReal> x6405 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6402),IKFAST_ATAN2_MAGTHRESH);
if(!x6405.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6405.value));
IkReal gconst121=(r11*x6403);
IkReal gconst122=(x6402*x6403);
CheckValue<IkReal> x6406 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6406.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6406.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6407=((-1.0)*r10);
IkReal x6408=x6403;
CheckValue<IkReal> x6410 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6407),IKFAST_ATAN2_MAGTHRESH);
if(!x6410.valid){
continue;
}
IkReal x6409=((-1.0)*(x6410.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6409;
IkReal gconst120=x6409;
IkReal gconst121=(r11*x6408);
IkReal gconst122=(x6407*x6408);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6411=((1.0)*sj0);
IkReal x6412=((1.0)*gconst121);
CheckValue<IkReal> x6413 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6411)))),IkReal(((((-1.0)*cj0*r01*x6412))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x6411))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6413.valid){
continue;
}
CheckValue<IkReal> x6414=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6412))+(((-1.0)*gconst122*r21)))),-1);
if(!x6414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6413.value)+(((1.5707963267949)*(x6414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6415=IKsin(j4);
IkReal x6416=IKcos(j4);
IkReal x6417=(gconst121*r11);
IkReal x6418=(sj1*sj2);
IkReal x6419=(gconst122*r00);
IkReal x6420=(gconst122*r10);
IkReal x6421=(gconst122*r20);
IkReal x6422=((1.0)*x6416);
IkReal x6423=((1.0)*cj1*cj2);
IkReal x6424=((1.0)*x6415);
IkReal x6425=(gconst121*x6415);
IkReal x6426=(gconst121*x6416);
evalcond[0]=(((r21*x6425))+(((-1.0)*x6421*x6424))+(((-1.0)*r22*x6422)));
evalcond[1]=(cj0+((x6415*x6417))+(((-1.0)*x6420*x6424))+(((-1.0)*r12*x6422)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6419*x6424))+((r01*x6425))+(((-1.0)*r02*x6422)));
evalcond[3]=(((r21*x6426))+((cj2*sj1))+(((-1.0)*x6421*x6422))+((cj1*sj2))+((r22*x6415)));
evalcond[4]=(((r02*x6415))+(((-1.0)*x6419*x6422))+(((-1.0)*cj0*x6423))+((cj0*x6418))+((r01*x6426)));
evalcond[5]=(((sj0*x6418))+((x6416*x6417))+(((-1.0)*sj0*x6423))+((r12*x6415))+(((-1.0)*x6420*x6422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6427=((1.0)*gconst122);
CheckValue<IkReal> x6428=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6427)))),-1);
if(!x6428.valid){
continue;
}
CheckValue<IkReal> x6429 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6427))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6428.value)))+(x6429.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6430=IKsin(j4);
IkReal x6431=IKcos(j4);
IkReal x6432=(gconst121*r11);
IkReal x6433=(sj1*sj2);
IkReal x6434=(gconst122*r00);
IkReal x6435=(gconst122*r10);
IkReal x6436=(gconst122*r20);
IkReal x6437=((1.0)*x6431);
IkReal x6438=((1.0)*cj1*cj2);
IkReal x6439=((1.0)*x6430);
IkReal x6440=(gconst121*x6430);
IkReal x6441=(gconst121*x6431);
evalcond[0]=((((-1.0)*r22*x6437))+((r21*x6440))+(((-1.0)*x6436*x6439)));
evalcond[1]=((((-1.0)*x6435*x6439))+cj0+(((-1.0)*r12*x6437))+((x6430*x6432)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6437))+((r01*x6440))+(((-1.0)*x6434*x6439)));
evalcond[3]=(((r22*x6430))+((cj2*sj1))+((cj1*sj2))+((r21*x6441))+(((-1.0)*x6436*x6437)));
evalcond[4]=(((r01*x6441))+((cj0*x6433))+(((-1.0)*x6434*x6437))+(((-1.0)*cj0*x6438))+((r02*x6430)));
evalcond[5]=((((-1.0)*x6435*x6437))+((r12*x6430))+(((-1.0)*sj0*x6438))+((sj0*x6433))+((x6431*x6432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6442=((-1.0)*r11);
IkReal x6444 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6444)==0){
continue;
}
IkReal x6443=pow(x6444,-0.5);
CheckValue<IkReal> x6445 = IKatan2WithCheck(IkReal(x6442),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6445.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6445.value))));
IkReal gconst124=(x6442*x6443);
IkReal gconst125=((1.0)*r10*x6443);
CheckValue<IkReal> x6446 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6446.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6446.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6447=((-1.0)*r11);
CheckValue<IkReal> x6450 = IKatan2WithCheck(IkReal(x6447),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6450.valid){
continue;
}
IkReal x6448=((1.0)*(x6450.value));
IkReal x6449=x6443;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6448)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6448)));
IkReal gconst124=(x6447*x6449);
IkReal gconst125=((1.0)*r10*x6449);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6451=((-1.0)*r11);
CheckValue<IkReal> x6454 = IKatan2WithCheck(IkReal(x6451),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6454.valid){
continue;
}
IkReal x6452=((1.0)*(x6454.value));
IkReal x6453=x6443;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6452)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6452)));
IkReal gconst124=(x6451*x6453);
IkReal gconst125=((1.0)*r10*x6453);
IkReal x6455=r12*r12;
IkReal x6456=((1.0)*sj0);
IkReal x6457=(cj0*r02);
IkReal x6458=x6443;
j4eval[0]=((IKabs(((((-1.0)*x6457))+(((-1.0)*r12*x6456)))))+(IKabs(((((-1.0)*x6456*x6458))+((r12*x6457*x6458))+((sj0*x6455*x6458))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6459=((-1.0)*r11);
CheckValue<IkReal> x6462 = IKatan2WithCheck(IkReal(x6459),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6462.valid){
continue;
}
IkReal x6460=((1.0)*(x6462.value));
IkReal x6461=x6443;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6460)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6460)));
IkReal gconst124=(x6459*x6461);
IkReal gconst125=((1.0)*r10*x6461);
IkReal x6463=r12*r12;
IkReal x6464=((1.0)+(((-1.0)*x6463)));
IkReal x6465=(cj2*r22*sj1);
IkReal x6466=(cj1*r22*sj2);
CheckValue<IkReal> x6473=IKPowWithIntegerCheck(x6464,-1);
if(!x6473.valid){
continue;
}
IkReal x6467=x6473.value;
CheckValue<IkReal> x6474=IKPowWithIntegerCheck(((-1.0)+x6463),-1);
if(!x6474.valid){
continue;
}
IkReal x6468=x6474.value;
IkReal x6469=((1.0)*x6467);
if((x6464) < -0.00001)
continue;
IkReal x6470=IKsqrt(x6464);
IkReal x6471=((1.0)*r12*x6468*x6470);
IkReal x6472=((((-1.0)*x6469*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x6469*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x6467)));
j4eval[0]=x6472;
j4eval[1]=IKsign(x6472);
j4eval[2]=((IKabs((x6465+x6466)))+(IKabs(((((-1.0)*x6465*x6471))+(((-1.0)*x6466*x6471))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6475=(gconst124*r21);
IkReal x6476=(cj1*sj2);
IkReal x6477=(cj2*sj1);
IkReal x6478=(gconst125*r20);
CheckValue<IkReal> x6479 = IKatan2WithCheck(IkReal((((r22*x6477))+((r22*x6476)))),IkReal(((((-1.0)*x6476*x6478))+(((-1.0)*x6477*x6478))+((x6475*x6477))+((x6475*x6476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6479.valid){
continue;
}
CheckValue<IkReal> x6480=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6475*x6475)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6478*x6478)))+(((2.0)*x6475*x6478)))),-1);
if(!x6480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6479.value)+(((1.5707963267949)*(x6480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6481=IKsin(j4);
IkReal x6482=IKcos(j4);
IkReal x6483=(sj1*sj2);
IkReal x6484=(gconst125*r20);
IkReal x6485=(gconst124*r01);
IkReal x6486=(gconst125*r00);
IkReal x6487=(gconst125*r10);
IkReal x6488=((1.0)*x6482);
IkReal x6489=((1.0)*cj1*cj2);
IkReal x6490=((1.0)*x6481);
IkReal x6491=(gconst124*x6481);
IkReal x6492=(gconst124*x6482);
evalcond[0]=((((-1.0)*r22*x6488))+((r21*x6491))+(((-1.0)*x6484*x6490)));
evalcond[1]=((((-1.0)*x6487*x6490))+cj0+(((-1.0)*r12*x6488))+((r11*x6491)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6486*x6490))+(((-1.0)*r02*x6488))+((x6481*x6485)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6481))+(((-1.0)*x6484*x6488))+((r21*x6492)));
evalcond[4]=(((x6482*x6485))+(((-1.0)*x6486*x6488))+((cj0*x6483))+((r02*x6481))+(((-1.0)*cj0*x6489)));
evalcond[5]=((((-1.0)*x6487*x6488))+((r11*x6492))+((r12*x6481))+(((-1.0)*sj0*x6489))+((sj0*x6483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6493=((1.0)*sj0);
IkReal x6494=((1.0)*cj0);
CheckValue<IkReal> x6495 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6494))+(((-1.0)*r12*x6493)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x6493))+(((-1.0)*gconst124*r01*x6494))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6495.valid){
continue;
}
CheckValue<IkReal> x6496=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6495.value)+(((1.5707963267949)*(x6496.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6497=IKsin(j4);
IkReal x6498=IKcos(j4);
IkReal x6499=(sj1*sj2);
IkReal x6500=(gconst125*r20);
IkReal x6501=(gconst124*r01);
IkReal x6502=(gconst125*r00);
IkReal x6503=(gconst125*r10);
IkReal x6504=((1.0)*x6498);
IkReal x6505=((1.0)*cj1*cj2);
IkReal x6506=((1.0)*x6497);
IkReal x6507=(gconst124*x6497);
IkReal x6508=(gconst124*x6498);
evalcond[0]=((((-1.0)*x6500*x6506))+((r21*x6507))+(((-1.0)*r22*x6504)));
evalcond[1]=((((-1.0)*r12*x6504))+cj0+(((-1.0)*x6503*x6506))+((r11*x6507)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6504))+(((-1.0)*x6502*x6506))+((x6497*x6501)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6500*x6504))+((r21*x6508))+((cj1*sj2))+((r22*x6497)));
evalcond[4]=(((x6498*x6501))+((cj0*x6499))+((r02*x6497))+(((-1.0)*cj0*x6505))+(((-1.0)*x6502*x6504)));
evalcond[5]=((((-1.0)*x6503*x6504))+((r12*x6497))+(((-1.0)*sj0*x6505))+((sj0*x6499))+((r11*x6508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6509=((1.0)*gconst125);
CheckValue<IkReal> x6510 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6509))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6510.valid){
continue;
}
CheckValue<IkReal> x6511=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6509)))),-1);
if(!x6511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6510.value)+(((1.5707963267949)*(x6511.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6512=IKsin(j4);
IkReal x6513=IKcos(j4);
IkReal x6514=(sj1*sj2);
IkReal x6515=(gconst125*r20);
IkReal x6516=(gconst124*r01);
IkReal x6517=(gconst125*r00);
IkReal x6518=(gconst125*r10);
IkReal x6519=((1.0)*x6513);
IkReal x6520=((1.0)*cj1*cj2);
IkReal x6521=((1.0)*x6512);
IkReal x6522=(gconst124*x6512);
IkReal x6523=(gconst124*x6513);
evalcond[0]=((((-1.0)*r22*x6519))+(((-1.0)*x6515*x6521))+((r21*x6522)));
evalcond[1]=(cj0+(((-1.0)*x6518*x6521))+(((-1.0)*r12*x6519))+((r11*x6522)));
evalcond[2]=((((-1.0)*r02*x6519))+(((-1.0)*sj0))+((x6512*x6516))+(((-1.0)*x6517*x6521)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6515*x6519))+((r21*x6523))+((r22*x6512)));
evalcond[4]=(((cj0*x6514))+((x6513*x6516))+(((-1.0)*x6517*x6519))+(((-1.0)*cj0*x6520))+((r02*x6512)));
evalcond[5]=((((-1.0)*x6518*x6519))+((r12*x6512))+((sj0*x6514))+((r11*x6523))+(((-1.0)*sj0*x6520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6524=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6524;
j4eval[1]=IKsign(x6524);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6525=((1.0)*cj5);
IkReal x6526=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6525)));
j4eval[0]=x6526;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6525)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6526);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6527=cj5*cj5;
IkReal x6528=r11*r11;
IkReal x6529=(cj5*r10);
IkReal x6530=(r11*sj5);
IkReal x6531=((((2.0)*x6529*x6530))+((x6527*x6528))+(((-1.0)*x6528))+(((-1.0)*(r12*r12)))+(((-1.0)*x6527*(r10*r10))));
j4eval[0]=x6531;
j4eval[1]=IKsign(x6531);
j4eval[2]=((IKabs(r12))+(IKabs((x6530+(((-1.0)*x6529))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6532=cj5*cj5;
IkReal x6533=r11*r11;
IkReal x6534=(cj5*r10);
IkReal x6535=(r11*sj5);
CheckValue<IkReal> x6536 = IKatan2WithCheck(IkReal((x6535+(((-1.0)*x6534)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6536.valid){
continue;
}
CheckValue<IkReal> x6537=IKPowWithIntegerCheck(IKsign(((((2.0)*x6534*x6535))+(((-1.0)*x6533))+(((-1.0)*(r12*r12)))+((x6532*x6533))+(((-1.0)*x6532*(r10*r10))))),-1);
if(!x6537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6536.value)+(((1.5707963267949)*(x6537.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6538=IKcos(j4);
IkReal x6539=IKsin(j4);
IkReal x6540=(cj5*r00);
IkReal x6541=(cj5*r10);
IkReal x6542=(r21*sj5);
IkReal x6543=(cj5*r20);
IkReal x6544=((1.0)*x6538);
IkReal x6545=((1.0)*x6539);
IkReal x6546=(sj5*x6539);
IkReal x6547=(sj5*x6538);
evalcond[0]=((((-1.0)*x6541*x6544))+((r11*x6547))+((r12*x6539)));
evalcond[1]=(((x6539*x6542))+(((-1.0)*r22*x6544))+(((-1.0)*x6543*x6545)));
evalcond[2]=((((-1.0)*x6540*x6545))+(((-1.0)*r02*x6544))+((r01*x6546)));
evalcond[3]=((1.0)+(((-1.0)*x6541*x6545))+(((-1.0)*r12*x6544))+((r11*x6546)));
evalcond[4]=(((cj2*sj1))+((x6538*x6542))+((cj1*sj2))+((r22*x6539))+(((-1.0)*x6543*x6544)));
evalcond[5]=(((r02*x6539))+(((-1.0)*x6540*x6544))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6548=((1.0)*cj5);
CheckValue<IkReal> x6549 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6548)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6549.valid){
continue;
}
CheckValue<IkReal> x6550=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6548)))),-1);
if(!x6550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6549.value)+(((1.5707963267949)*(x6550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6551=IKcos(j4);
IkReal x6552=IKsin(j4);
IkReal x6553=(cj5*r00);
IkReal x6554=(cj5*r10);
IkReal x6555=(r21*sj5);
IkReal x6556=(cj5*r20);
IkReal x6557=((1.0)*x6551);
IkReal x6558=((1.0)*x6552);
IkReal x6559=(sj5*x6552);
IkReal x6560=(sj5*x6551);
evalcond[0]=(((r11*x6560))+(((-1.0)*x6554*x6557))+((r12*x6552)));
evalcond[1]=(((x6552*x6555))+(((-1.0)*r22*x6557))+(((-1.0)*x6556*x6558)));
evalcond[2]=((((-1.0)*x6553*x6558))+(((-1.0)*r02*x6557))+((r01*x6559)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6557))+(((-1.0)*x6554*x6558))+((r11*x6559)));
evalcond[4]=(((cj2*sj1))+((x6551*x6555))+((cj1*sj2))+((r22*x6552))+(((-1.0)*x6556*x6557)));
evalcond[5]=((((-1.0)*x6553*x6557))+((r02*x6552))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6561=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6561.valid){
continue;
}
CheckValue<IkReal> x6562 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6561.value)))+(x6562.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6563=IKcos(j4);
IkReal x6564=IKsin(j4);
IkReal x6565=(cj5*r00);
IkReal x6566=(cj5*r10);
IkReal x6567=(r21*sj5);
IkReal x6568=(cj5*r20);
IkReal x6569=((1.0)*x6563);
IkReal x6570=((1.0)*x6564);
IkReal x6571=(sj5*x6564);
IkReal x6572=(sj5*x6563);
evalcond[0]=((((-1.0)*x6566*x6569))+((r12*x6564))+((r11*x6572)));
evalcond[1]=(((x6564*x6567))+(((-1.0)*r22*x6569))+(((-1.0)*x6568*x6570)));
evalcond[2]=(((r01*x6571))+(((-1.0)*x6565*x6570))+(((-1.0)*r02*x6569)));
evalcond[3]=((1.0)+(((-1.0)*x6566*x6570))+((r11*x6571))+(((-1.0)*r12*x6569)));
evalcond[4]=(((cj2*sj1))+((r22*x6564))+((x6563*x6567))+((cj1*sj2))+(((-1.0)*x6568*x6569)));
evalcond[5]=((((-1.0)*x6565*x6569))+((r01*x6572))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6573=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6573;
j4eval[1]=IKsign(x6573);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6574=((1.0)*cj5);
IkReal x6575=((((-1.0)*r21*x6574))+(((-1.0)*r20*sj5)));
j4eval[0]=x6575;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6574))))));
j4eval[2]=IKsign(x6575);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6576=cj5*cj5;
IkReal x6577=r11*r11;
IkReal x6578=(r11*sj5);
IkReal x6579=(cj5*r10);
IkReal x6580=((r12*r12)+(((-1.0)*x6576*x6577))+x6577+(((-2.0)*x6578*x6579))+((x6576*(r10*r10))));
j4eval[0]=x6580;
j4eval[1]=IKsign(x6580);
j4eval[2]=((IKabs(r12))+(IKabs((x6578+(((-1.0)*x6579))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6581=cj5*cj5;
IkReal x6582=r11*r11;
IkReal x6583=(cj5*r10);
IkReal x6584=(r11*sj5);
CheckValue<IkReal> x6585 = IKatan2WithCheck(IkReal(((((-1.0)*x6583))+x6584)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6585.valid){
continue;
}
CheckValue<IkReal> x6586=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x6583*x6584))+x6582+((x6581*(r10*r10)))+(((-1.0)*x6581*x6582)))),-1);
if(!x6586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6585.value)+(((1.5707963267949)*(x6586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6587=IKcos(j4);
IkReal x6588=IKsin(j4);
IkReal x6589=(cj5*r00);
IkReal x6590=(cj5*r10);
IkReal x6591=(r21*sj5);
IkReal x6592=(cj5*r20);
IkReal x6593=((1.0)*x6587);
IkReal x6594=((1.0)*x6588);
IkReal x6595=(sj5*x6588);
IkReal x6596=(sj5*x6587);
evalcond[0]=(((r11*x6596))+(((-1.0)*x6590*x6593))+((r12*x6588)));
evalcond[1]=(((x6588*x6591))+(((-1.0)*x6592*x6594))+(((-1.0)*r22*x6593)));
evalcond[2]=((((-1.0)*x6589*x6594))+(((-1.0)*r02*x6593))+((r01*x6595)));
evalcond[3]=((-1.0)+((r11*x6595))+(((-1.0)*r12*x6593))+(((-1.0)*x6590*x6594)));
evalcond[4]=(((cj2*sj1))+((r22*x6588))+((cj1*sj2))+(((-1.0)*x6592*x6593))+((x6587*x6591)));
evalcond[5]=(((r02*x6588))+(((-1.0)*x6589*x6593))+(((-1.0)*sj1*sj2))+((r01*x6596))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6597=((1.0)*cj5);
CheckValue<IkReal> x6598 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x6597))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6598.valid){
continue;
}
CheckValue<IkReal> x6599=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6597))+(((-1.0)*r20*sj5)))),-1);
if(!x6599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6598.value)+(((1.5707963267949)*(x6599.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6600=IKcos(j4);
IkReal x6601=IKsin(j4);
IkReal x6602=(cj5*r00);
IkReal x6603=(cj5*r10);
IkReal x6604=(r21*sj5);
IkReal x6605=(cj5*r20);
IkReal x6606=((1.0)*x6600);
IkReal x6607=((1.0)*x6601);
IkReal x6608=(sj5*x6601);
IkReal x6609=(sj5*x6600);
evalcond[0]=((((-1.0)*x6603*x6606))+((r11*x6609))+((r12*x6601)));
evalcond[1]=((((-1.0)*r22*x6606))+((x6601*x6604))+(((-1.0)*x6605*x6607)));
evalcond[2]=(((r01*x6608))+(((-1.0)*r02*x6606))+(((-1.0)*x6602*x6607)));
evalcond[3]=((-1.0)+(((-1.0)*x6603*x6607))+(((-1.0)*r12*x6606))+((r11*x6608)));
evalcond[4]=(((cj2*sj1))+((r22*x6601))+((cj1*sj2))+((x6600*x6604))+(((-1.0)*x6605*x6606)));
evalcond[5]=(((r01*x6609))+(((-1.0)*sj1*sj2))+(((-1.0)*x6602*x6606))+((r02*x6601))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6610 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6610.valid){
continue;
}
CheckValue<IkReal> x6611=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6610.value)+(((1.5707963267949)*(x6611.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6612=IKcos(j4);
IkReal x6613=IKsin(j4);
IkReal x6614=(cj5*r00);
IkReal x6615=(cj5*r10);
IkReal x6616=(r21*sj5);
IkReal x6617=(cj5*r20);
IkReal x6618=((1.0)*x6612);
IkReal x6619=((1.0)*x6613);
IkReal x6620=(sj5*x6613);
IkReal x6621=(sj5*x6612);
evalcond[0]=(((r12*x6613))+((r11*x6621))+(((-1.0)*x6615*x6618)));
evalcond[1]=(((x6613*x6616))+(((-1.0)*r22*x6618))+(((-1.0)*x6617*x6619)));
evalcond[2]=(((r01*x6620))+(((-1.0)*x6614*x6619))+(((-1.0)*r02*x6618)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6618))+((r11*x6620))+(((-1.0)*x6615*x6619)));
evalcond[4]=(((cj2*sj1))+((x6612*x6616))+((cj1*sj2))+(((-1.0)*x6617*x6618))+((r22*x6613)));
evalcond[5]=(((r02*x6613))+((r01*x6621))+(((-1.0)*sj1*sj2))+(((-1.0)*x6614*x6618))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6622=((-1.0)*r00);
IkReal x6624 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6624)==0){
continue;
}
IkReal x6623=pow(x6624,-0.5);
CheckValue<IkReal> x6625 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6622),IKFAST_ATAN2_MAGTHRESH);
if(!x6625.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6625.value));
IkReal gconst127=(r01*x6623);
IkReal gconst128=(x6622*x6623);
CheckValue<IkReal> x6626 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6626.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6626.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6627=((-1.0)*r00);
IkReal x6628=x6623;
CheckValue<IkReal> x6630 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6627),IKFAST_ATAN2_MAGTHRESH);
if(!x6630.valid){
continue;
}
IkReal x6629=((-1.0)*(x6630.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6629;
IkReal gconst126=x6629;
IkReal gconst127=(r01*x6628);
IkReal gconst128=(x6627*x6628);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6631=((1.0)*sj0);
IkReal x6632=((1.0)*gconst127);
CheckValue<IkReal> x6633=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6632)))),-1);
if(!x6633.valid){
continue;
}
CheckValue<IkReal> x6634 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6631)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x6631))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x6632)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6633.value)))+(x6634.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6635=IKsin(j4);
IkReal x6636=IKcos(j4);
IkReal x6637=(gconst127*r01);
IkReal x6638=(sj1*sj2);
IkReal x6639=(gconst128*r10);
IkReal x6640=(gconst128*r00);
IkReal x6641=(gconst128*r20);
IkReal x6642=((1.0)*x6636);
IkReal x6643=((1.0)*cj1*cj2);
IkReal x6644=((1.0)*x6635);
IkReal x6645=(gconst127*x6636);
IkReal x6646=(gconst127*x6635);
evalcond[0]=((((-1.0)*r22*x6642))+((r21*x6646))+(((-1.0)*x6641*x6644)));
evalcond[1]=((((-1.0)*x6639*x6644))+cj0+((r11*x6646))+(((-1.0)*r12*x6642)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6640*x6644))+((x6635*x6637))+(((-1.0)*r02*x6642)));
evalcond[3]=(((cj2*sj1))+((r21*x6645))+((cj1*sj2))+(((-1.0)*x6641*x6642))+((r22*x6635)));
evalcond[4]=((((-1.0)*x6640*x6642))+((x6636*x6637))+(((-1.0)*cj0*x6643))+((cj0*x6638))+((r02*x6635)));
evalcond[5]=((((-1.0)*x6639*x6642))+((r11*x6645))+((r12*x6635))+(((-1.0)*sj0*x6643))+((sj0*x6638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6647=((1.0)*gconst128);
CheckValue<IkReal> x6648 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x6647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6648.valid){
continue;
}
CheckValue<IkReal> x6649=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6647))+(((-1.0)*gconst127*r10)))),-1);
if(!x6649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6648.value)+(((1.5707963267949)*(x6649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6650=IKsin(j4);
IkReal x6651=IKcos(j4);
IkReal x6652=(gconst127*r01);
IkReal x6653=(sj1*sj2);
IkReal x6654=(gconst128*r10);
IkReal x6655=(gconst128*r00);
IkReal x6656=(gconst128*r20);
IkReal x6657=((1.0)*x6651);
IkReal x6658=((1.0)*cj1*cj2);
IkReal x6659=((1.0)*x6650);
IkReal x6660=(gconst127*x6651);
IkReal x6661=(gconst127*x6650);
evalcond[0]=((((-1.0)*r22*x6657))+((r21*x6661))+(((-1.0)*x6656*x6659)));
evalcond[1]=(cj0+(((-1.0)*r12*x6657))+((r11*x6661))+(((-1.0)*x6654*x6659)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6655*x6659))+(((-1.0)*r02*x6657))+((x6650*x6652)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6660))+(((-1.0)*x6656*x6657))+((r22*x6650)));
evalcond[4]=(((r02*x6650))+(((-1.0)*x6655*x6657))+(((-1.0)*cj0*x6658))+((x6651*x6652))+((cj0*x6653)));
evalcond[5]=(((r12*x6650))+(((-1.0)*sj0*x6658))+((r11*x6660))+((sj0*x6653))+(((-1.0)*x6654*x6657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6662=((-1.0)*r01);
IkReal x6664 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6664)==0){
continue;
}
IkReal x6663=pow(x6664,-0.5);
CheckValue<IkReal> x6665 = IKatan2WithCheck(IkReal(x6662),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6665.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6665.value))));
IkReal gconst130=(x6662*x6663);
IkReal gconst131=((1.0)*r00*x6663);
CheckValue<IkReal> x6666 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6666.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6666.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6667=((-1.0)*r01);
CheckValue<IkReal> x6670 = IKatan2WithCheck(IkReal(x6667),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6670.valid){
continue;
}
IkReal x6668=((1.0)*(x6670.value));
IkReal x6669=x6663;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6668)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6668)));
IkReal gconst130=(x6667*x6669);
IkReal gconst131=((1.0)*r00*x6669);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6671=((-1.0)*r01);
CheckValue<IkReal> x6674 = IKatan2WithCheck(IkReal(x6671),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6674.valid){
continue;
}
IkReal x6672=((1.0)*(x6674.value));
IkReal x6673=x6663;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6672)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6672)));
IkReal gconst130=(x6671*x6673);
IkReal gconst131=((1.0)*r00*x6673);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6675=((-1.0)*r01);
CheckValue<IkReal> x6678 = IKatan2WithCheck(IkReal(x6675),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6678.valid){
continue;
}
IkReal x6676=((1.0)*(x6678.value));
IkReal x6677=x6663;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6676)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6676)));
IkReal gconst130=(x6675*x6677);
IkReal gconst131=((1.0)*r00*x6677);
IkReal x6679=r02*r02;
IkReal x6680=(r12*sj0);
IkReal x6681=((1.0)*cj0);
IkReal x6682=x6663;
j4eval[0]=((IKabs(((((-1.0)*r02*x6681))+(((-1.0)*x6680)))))+(IKabs(((((-1.0)*x6681*x6682))+((r02*x6680*x6682))+((cj0*x6679*x6682))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6683=((1.0)*sj0);
IkReal x6684=((1.0)*gconst130);
CheckValue<IkReal> x6685 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6683)))),IkReal(((((-1.0)*gconst130*r11*x6683))+((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6684))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6685.valid){
continue;
}
CheckValue<IkReal> x6686=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6684))+(((-1.0)*gconst131*r21)))),-1);
if(!x6686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6685.value)+(((1.5707963267949)*(x6686.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6687=IKsin(j4);
IkReal x6688=IKcos(j4);
IkReal x6689=(gconst131*r10);
IkReal x6690=(sj1*sj2);
IkReal x6691=(gconst131*r20);
IkReal x6692=(gconst131*r00);
IkReal x6693=((1.0)*x6688);
IkReal x6694=((1.0)*cj1*cj2);
IkReal x6695=(gconst130*x6687);
IkReal x6696=((1.0)*x6687);
IkReal x6697=(gconst130*x6688);
evalcond[0]=(((r21*x6695))+(((-1.0)*x6691*x6696))+(((-1.0)*r22*x6693)));
evalcond[1]=(((r11*x6695))+cj0+(((-1.0)*x6689*x6696))+(((-1.0)*r12*x6693)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6693))+(((-1.0)*x6692*x6696))+((r01*x6695)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6687))+((r21*x6697))+(((-1.0)*x6691*x6693)));
evalcond[4]=(((r02*x6687))+((cj0*x6690))+(((-1.0)*cj0*x6694))+(((-1.0)*x6692*x6693))+((r01*x6697)));
evalcond[5]=(((r12*x6687))+((r11*x6697))+(((-1.0)*sj0*x6694))+((sj0*x6690))+(((-1.0)*x6689*x6693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6698=((1.0)*gconst131);
CheckValue<IkReal> x6699=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r10))+(((-1.0)*r11*x6698)))),-1);
if(!x6699.valid){
continue;
}
CheckValue<IkReal> x6700 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6698))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6699.value)))+(x6700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6701=IKsin(j4);
IkReal x6702=IKcos(j4);
IkReal x6703=(gconst131*r10);
IkReal x6704=(sj1*sj2);
IkReal x6705=(gconst131*r20);
IkReal x6706=(gconst131*r00);
IkReal x6707=((1.0)*x6702);
IkReal x6708=((1.0)*cj1*cj2);
IkReal x6709=(gconst130*x6701);
IkReal x6710=((1.0)*x6701);
IkReal x6711=(gconst130*x6702);
evalcond[0]=(((r21*x6709))+(((-1.0)*r22*x6707))+(((-1.0)*x6705*x6710)));
evalcond[1]=(cj0+(((-1.0)*x6703*x6710))+((r11*x6709))+(((-1.0)*r12*x6707)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6707))+((r01*x6709))+(((-1.0)*x6706*x6710)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6705*x6707))+((cj1*sj2))+((r21*x6711))+((r22*x6701)));
evalcond[4]=((((-1.0)*cj0*x6708))+(((-1.0)*x6706*x6707))+((cj0*x6704))+((r01*x6711))+((r02*x6701)));
evalcond[5]=(((r11*x6711))+((sj0*x6704))+(((-1.0)*x6703*x6707))+((r12*x6701))+(((-1.0)*sj0*x6708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6712=((1.0)*gconst131);
CheckValue<IkReal> x6713 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6712))+((cj0*gconst130*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6713.valid){
continue;
}
CheckValue<IkReal> x6714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6712))+(((-1.0)*gconst130*r00)))),-1);
if(!x6714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6713.value)+(((1.5707963267949)*(x6714.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6715=IKsin(j4);
IkReal x6716=IKcos(j4);
IkReal x6717=(gconst131*r10);
IkReal x6718=(sj1*sj2);
IkReal x6719=(gconst131*r20);
IkReal x6720=(gconst131*r00);
IkReal x6721=((1.0)*x6716);
IkReal x6722=((1.0)*cj1*cj2);
IkReal x6723=(gconst130*x6715);
IkReal x6724=((1.0)*x6715);
IkReal x6725=(gconst130*x6716);
evalcond[0]=((((-1.0)*r22*x6721))+(((-1.0)*x6719*x6724))+((r21*x6723)));
evalcond[1]=(((r11*x6723))+cj0+(((-1.0)*x6717*x6724))+(((-1.0)*r12*x6721)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6721))+(((-1.0)*x6720*x6724))+((r01*x6723)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6719*x6721))+((r22*x6715))+((r21*x6725)));
evalcond[4]=(((cj0*x6718))+((r02*x6715))+(((-1.0)*cj0*x6722))+(((-1.0)*x6720*x6721))+((r01*x6725)));
evalcond[5]=(((r11*x6725))+(((-1.0)*sj0*x6722))+(((-1.0)*x6717*x6721))+((sj0*x6718))+((r12*x6715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6726=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6726;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6726);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6727=((1.0)*cj5);
IkReal x6728=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6727)));
j4eval[0]=x6728;
j4eval[1]=((IKabs(((((-1.0)*r20*x6727))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6728);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6729=cj5*cj5;
IkReal x6730=r01*r01;
IkReal x6731=(cj5*r00);
IkReal x6732=(r01*sj5);
IkReal x6733=(x6730+(((-2.0)*x6731*x6732))+(((-1.0)*x6729*x6730))+((x6729*(r00*r00)))+(r02*r02));
j4eval[0]=x6733;
j4eval[1]=IKsign(x6733);
j4eval[2]=((IKabs(((((-1.0)*x6731))+x6732)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6734=cj5*cj5;
IkReal x6735=r01*r01;
IkReal x6736=(r01*sj5);
IkReal x6737=(cj5*r00);
CheckValue<IkReal> x6738 = IKatan2WithCheck(IkReal(((((-1.0)*x6737))+x6736)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6738.valid){
continue;
}
CheckValue<IkReal> x6739=IKPowWithIntegerCheck(IKsign((x6735+(((-2.0)*x6736*x6737))+(r02*r02)+(((-1.0)*x6734*x6735))+((x6734*(r00*r00))))),-1);
if(!x6739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6738.value)+(((1.5707963267949)*(x6739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6740=IKcos(j4);
IkReal x6741=IKsin(j4);
IkReal x6742=(cj5*r00);
IkReal x6743=(cj5*r10);
IkReal x6744=(r21*sj5);
IkReal x6745=(cj5*r20);
IkReal x6746=((1.0)*x6740);
IkReal x6747=((1.0)*x6741);
IkReal x6748=(sj5*x6741);
IkReal x6749=(sj5*x6740);
evalcond[0]=(((r02*x6741))+(((-1.0)*x6742*x6746))+((r01*x6749)));
evalcond[1]=((((-1.0)*r22*x6746))+((x6741*x6744))+(((-1.0)*x6745*x6747)));
evalcond[2]=((((-1.0)*r12*x6746))+((r11*x6748))+(((-1.0)*x6743*x6747)));
evalcond[3]=((-1.0)+(((-1.0)*x6742*x6747))+(((-1.0)*r02*x6746))+((r01*x6748)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6745*x6746))+((r22*x6741))+((x6740*x6744)));
evalcond[5]=(((r11*x6749))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6741))+(((-1.0)*x6743*x6746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6750=((1.0)*cj5);
CheckValue<IkReal> x6751 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6750))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6751.valid){
continue;
}
CheckValue<IkReal> x6752=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6750)))),-1);
if(!x6752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6751.value)+(((1.5707963267949)*(x6752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6753=IKcos(j4);
IkReal x6754=IKsin(j4);
IkReal x6755=(cj5*r00);
IkReal x6756=(cj5*r10);
IkReal x6757=(r21*sj5);
IkReal x6758=(cj5*r20);
IkReal x6759=((1.0)*x6753);
IkReal x6760=((1.0)*x6754);
IkReal x6761=(sj5*x6754);
IkReal x6762=(sj5*x6753);
evalcond[0]=((((-1.0)*x6755*x6759))+((r01*x6762))+((r02*x6754)));
evalcond[1]=((((-1.0)*x6758*x6760))+((x6754*x6757))+(((-1.0)*r22*x6759)));
evalcond[2]=(((r11*x6761))+(((-1.0)*x6756*x6760))+(((-1.0)*r12*x6759)));
evalcond[3]=((-1.0)+(((-1.0)*x6755*x6760))+((r01*x6761))+(((-1.0)*r02*x6759)));
evalcond[4]=(((cj2*sj1))+((r22*x6754))+(((-1.0)*x6758*x6759))+((cj1*sj2))+((x6753*x6757)));
evalcond[5]=(((r12*x6754))+(((-1.0)*cj1*cj2))+((r11*x6762))+((sj1*sj2))+(((-1.0)*x6756*x6759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6763=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6763.valid){
continue;
}
CheckValue<IkReal> x6764 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6763.value)))+(x6764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6765=IKcos(j4);
IkReal x6766=IKsin(j4);
IkReal x6767=(cj5*r00);
IkReal x6768=(cj5*r10);
IkReal x6769=(r21*sj5);
IkReal x6770=(cj5*r20);
IkReal x6771=((1.0)*x6765);
IkReal x6772=((1.0)*x6766);
IkReal x6773=(sj5*x6766);
IkReal x6774=(sj5*x6765);
evalcond[0]=(((r02*x6766))+((r01*x6774))+(((-1.0)*x6767*x6771)));
evalcond[1]=(((x6766*x6769))+(((-1.0)*r22*x6771))+(((-1.0)*x6770*x6772)));
evalcond[2]=(((r11*x6773))+(((-1.0)*x6768*x6772))+(((-1.0)*r12*x6771)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6771))+((r01*x6773))+(((-1.0)*x6767*x6772)));
evalcond[4]=(((cj2*sj1))+((r22*x6766))+((x6765*x6769))+(((-1.0)*x6770*x6771))+((cj1*sj2)));
evalcond[5]=(((r11*x6774))+(((-1.0)*x6768*x6771))+((r12*x6766))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6775=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6775;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6776=((1.0)*cj5);
IkReal x6777=((((-1.0)*r21*x6776))+(((-1.0)*r20*sj5)));
j4eval[0]=x6777;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6776))))));
j4eval[2]=IKsign(x6777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6778=(r01*sj5);
IkReal x6779=(cj1*sj2);
IkReal x6780=(cj2*sj1);
IkReal x6781=((1.0)*r02);
IkReal x6782=((1.0)*cj5*r00);
IkReal x6783=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6783;
j4eval[1]=((IKabs(((((-1.0)*x6779*x6782))+((x6778*x6780))+((x6778*x6779))+(((-1.0)*x6780*x6782)))))+(IKabs(((((-1.0)*x6779*x6781))+(((-1.0)*x6780*x6781))))));
j4eval[2]=IKsign(x6783);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6784=(r01*sj5);
IkReal x6785=(cj1*sj2);
IkReal x6786=(cj2*sj1);
IkReal x6787=((1.0)*r02);
IkReal x6788=((1.0)*cj5*r00);
CheckValue<IkReal> x6789 = IKatan2WithCheck(IkReal((((x6784*x6786))+((x6784*x6785))+(((-1.0)*x6785*x6788))+(((-1.0)*x6786*x6788)))),IkReal(((((-1.0)*x6785*x6787))+(((-1.0)*x6786*x6787)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6789.valid){
continue;
}
CheckValue<IkReal> x6790=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6789.value)+(((1.5707963267949)*(x6790.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6791=IKcos(j4);
IkReal x6792=IKsin(j4);
IkReal x6793=(cj5*r00);
IkReal x6794=(cj5*r10);
IkReal x6795=(r21*sj5);
IkReal x6796=(cj5*r20);
IkReal x6797=((1.0)*x6791);
IkReal x6798=((1.0)*x6792);
IkReal x6799=(sj5*x6792);
IkReal x6800=(sj5*x6791);
evalcond[0]=(((r02*x6792))+(((-1.0)*x6793*x6797))+((r01*x6800)));
evalcond[1]=(((x6792*x6795))+(((-1.0)*r22*x6797))+(((-1.0)*x6796*x6798)));
evalcond[2]=(((r11*x6799))+(((-1.0)*x6794*x6798))+(((-1.0)*r12*x6797)));
evalcond[3]=((1.0)+(((-1.0)*x6793*x6798))+((r01*x6799))+(((-1.0)*r02*x6797)));
evalcond[4]=(((cj2*sj1))+((r22*x6792))+((cj1*sj2))+((x6791*x6795))+(((-1.0)*x6796*x6797)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x6800))+((r12*x6792))+((cj1*cj2))+(((-1.0)*x6794*x6797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6801=((1.0)*cj5);
CheckValue<IkReal> x6802 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6801)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6802.valid){
continue;
}
CheckValue<IkReal> x6803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6801))+(((-1.0)*r20*sj5)))),-1);
if(!x6803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6802.value)+(((1.5707963267949)*(x6803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6804=IKcos(j4);
IkReal x6805=IKsin(j4);
IkReal x6806=(cj5*r00);
IkReal x6807=(cj5*r10);
IkReal x6808=(r21*sj5);
IkReal x6809=(cj5*r20);
IkReal x6810=((1.0)*x6804);
IkReal x6811=((1.0)*x6805);
IkReal x6812=(sj5*x6805);
IkReal x6813=(sj5*x6804);
evalcond[0]=((((-1.0)*x6806*x6810))+((r01*x6813))+((r02*x6805)));
evalcond[1]=(((x6805*x6808))+(((-1.0)*x6809*x6811))+(((-1.0)*r22*x6810)));
evalcond[2]=(((r11*x6812))+(((-1.0)*x6807*x6811))+(((-1.0)*r12*x6810)));
evalcond[3]=((1.0)+(((-1.0)*x6806*x6811))+(((-1.0)*r02*x6810))+((r01*x6812)));
evalcond[4]=(((cj2*sj1))+((r22*x6805))+((cj1*sj2))+(((-1.0)*x6809*x6810))+((x6804*x6808)));
evalcond[5]=(((r11*x6813))+(((-1.0)*sj1*sj2))+(((-1.0)*x6807*x6810))+((r12*x6805))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6814 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6814.valid){
continue;
}
CheckValue<IkReal> x6815=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6814.value)+(((1.5707963267949)*(x6815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6816=IKcos(j4);
IkReal x6817=IKsin(j4);
IkReal x6818=(cj5*r00);
IkReal x6819=(cj5*r10);
IkReal x6820=(r21*sj5);
IkReal x6821=(cj5*r20);
IkReal x6822=((1.0)*x6816);
IkReal x6823=((1.0)*x6817);
IkReal x6824=(sj5*x6817);
IkReal x6825=(sj5*x6816);
evalcond[0]=((((-1.0)*x6818*x6822))+((r01*x6825))+((r02*x6817)));
evalcond[1]=(((x6817*x6820))+(((-1.0)*r22*x6822))+(((-1.0)*x6821*x6823)));
evalcond[2]=((((-1.0)*r12*x6822))+((r11*x6824))+(((-1.0)*x6819*x6823)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6822))+(((-1.0)*x6818*x6823))+((r01*x6824)));
evalcond[4]=(((cj2*sj1))+((x6816*x6820))+((cj1*sj2))+((r22*x6817))+(((-1.0)*x6821*x6822)));
evalcond[5]=(((r12*x6817))+(((-1.0)*sj1*sj2))+((r11*x6825))+((cj1*cj2))+(((-1.0)*x6819*x6822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6826=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6826);
rxp1_1=(px*r21);
rxp1_2=(r11*x6826);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6827=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6827);
rxp1_1=(px*r21);
rxp1_2=(r11*x6827);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6828=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6828);
rxp1_1=(px*r21);
rxp1_2=(r11*x6828);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6831=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6831.valid){
continue;
}
IkReal x6829=x6831.value;
IkReal x6830=(sj0*x6829);
cj4array[0]=(((cj1*cj2*x6830))+(((-1.0)*sj1*sj2*x6830)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6832=IKsin(j4);
IkReal x6833=IKcos(j4);
IkReal x6834=(r21*sj5);
IkReal x6835=((1.0)*cj5*r20);
evalcond[0]=(r02*x6832);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6833)));
evalcond[2]=(((x6832*x6834))+(((-1.0)*x6832*x6835)));
evalcond[3]=((((-1.0)*cj5*r10*x6832))+((r11*sj5*x6832)));
evalcond[4]=(((x6833*x6834))+((cj2*sj1))+(((-1.0)*x6833*x6835))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6838=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6838.valid){
continue;
}
IkReal x6836=x6838.value;
IkReal x6837=((1.0)*x6836);
cj4array[0]=((((-1.0)*cj2*sj1*x6837))+(((-1.0)*cj1*sj2*x6837)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6839=IKsin(j4);
IkReal x6840=IKcos(j4);
IkReal x6841=((1.0)*sj0);
IkReal x6842=((1.0)*cj5);
IkReal x6843=(sj5*x6839);
evalcond[0]=(r02*x6839);
evalcond[1]=((((-1.0)*x6841))+(((-1.0)*r02*x6840)));
evalcond[2]=(((r21*x6843))+(((-1.0)*r20*x6839*x6842)));
evalcond[3]=(((r11*x6843))+(((-1.0)*r10*x6839*x6842)));
evalcond[4]=(((r11*sj5*x6840))+(((-1.0)*r10*x6840*x6842))+(((-1.0)*cj1*cj2*x6841))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6844=IKPowWithIntegerCheck(r02,-1);
if(!x6844.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6844.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6845=IKsin(j4);
IkReal x6846=IKcos(j4);
IkReal x6847=(r21*sj5);
IkReal x6848=((1.0)*cj5);
IkReal x6849=(r11*sj5);
evalcond[0]=(r02*x6845);
evalcond[1]=((((-1.0)*r20*x6845*x6848))+((x6845*x6847)));
evalcond[2]=((((-1.0)*r10*x6845*x6848))+((x6845*x6849)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6846*x6847))+(((-1.0)*r20*x6846*x6848)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x6846*x6849))+(((-1.0)*r10*x6846*x6848))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6850=((1.0)*sj0);
IkReal x6851=((1.0)*cj0);
CheckValue<IkReal> x6852 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6851))+(((-1.0)*r12*x6850)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6850))+(((-1.0)*r01*sj5*x6851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6852.valid){
continue;
}
CheckValue<IkReal> x6853=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6852.value)+(((1.5707963267949)*(x6853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6854=IKsin(j4);
IkReal x6855=IKcos(j4);
IkReal x6856=(cj5*r00);
IkReal x6857=(cj5*r10);
IkReal x6858=(r21*sj5);
IkReal x6859=(sj1*sj2);
IkReal x6860=(cj5*r20);
IkReal x6861=((1.0)*x6855);
IkReal x6862=((1.0)*cj1*cj2);
IkReal x6863=((1.0)*x6854);
IkReal x6864=(sj5*x6854);
IkReal x6865=(sj5*x6855);
evalcond[0]=((((-1.0)*x6860*x6863))+(((-1.0)*r22*x6861))+((x6854*x6858)));
evalcond[1]=((((-1.0)*x6857*x6863))+((r11*x6864))+cj0+(((-1.0)*r12*x6861)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6861))+((r01*x6864))+(((-1.0)*x6856*x6863)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6860*x6861))+((r22*x6854))+((cj1*sj2))+((x6855*x6858)));
evalcond[4]=(((r02*x6854))+((cj0*x6859))+((r01*x6865))+(((-1.0)*cj0*x6862))+(((-1.0)*x6856*x6861)));
evalcond[5]=((((-1.0)*x6857*x6861))+((sj0*x6859))+((r11*x6865))+((r12*x6854))+(((-1.0)*sj0*x6862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6866=((1.0)*cj5);
CheckValue<IkReal> x6867 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6866))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6867.valid){
continue;
}
CheckValue<IkReal> x6868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6866)))),-1);
if(!x6868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6867.value)+(((1.5707963267949)*(x6868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6869=IKsin(j4);
IkReal x6870=IKcos(j4);
IkReal x6871=(cj5*r00);
IkReal x6872=(cj5*r10);
IkReal x6873=(r21*sj5);
IkReal x6874=(sj1*sj2);
IkReal x6875=(cj5*r20);
IkReal x6876=((1.0)*x6870);
IkReal x6877=((1.0)*cj1*cj2);
IkReal x6878=((1.0)*x6869);
IkReal x6879=(sj5*x6869);
IkReal x6880=(sj5*x6870);
evalcond[0]=((((-1.0)*x6875*x6878))+(((-1.0)*r22*x6876))+((x6869*x6873)));
evalcond[1]=(((r11*x6879))+cj0+(((-1.0)*r12*x6876))+(((-1.0)*x6872*x6878)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6871*x6878))+(((-1.0)*r02*x6876))+((r01*x6879)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6875*x6876))+((r22*x6869))+((x6870*x6873))+((cj1*sj2)));
evalcond[4]=(((r02*x6869))+(((-1.0)*x6871*x6876))+((cj0*x6874))+((r01*x6880))+(((-1.0)*cj0*x6877)));
evalcond[5]=(((sj0*x6874))+((r11*x6880))+((r12*x6869))+(((-1.0)*x6872*x6876))+(((-1.0)*sj0*x6877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6881=((1.0)*cj5);
CheckValue<IkReal> x6882=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6881)))),-1);
if(!x6882.valid){
continue;
}
CheckValue<IkReal> x6883 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6881)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6882.value)))+(x6883.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6884=IKsin(j4);
IkReal x6885=IKcos(j4);
IkReal x6886=(cj5*r00);
IkReal x6887=(cj5*r10);
IkReal x6888=(r21*sj5);
IkReal x6889=(sj1*sj2);
IkReal x6890=(cj5*r20);
IkReal x6891=((1.0)*x6885);
IkReal x6892=((1.0)*cj1*cj2);
IkReal x6893=((1.0)*x6884);
IkReal x6894=(sj5*x6884);
IkReal x6895=(sj5*x6885);
evalcond[0]=(((x6884*x6888))+(((-1.0)*x6890*x6893))+(((-1.0)*r22*x6891)));
evalcond[1]=(cj0+(((-1.0)*r12*x6891))+((r11*x6894))+(((-1.0)*x6887*x6893)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6886*x6893))+(((-1.0)*r02*x6891))+((r01*x6894)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6890*x6891))+((r22*x6884))+((x6885*x6888)));
evalcond[4]=((((-1.0)*cj0*x6892))+(((-1.0)*x6886*x6891))+((cj0*x6889))+((r02*x6884))+((r01*x6895)));
evalcond[5]=(((sj0*x6889))+(((-1.0)*sj0*x6892))+((r11*x6895))+((r12*x6884))+(((-1.0)*x6887*x6891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6896=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6896;
j0eval[1]=IKsign(x6896);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6897=cj5*cj5;
IkReal x6898=r21*r21;
IkReal x6899=(cj2*sj1);
IkReal x6900=(cj1*sj2);
IkReal x6901=(r21*sj5);
IkReal x6902=((1.0)*cj5*r20);
IkReal x6903=(((x6897*(r20*r20)))+(r22*r22)+(((-1.0)*x6897*x6898))+x6898+(((-2.0)*cj5*r20*x6901)));
j4eval[0]=x6903;
j4eval[1]=IKsign(x6903);
j4eval[2]=((IKabs((((r22*x6900))+((r22*x6899)))))+(IKabs((((x6899*x6901))+(((-1.0)*x6900*x6902))+((x6900*x6901))+(((-1.0)*x6899*x6902))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6904=cj1*cj1;
IkReal x6905=(cj2*sj2);
IkReal x6906=(cj2*sj1);
IkReal x6907=(cj1*sj1);
j0eval[0]=((((-1.08349267049076)*cj1*x6906))+(((-2.0)*cj1*cj2*x6906))+(((-2.0)*x6904*x6905))+x6907+x6905+(((-1.08349267049076)*sj2*x6904)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6906)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6908=IKsin(j0);
IkReal x6909=IKcos(j0);
evalcond[0]=((((0.81725)*x6909))+(((-0.10915)*x6908))+(((-1.0)*px)));
evalcond[1]=((((0.81725)*x6908))+(((-1.0)*py))+(((0.10915)*x6909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6910=((1.0)*cj5);
IkReal x6911=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6910)));
j4eval[0]=x6911;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6910)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6911);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6912=((1.0)*cj5);
IkReal x6913=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6912)));
j4eval[0]=x6913;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6912))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6913);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6914=cj5*cj5;
IkReal x6915=((1.0)*sj5);
IkReal x6916=(cj5*r20);
IkReal x6917=(r11*r21);
IkReal x6918=((((-1.0)*x6914*x6917))+((r12*r22))+((r10*r20*x6914))+(((-1.0)*r11*x6915*x6916))+(((-1.0)*cj5*r10*r21*x6915))+x6917);
j4eval[0]=x6918;
j4eval[1]=IKsign(x6918);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x6915))+((cj0*x6916))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6919=cj5*cj5;
IkReal x6920=((1.0)*sj5);
IkReal x6921=(cj5*r20);
IkReal x6922=(r11*r21);
CheckValue<IkReal> x6923 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6920))+((cj0*x6921)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6923.valid){
continue;
}
CheckValue<IkReal> x6924=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6920))+(((-1.0)*r11*x6920*x6921))+((r12*r22))+(((-1.0)*x6919*x6922))+((r10*r20*x6919))+x6922)),-1);
if(!x6924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6923.value)+(((1.5707963267949)*(x6924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6925=IKsin(j4);
IkReal x6926=IKcos(j4);
IkReal x6927=((1.0)*sj0);
IkReal x6928=(cj5*r00);
IkReal x6929=(r11*sj5);
IkReal x6930=(cj5*r10);
IkReal x6931=(r21*sj5);
IkReal x6932=(cj5*r20);
IkReal x6933=(r01*sj5);
IkReal x6934=((1.0)*x6926);
IkReal x6935=((1.0)*x6925);
evalcond[0]=((((-1.0)*x6932*x6935))+(((-1.0)*r22*x6934))+((x6925*x6931)));
evalcond[1]=(((x6926*x6932))+(((-1.0)*r22*x6935))+(((-1.0)*x6931*x6934)));
evalcond[2]=(cj0+(((-1.0)*x6930*x6935))+(((-1.0)*r12*x6934))+((x6925*x6929)));
evalcond[3]=((((-1.0)*r02*x6934))+(((-1.0)*x6928*x6935))+((x6925*x6933))+(((-1.0)*x6927)));
evalcond[4]=(((x6926*x6928))+(((-1.0)*r02*x6935))+(((-1.0)*cj0))+(((-1.0)*x6933*x6934)));
evalcond[5]=(((x6926*x6930))+(((-1.0)*r12*x6935))+(((-1.0)*x6927))+(((-1.0)*x6929*x6934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6936=((1.0)*cj5);
CheckValue<IkReal> x6937=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6936)))),-1);
if(!x6937.valid){
continue;
}
CheckValue<IkReal> x6938 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6936)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6937.value)))+(x6938.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6939=IKsin(j4);
IkReal x6940=IKcos(j4);
IkReal x6941=((1.0)*sj0);
IkReal x6942=(cj5*r00);
IkReal x6943=(r11*sj5);
IkReal x6944=(cj5*r10);
IkReal x6945=(r21*sj5);
IkReal x6946=(cj5*r20);
IkReal x6947=(r01*sj5);
IkReal x6948=((1.0)*x6940);
IkReal x6949=((1.0)*x6939);
evalcond[0]=(((x6939*x6945))+(((-1.0)*r22*x6948))+(((-1.0)*x6946*x6949)));
evalcond[1]=(((x6940*x6946))+(((-1.0)*x6945*x6948))+(((-1.0)*r22*x6949)));
evalcond[2]=(cj0+(((-1.0)*r12*x6948))+((x6939*x6943))+(((-1.0)*x6944*x6949)));
evalcond[3]=((((-1.0)*x6942*x6949))+(((-1.0)*x6941))+((x6939*x6947))+(((-1.0)*r02*x6948)));
evalcond[4]=(((x6940*x6942))+(((-1.0)*r02*x6949))+(((-1.0)*x6947*x6948))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6943*x6948))+(((-1.0)*r12*x6949))+(((-1.0)*x6941))+((x6940*x6944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6950=((1.0)*cj5);
CheckValue<IkReal> x6951=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6950)))),-1);
if(!x6951.valid){
continue;
}
CheckValue<IkReal> x6952 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6951.value)))+(x6952.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6953=IKsin(j4);
IkReal x6954=IKcos(j4);
IkReal x6955=((1.0)*sj0);
IkReal x6956=(cj5*r00);
IkReal x6957=(r11*sj5);
IkReal x6958=(cj5*r10);
IkReal x6959=(r21*sj5);
IkReal x6960=(cj5*r20);
IkReal x6961=(r01*sj5);
IkReal x6962=((1.0)*x6954);
IkReal x6963=((1.0)*x6953);
evalcond[0]=((((-1.0)*r22*x6962))+(((-1.0)*x6960*x6963))+((x6953*x6959)));
evalcond[1]=((((-1.0)*x6959*x6962))+((x6954*x6960))+(((-1.0)*r22*x6963)));
evalcond[2]=(cj0+(((-1.0)*x6958*x6963))+(((-1.0)*r12*x6962))+((x6953*x6957)));
evalcond[3]=((((-1.0)*r02*x6962))+((x6953*x6961))+(((-1.0)*x6955))+(((-1.0)*x6956*x6963)));
evalcond[4]=((((-1.0)*r02*x6963))+(((-1.0)*x6961*x6962))+((x6954*x6956))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6955))+(((-1.0)*r12*x6963))+(((-1.0)*x6957*x6962))+((x6954*x6958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6964=IKsin(j0);
IkReal x6965=IKcos(j0);
evalcond[0]=((((0.03275)*x6965))+(((-1.0)*px))+(((-0.10915)*x6964)));
evalcond[1]=((((0.10915)*x6965))+(((0.03275)*x6964))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6966=((1.0)*cj5);
IkReal x6967=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6966)));
j4eval[0]=x6967;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6966))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6968=cj5*cj5;
IkReal x6969=((1.0)*r21);
IkReal x6970=(cj5*sj5);
IkReal x6971=((1.0)*r20);
IkReal x6972=((((-1.0)*r00*x6969*x6970))+((r01*r21))+((r00*r20*x6968))+(((-1.0)*r01*x6968*x6969))+((r02*r22))+(((-1.0)*r01*x6970*x6971)));
j4eval[0]=x6972;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6971))))));
j4eval[2]=IKsign(x6972);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6973=cj5*cj5;
IkReal x6974=(r21*sj5);
IkReal x6975=(r11*r21);
IkReal x6976=((1.0)*cj5*r20);
IkReal x6977=(((r10*r20*x6973))+(((-1.0)*cj5*r10*x6974))+(((-1.0)*r11*sj5*x6976))+((r12*r22))+x6975+(((-1.0)*x6973*x6975)));
j4eval[0]=x6977;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6974))+(((-1.0)*sj0*x6976))))));
j4eval[2]=IKsign(x6977);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6978=cj5*cj5;
IkReal x6979=(r21*sj5);
IkReal x6980=(r11*r21);
IkReal x6981=((1.0)*cj5*r20);
CheckValue<IkReal> x6982 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6981))+((sj0*x6979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6982.valid){
continue;
}
CheckValue<IkReal> x6983=IKPowWithIntegerCheck(IKsign((((r10*r20*x6978))+(((-1.0)*cj5*r10*x6979))+((r12*r22))+(((-1.0)*x6978*x6980))+(((-1.0)*r11*sj5*x6981))+x6980)),-1);
if(!x6983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6982.value)+(((1.5707963267949)*(x6983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6984=IKsin(j4);
IkReal x6985=IKcos(j4);
IkReal x6986=(r11*sj5);
IkReal x6987=(cj5*r00);
IkReal x6988=(cj5*r10);
IkReal x6989=(r21*sj5);
IkReal x6990=(cj5*r20);
IkReal x6991=(r01*sj5);
IkReal x6992=((1.0)*x6985);
IkReal x6993=((1.0)*x6984);
evalcond[0]=((((-1.0)*r22*x6992))+(((-1.0)*x6990*x6993))+((x6984*x6989)));
evalcond[1]=(((x6985*x6990))+(((-1.0)*r22*x6993))+(((-1.0)*x6989*x6992)));
evalcond[2]=((((-1.0)*r12*x6992))+cj0+((x6984*x6986))+(((-1.0)*x6988*x6993)));
evalcond[3]=(cj0+(((-1.0)*r02*x6993))+((x6985*x6987))+(((-1.0)*x6991*x6992)));
evalcond[4]=((((-1.0)*r12*x6993))+sj0+(((-1.0)*x6986*x6992))+((x6985*x6988)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6987*x6993))+(((-1.0)*r02*x6992))+((x6984*x6991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6994=cj5*cj5;
IkReal x6995=((1.0)*r21);
IkReal x6996=(cj5*sj5);
IkReal x6997=((1.0)*r20);
CheckValue<IkReal> x6998 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6997)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6998.valid){
continue;
}
CheckValue<IkReal> x6999=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6994*x6995))+((r01*r21))+(((-1.0)*r00*x6995*x6996))+((r00*r20*x6994))+((r02*r22))+(((-1.0)*r01*x6996*x6997)))),-1);
if(!x6999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6998.value)+(((1.5707963267949)*(x6999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7000=IKsin(j4);
IkReal x7001=IKcos(j4);
IkReal x7002=(r11*sj5);
IkReal x7003=(cj5*r00);
IkReal x7004=(cj5*r10);
IkReal x7005=(r21*sj5);
IkReal x7006=(cj5*r20);
IkReal x7007=(r01*sj5);
IkReal x7008=((1.0)*x7001);
IkReal x7009=((1.0)*x7000);
evalcond[0]=(((x7000*x7005))+(((-1.0)*r22*x7008))+(((-1.0)*x7006*x7009)));
evalcond[1]=((((-1.0)*r22*x7009))+(((-1.0)*x7005*x7008))+((x7001*x7006)));
evalcond[2]=((((-1.0)*r12*x7008))+((x7000*x7002))+cj0+(((-1.0)*x7004*x7009)));
evalcond[3]=((((-1.0)*r02*x7009))+cj0+(((-1.0)*x7007*x7008))+((x7001*x7003)));
evalcond[4]=((((-1.0)*r12*x7009))+sj0+(((-1.0)*x7002*x7008))+((x7001*x7004)));
evalcond[5]=(((x7000*x7007))+(((-1.0)*r02*x7008))+(((-1.0)*sj0))+(((-1.0)*x7003*x7009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7010=((1.0)*cj5);
CheckValue<IkReal> x7011 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7010)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7011.valid){
continue;
}
CheckValue<IkReal> x7012=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7010)))),-1);
if(!x7012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7011.value)+(((1.5707963267949)*(x7012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7013=IKsin(j4);
IkReal x7014=IKcos(j4);
IkReal x7015=(r11*sj5);
IkReal x7016=(cj5*r00);
IkReal x7017=(cj5*r10);
IkReal x7018=(r21*sj5);
IkReal x7019=(cj5*r20);
IkReal x7020=(r01*sj5);
IkReal x7021=((1.0)*x7014);
IkReal x7022=((1.0)*x7013);
evalcond[0]=((((-1.0)*r22*x7021))+((x7013*x7018))+(((-1.0)*x7019*x7022)));
evalcond[1]=((((-1.0)*r22*x7022))+(((-1.0)*x7018*x7021))+((x7014*x7019)));
evalcond[2]=((((-1.0)*r12*x7021))+((x7013*x7015))+cj0+(((-1.0)*x7017*x7022)));
evalcond[3]=(cj0+((x7014*x7016))+(((-1.0)*r02*x7022))+(((-1.0)*x7020*x7021)));
evalcond[4]=((((-1.0)*r12*x7022))+sj0+(((-1.0)*x7015*x7021))+((x7014*x7017)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7021))+((x7013*x7020))+(((-1.0)*x7016*x7022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7023=((1.0)*sj5);
IkReal x7024=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7024))+(((-1.0)*r10*x7023)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7023))+(((-1.0)*r01*x7024)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7024))+(((-1.0)*r10*x7023))))+IKsqr(((((-1.0)*r00*x7023))+(((-1.0)*r01*x7024))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7024))+(((-1.0)*r10*x7023))), ((((-1.0)*r00*x7023))+(((-1.0)*r01*x7024))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7025=IKsin(j0);
IkReal x7026=IKcos(j0);
IkReal x7027=((1.0)*cj5);
IkReal x7028=((1.0)*sj5);
IkReal x7029=((0.09465)*cj5);
IkReal x7030=((0.09465)*sj5);
evalcond[0]=((((-1.0)*x7026))+(((-1.0)*r00*x7028))+(((-1.0)*r01*x7027)));
evalcond[1]=((((-1.0)*r11*x7027))+(((-1.0)*r10*x7028))+(((-1.0)*x7025)));
evalcond[2]=((((-1.0)*r00*x7030))+(((-0.10915)*x7025))+(((-1.0)*px))+(((-1.0)*r01*x7029)));
evalcond[3]=((((-1.0)*r11*x7029))+(((-1.0)*py))+(((0.10915)*x7026))+(((-1.0)*r10*x7030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7031=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7031;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7032=((1.0)*cj5);
IkReal x7033=((((-1.0)*r01*x7032))+(((-1.0)*r00*sj5)));
j4eval[0]=x7033;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7032)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7034=cj5*cj5;
IkReal x7035=r21*r21;
IkReal x7036=(r21*sj5);
IkReal x7037=(cj5*r20);
IkReal x7038=(x7035+(((-2.0)*x7036*x7037))+(r22*r22)+(((-1.0)*x7034*x7035))+((x7034*(r20*r20))));
j4eval[0]=x7038;
j4eval[1]=IKsign(x7038);
j4eval[2]=((IKabs((x7036+(((-1.0)*x7037)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7039=cj5*cj5;
IkReal x7040=r21*r21;
IkReal x7041=(r21*sj5);
IkReal x7042=(cj5*r20);
CheckValue<IkReal> x7043 = IKatan2WithCheck(IkReal(r22),IkReal((x7041+(((-1.0)*x7042)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7043.valid){
continue;
}
CheckValue<IkReal> x7044=IKPowWithIntegerCheck(IKsign((x7040+(r22*r22)+(((-1.0)*x7039*x7040))+((x7039*(r20*r20)))+(((-2.0)*x7041*x7042)))),-1);
if(!x7044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7043.value)+(((1.5707963267949)*(x7044.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7045=IKsin(j4);
IkReal x7046=IKcos(j4);
IkReal x7047=(r11*sj5);
IkReal x7048=(r21*sj5);
IkReal x7049=(cj5*r00);
IkReal x7050=(cj5*r20);
IkReal x7051=(r01*sj5);
IkReal x7052=(cj5*r10);
IkReal x7053=((1.0)*x7046);
IkReal x7054=((1.0)*x7045);
evalcond[0]=((((-1.0)*r22*x7053))+((x7045*x7048))+(((-1.0)*x7050*x7054)));
evalcond[1]=(((x7046*x7049))+(((-1.0)*x7051*x7053))+(((-1.0)*r02*x7054)));
evalcond[2]=((((-1.0)*x7047*x7053))+((x7046*x7052))+(((-1.0)*r12*x7054)));
evalcond[3]=(cj0+((x7045*x7047))+(((-1.0)*x7052*x7054))+(((-1.0)*r12*x7053)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7054))+(((-1.0)*x7048*x7053))+((x7046*x7050)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7049*x7054))+((x7045*x7051))+(((-1.0)*r02*x7053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7055=((1.0)*cj5);
CheckValue<IkReal> x7056=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7055))+(((-1.0)*r00*sj5)))),-1);
if(!x7056.valid){
continue;
}
CheckValue<IkReal> x7057 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7055))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7056.value)))+(x7057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7058=IKsin(j4);
IkReal x7059=IKcos(j4);
IkReal x7060=(r11*sj5);
IkReal x7061=(r21*sj5);
IkReal x7062=(cj5*r00);
IkReal x7063=(cj5*r20);
IkReal x7064=(r01*sj5);
IkReal x7065=(cj5*r10);
IkReal x7066=((1.0)*x7059);
IkReal x7067=((1.0)*x7058);
evalcond[0]=((((-1.0)*x7063*x7067))+((x7058*x7061))+(((-1.0)*r22*x7066)));
evalcond[1]=(((x7059*x7062))+(((-1.0)*x7064*x7066))+(((-1.0)*r02*x7067)));
evalcond[2]=(((x7059*x7065))+(((-1.0)*r12*x7067))+(((-1.0)*x7060*x7066)));
evalcond[3]=(cj0+(((-1.0)*x7065*x7067))+(((-1.0)*r12*x7066))+((x7058*x7060)));
evalcond[4]=((1.0)+((x7059*x7063))+(((-1.0)*x7061*x7066))+(((-1.0)*r22*x7067)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7062*x7067))+(((-1.0)*r02*x7066))+((x7058*x7064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7068 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7068.valid){
continue;
}
CheckValue<IkReal> x7069=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7068.value)+(((1.5707963267949)*(x7069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7070=IKsin(j4);
IkReal x7071=IKcos(j4);
IkReal x7072=(r11*sj5);
IkReal x7073=(r21*sj5);
IkReal x7074=(cj5*r00);
IkReal x7075=(cj5*r20);
IkReal x7076=(r01*sj5);
IkReal x7077=(cj5*r10);
IkReal x7078=((1.0)*x7071);
IkReal x7079=((1.0)*x7070);
evalcond[0]=(((x7070*x7073))+(((-1.0)*x7075*x7079))+(((-1.0)*r22*x7078)));
evalcond[1]=((((-1.0)*x7076*x7078))+((x7071*x7074))+(((-1.0)*r02*x7079)));
evalcond[2]=(((x7071*x7077))+(((-1.0)*x7072*x7078))+(((-1.0)*r12*x7079)));
evalcond[3]=(cj0+((x7070*x7072))+(((-1.0)*x7077*x7079))+(((-1.0)*r12*x7078)));
evalcond[4]=((1.0)+((x7071*x7075))+(((-1.0)*x7073*x7078))+(((-1.0)*r22*x7079)));
evalcond[5]=((((-1.0)*sj0))+((x7070*x7076))+(((-1.0)*r02*x7078))+(((-1.0)*x7074*x7079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7080=IKcos(j0);
IkReal x7081=IKsin(j0);
evalcond[0]=((((-0.10915)*x7081))+(((-1.0)*px))+(((-0.39225)*x7080)));
evalcond[1]=((((-1.0)*py))+(((-0.39225)*x7081))+(((0.10915)*x7080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7082=((1.0)*cj5);
IkReal x7083=((((-1.0)*r01*x7082))+(((-1.0)*r00*sj5)));
j4eval[0]=x7083;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7082)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7083);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7084=cj5*cj5;
IkReal x7085=((1.0)*r21);
IkReal x7086=(cj5*sj5);
IkReal x7087=((1.0)*r20);
IkReal x7088=((((-1.0)*r00*x7085*x7086))+(((-1.0)*r01*x7086*x7087))+((r01*r21))+((r00*r20*x7084))+((r02*r22))+(((-1.0)*r01*x7084*x7085)));
j4eval[0]=x7088;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7087))))));
j4eval[2]=IKsign(x7088);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7089=cj5*cj5;
IkReal x7090=(r21*sj5);
IkReal x7091=(r11*r21);
IkReal x7092=((1.0)*cj5*r20);
IkReal x7093=(x7091+(((-1.0)*cj5*r10*x7090))+((r12*r22))+((r10*r20*x7089))+(((-1.0)*r11*sj5*x7092))+(((-1.0)*x7089*x7091)));
j4eval[0]=x7093;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7090))+(((-1.0)*sj0*x7092))))));
j4eval[2]=IKsign(x7093);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7094=cj5*cj5;
IkReal x7095=(r21*sj5);
IkReal x7096=(r11*r21);
IkReal x7097=((1.0)*cj5*r20);
CheckValue<IkReal> x7098 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7095))+(((-1.0)*sj0*x7097)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7098.valid){
continue;
}
CheckValue<IkReal> x7099=IKPowWithIntegerCheck(IKsign((x7096+(((-1.0)*cj5*r10*x7095))+((r12*r22))+((r10*r20*x7094))+(((-1.0)*r11*sj5*x7097))+(((-1.0)*x7094*x7096)))),-1);
if(!x7099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7098.value)+(((1.5707963267949)*(x7099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7100=IKsin(j4);
IkReal x7101=IKcos(j4);
IkReal x7102=(r11*sj5);
IkReal x7103=(cj5*r00);
IkReal x7104=(cj5*r10);
IkReal x7105=(r21*sj5);
IkReal x7106=(cj5*r20);
IkReal x7107=(r01*sj5);
IkReal x7108=((1.0)*x7101);
IkReal x7109=((1.0)*x7100);
evalcond[0]=(((x7100*x7105))+(((-1.0)*r22*x7108))+(((-1.0)*x7106*x7109)));
evalcond[1]=((((-1.0)*r22*x7109))+(((-1.0)*x7105*x7108))+((x7101*x7106)));
evalcond[2]=(((x7100*x7102))+cj0+(((-1.0)*r12*x7108))+(((-1.0)*x7104*x7109)));
evalcond[3]=(cj0+(((-1.0)*r02*x7109))+(((-1.0)*x7107*x7108))+((x7101*x7103)));
evalcond[4]=(sj0+(((-1.0)*x7102*x7108))+(((-1.0)*r12*x7109))+((x7101*x7104)));
evalcond[5]=(((x7100*x7107))+(((-1.0)*sj0))+(((-1.0)*x7103*x7109))+(((-1.0)*r02*x7108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7110=cj5*cj5;
IkReal x7111=((1.0)*r21);
IkReal x7112=(cj5*sj5);
IkReal x7113=((1.0)*r20);
CheckValue<IkReal> x7114 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7114.valid){
continue;
}
CheckValue<IkReal> x7115=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7111*x7112))+((r01*r21))+(((-1.0)*r01*x7110*x7111))+(((-1.0)*r01*x7112*x7113))+((r00*r20*x7110))+((r02*r22)))),-1);
if(!x7115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7114.value)+(((1.5707963267949)*(x7115.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7116=IKsin(j4);
IkReal x7117=IKcos(j4);
IkReal x7118=(r11*sj5);
IkReal x7119=(cj5*r00);
IkReal x7120=(cj5*r10);
IkReal x7121=(r21*sj5);
IkReal x7122=(cj5*r20);
IkReal x7123=(r01*sj5);
IkReal x7124=((1.0)*x7117);
IkReal x7125=((1.0)*x7116);
evalcond[0]=((((-1.0)*x7122*x7125))+(((-1.0)*r22*x7124))+((x7116*x7121)));
evalcond[1]=((((-1.0)*x7121*x7124))+(((-1.0)*r22*x7125))+((x7117*x7122)));
evalcond[2]=((((-1.0)*x7120*x7125))+((x7116*x7118))+cj0+(((-1.0)*r12*x7124)));
evalcond[3]=((((-1.0)*x7123*x7124))+((x7117*x7119))+cj0+(((-1.0)*r02*x7125)));
evalcond[4]=(sj0+(((-1.0)*x7118*x7124))+((x7117*x7120))+(((-1.0)*r12*x7125)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7119*x7125))+((x7116*x7123))+(((-1.0)*r02*x7124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7126=((1.0)*cj5);
CheckValue<IkReal> x7127 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7127.valid){
continue;
}
CheckValue<IkReal> x7128=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7126)))),-1);
if(!x7128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7127.value)+(((1.5707963267949)*(x7128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7129=IKsin(j4);
IkReal x7130=IKcos(j4);
IkReal x7131=(r11*sj5);
IkReal x7132=(cj5*r00);
IkReal x7133=(cj5*r10);
IkReal x7134=(r21*sj5);
IkReal x7135=(cj5*r20);
IkReal x7136=(r01*sj5);
IkReal x7137=((1.0)*x7130);
IkReal x7138=((1.0)*x7129);
evalcond[0]=((((-1.0)*r22*x7137))+(((-1.0)*x7135*x7138))+((x7129*x7134)));
evalcond[1]=((((-1.0)*r22*x7138))+((x7130*x7135))+(((-1.0)*x7134*x7137)));
evalcond[2]=((((-1.0)*r12*x7137))+cj0+(((-1.0)*x7133*x7138))+((x7129*x7131)));
evalcond[3]=(cj0+(((-1.0)*x7136*x7137))+((x7130*x7132))+(((-1.0)*r02*x7138)));
evalcond[4]=(sj0+(((-1.0)*r12*x7138))+((x7130*x7133))+(((-1.0)*x7131*x7137)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7132*x7138))+((x7129*x7136))+(((-1.0)*r02*x7137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7139=IKsin(j0);
IkReal x7140=IKcos(j0);
IkReal x7141=((1.0)*cj5);
IkReal x7142=((1.0)*sj5);
IkReal x7143=((0.09465)*cj5);
IkReal x7144=((0.09465)*sj5);
evalcond[0]=(x7140+(((-1.0)*r01*x7141))+(((-1.0)*r00*x7142)));
evalcond[1]=(x7139+(((-1.0)*r11*x7141))+(((-1.0)*r10*x7142)));
evalcond[2]=((((-1.0)*r01*x7143))+(((-1.0)*px))+(((-0.10915)*x7139))+(((-1.0)*r00*x7144)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*r11*x7143))+(((0.10915)*x7140))+(((-1.0)*r10*x7144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7145=((1.0)*sj5);
IkReal x7146=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7145)));
j4eval[0]=x7146;
j4eval[1]=IKsign(x7146);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7145))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7147=((1.0)*cj5);
IkReal x7148=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7147)));
j4eval[0]=x7148;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7147)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7148);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7149=r21*r21;
IkReal x7150=cj5*cj5;
IkReal x7151=(r21*sj5);
IkReal x7152=(cj5*r20);
IkReal x7153=(((x7149*x7150))+(((2.0)*x7151*x7152))+(((-1.0)*x7150*(r20*r20)))+(((-1.0)*x7149))+(((-1.0)*(r22*r22))));
j4eval[0]=x7153;
j4eval[1]=((IKabs((x7151+(((-1.0)*x7152)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7153);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7154=r21*r21;
IkReal x7155=cj5*cj5;
IkReal x7156=(r21*sj5);
IkReal x7157=(cj5*r20);
CheckValue<IkReal> x7158=IKPowWithIntegerCheck(IKsign(((((2.0)*x7156*x7157))+(((-1.0)*x7154))+(((-1.0)*(r22*r22)))+(((-1.0)*x7155*(r20*r20)))+((x7154*x7155)))),-1);
if(!x7158.valid){
continue;
}
CheckValue<IkReal> x7159 = IKatan2WithCheck(IkReal(r22),IkReal((x7156+(((-1.0)*x7157)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7158.value)))+(x7159.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7160=IKsin(j4);
IkReal x7161=IKcos(j4);
IkReal x7162=(r11*sj5);
IkReal x7163=(r21*sj5);
IkReal x7164=(cj5*r00);
IkReal x7165=(cj5*r20);
IkReal x7166=(r01*sj5);
IkReal x7167=(cj5*r10);
IkReal x7168=((1.0)*x7161);
IkReal x7169=((1.0)*x7160);
evalcond[0]=((((-1.0)*r22*x7168))+(((-1.0)*x7165*x7169))+((x7160*x7163)));
evalcond[1]=((((-1.0)*r02*x7169))+(((-1.0)*x7166*x7168))+((x7161*x7164)));
evalcond[2]=(((x7161*x7167))+(((-1.0)*r12*x7169))+(((-1.0)*x7162*x7168)));
evalcond[3]=(cj0+((x7160*x7162))+(((-1.0)*r12*x7168))+(((-1.0)*x7167*x7169)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7169))+(((-1.0)*x7163*x7168))+((x7161*x7165)));
evalcond[5]=((((-1.0)*r02*x7168))+(((-1.0)*sj0))+(((-1.0)*x7164*x7169))+((x7160*x7166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7170=((1.0)*cj5);
CheckValue<IkReal> x7171 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7170))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7171.valid){
continue;
}
CheckValue<IkReal> x7172=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7170)))),-1);
if(!x7172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7171.value)+(((1.5707963267949)*(x7172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7173=IKsin(j4);
IkReal x7174=IKcos(j4);
IkReal x7175=(r11*sj5);
IkReal x7176=(r21*sj5);
IkReal x7177=(cj5*r00);
IkReal x7178=(cj5*r20);
IkReal x7179=(r01*sj5);
IkReal x7180=(cj5*r10);
IkReal x7181=((1.0)*x7174);
IkReal x7182=((1.0)*x7173);
evalcond[0]=((((-1.0)*x7178*x7182))+((x7173*x7176))+(((-1.0)*r22*x7181)));
evalcond[1]=((((-1.0)*x7179*x7181))+(((-1.0)*r02*x7182))+((x7174*x7177)));
evalcond[2]=((((-1.0)*x7175*x7181))+((x7174*x7180))+(((-1.0)*r12*x7182)));
evalcond[3]=(cj0+((x7173*x7175))+(((-1.0)*x7180*x7182))+(((-1.0)*r12*x7181)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7182))+((x7174*x7178))+(((-1.0)*x7176*x7181)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7177*x7182))+((x7173*x7179))+(((-1.0)*r02*x7181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7183=((1.0)*sj5);
CheckValue<IkReal> x7184=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7183)))),-1);
if(!x7184.valid){
continue;
}
CheckValue<IkReal> x7185 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7183))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7184.value)))+(x7185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7186=IKsin(j4);
IkReal x7187=IKcos(j4);
IkReal x7188=(r11*sj5);
IkReal x7189=(r21*sj5);
IkReal x7190=(cj5*r00);
IkReal x7191=(cj5*r20);
IkReal x7192=(r01*sj5);
IkReal x7193=(cj5*r10);
IkReal x7194=((1.0)*x7187);
IkReal x7195=((1.0)*x7186);
evalcond[0]=(((x7186*x7189))+(((-1.0)*x7191*x7195))+(((-1.0)*r22*x7194)));
evalcond[1]=(((x7187*x7190))+(((-1.0)*r02*x7195))+(((-1.0)*x7192*x7194)));
evalcond[2]=((((-1.0)*x7188*x7194))+(((-1.0)*r12*x7195))+((x7187*x7193)));
evalcond[3]=(((x7186*x7188))+cj0+(((-1.0)*x7193*x7195))+(((-1.0)*r12*x7194)));
evalcond[4]=((-1.0)+(((-1.0)*x7189*x7194))+(((-1.0)*r22*x7195))+((x7187*x7191)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7190*x7195))+(((-1.0)*r02*x7194))+((x7186*x7192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7196=IKsin(j0);
IkReal x7197=IKcos(j0);
evalcond[0]=((((0.39225)*x7197))+(((-1.0)*px))+(((-0.10915)*x7196)));
evalcond[1]=((((0.10915)*x7197))+(((0.39225)*x7196))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7198=((1.0)*cj5);
IkReal x7199=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7198)));
j4eval[0]=x7199;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7198)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7199);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7200=((1.0)*cj5);
IkReal x7201=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7200)));
j4eval[0]=x7201;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7200))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7201);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7202=cj5*cj5;
IkReal x7203=((1.0)*sj5);
IkReal x7204=(cj5*r20);
IkReal x7205=(r11*r21);
IkReal x7206=(x7205+(((-1.0)*r11*x7203*x7204))+((r10*r20*x7202))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7203))+(((-1.0)*x7202*x7205)));
j4eval[0]=x7206;
j4eval[1]=IKsign(x7206);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7203))+((cj0*x7204)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7207=cj5*cj5;
IkReal x7208=((1.0)*sj5);
IkReal x7209=(cj5*r20);
IkReal x7210=(r11*r21);
CheckValue<IkReal> x7211=IKPowWithIntegerCheck(IKsign((x7210+((r10*r20*x7207))+(((-1.0)*r11*x7208*x7209))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7208))+(((-1.0)*x7207*x7210)))),-1);
if(!x7211.valid){
continue;
}
CheckValue<IkReal> x7212 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7208))+((cj0*x7209)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7211.value)))+(x7212.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7213=IKsin(j4);
IkReal x7214=IKcos(j4);
IkReal x7215=((1.0)*sj0);
IkReal x7216=(cj5*r00);
IkReal x7217=(r11*sj5);
IkReal x7218=(cj5*r10);
IkReal x7219=(r21*sj5);
IkReal x7220=(cj5*r20);
IkReal x7221=(r01*sj5);
IkReal x7222=((1.0)*x7214);
IkReal x7223=((1.0)*x7213);
evalcond[0]=((((-1.0)*x7220*x7223))+((x7213*x7219))+(((-1.0)*r22*x7222)));
evalcond[1]=(((x7214*x7220))+(((-1.0)*r22*x7223))+(((-1.0)*x7219*x7222)));
evalcond[2]=(cj0+(((-1.0)*x7218*x7223))+(((-1.0)*r12*x7222))+((x7213*x7217)));
evalcond[3]=((((-1.0)*r02*x7222))+(((-1.0)*x7215))+(((-1.0)*x7216*x7223))+((x7213*x7221)));
evalcond[4]=((((-1.0)*r02*x7223))+((x7214*x7216))+(((-1.0)*x7221*x7222))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7217*x7222))+((x7214*x7218))+(((-1.0)*x7215))+(((-1.0)*r12*x7223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7224=((1.0)*cj5);
CheckValue<IkReal> x7225=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7224)))),-1);
if(!x7225.valid){
continue;
}
CheckValue<IkReal> x7226 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7225.value)))+(x7226.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7227=IKsin(j4);
IkReal x7228=IKcos(j4);
IkReal x7229=((1.0)*sj0);
IkReal x7230=(cj5*r00);
IkReal x7231=(r11*sj5);
IkReal x7232=(cj5*r10);
IkReal x7233=(r21*sj5);
IkReal x7234=(cj5*r20);
IkReal x7235=(r01*sj5);
IkReal x7236=((1.0)*x7228);
IkReal x7237=((1.0)*x7227);
evalcond[0]=((((-1.0)*x7234*x7237))+(((-1.0)*r22*x7236))+((x7227*x7233)));
evalcond[1]=(((x7228*x7234))+(((-1.0)*x7233*x7236))+(((-1.0)*r22*x7237)));
evalcond[2]=(cj0+(((-1.0)*x7232*x7237))+(((-1.0)*r12*x7236))+((x7227*x7231)));
evalcond[3]=((((-1.0)*x7230*x7237))+(((-1.0)*x7229))+(((-1.0)*r02*x7236))+((x7227*x7235)));
evalcond[4]=(((x7228*x7230))+(((-1.0)*r02*x7237))+(((-1.0)*cj0))+(((-1.0)*x7235*x7236)));
evalcond[5]=(((x7228*x7232))+(((-1.0)*x7231*x7236))+(((-1.0)*x7229))+(((-1.0)*r12*x7237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7238=((1.0)*cj5);
CheckValue<IkReal> x7239 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7238)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7239.valid){
continue;
}
CheckValue<IkReal> x7240=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7238)))),-1);
if(!x7240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7239.value)+(((1.5707963267949)*(x7240.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7241=IKsin(j4);
IkReal x7242=IKcos(j4);
IkReal x7243=((1.0)*sj0);
IkReal x7244=(cj5*r00);
IkReal x7245=(r11*sj5);
IkReal x7246=(cj5*r10);
IkReal x7247=(r21*sj5);
IkReal x7248=(cj5*r20);
IkReal x7249=(r01*sj5);
IkReal x7250=((1.0)*x7242);
IkReal x7251=((1.0)*x7241);
evalcond[0]=((((-1.0)*x7248*x7251))+(((-1.0)*r22*x7250))+((x7241*x7247)));
evalcond[1]=(((x7242*x7248))+(((-1.0)*x7247*x7250))+(((-1.0)*r22*x7251)));
evalcond[2]=(cj0+(((-1.0)*x7246*x7251))+(((-1.0)*r12*x7250))+((x7241*x7245)));
evalcond[3]=((((-1.0)*x7244*x7251))+(((-1.0)*r02*x7250))+((x7241*x7249))+(((-1.0)*x7243)));
evalcond[4]=(((x7242*x7244))+(((-1.0)*x7249*x7250))+(((-1.0)*r02*x7251))+(((-1.0)*cj0)));
evalcond[5]=(((x7242*x7246))+(((-1.0)*r12*x7251))+(((-1.0)*x7243))+(((-1.0)*x7245*x7250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7252=IKcos(j0);
IkReal x7253=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x7252))+(((-0.10915)*x7253)));
evalcond[1]=((((0.10915)*x7252))+(((-1.0)*py))+(((-0.81725)*x7253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7254=((1.0)*cj5);
IkReal x7255=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7254)));
j4eval[0]=x7255;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7254)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7255);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7256=cj5*cj5;
IkReal x7257=((1.0)*r21);
IkReal x7258=(cj5*sj5);
IkReal x7259=((1.0)*r20);
IkReal x7260=((((-1.0)*r00*x7257*x7258))+((r01*r21))+(((-1.0)*r01*x7258*x7259))+((r02*r22))+(((-1.0)*r01*x7256*x7257))+((r00*r20*x7256)));
j4eval[0]=x7260;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7259))))));
j4eval[2]=IKsign(x7260);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7261=cj5*cj5;
IkReal x7262=(r21*sj5);
IkReal x7263=(r11*r21);
IkReal x7264=((1.0)*cj5*r20);
IkReal x7265=((((-1.0)*r11*sj5*x7264))+(((-1.0)*cj5*r10*x7262))+x7263+(((-1.0)*x7261*x7263))+((r12*r22))+((r10*r20*x7261)));
j4eval[0]=x7265;
j4eval[1]=((IKabs((((sj0*x7262))+(((-1.0)*sj0*x7264)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7265);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7266=cj5*cj5;
IkReal x7267=(r21*sj5);
IkReal x7268=(r11*r21);
IkReal x7269=((1.0)*cj5*r20);
CheckValue<IkReal> x7270 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7267))+(((-1.0)*sj0*x7269)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7270.valid){
continue;
}
CheckValue<IkReal> x7271=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7269))+(((-1.0)*cj5*r10*x7267))+x7268+((r12*r22))+(((-1.0)*x7266*x7268))+((r10*r20*x7266)))),-1);
if(!x7271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7270.value)+(((1.5707963267949)*(x7271.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7272=IKsin(j4);
IkReal x7273=IKcos(j4);
IkReal x7274=(r11*sj5);
IkReal x7275=(cj5*r00);
IkReal x7276=(cj5*r10);
IkReal x7277=(r21*sj5);
IkReal x7278=(cj5*r20);
IkReal x7279=(r01*sj5);
IkReal x7280=((1.0)*x7273);
IkReal x7281=((1.0)*x7272);
evalcond[0]=((((-1.0)*x7278*x7281))+((x7272*x7277))+(((-1.0)*r22*x7280)));
evalcond[1]=((((-1.0)*x7277*x7280))+((x7273*x7278))+(((-1.0)*r22*x7281)));
evalcond[2]=(cj0+(((-1.0)*x7276*x7281))+(((-1.0)*r12*x7280))+((x7272*x7274)));
evalcond[3]=(cj0+((x7273*x7275))+(((-1.0)*r02*x7281))+(((-1.0)*x7279*x7280)));
evalcond[4]=(sj0+(((-1.0)*x7274*x7280))+(((-1.0)*r12*x7281))+((x7273*x7276)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7275*x7281))+((x7272*x7279))+(((-1.0)*r02*x7280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7282=cj5*cj5;
IkReal x7283=((1.0)*r21);
IkReal x7284=(cj5*sj5);
IkReal x7285=((1.0)*r20);
CheckValue<IkReal> x7286=IKPowWithIntegerCheck(IKsign((((r00*r20*x7282))+((r01*r21))+(((-1.0)*r00*x7283*x7284))+(((-1.0)*r01*x7282*x7283))+(((-1.0)*r01*x7284*x7285))+((r02*r22)))),-1);
if(!x7286.valid){
continue;
}
CheckValue<IkReal> x7287 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7286.value)))+(x7287.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7288=IKsin(j4);
IkReal x7289=IKcos(j4);
IkReal x7290=(r11*sj5);
IkReal x7291=(cj5*r00);
IkReal x7292=(cj5*r10);
IkReal x7293=(r21*sj5);
IkReal x7294=(cj5*r20);
IkReal x7295=(r01*sj5);
IkReal x7296=((1.0)*x7289);
IkReal x7297=((1.0)*x7288);
evalcond[0]=((((-1.0)*r22*x7296))+(((-1.0)*x7294*x7297))+((x7288*x7293)));
evalcond[1]=((((-1.0)*r22*x7297))+(((-1.0)*x7293*x7296))+((x7289*x7294)));
evalcond[2]=(cj0+(((-1.0)*r12*x7296))+((x7288*x7290))+(((-1.0)*x7292*x7297)));
evalcond[3]=(cj0+(((-1.0)*x7295*x7296))+(((-1.0)*r02*x7297))+((x7289*x7291)));
evalcond[4]=((((-1.0)*x7290*x7296))+sj0+(((-1.0)*r12*x7297))+((x7289*x7292)));
evalcond[5]=((((-1.0)*x7291*x7297))+(((-1.0)*sj0))+(((-1.0)*r02*x7296))+((x7288*x7295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7298=((1.0)*cj5);
CheckValue<IkReal> x7299=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7298))+(((-1.0)*r00*sj5)))),-1);
if(!x7299.valid){
continue;
}
CheckValue<IkReal> x7300 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7298)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7299.value)))+(x7300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7301=IKsin(j4);
IkReal x7302=IKcos(j4);
IkReal x7303=(r11*sj5);
IkReal x7304=(cj5*r00);
IkReal x7305=(cj5*r10);
IkReal x7306=(r21*sj5);
IkReal x7307=(cj5*r20);
IkReal x7308=(r01*sj5);
IkReal x7309=((1.0)*x7302);
IkReal x7310=((1.0)*x7301);
evalcond[0]=(((x7301*x7306))+(((-1.0)*r22*x7309))+(((-1.0)*x7307*x7310)));
evalcond[1]=(((x7302*x7307))+(((-1.0)*r22*x7310))+(((-1.0)*x7306*x7309)));
evalcond[2]=(((x7301*x7303))+cj0+(((-1.0)*r12*x7309))+(((-1.0)*x7305*x7310)));
evalcond[3]=(cj0+((x7302*x7304))+(((-1.0)*x7308*x7309))+(((-1.0)*r02*x7310)));
evalcond[4]=(sj0+((x7302*x7305))+(((-1.0)*x7303*x7309))+(((-1.0)*r12*x7310)));
evalcond[5]=((((-1.0)*r02*x7309))+(((-1.0)*sj0))+((x7301*x7308))+(((-1.0)*x7304*x7310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7311=IKcos(j0);
IkReal x7312=IKsin(j0);
evalcond[0]=((((-0.03275)*x7311))+(((-0.10915)*x7312))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x7311))+(((-0.03275)*x7312))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7313=((1.0)*cj5);
IkReal x7314=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7313)));
j4eval[0]=x7314;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7313)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7315=((1.0)*cj5);
IkReal x7316=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7315)));
j4eval[0]=x7316;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7315))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7316);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7317=cj5*cj5;
IkReal x7318=((1.0)*sj5);
IkReal x7319=(cj5*r20);
IkReal x7320=(r11*r21);
IkReal x7321=(x7320+(((-1.0)*r11*x7318*x7319))+(((-1.0)*x7317*x7320))+((r12*r22))+((r10*r20*x7317))+(((-1.0)*cj5*r10*r21*x7318)));
j4eval[0]=x7321;
j4eval[1]=IKsign(x7321);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7318))+((cj0*x7319))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7322=cj5*cj5;
IkReal x7323=((1.0)*sj5);
IkReal x7324=(cj5*r20);
IkReal x7325=(r11*r21);
CheckValue<IkReal> x7326=IKPowWithIntegerCheck(IKsign((x7325+(((-1.0)*r11*x7323*x7324))+(((-1.0)*cj5*r10*r21*x7323))+((r12*r22))+((r10*r20*x7322))+(((-1.0)*x7322*x7325)))),-1);
if(!x7326.valid){
continue;
}
CheckValue<IkReal> x7327 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7323))+((cj0*x7324)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7326.value)))+(x7327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7328=IKsin(j4);
IkReal x7329=IKcos(j4);
IkReal x7330=((1.0)*sj0);
IkReal x7331=(cj5*r00);
IkReal x7332=(r11*sj5);
IkReal x7333=(cj5*r10);
IkReal x7334=(r21*sj5);
IkReal x7335=(cj5*r20);
IkReal x7336=(r01*sj5);
IkReal x7337=((1.0)*x7329);
IkReal x7338=((1.0)*x7328);
evalcond[0]=(((x7328*x7334))+(((-1.0)*x7335*x7338))+(((-1.0)*r22*x7337)));
evalcond[1]=(((x7329*x7335))+(((-1.0)*r22*x7338))+(((-1.0)*x7334*x7337)));
evalcond[2]=(((x7328*x7332))+cj0+(((-1.0)*r12*x7337))+(((-1.0)*x7333*x7338)));
evalcond[3]=((((-1.0)*r02*x7337))+((x7328*x7336))+(((-1.0)*x7330))+(((-1.0)*x7331*x7338)));
evalcond[4]=((((-1.0)*r02*x7338))+((x7329*x7331))+(((-1.0)*x7336*x7337))+(((-1.0)*cj0)));
evalcond[5]=(((x7329*x7333))+(((-1.0)*r12*x7338))+(((-1.0)*x7332*x7337))+(((-1.0)*x7330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7339=((1.0)*cj5);
CheckValue<IkReal> x7340=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7339)))),-1);
if(!x7340.valid){
continue;
}
CheckValue<IkReal> x7341 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7339))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7340.value)))+(x7341.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7342=IKsin(j4);
IkReal x7343=IKcos(j4);
IkReal x7344=((1.0)*sj0);
IkReal x7345=(cj5*r00);
IkReal x7346=(r11*sj5);
IkReal x7347=(cj5*r10);
IkReal x7348=(r21*sj5);
IkReal x7349=(cj5*r20);
IkReal x7350=(r01*sj5);
IkReal x7351=((1.0)*x7343);
IkReal x7352=((1.0)*x7342);
evalcond[0]=((((-1.0)*r22*x7351))+((x7342*x7348))+(((-1.0)*x7349*x7352)));
evalcond[1]=((((-1.0)*r22*x7352))+((x7343*x7349))+(((-1.0)*x7348*x7351)));
evalcond[2]=(((x7342*x7346))+cj0+(((-1.0)*r12*x7351))+(((-1.0)*x7347*x7352)));
evalcond[3]=(((x7342*x7350))+(((-1.0)*x7344))+(((-1.0)*r02*x7351))+(((-1.0)*x7345*x7352)));
evalcond[4]=(((x7343*x7345))+(((-1.0)*r02*x7352))+(((-1.0)*x7350*x7351))+(((-1.0)*cj0)));
evalcond[5]=(((x7343*x7347))+(((-1.0)*r12*x7352))+(((-1.0)*x7344))+(((-1.0)*x7346*x7351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7353=((1.0)*cj5);
CheckValue<IkReal> x7354 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7354.valid){
continue;
}
CheckValue<IkReal> x7355=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7353))+(((-1.0)*r00*sj5)))),-1);
if(!x7355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7354.value)+(((1.5707963267949)*(x7355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7356=IKsin(j4);
IkReal x7357=IKcos(j4);
IkReal x7358=((1.0)*sj0);
IkReal x7359=(cj5*r00);
IkReal x7360=(r11*sj5);
IkReal x7361=(cj5*r10);
IkReal x7362=(r21*sj5);
IkReal x7363=(cj5*r20);
IkReal x7364=(r01*sj5);
IkReal x7365=((1.0)*x7357);
IkReal x7366=((1.0)*x7356);
evalcond[0]=((((-1.0)*x7363*x7366))+(((-1.0)*r22*x7365))+((x7356*x7362)));
evalcond[1]=((((-1.0)*r22*x7366))+((x7357*x7363))+(((-1.0)*x7362*x7365)));
evalcond[2]=(cj0+(((-1.0)*r12*x7365))+((x7356*x7360))+(((-1.0)*x7361*x7366)));
evalcond[3]=((((-1.0)*x7358))+(((-1.0)*r02*x7365))+((x7356*x7364))+(((-1.0)*x7359*x7366)));
evalcond[4]=((((-1.0)*x7364*x7365))+(((-1.0)*r02*x7366))+((x7357*x7359))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7358))+(((-1.0)*r12*x7366))+((x7357*x7361))+(((-1.0)*x7360*x7365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7367=IKsin(j0);
IkReal x7368=IKcos(j0);
IkReal x7369=((1.0)*cj5);
IkReal x7370=((1.0)*sj5);
IkReal x7371=((0.09465)*cj5);
IkReal x7372=((0.09465)*sj5);
evalcond[0]=(x7368+(((-1.0)*r01*x7369))+(((-1.0)*r00*x7370)));
evalcond[1]=(x7367+(((-1.0)*r11*x7369))+(((-1.0)*r10*x7370)));
evalcond[2]=((((-1.0)*r01*x7371))+(((-1.0)*px))+(((-0.10915)*x7367))+(((-1.0)*r00*x7372)));
evalcond[3]=((((-1.0)*r11*x7371))+(((-1.0)*py))+(((0.10915)*x7368))+(((-1.0)*r10*x7372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7373=((1.0)*sj5);
IkReal x7374=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7373)));
j4eval[0]=x7374;
j4eval[1]=IKsign(x7374);
j4eval[2]=((IKabs(((((-1.0)*r01*x7373))+((cj5*r00)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7375=((1.0)*cj5);
IkReal x7376=((((-1.0)*r01*x7375))+(((-1.0)*r00*sj5)));
j4eval[0]=x7376;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7375))))));
j4eval[2]=IKsign(x7376);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7377=r21*r21;
IkReal x7378=cj5*cj5;
IkReal x7379=(r21*sj5);
IkReal x7380=(cj5*r20);
IkReal x7381=((((2.0)*x7379*x7380))+(((-1.0)*x7378*(r20*r20)))+((x7377*x7378))+(((-1.0)*(r22*r22)))+(((-1.0)*x7377)));
j4eval[0]=x7381;
j4eval[1]=((IKabs(r22))+(IKabs((x7379+(((-1.0)*x7380))))));
j4eval[2]=IKsign(x7381);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7382=r21*r21;
IkReal x7383=cj5*cj5;
IkReal x7384=(r21*sj5);
IkReal x7385=(cj5*r20);
CheckValue<IkReal> x7386 = IKatan2WithCheck(IkReal(r22),IkReal((x7384+(((-1.0)*x7385)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7386.valid){
continue;
}
CheckValue<IkReal> x7387=IKPowWithIntegerCheck(IKsign(((((2.0)*x7384*x7385))+(((-1.0)*x7382))+(((-1.0)*(r22*r22)))+(((-1.0)*x7383*(r20*r20)))+((x7382*x7383)))),-1);
if(!x7387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7386.value)+(((1.5707963267949)*(x7387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7388=IKsin(j4);
IkReal x7389=IKcos(j4);
IkReal x7390=(r11*sj5);
IkReal x7391=(r21*sj5);
IkReal x7392=(cj5*r00);
IkReal x7393=(cj5*r20);
IkReal x7394=(r01*sj5);
IkReal x7395=(cj5*r10);
IkReal x7396=((1.0)*x7389);
IkReal x7397=((1.0)*x7388);
evalcond[0]=((((-1.0)*r22*x7396))+(((-1.0)*x7393*x7397))+((x7388*x7391)));
evalcond[1]=(((x7389*x7392))+(((-1.0)*x7394*x7396))+(((-1.0)*r02*x7397)));
evalcond[2]=(((x7389*x7395))+(((-1.0)*r12*x7397))+(((-1.0)*x7390*x7396)));
evalcond[3]=((((-1.0)*r12*x7396))+cj0+((x7388*x7390))+(((-1.0)*x7395*x7397)));
evalcond[4]=((-1.0)+((x7389*x7393))+(((-1.0)*r22*x7397))+(((-1.0)*x7391*x7396)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7392*x7397))+((x7388*x7394))+(((-1.0)*r02*x7396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7398=((1.0)*cj5);
CheckValue<IkReal> x7399 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7399.valid){
continue;
}
CheckValue<IkReal> x7400=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7398)))),-1);
if(!x7400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7399.value)+(((1.5707963267949)*(x7400.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7401=IKsin(j4);
IkReal x7402=IKcos(j4);
IkReal x7403=(r11*sj5);
IkReal x7404=(r21*sj5);
IkReal x7405=(cj5*r00);
IkReal x7406=(cj5*r20);
IkReal x7407=(r01*sj5);
IkReal x7408=(cj5*r10);
IkReal x7409=((1.0)*x7402);
IkReal x7410=((1.0)*x7401);
evalcond[0]=(((x7401*x7404))+(((-1.0)*r22*x7409))+(((-1.0)*x7406*x7410)));
evalcond[1]=(((x7402*x7405))+(((-1.0)*x7407*x7409))+(((-1.0)*r02*x7410)));
evalcond[2]=((((-1.0)*x7403*x7409))+(((-1.0)*r12*x7410))+((x7402*x7408)));
evalcond[3]=((((-1.0)*r12*x7409))+cj0+((x7401*x7403))+(((-1.0)*x7408*x7410)));
evalcond[4]=((-1.0)+((x7402*x7406))+(((-1.0)*x7404*x7409))+(((-1.0)*r22*x7410)));
evalcond[5]=((((-1.0)*sj0))+((x7401*x7407))+(((-1.0)*x7405*x7410))+(((-1.0)*r02*x7409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7411=((1.0)*sj5);
CheckValue<IkReal> x7412 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7411))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7412.valid){
continue;
}
CheckValue<IkReal> x7413=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7411)))),-1);
if(!x7413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7412.value)+(((1.5707963267949)*(x7413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7414=IKsin(j4);
IkReal x7415=IKcos(j4);
IkReal x7416=(r11*sj5);
IkReal x7417=(r21*sj5);
IkReal x7418=(cj5*r00);
IkReal x7419=(cj5*r20);
IkReal x7420=(r01*sj5);
IkReal x7421=(cj5*r10);
IkReal x7422=((1.0)*x7415);
IkReal x7423=((1.0)*x7414);
evalcond[0]=((((-1.0)*r22*x7422))+(((-1.0)*x7419*x7423))+((x7414*x7417)));
evalcond[1]=(((x7415*x7418))+(((-1.0)*r02*x7423))+(((-1.0)*x7420*x7422)));
evalcond[2]=((((-1.0)*x7416*x7422))+(((-1.0)*r12*x7423))+((x7415*x7421)));
evalcond[3]=((((-1.0)*x7421*x7423))+cj0+(((-1.0)*r12*x7422))+((x7414*x7416)));
evalcond[4]=((-1.0)+((x7415*x7419))+(((-1.0)*r22*x7423))+(((-1.0)*x7417*x7422)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7422))+(((-1.0)*x7418*x7423))+((x7414*x7420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7424=IKsin(j0);
IkReal x7425=IKcos(j0);
evalcond[0]=((((0.39225)*x7425))+(((-1.0)*px))+(((-0.10915)*x7424)));
evalcond[1]=((((0.39225)*x7424))+(((-1.0)*py))+(((0.10915)*x7425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7426=((1.0)*cj5);
IkReal x7427=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7426)));
j4eval[0]=x7427;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7426))))));
j4eval[2]=IKsign(x7427);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7428=((1.0)*cj5);
IkReal x7429=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7428)));
j4eval[0]=x7429;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7428))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7429);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7430=cj5*cj5;
IkReal x7431=((1.0)*sj5);
IkReal x7432=(cj5*r20);
IkReal x7433=(r11*r21);
IkReal x7434=((((-1.0)*cj5*r10*r21*x7431))+(((-1.0)*x7430*x7433))+((r12*r22))+((r10*r20*x7430))+(((-1.0)*r11*x7431*x7432))+x7433);
j4eval[0]=x7434;
j4eval[1]=IKsign(x7434);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7431))+((cj0*x7432)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7435=cj5*cj5;
IkReal x7436=((1.0)*sj5);
IkReal x7437=(cj5*r20);
IkReal x7438=(r11*r21);
CheckValue<IkReal> x7439 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7436))+((cj0*x7437)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7439.valid){
continue;
}
CheckValue<IkReal> x7440=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x7436))+(((-1.0)*x7435*x7438))+((r12*r22))+((r10*r20*x7435))+(((-1.0)*r11*x7436*x7437))+x7438)),-1);
if(!x7440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7439.value)+(((1.5707963267949)*(x7440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7441=IKsin(j4);
IkReal x7442=IKcos(j4);
IkReal x7443=((1.0)*sj0);
IkReal x7444=(cj5*r00);
IkReal x7445=(r11*sj5);
IkReal x7446=(cj5*r10);
IkReal x7447=(r21*sj5);
IkReal x7448=(cj5*r20);
IkReal x7449=(r01*sj5);
IkReal x7450=((1.0)*x7442);
IkReal x7451=((1.0)*x7441);
evalcond[0]=((((-1.0)*r22*x7450))+((x7441*x7447))+(((-1.0)*x7448*x7451)));
evalcond[1]=(((x7442*x7448))+(((-1.0)*x7447*x7450))+(((-1.0)*r22*x7451)));
evalcond[2]=(cj0+(((-1.0)*x7446*x7451))+(((-1.0)*r12*x7450))+((x7441*x7445)));
evalcond[3]=((((-1.0)*x7443))+(((-1.0)*r02*x7450))+(((-1.0)*x7444*x7451))+((x7441*x7449)));
evalcond[4]=(((x7442*x7444))+(((-1.0)*r02*x7451))+(((-1.0)*x7449*x7450))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7443))+((x7442*x7446))+(((-1.0)*x7445*x7450))+(((-1.0)*r12*x7451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7452=((1.0)*cj5);
CheckValue<IkReal> x7453=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7452)))),-1);
if(!x7453.valid){
continue;
}
CheckValue<IkReal> x7454 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7453.value)))+(x7454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7455=IKsin(j4);
IkReal x7456=IKcos(j4);
IkReal x7457=((1.0)*sj0);
IkReal x7458=(cj5*r00);
IkReal x7459=(r11*sj5);
IkReal x7460=(cj5*r10);
IkReal x7461=(r21*sj5);
IkReal x7462=(cj5*r20);
IkReal x7463=(r01*sj5);
IkReal x7464=((1.0)*x7456);
IkReal x7465=((1.0)*x7455);
evalcond[0]=((((-1.0)*r22*x7464))+(((-1.0)*x7462*x7465))+((x7455*x7461)));
evalcond[1]=(((x7456*x7462))+(((-1.0)*r22*x7465))+(((-1.0)*x7461*x7464)));
evalcond[2]=(cj0+((x7455*x7459))+(((-1.0)*r12*x7464))+(((-1.0)*x7460*x7465)));
evalcond[3]=((((-1.0)*x7457))+(((-1.0)*r02*x7464))+(((-1.0)*x7458*x7465))+((x7455*x7463)));
evalcond[4]=((((-1.0)*r02*x7465))+((x7456*x7458))+(((-1.0)*x7463*x7464))+(((-1.0)*cj0)));
evalcond[5]=(((x7456*x7460))+(((-1.0)*x7457))+(((-1.0)*r12*x7465))+(((-1.0)*x7459*x7464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7466=((1.0)*cj5);
CheckValue<IkReal> x7467 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7466)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7467.valid){
continue;
}
CheckValue<IkReal> x7468=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7466)))),-1);
if(!x7468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7467.value)+(((1.5707963267949)*(x7468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7469=IKsin(j4);
IkReal x7470=IKcos(j4);
IkReal x7471=((1.0)*sj0);
IkReal x7472=(cj5*r00);
IkReal x7473=(r11*sj5);
IkReal x7474=(cj5*r10);
IkReal x7475=(r21*sj5);
IkReal x7476=(cj5*r20);
IkReal x7477=(r01*sj5);
IkReal x7478=((1.0)*x7470);
IkReal x7479=((1.0)*x7469);
evalcond[0]=(((x7469*x7475))+(((-1.0)*x7476*x7479))+(((-1.0)*r22*x7478)));
evalcond[1]=(((x7470*x7476))+(((-1.0)*x7475*x7478))+(((-1.0)*r22*x7479)));
evalcond[2]=(cj0+((x7469*x7473))+(((-1.0)*x7474*x7479))+(((-1.0)*r12*x7478)));
evalcond[3]=((((-1.0)*r02*x7478))+((x7469*x7477))+(((-1.0)*x7471))+(((-1.0)*x7472*x7479)));
evalcond[4]=((((-1.0)*x7477*x7478))+(((-1.0)*r02*x7479))+((x7470*x7472))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7471))+((x7470*x7474))+(((-1.0)*x7473*x7478))+(((-1.0)*r12*x7479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7480=((1.0)*sj5);
IkReal x7481=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x7480))+(((-1.0)*r11*x7481)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7481))+(((-1.0)*r00*x7480)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7480))+(((-1.0)*r11*x7481))))+IKsqr(((((-1.0)*r01*x7481))+(((-1.0)*r00*x7480))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x7480))+(((-1.0)*r11*x7481))), ((((-1.0)*r01*x7481))+(((-1.0)*r00*x7480))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7482=IKsin(j0);
IkReal x7483=IKcos(j0);
IkReal x7484=((1.0)*cj5);
IkReal x7485=((1.0)*sj5);
IkReal x7486=((0.09465)*cj5);
IkReal x7487=((0.09465)*sj5);
evalcond[0]=((((-1.0)*x7483))+(((-1.0)*r01*x7484))+(((-1.0)*r00*x7485)));
evalcond[1]=((((-1.0)*x7482))+(((-1.0)*r10*x7485))+(((-1.0)*r11*x7484)));
evalcond[2]=((((-1.0)*r01*x7486))+(((-1.0)*px))+(((-1.0)*r00*x7487))+(((-0.10915)*x7482)));
evalcond[3]=((((0.10915)*x7483))+(((-1.0)*py))+(((-1.0)*r10*x7487))+(((-1.0)*r11*x7486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7488=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7488;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7489=((1.0)*cj5);
IkReal x7490=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7489)));
j4eval[0]=x7490;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7489)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7490);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7491=cj5*cj5;
IkReal x7492=r21*r21;
IkReal x7493=(r21*sj5);
IkReal x7494=(cj5*r20);
IkReal x7495=(((x7491*(r20*r20)))+(r22*r22)+(((-2.0)*x7493*x7494))+x7492+(((-1.0)*x7491*x7492)));
j4eval[0]=x7495;
j4eval[1]=IKsign(x7495);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x7494))+x7493))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7496=cj5*cj5;
IkReal x7497=r21*r21;
IkReal x7498=(r21*sj5);
IkReal x7499=(cj5*r20);
CheckValue<IkReal> x7500=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7498*x7499))+(r22*r22)+((x7496*(r20*r20)))+x7497+(((-1.0)*x7496*x7497)))),-1);
if(!x7500.valid){
continue;
}
CheckValue<IkReal> x7501 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7499))+x7498)),IKFAST_ATAN2_MAGTHRESH);
if(!x7501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7500.value)))+(x7501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7502=IKsin(j4);
IkReal x7503=IKcos(j4);
IkReal x7504=(r11*sj5);
IkReal x7505=(r21*sj5);
IkReal x7506=(cj5*r00);
IkReal x7507=(cj5*r20);
IkReal x7508=(r01*sj5);
IkReal x7509=(cj5*r10);
IkReal x7510=((1.0)*x7503);
IkReal x7511=((1.0)*x7502);
evalcond[0]=((((-1.0)*x7507*x7511))+((x7502*x7505))+(((-1.0)*r22*x7510)));
evalcond[1]=(((x7503*x7506))+(((-1.0)*x7508*x7510))+(((-1.0)*r02*x7511)));
evalcond[2]=(((x7503*x7509))+(((-1.0)*r12*x7511))+(((-1.0)*x7504*x7510)));
evalcond[3]=(cj0+(((-1.0)*x7509*x7511))+((x7502*x7504))+(((-1.0)*r12*x7510)));
evalcond[4]=((1.0)+((x7503*x7507))+(((-1.0)*x7505*x7510))+(((-1.0)*r22*x7511)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7510))+(((-1.0)*x7506*x7511))+((x7502*x7508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7512=((1.0)*cj5);
CheckValue<IkReal> x7513=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7512))+(((-1.0)*r00*sj5)))),-1);
if(!x7513.valid){
continue;
}
CheckValue<IkReal> x7514 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7513.value)))+(x7514.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7515=IKsin(j4);
IkReal x7516=IKcos(j4);
IkReal x7517=(r11*sj5);
IkReal x7518=(r21*sj5);
IkReal x7519=(cj5*r00);
IkReal x7520=(cj5*r20);
IkReal x7521=(r01*sj5);
IkReal x7522=(cj5*r10);
IkReal x7523=((1.0)*x7516);
IkReal x7524=((1.0)*x7515);
evalcond[0]=(((x7515*x7518))+(((-1.0)*x7520*x7524))+(((-1.0)*r22*x7523)));
evalcond[1]=((((-1.0)*r02*x7524))+(((-1.0)*x7521*x7523))+((x7516*x7519)));
evalcond[2]=(((x7516*x7522))+(((-1.0)*x7517*x7523))+(((-1.0)*r12*x7524)));
evalcond[3]=(((x7515*x7517))+cj0+(((-1.0)*x7522*x7524))+(((-1.0)*r12*x7523)));
evalcond[4]=((1.0)+((x7516*x7520))+(((-1.0)*x7518*x7523))+(((-1.0)*r22*x7524)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7523))+(((-1.0)*x7519*x7524))+((x7515*x7521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7525 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7525.valid){
continue;
}
CheckValue<IkReal> x7526=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7525.value)+(((1.5707963267949)*(x7526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7527=IKsin(j4);
IkReal x7528=IKcos(j4);
IkReal x7529=(r11*sj5);
IkReal x7530=(r21*sj5);
IkReal x7531=(cj5*r00);
IkReal x7532=(cj5*r20);
IkReal x7533=(r01*sj5);
IkReal x7534=(cj5*r10);
IkReal x7535=((1.0)*x7528);
IkReal x7536=((1.0)*x7527);
evalcond[0]=((((-1.0)*x7532*x7536))+(((-1.0)*r22*x7535))+((x7527*x7530)));
evalcond[1]=(((x7528*x7531))+(((-1.0)*x7533*x7535))+(((-1.0)*r02*x7536)));
evalcond[2]=((((-1.0)*r12*x7536))+(((-1.0)*x7529*x7535))+((x7528*x7534)));
evalcond[3]=(cj0+(((-1.0)*r12*x7535))+((x7527*x7529))+(((-1.0)*x7534*x7536)));
evalcond[4]=((1.0)+((x7528*x7532))+(((-1.0)*r22*x7536))+(((-1.0)*x7530*x7535)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7531*x7536))+((x7527*x7533))+(((-1.0)*r02*x7535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7537=IKcos(j0);
IkReal x7538=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.39225)*x7537))+(((-0.10915)*x7538)));
evalcond[1]=((((-1.0)*py))+(((-0.39225)*x7538))+(((0.10915)*x7537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7539=((1.0)*cj5);
IkReal x7540=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7539)));
j4eval[0]=x7540;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7539)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7540);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7541=cj5*cj5;
IkReal x7542=((1.0)*r21);
IkReal x7543=(cj5*sj5);
IkReal x7544=((1.0)*r20);
IkReal x7545=(((r00*r20*x7541))+((r01*r21))+(((-1.0)*r01*x7541*x7542))+((r02*r22))+(((-1.0)*r01*x7543*x7544))+(((-1.0)*r00*x7542*x7543)));
j4eval[0]=x7545;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7544)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7546=cj5*cj5;
IkReal x7547=(r21*sj5);
IkReal x7548=(r11*r21);
IkReal x7549=((1.0)*cj5*r20);
IkReal x7550=((((-1.0)*r11*sj5*x7549))+((r10*r20*x7546))+(((-1.0)*x7546*x7548))+((r12*r22))+x7548+(((-1.0)*cj5*r10*x7547)));
j4eval[0]=x7550;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7547))+(((-1.0)*sj0*x7549))))));
j4eval[2]=IKsign(x7550);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7551=cj5*cj5;
IkReal x7552=(r21*sj5);
IkReal x7553=(r11*r21);
IkReal x7554=((1.0)*cj5*r20);
CheckValue<IkReal> x7555 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7552))+(((-1.0)*sj0*x7554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7555.valid){
continue;
}
CheckValue<IkReal> x7556=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7554))+((r10*r20*x7551))+(((-1.0)*x7551*x7553))+((r12*r22))+x7553+(((-1.0)*cj5*r10*x7552)))),-1);
if(!x7556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7555.value)+(((1.5707963267949)*(x7556.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7557=IKsin(j4);
IkReal x7558=IKcos(j4);
IkReal x7559=(r11*sj5);
IkReal x7560=(cj5*r00);
IkReal x7561=(cj5*r10);
IkReal x7562=(r21*sj5);
IkReal x7563=(cj5*r20);
IkReal x7564=(r01*sj5);
IkReal x7565=((1.0)*x7558);
IkReal x7566=((1.0)*x7557);
evalcond[0]=((((-1.0)*x7563*x7566))+(((-1.0)*r22*x7565))+((x7557*x7562)));
evalcond[1]=((((-1.0)*x7562*x7565))+(((-1.0)*r22*x7566))+((x7558*x7563)));
evalcond[2]=(cj0+((x7557*x7559))+(((-1.0)*r12*x7565))+(((-1.0)*x7561*x7566)));
evalcond[3]=((((-1.0)*r02*x7566))+cj0+(((-1.0)*x7564*x7565))+((x7558*x7560)));
evalcond[4]=(sj0+(((-1.0)*x7559*x7565))+(((-1.0)*r12*x7566))+((x7558*x7561)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7565))+((x7557*x7564))+(((-1.0)*x7560*x7566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7567=cj5*cj5;
IkReal x7568=((1.0)*r21);
IkReal x7569=(cj5*sj5);
IkReal x7570=((1.0)*r20);
CheckValue<IkReal> x7571 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7571.valid){
continue;
}
CheckValue<IkReal> x7572=IKPowWithIntegerCheck(IKsign((((r00*r20*x7567))+((r01*r21))+(((-1.0)*r01*x7567*x7568))+(((-1.0)*r00*x7568*x7569))+((r02*r22))+(((-1.0)*r01*x7569*x7570)))),-1);
if(!x7572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7571.value)+(((1.5707963267949)*(x7572.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7573=IKsin(j4);
IkReal x7574=IKcos(j4);
IkReal x7575=(r11*sj5);
IkReal x7576=(cj5*r00);
IkReal x7577=(cj5*r10);
IkReal x7578=(r21*sj5);
IkReal x7579=(cj5*r20);
IkReal x7580=(r01*sj5);
IkReal x7581=((1.0)*x7574);
IkReal x7582=((1.0)*x7573);
evalcond[0]=(((x7573*x7578))+(((-1.0)*r22*x7581))+(((-1.0)*x7579*x7582)));
evalcond[1]=((((-1.0)*r22*x7582))+((x7574*x7579))+(((-1.0)*x7578*x7581)));
evalcond[2]=(((x7573*x7575))+cj0+(((-1.0)*x7577*x7582))+(((-1.0)*r12*x7581)));
evalcond[3]=(cj0+(((-1.0)*r02*x7582))+(((-1.0)*x7580*x7581))+((x7574*x7576)));
evalcond[4]=(sj0+((x7574*x7577))+(((-1.0)*r12*x7582))+(((-1.0)*x7575*x7581)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7576*x7582))+((x7573*x7580))+(((-1.0)*r02*x7581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7583=((1.0)*cj5);
CheckValue<IkReal> x7584=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7583))+(((-1.0)*r00*sj5)))),-1);
if(!x7584.valid){
continue;
}
CheckValue<IkReal> x7585 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7583))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7584.value)))+(x7585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7586=IKsin(j4);
IkReal x7587=IKcos(j4);
IkReal x7588=(r11*sj5);
IkReal x7589=(cj5*r00);
IkReal x7590=(cj5*r10);
IkReal x7591=(r21*sj5);
IkReal x7592=(cj5*r20);
IkReal x7593=(r01*sj5);
IkReal x7594=((1.0)*x7587);
IkReal x7595=((1.0)*x7586);
evalcond[0]=((((-1.0)*x7592*x7595))+((x7586*x7591))+(((-1.0)*r22*x7594)));
evalcond[1]=((((-1.0)*x7591*x7594))+(((-1.0)*r22*x7595))+((x7587*x7592)));
evalcond[2]=(cj0+(((-1.0)*x7590*x7595))+(((-1.0)*r12*x7594))+((x7586*x7588)));
evalcond[3]=(cj0+(((-1.0)*r02*x7595))+(((-1.0)*x7593*x7594))+((x7587*x7589)));
evalcond[4]=(sj0+(((-1.0)*r12*x7595))+(((-1.0)*x7588*x7594))+((x7587*x7590)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7589*x7595))+((x7586*x7593))+(((-1.0)*r02*x7594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7596=cj1*cj1;
IkReal x7597=(cj1*sj1);
IkReal x7598=(cj1*sj2);
IkReal x7599=(r00*sj5);
IkReal x7600=(cj2*sj1);
IkReal x7601=(cj5*r01);
IkReal x7602=((20000.0)*py);
IkReal x7603=((1893.0)*r10*sj5);
IkReal x7604=((1893.0)*cj5*r11);
IkReal x7605=(sj2*x7596);
CheckValue<IkReal> x7606=IKPowWithIntegerCheck(((((-15690.0)*cj2*x7605))+(((-8500.0)*x7605))+(((7845.0)*cj2*sj2))+(((-15690.0)*x7597*(cj2*cj2)))+(((-8500.0)*cj2*x7597))+(((7845.0)*x7597))),-1);
if(!x7606.valid){
continue;
}
CheckValue<IkReal> x7607=IKPowWithIntegerCheck(((((-1.0)*x7598))+(((-1.0)*x7600))),-1);
if(!x7607.valid){
continue;
}
if( IKabs(((x7606.value)*(((((-1.0)*x7600*x7602))+(((-1.0)*x7600*x7603))+(((-1.0)*x7600*x7604))+(((-2183.0)*x7599))+(((-2183.0)*x7601))+(((-1.0)*x7598*x7602))+(((-1.0)*x7598*x7604))+(((-1.0)*x7598*x7603)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7607.value)*((x7599+x7601)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7606.value)*(((((-1.0)*x7600*x7602))+(((-1.0)*x7600*x7603))+(((-1.0)*x7600*x7604))+(((-2183.0)*x7599))+(((-2183.0)*x7601))+(((-1.0)*x7598*x7602))+(((-1.0)*x7598*x7604))+(((-1.0)*x7598*x7603))))))+IKsqr(((x7607.value)*((x7599+x7601))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7606.value)*(((((-1.0)*x7600*x7602))+(((-1.0)*x7600*x7603))+(((-1.0)*x7600*x7604))+(((-2183.0)*x7599))+(((-2183.0)*x7601))+(((-1.0)*x7598*x7602))+(((-1.0)*x7598*x7604))+(((-1.0)*x7598*x7603))))), ((x7607.value)*((x7599+x7601))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7608=IKcos(j0);
IkReal x7609=IKsin(j0);
IkReal x7610=((1.0)*cj1);
IkReal x7611=((0.39225)*sj1);
IkReal x7612=(cj5*r11);
IkReal x7613=((1.0)*sj5);
IkReal x7614=(cj5*r01);
IkReal x7615=((1.0)*sj1);
IkReal x7616=((0.09465)*sj5);
IkReal x7617=((0.39225)*cj1);
IkReal x7618=((0.425)*cj1);
IkReal x7619=(sj2*x7608);
IkReal x7620=(sj2*x7609);
IkReal x7621=(cj2*x7608);
IkReal x7622=(cj2*x7609);
evalcond[0]=((((-1.0)*x7615*x7621))+(((-1.0)*x7610*x7619))+(((-1.0)*r00*x7613))+(((-1.0)*x7614)));
evalcond[1]=((((-1.0)*x7615*x7622))+(((-1.0)*x7610*x7620))+(((-1.0)*x7612))+(((-1.0)*r10*x7613)));
evalcond[2]=(((x7617*x7621))+(((-1.0)*x7611*x7619))+(((-0.09465)*x7614))+(((-1.0)*px))+(((-1.0)*r00*x7616))+((x7608*x7618))+(((-0.10915)*x7609)));
evalcond[3]=(((x7617*x7622))+(((-1.0)*x7611*x7620))+(((-0.09465)*x7612))+(((-1.0)*py))+((x7609*x7618))+(((0.10915)*x7608))+(((-1.0)*r10*x7616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7623=((1.0)*cj5);
IkReal x7624=((((-1.0)*r01*x7623))+(((-1.0)*r00*sj5)));
j4eval[0]=x7624;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7623)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7624);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7625=((1.0)*cj5);
IkReal x7626=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7625)));
j4eval[0]=x7626;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7625))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7626);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7627=((1.0)*sj0);
IkReal x7628=((1.0)*cj0);
IkReal x7629=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7629;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x7627))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x7628))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r12*x7627))+(((-1.0)*r02*x7628))))));
j4eval[2]=IKsign(x7629);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7630=((-1.0)*r20);
IkReal x7632 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7632)==0){
continue;
}
IkReal x7631=pow(x7632,-0.5);
CheckValue<IkReal> x7633 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7630),IKFAST_ATAN2_MAGTHRESH);
if(!x7633.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7633.value));
IkReal gconst133=(r21*x7631);
IkReal gconst134=(x7630*x7631);
CheckValue<IkReal> x7634 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7634.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7634.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7635=((-1.0)*r20);
IkReal x7636=x7631;
CheckValue<IkReal> x7638 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7635),IKFAST_ATAN2_MAGTHRESH);
if(!x7638.valid){
continue;
}
IkReal x7637=((-1.0)*(x7638.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7637;
IkReal gconst132=x7637;
IkReal gconst133=(r21*x7636);
IkReal gconst134=(x7635*x7636);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7639=((-1.0)*r20);
IkReal x7640=x7631;
CheckValue<IkReal> x7642 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7639),IKFAST_ATAN2_MAGTHRESH);
if(!x7642.valid){
continue;
}
IkReal x7641=((-1.0)*(x7642.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7641;
IkReal gconst132=x7641;
IkReal gconst133=(r21*x7640);
IkReal gconst134=(x7639*x7640);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7643=((-1.0)*r20);
IkReal x7644=x7631;
CheckValue<IkReal> x7646 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7643),IKFAST_ATAN2_MAGTHRESH);
if(!x7646.valid){
continue;
}
IkReal x7645=((-1.0)*(x7646.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7645;
IkReal gconst132=x7645;
IkReal gconst133=(r21*x7644);
IkReal gconst134=(x7643*x7644);
IkReal x7647=r22*r22;
CheckValue<IkReal> x7650=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7647))),-1);
if(!x7650.valid){
continue;
}
IkReal x7648=x7650.value;
IkReal x7649=(((x7648*(r20*r20*r20*r20)))+((x7648*(r21*r21*r21*r21)))+(((2.0)*x7648*(r20*r20)*(r21*r21)))+x7647);
j4eval[0]=x7649;
j4eval[1]=IKsign(x7649);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7651=(gconst133*r21);
IkReal x7652=(cj1*sj2);
IkReal x7653=(gconst134*r20);
IkReal x7654=(cj2*sj1);
CheckValue<IkReal> x7655=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7651*x7653))+(x7651*x7651)+(x7653*x7653))),-1);
if(!x7655.valid){
continue;
}
CheckValue<IkReal> x7656 = IKatan2WithCheck(IkReal((((r22*x7652))+((r22*x7654)))),IkReal((((x7651*x7652))+((x7651*x7654))+(((-1.0)*x7653*x7654))+(((-1.0)*x7652*x7653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7655.value)))+(x7656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7657=IKsin(j4);
IkReal x7658=IKcos(j4);
IkReal x7659=(sj1*sj2);
IkReal x7660=(gconst133*r11);
IkReal x7661=(gconst133*r21);
IkReal x7662=(gconst133*r01);
IkReal x7663=((1.0)*x7658);
IkReal x7664=(gconst134*x7658);
IkReal x7665=((1.0)*x7657);
IkReal x7666=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7665))+(((-1.0)*r22*x7663))+((x7657*x7661)));
evalcond[1]=((((-1.0)*gconst134*r10*x7665))+(((-1.0)*r12*x7663))+cj0+((x7657*x7660)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7663))+(((-1.0)*gconst134*r00*x7665))+((x7657*x7662)));
evalcond[3]=(((cj2*sj1))+((r20*x7664))+((cj1*sj2))+(((-1.0)*r22*x7665))+(((-1.0)*x7661*x7663)));
evalcond[4]=((((-1.0)*cj0*x7666))+((r00*x7664))+(((-1.0)*r02*x7665))+((cj0*x7659))+(((-1.0)*x7662*x7663)));
evalcond[5]=((((-1.0)*r12*x7665))+((r10*x7664))+(((-1.0)*x7660*x7663))+(((-1.0)*sj0*x7666))+((sj0*x7659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7667=((1.0)*gconst134);
CheckValue<IkReal> x7668 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7667))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7668.valid){
continue;
}
CheckValue<IkReal> x7669=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7667)))),-1);
if(!x7669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7668.value)+(((1.5707963267949)*(x7669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7670=IKsin(j4);
IkReal x7671=IKcos(j4);
IkReal x7672=(sj1*sj2);
IkReal x7673=(gconst133*r11);
IkReal x7674=(gconst133*r21);
IkReal x7675=(gconst133*r01);
IkReal x7676=((1.0)*x7671);
IkReal x7677=(gconst134*x7671);
IkReal x7678=((1.0)*x7670);
IkReal x7679=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7678))+((x7670*x7674))+(((-1.0)*r22*x7676)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x7678))+(((-1.0)*r12*x7676))+((x7670*x7673)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7676))+(((-1.0)*gconst134*r00*x7678))+((x7670*x7675)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7674*x7676))+((cj1*sj2))+((r20*x7677))+(((-1.0)*r22*x7678)));
evalcond[4]=((((-1.0)*r02*x7678))+(((-1.0)*cj0*x7679))+((cj0*x7672))+((r00*x7677))+(((-1.0)*x7675*x7676)));
evalcond[5]=(((sj0*x7672))+(((-1.0)*sj0*x7679))+(((-1.0)*x7673*x7676))+(((-1.0)*r12*x7678))+((r10*x7677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7680=((1.0)*gconst134);
CheckValue<IkReal> x7681=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7680)))),-1);
if(!x7681.valid){
continue;
}
CheckValue<IkReal> x7682 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*r20*x7680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7681.value)))+(x7682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7683=IKsin(j4);
IkReal x7684=IKcos(j4);
IkReal x7685=(sj1*sj2);
IkReal x7686=(gconst133*r11);
IkReal x7687=(gconst133*r21);
IkReal x7688=(gconst133*r01);
IkReal x7689=((1.0)*x7684);
IkReal x7690=(gconst134*x7684);
IkReal x7691=((1.0)*x7683);
IkReal x7692=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7691))+(((-1.0)*r22*x7689))+((x7683*x7687)));
evalcond[1]=((((-1.0)*gconst134*r10*x7691))+cj0+((x7683*x7686))+(((-1.0)*r12*x7689)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x7691))+((x7683*x7688))+(((-1.0)*r02*x7689)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7687*x7689))+((cj1*sj2))+(((-1.0)*r22*x7691))+((r20*x7690)));
evalcond[4]=((((-1.0)*r02*x7691))+(((-1.0)*cj0*x7692))+((cj0*x7685))+((r00*x7690))+(((-1.0)*x7688*x7689)));
evalcond[5]=(((sj0*x7685))+((r10*x7690))+(((-1.0)*x7686*x7689))+(((-1.0)*r12*x7691))+(((-1.0)*sj0*x7692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7693=((-1.0)*r21);
IkReal x7695 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7695)==0){
continue;
}
IkReal x7694=pow(x7695,-0.5);
CheckValue<IkReal> x7696 = IKatan2WithCheck(IkReal(x7693),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7696.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7696.value))));
IkReal gconst136=(x7693*x7694);
IkReal gconst137=((1.0)*r20*x7694);
CheckValue<IkReal> x7697 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7697.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7697.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7698=((-1.0)*r21);
CheckValue<IkReal> x7701 = IKatan2WithCheck(IkReal(x7698),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7701.valid){
continue;
}
IkReal x7699=((1.0)*(x7701.value));
IkReal x7700=x7694;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7699)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7699)));
IkReal gconst136=(x7698*x7700);
IkReal gconst137=((1.0)*r20*x7700);
IkReal x7702=r22*r22;
IkReal x7703=((1.0)*x7702);
CheckValue<IkReal> x7707=IKPowWithIntegerCheck(((-1.0)+x7702),-1);
if(!x7707.valid){
continue;
}
IkReal x7704=x7707.value;
if((((1.0)+(((-1.0)*x7703)))) < -0.00001)
continue;
IkReal x7705=IKsqrt(((1.0)+(((-1.0)*x7703))));
IkReal x7706=(cj0*x7704*x7705);
j4eval[0]=((IKabs(((((-1.0)*x7703*x7706))+x7706)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7708=((-1.0)*r21);
CheckValue<IkReal> x7711 = IKatan2WithCheck(IkReal(x7708),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7711.valid){
continue;
}
IkReal x7709=((1.0)*(x7711.value));
IkReal x7710=x7694;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7709)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7709)));
IkReal gconst136=(x7708*x7710);
IkReal gconst137=((1.0)*r20*x7710);
IkReal x7712=r22*r22;
IkReal x7713=((1.0)*x7712);
CheckValue<IkReal> x7717=IKPowWithIntegerCheck(((-1.0)+x7712),-1);
if(!x7717.valid){
continue;
}
IkReal x7714=x7717.value;
if((((1.0)+(((-1.0)*x7713)))) < -0.00001)
continue;
IkReal x7715=IKsqrt(((1.0)+(((-1.0)*x7713))));
IkReal x7716=(sj0*x7714*x7715);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7716+(((-1.0)*x7713*x7716))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7718=((-1.0)*r21);
CheckValue<IkReal> x7721 = IKatan2WithCheck(IkReal(x7718),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7721.valid){
continue;
}
IkReal x7719=((1.0)*(x7721.value));
IkReal x7720=x7694;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7719)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7719)));
IkReal gconst136=(x7718*x7720);
IkReal gconst137=((1.0)*r20*x7720);
IkReal x7722=r22*r22;
IkReal x7723=(r12*sj0);
IkReal x7724=(cj0*r02);
CheckValue<IkReal> x7728=IKPowWithIntegerCheck(((-1.0)+x7722),-1);
if(!x7728.valid){
continue;
}
IkReal x7725=x7728.value;
if((((1.0)+(((-1.0)*x7722)))) < -0.00001)
continue;
IkReal x7726=IKsqrt(((1.0)+(((-1.0)*x7722))));
IkReal x7727=(r22*x7725*x7726);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7724))+(((-1.0)*x7723)))))+(IKabs((((x7724*x7727))+((x7723*x7727))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7729=((1.0)*sj0);
IkReal x7730=((1.0)*cj0);
CheckValue<IkReal> x7731=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7731.valid){
continue;
}
CheckValue<IkReal> x7732 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7730))+(((-1.0)*r12*x7729)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7729))+(((-1.0)*gconst136*r01*x7730))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7731.value)))+(x7732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7733=IKsin(j4);
IkReal x7734=IKcos(j4);
IkReal x7735=(gconst136*r01);
IkReal x7736=(gconst137*r10);
IkReal x7737=(sj1*sj2);
IkReal x7738=(gconst137*r20);
IkReal x7739=(gconst136*r11);
IkReal x7740=(gconst136*r21);
IkReal x7741=(gconst137*r00);
IkReal x7742=((1.0)*x7734);
IkReal x7743=((1.0)*cj1*cj2);
IkReal x7744=((1.0)*x7733);
evalcond[0]=((((-1.0)*r22*x7742))+((x7733*x7740))+(((-1.0)*x7738*x7744)));
evalcond[1]=(((x7733*x7739))+cj0+(((-1.0)*r12*x7742))+(((-1.0)*x7736*x7744)));
evalcond[2]=((((-1.0)*sj0))+((x7733*x7735))+(((-1.0)*r02*x7742))+(((-1.0)*x7741*x7744)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7744))+((cj1*sj2))+(((-1.0)*x7740*x7742))+((x7734*x7738)));
evalcond[4]=((((-1.0)*r02*x7744))+((cj0*x7737))+(((-1.0)*x7735*x7742))+(((-1.0)*cj0*x7743))+((x7734*x7741)));
evalcond[5]=((((-1.0)*x7739*x7742))+(((-1.0)*r12*x7744))+((sj0*x7737))+((x7734*x7736))+(((-1.0)*sj0*x7743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7745=((1.0)*gconst137);
CheckValue<IkReal> x7746=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7745)))),-1);
if(!x7746.valid){
continue;
}
CheckValue<IkReal> x7747 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7745))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7746.value)))+(x7747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7748=IKsin(j4);
IkReal x7749=IKcos(j4);
IkReal x7750=(gconst136*r01);
IkReal x7751=(gconst137*r10);
IkReal x7752=(sj1*sj2);
IkReal x7753=(gconst137*r20);
IkReal x7754=(gconst136*r11);
IkReal x7755=(gconst136*r21);
IkReal x7756=(gconst137*r00);
IkReal x7757=((1.0)*x7749);
IkReal x7758=((1.0)*cj1*cj2);
IkReal x7759=((1.0)*x7748);
evalcond[0]=((((-1.0)*r22*x7757))+(((-1.0)*x7753*x7759))+((x7748*x7755)));
evalcond[1]=(cj0+(((-1.0)*r12*x7757))+((x7748*x7754))+(((-1.0)*x7751*x7759)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7757))+(((-1.0)*x7756*x7759))+((x7748*x7750)));
evalcond[3]=((((-1.0)*r22*x7759))+((cj2*sj1))+(((-1.0)*x7755*x7757))+((cj1*sj2))+((x7749*x7753)));
evalcond[4]=((((-1.0)*r02*x7759))+(((-1.0)*cj0*x7758))+((cj0*x7752))+((x7749*x7756))+(((-1.0)*x7750*x7757)));
evalcond[5]=((((-1.0)*x7754*x7757))+((sj0*x7752))+(((-1.0)*r12*x7759))+((x7749*x7751))+(((-1.0)*sj0*x7758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7760=((1.0)*gconst137);
CheckValue<IkReal> x7761=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7760))+(((-1.0)*gconst136*r00)))),-1);
if(!x7761.valid){
continue;
}
CheckValue<IkReal> x7762 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x7760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7761.value)))+(x7762.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7763=IKsin(j4);
IkReal x7764=IKcos(j4);
IkReal x7765=(gconst136*r01);
IkReal x7766=(gconst137*r10);
IkReal x7767=(sj1*sj2);
IkReal x7768=(gconst137*r20);
IkReal x7769=(gconst136*r11);
IkReal x7770=(gconst136*r21);
IkReal x7771=(gconst137*r00);
IkReal x7772=((1.0)*x7764);
IkReal x7773=((1.0)*cj1*cj2);
IkReal x7774=((1.0)*x7763);
evalcond[0]=((((-1.0)*r22*x7772))+(((-1.0)*x7768*x7774))+((x7763*x7770)));
evalcond[1]=((((-1.0)*x7766*x7774))+cj0+((x7763*x7769))+(((-1.0)*r12*x7772)));
evalcond[2]=((((-1.0)*x7771*x7774))+(((-1.0)*r02*x7772))+(((-1.0)*sj0))+((x7763*x7765)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7774))+((cj1*sj2))+((x7764*x7768))+(((-1.0)*x7770*x7772)));
evalcond[4]=((((-1.0)*r02*x7774))+(((-1.0)*cj0*x7773))+((x7764*x7771))+((cj0*x7767))+(((-1.0)*x7765*x7772)));
evalcond[5]=((((-1.0)*x7769*x7772))+((sj0*x7767))+((x7764*x7766))+(((-1.0)*sj0*x7773))+(((-1.0)*r12*x7774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7775=((-1.0)*r10);
IkReal x7777 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7777)==0){
continue;
}
IkReal x7776=pow(x7777,-0.5);
CheckValue<IkReal> x7778 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7775),IKFAST_ATAN2_MAGTHRESH);
if(!x7778.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7778.value));
IkReal gconst139=(r11*x7776);
IkReal gconst140=(x7775*x7776);
CheckValue<IkReal> x7779 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7779.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7779.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7780=((-1.0)*r10);
IkReal x7781=x7776;
CheckValue<IkReal> x7783 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7780),IKFAST_ATAN2_MAGTHRESH);
if(!x7783.valid){
continue;
}
IkReal x7782=((-1.0)*(x7783.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7782;
IkReal gconst138=x7782;
IkReal gconst139=(r11*x7781);
IkReal gconst140=(x7780*x7781);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7784=((1.0)*sj0);
IkReal x7785=((1.0)*gconst139);
CheckValue<IkReal> x7786 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7784)))),IkReal(((((-1.0)*gconst139*r11*x7784))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x7785))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7786.valid){
continue;
}
CheckValue<IkReal> x7787=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7785)))),-1);
if(!x7787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7786.value)+(((1.5707963267949)*(x7787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7788=IKsin(j4);
IkReal x7789=IKcos(j4);
IkReal x7790=(gconst140*r00);
IkReal x7791=(sj1*sj2);
IkReal x7792=(gconst139*r11);
IkReal x7793=(gconst139*r01);
IkReal x7794=(gconst139*r21);
IkReal x7795=((1.0)*x7789);
IkReal x7796=((1.0)*x7788);
IkReal x7797=((1.0)*cj1*cj2);
IkReal x7798=(gconst140*x7789);
evalcond[0]=((((-1.0)*r22*x7795))+((x7788*x7794))+(((-1.0)*gconst140*r20*x7796)));
evalcond[1]=(((x7788*x7792))+cj0+(((-1.0)*r12*x7795))+(((-1.0)*gconst140*r10*x7796)));
evalcond[2]=((((-1.0)*sj0))+((x7788*x7793))+(((-1.0)*x7790*x7796))+(((-1.0)*r02*x7795)));
evalcond[3]=((((-1.0)*r22*x7796))+((cj2*sj1))+((cj1*sj2))+((r20*x7798))+(((-1.0)*x7794*x7795)));
evalcond[4]=((((-1.0)*cj0*x7797))+(((-1.0)*x7793*x7795))+((x7789*x7790))+((cj0*x7791))+(((-1.0)*r02*x7796)));
evalcond[5]=(((r10*x7798))+(((-1.0)*x7792*x7795))+(((-1.0)*r12*x7796))+(((-1.0)*sj0*x7797))+((sj0*x7791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7799=((1.0)*gconst140);
CheckValue<IkReal> x7800 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7800.valid){
continue;
}
CheckValue<IkReal> x7801=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x7799)))),-1);
if(!x7801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7800.value)+(((1.5707963267949)*(x7801.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7802=IKsin(j4);
IkReal x7803=IKcos(j4);
IkReal x7804=(gconst140*r00);
IkReal x7805=(sj1*sj2);
IkReal x7806=(gconst139*r11);
IkReal x7807=(gconst139*r01);
IkReal x7808=(gconst139*r21);
IkReal x7809=((1.0)*x7803);
IkReal x7810=((1.0)*x7802);
IkReal x7811=((1.0)*cj1*cj2);
IkReal x7812=(gconst140*x7803);
evalcond[0]=(((x7802*x7808))+(((-1.0)*r22*x7809))+(((-1.0)*gconst140*r20*x7810)));
evalcond[1]=(((x7802*x7806))+(((-1.0)*gconst140*r10*x7810))+cj0+(((-1.0)*r12*x7809)));
evalcond[2]=(((x7802*x7807))+(((-1.0)*sj0))+(((-1.0)*r02*x7809))+(((-1.0)*x7804*x7810)));
evalcond[3]=(((cj2*sj1))+((r20*x7812))+((cj1*sj2))+(((-1.0)*r22*x7810))+(((-1.0)*x7808*x7809)));
evalcond[4]=(((cj0*x7805))+((x7803*x7804))+(((-1.0)*x7807*x7809))+(((-1.0)*r02*x7810))+(((-1.0)*cj0*x7811)));
evalcond[5]=(((r10*x7812))+((sj0*x7805))+(((-1.0)*r12*x7810))+(((-1.0)*sj0*x7811))+(((-1.0)*x7806*x7809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7813=((-1.0)*r11);
IkReal x7815 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7815)==0){
continue;
}
IkReal x7814=pow(x7815,-0.5);
CheckValue<IkReal> x7816 = IKatan2WithCheck(IkReal(x7813),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7816.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7816.value))));
IkReal gconst142=(x7813*x7814);
IkReal gconst143=((1.0)*r10*x7814);
CheckValue<IkReal> x7817 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7817.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7817.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7818=((-1.0)*r11);
CheckValue<IkReal> x7821 = IKatan2WithCheck(IkReal(x7818),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7821.valid){
continue;
}
IkReal x7819=((1.0)*(x7821.value));
IkReal x7820=x7814;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7819)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7819)));
IkReal gconst142=(x7818*x7820);
IkReal gconst143=((1.0)*r10*x7820);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7822=((-1.0)*r11);
CheckValue<IkReal> x7825 = IKatan2WithCheck(IkReal(x7822),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7825.valid){
continue;
}
IkReal x7823=((1.0)*(x7825.value));
IkReal x7824=x7814;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7823)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7823)));
IkReal gconst142=(x7822*x7824);
IkReal gconst143=((1.0)*r10*x7824);
IkReal x7826=r12*r12;
IkReal x7827=((1.0)*sj0);
IkReal x7828=(cj0*r02);
IkReal x7829=x7814;
j4eval[0]=((IKabs(((((-1.0)*x7828))+(((-1.0)*r12*x7827)))))+(IKabs(((((-1.0)*x7827*x7829))+((r12*x7828*x7829))+((sj0*x7826*x7829))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7830=((-1.0)*r11);
CheckValue<IkReal> x7833 = IKatan2WithCheck(IkReal(x7830),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7833.valid){
continue;
}
IkReal x7831=((1.0)*(x7833.value));
IkReal x7832=x7814;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7831)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7831)));
IkReal gconst142=(x7830*x7832);
IkReal gconst143=((1.0)*r10*x7832);
IkReal x7834=r12*r12;
IkReal x7835=(cj1*r22*sj2);
IkReal x7836=(cj2*r22*sj1);
CheckValue<IkReal> x7840=IKPowWithIntegerCheck(((-1.0)+x7834),-1);
if(!x7840.valid){
continue;
}
IkReal x7837=x7840.value;
if((((1.0)+(((-1.0)*x7834)))) < -0.00001)
continue;
IkReal x7838=IKsqrt(((1.0)+(((-1.0)*x7834))));
IkReal x7839=((1.0)*r12*x7837*x7838);
j4eval[0]=((IKabs(((((-1.0)*x7836*x7839))+(((-1.0)*x7835*x7839)))))+(IKabs((x7835+x7836))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7841=(gconst142*r21);
IkReal x7842=(cj1*sj2);
IkReal x7843=(cj2*sj1);
IkReal x7844=(gconst143*r20);
CheckValue<IkReal> x7845 = IKatan2WithCheck(IkReal((((r22*x7843))+((r22*x7842)))),IkReal(((((-1.0)*x7842*x7844))+(((-1.0)*x7843*x7844))+((x7841*x7842))+((x7841*x7843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7845.valid){
continue;
}
CheckValue<IkReal> x7846=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7844*x7844)+(((-2.0)*x7841*x7844))+(x7841*x7841))),-1);
if(!x7846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7845.value)+(((1.5707963267949)*(x7846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7847=IKsin(j4);
IkReal x7848=IKcos(j4);
IkReal x7849=(sj1*sj2);
IkReal x7850=(gconst143*r20);
IkReal x7851=((1.0)*x7848);
IkReal x7852=((1.0)*cj1*cj2);
IkReal x7853=((1.0)*x7847);
IkReal x7854=(gconst142*x7847);
IkReal x7855=(gconst143*x7848);
evalcond[0]=((((-1.0)*x7850*x7853))+((r21*x7854))+(((-1.0)*r22*x7851)));
evalcond[1]=(((r11*x7854))+cj0+(((-1.0)*gconst143*r10*x7853))+(((-1.0)*r12*x7851)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7854))+(((-1.0)*r02*x7851))+(((-1.0)*gconst143*r00*x7853)));
evalcond[3]=(((cj2*sj1))+((x7848*x7850))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7851))+(((-1.0)*r22*x7853)));
evalcond[4]=((((-1.0)*cj0*x7852))+((cj0*x7849))+((r00*x7855))+(((-1.0)*r02*x7853))+(((-1.0)*gconst142*r01*x7851)));
evalcond[5]=((((-1.0)*sj0*x7852))+(((-1.0)*gconst142*r11*x7851))+((r10*x7855))+(((-1.0)*r12*x7853))+((sj0*x7849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7856=((1.0)*sj0);
IkReal x7857=((1.0)*gconst142);
CheckValue<IkReal> x7858=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r21))+(((-1.0)*r20*x7857)))),-1);
if(!x7858.valid){
continue;
}
CheckValue<IkReal> x7859 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7856)))),IkReal(((((-1.0)*gconst142*r11*x7856))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7857))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7858.value)))+(x7859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7860=IKsin(j4);
IkReal x7861=IKcos(j4);
IkReal x7862=(sj1*sj2);
IkReal x7863=(gconst143*r20);
IkReal x7864=((1.0)*x7861);
IkReal x7865=((1.0)*cj1*cj2);
IkReal x7866=((1.0)*x7860);
IkReal x7867=(gconst142*x7860);
IkReal x7868=(gconst143*x7861);
evalcond[0]=((((-1.0)*x7863*x7866))+((r21*x7867))+(((-1.0)*r22*x7864)));
evalcond[1]=(cj0+((r11*x7867))+(((-1.0)*r12*x7864))+(((-1.0)*gconst143*r10*x7866)));
evalcond[2]=((((-1.0)*gconst143*r00*x7866))+(((-1.0)*sj0))+((r01*x7867))+(((-1.0)*r02*x7864)));
evalcond[3]=(((cj2*sj1))+((x7861*x7863))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7864))+(((-1.0)*r22*x7866)));
evalcond[4]=(((cj0*x7862))+(((-1.0)*gconst142*r01*x7864))+((r00*x7868))+(((-1.0)*r02*x7866))+(((-1.0)*cj0*x7865)));
evalcond[5]=(((sj0*x7862))+(((-1.0)*r12*x7866))+(((-1.0)*sj0*x7865))+((r10*x7868))+(((-1.0)*gconst142*r11*x7864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7869=((1.0)*gconst143);
CheckValue<IkReal> x7870 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7869))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7870.valid){
continue;
}
CheckValue<IkReal> x7871=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7869))+(((-1.0)*gconst142*r00)))),-1);
if(!x7871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7870.value)+(((1.5707963267949)*(x7871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7872=IKsin(j4);
IkReal x7873=IKcos(j4);
IkReal x7874=(sj1*sj2);
IkReal x7875=(gconst143*r20);
IkReal x7876=((1.0)*x7873);
IkReal x7877=((1.0)*cj1*cj2);
IkReal x7878=((1.0)*x7872);
IkReal x7879=(gconst142*x7872);
IkReal x7880=(gconst143*x7873);
evalcond[0]=((((-1.0)*r22*x7876))+(((-1.0)*x7875*x7878))+((r21*x7879)));
evalcond[1]=(cj0+((r11*x7879))+(((-1.0)*r12*x7876))+(((-1.0)*gconst143*r10*x7878)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7879))+(((-1.0)*r02*x7876))+(((-1.0)*gconst143*r00*x7878)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7878))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7876))+((x7873*x7875)));
evalcond[4]=(((cj0*x7874))+((r00*x7880))+(((-1.0)*gconst142*r01*x7876))+(((-1.0)*r02*x7878))+(((-1.0)*cj0*x7877)));
evalcond[5]=((((-1.0)*gconst142*r11*x7876))+((r10*x7880))+(((-1.0)*r12*x7878))+((sj0*x7874))+(((-1.0)*sj0*x7877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7881=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7881;
j4eval[1]=IKsign(x7881);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7882=((1.0)*cj5);
IkReal x7883=((((-1.0)*r01*x7882))+(((-1.0)*r00*sj5)));
j4eval[0]=x7883;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7882))))));
j4eval[2]=IKsign(x7883);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7884=cj5*cj5;
IkReal x7885=r11*r11;
IkReal x7886=(r11*sj5);
IkReal x7887=(cj5*r10);
IkReal x7888=((r12*r12)+((x7884*(r10*r10)))+x7885+(((-2.0)*x7886*x7887))+(((-1.0)*x7884*x7885)));
j4eval[0]=x7888;
j4eval[1]=IKsign(x7888);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7886))+x7887))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7889=cj5*cj5;
IkReal x7890=r11*r11;
IkReal x7891=(cj5*r10);
IkReal x7892=(r11*sj5);
CheckValue<IkReal> x7893 = IKatan2WithCheck(IkReal((x7891+(((-1.0)*x7892)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7893.valid){
continue;
}
CheckValue<IkReal> x7894=IKPowWithIntegerCheck(IKsign(((r12*r12)+x7890+((x7889*(r10*r10)))+(((-1.0)*x7889*x7890))+(((-2.0)*x7891*x7892)))),-1);
if(!x7894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7893.value)+(((1.5707963267949)*(x7894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7895=IKsin(j4);
IkReal x7896=IKcos(j4);
IkReal x7897=(cj5*r10);
IkReal x7898=(r01*sj5);
IkReal x7899=(cj5*r00);
IkReal x7900=(cj5*r20);
IkReal x7901=((1.0)*x7896);
IkReal x7902=((1.0)*x7895);
IkReal x7903=(sj5*x7895);
evalcond[0]=(((r21*x7903))+(((-1.0)*r22*x7901))+(((-1.0)*x7900*x7902)));
evalcond[1]=((((-1.0)*x7899*x7902))+((x7895*x7898))+(((-1.0)*r02*x7901)));
evalcond[2]=((((-1.0)*r12*x7902))+((x7896*x7897))+(((-1.0)*r11*sj5*x7901)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7901))+(((-1.0)*x7897*x7902))+((r11*x7903)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7902))+((x7896*x7900))+(((-1.0)*r21*sj5*x7901)));
evalcond[5]=((((-1.0)*x7898*x7901))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7896*x7899))+(((-1.0)*r02*x7902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7904=((1.0)*cj5);
CheckValue<IkReal> x7905 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7905.valid){
continue;
}
CheckValue<IkReal> x7906=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7904))+(((-1.0)*r00*sj5)))),-1);
if(!x7906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7905.value)+(((1.5707963267949)*(x7906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7907=IKsin(j4);
IkReal x7908=IKcos(j4);
IkReal x7909=(cj5*r10);
IkReal x7910=(r01*sj5);
IkReal x7911=(cj5*r00);
IkReal x7912=(cj5*r20);
IkReal x7913=((1.0)*x7908);
IkReal x7914=((1.0)*x7907);
IkReal x7915=(sj5*x7907);
evalcond[0]=(((r21*x7915))+(((-1.0)*r22*x7913))+(((-1.0)*x7912*x7914)));
evalcond[1]=((((-1.0)*r02*x7913))+(((-1.0)*x7911*x7914))+((x7907*x7910)));
evalcond[2]=(((x7908*x7909))+(((-1.0)*r11*sj5*x7913))+(((-1.0)*r12*x7914)));
evalcond[3]=((1.0)+((r11*x7915))+(((-1.0)*r12*x7913))+(((-1.0)*x7909*x7914)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7914))+(((-1.0)*r21*sj5*x7913))+((x7908*x7912)));
evalcond[5]=((((-1.0)*r02*x7914))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7910*x7913))+((x7908*x7911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7916=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7916.valid){
continue;
}
CheckValue<IkReal> x7917 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7916.value)))+(x7917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7918=IKsin(j4);
IkReal x7919=IKcos(j4);
IkReal x7920=(cj5*r10);
IkReal x7921=(r01*sj5);
IkReal x7922=(cj5*r00);
IkReal x7923=(cj5*r20);
IkReal x7924=((1.0)*x7919);
IkReal x7925=((1.0)*x7918);
IkReal x7926=(sj5*x7918);
evalcond[0]=((((-1.0)*r22*x7924))+(((-1.0)*x7923*x7925))+((r21*x7926)));
evalcond[1]=((((-1.0)*r02*x7924))+(((-1.0)*x7922*x7925))+((x7918*x7921)));
evalcond[2]=((((-1.0)*r11*sj5*x7924))+(((-1.0)*r12*x7925))+((x7919*x7920)));
evalcond[3]=((1.0)+(((-1.0)*x7920*x7925))+(((-1.0)*r12*x7924))+((r11*x7926)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7925))+(((-1.0)*r21*sj5*x7924))+((x7919*x7923)));
evalcond[5]=((((-1.0)*x7921*x7924))+(((-1.0)*r02*x7925))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7919*x7922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7927=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7927;
j4eval[1]=IKsign(x7927);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7928=((1.0)*cj5);
IkReal x7929=((((-1.0)*r21*x7928))+(((-1.0)*r20*sj5)));
j4eval[0]=x7929;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7928))))));
j4eval[2]=IKsign(x7929);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7930=cj5*cj5;
IkReal x7931=r11*r11;
IkReal x7932=(cj5*r10);
IkReal x7933=(r11*sj5);
IkReal x7934=(((x7930*x7931))+(((-1.0)*x7930*(r10*r10)))+(((-1.0)*x7931))+(((2.0)*x7932*x7933))+(((-1.0)*(r12*r12))));
j4eval[0]=x7934;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7933))+x7932))));
j4eval[2]=IKsign(x7934);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7935=cj5*cj5;
IkReal x7936=r11*r11;
IkReal x7937=(cj5*r10);
IkReal x7938=(r11*sj5);
CheckValue<IkReal> x7939 = IKatan2WithCheck(IkReal(((((-1.0)*x7938))+x7937)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7939.valid){
continue;
}
CheckValue<IkReal> x7940=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7935*(r10*r10)))+(((-1.0)*x7936))+(((-1.0)*(r12*r12)))+(((2.0)*x7937*x7938))+((x7935*x7936)))),-1);
if(!x7940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7939.value)+(((1.5707963267949)*(x7940.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7941=IKsin(j4);
IkReal x7942=IKcos(j4);
IkReal x7943=(cj5*r10);
IkReal x7944=(r01*sj5);
IkReal x7945=(cj5*r00);
IkReal x7946=(cj5*r20);
IkReal x7947=((1.0)*x7942);
IkReal x7948=((1.0)*x7941);
IkReal x7949=(sj5*x7941);
evalcond[0]=(((r21*x7949))+(((-1.0)*r22*x7947))+(((-1.0)*x7946*x7948)));
evalcond[1]=((((-1.0)*r02*x7947))+((x7941*x7944))+(((-1.0)*x7945*x7948)));
evalcond[2]=((((-1.0)*r11*sj5*x7947))+(((-1.0)*r12*x7948))+((x7942*x7943)));
evalcond[3]=((-1.0)+((r11*x7949))+(((-1.0)*r12*x7947))+(((-1.0)*x7943*x7948)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7948))+(((-1.0)*r21*sj5*x7947))+((cj1*sj2))+((x7942*x7946)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x7948))+((x7942*x7945))+(((-1.0)*x7944*x7947))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7950=((1.0)*cj5);
CheckValue<IkReal> x7951 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7951.valid){
continue;
}
CheckValue<IkReal> x7952=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7950))+(((-1.0)*r20*sj5)))),-1);
if(!x7952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7951.value)+(((1.5707963267949)*(x7952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7953=IKsin(j4);
IkReal x7954=IKcos(j4);
IkReal x7955=(cj5*r10);
IkReal x7956=(r01*sj5);
IkReal x7957=(cj5*r00);
IkReal x7958=(cj5*r20);
IkReal x7959=((1.0)*x7954);
IkReal x7960=((1.0)*x7953);
IkReal x7961=(sj5*x7953);
evalcond[0]=(((r21*x7961))+(((-1.0)*r22*x7959))+(((-1.0)*x7958*x7960)));
evalcond[1]=((((-1.0)*x7957*x7960))+(((-1.0)*r02*x7959))+((x7953*x7956)));
evalcond[2]=((((-1.0)*r11*sj5*x7959))+((x7954*x7955))+(((-1.0)*r12*x7960)));
evalcond[3]=((-1.0)+((r11*x7961))+(((-1.0)*x7955*x7960))+(((-1.0)*r12*x7959)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7960))+((cj1*sj2))+((x7954*x7958))+(((-1.0)*r21*sj5*x7959)));
evalcond[5]=((((-1.0)*x7956*x7959))+(((-1.0)*sj1*sj2))+((x7954*x7957))+(((-1.0)*r02*x7960))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7962 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7962.valid){
continue;
}
CheckValue<IkReal> x7963=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7962.value)+(((1.5707963267949)*(x7963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7964=IKsin(j4);
IkReal x7965=IKcos(j4);
IkReal x7966=(cj5*r10);
IkReal x7967=(r01*sj5);
IkReal x7968=(cj5*r00);
IkReal x7969=(cj5*r20);
IkReal x7970=((1.0)*x7965);
IkReal x7971=((1.0)*x7964);
IkReal x7972=(sj5*x7964);
evalcond[0]=((((-1.0)*r22*x7970))+(((-1.0)*x7969*x7971))+((r21*x7972)));
evalcond[1]=(((x7964*x7967))+(((-1.0)*x7968*x7971))+(((-1.0)*r02*x7970)));
evalcond[2]=(((x7965*x7966))+(((-1.0)*r11*sj5*x7970))+(((-1.0)*r12*x7971)));
evalcond[3]=((-1.0)+(((-1.0)*x7966*x7971))+((r11*x7972))+(((-1.0)*r12*x7970)));
evalcond[4]=(((cj2*sj1))+((x7965*x7969))+(((-1.0)*r22*x7971))+((cj1*sj2))+(((-1.0)*r21*sj5*x7970)));
evalcond[5]=(((x7965*x7968))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7971))+(((-1.0)*x7967*x7970))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7973=((-1.0)*r00);
IkReal x7975 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7975)==0){
continue;
}
IkReal x7974=pow(x7975,-0.5);
CheckValue<IkReal> x7976 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7973),IKFAST_ATAN2_MAGTHRESH);
if(!x7976.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7976.value));
IkReal gconst145=(r01*x7974);
IkReal gconst146=(x7973*x7974);
CheckValue<IkReal> x7977 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7977.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7977.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7978=((-1.0)*r00);
IkReal x7979=x7974;
CheckValue<IkReal> x7981 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7978),IKFAST_ATAN2_MAGTHRESH);
if(!x7981.valid){
continue;
}
IkReal x7980=((-1.0)*(x7981.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7980;
IkReal gconst144=x7980;
IkReal gconst145=(r01*x7979);
IkReal gconst146=(x7978*x7979);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7982=((1.0)*sj0);
IkReal x7983=((1.0)*gconst145);
CheckValue<IkReal> x7984 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7982))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x7982))+(((-1.0)*cj0*r01*x7983)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7984.valid){
continue;
}
CheckValue<IkReal> x7985=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7983))+(((-1.0)*gconst146*r21)))),-1);
if(!x7985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7984.value)+(((1.5707963267949)*(x7985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7986=IKsin(j4);
IkReal x7987=IKcos(j4);
IkReal x7988=(gconst146*r10);
IkReal x7989=(sj1*sj2);
IkReal x7990=(gconst146*r20);
IkReal x7991=(gconst146*r00);
IkReal x7992=((1.0)*x7987);
IkReal x7993=((1.0)*x7986);
IkReal x7994=(gconst145*x7986);
IkReal x7995=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x7990*x7993))+((r21*x7994))+(((-1.0)*r22*x7992)));
evalcond[1]=(((r11*x7994))+(((-1.0)*r12*x7992))+cj0+(((-1.0)*x7988*x7993)));
evalcond[2]=((((-1.0)*x7991*x7993))+(((-1.0)*sj0))+((r01*x7994))+(((-1.0)*r02*x7992)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x7992))+((cj1*sj2))+(((-1.0)*r22*x7993))+((x7987*x7990)));
evalcond[4]=((((-1.0)*gconst145*r01*x7992))+((cj0*x7989))+(((-1.0)*cj0*x7995))+(((-1.0)*r02*x7993))+((x7987*x7991)));
evalcond[5]=((((-1.0)*r12*x7993))+(((-1.0)*gconst145*r11*x7992))+((sj0*x7989))+(((-1.0)*sj0*x7995))+((x7987*x7988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7996=((1.0)*gconst146);
CheckValue<IkReal> x7997=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7996))+(((-1.0)*gconst145*r10)))),-1);
if(!x7997.valid){
continue;
}
CheckValue<IkReal> x7998 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7996))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7997.value)))+(x7998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7999=IKsin(j4);
IkReal x8000=IKcos(j4);
IkReal x8001=(gconst146*r10);
IkReal x8002=(sj1*sj2);
IkReal x8003=(gconst146*r20);
IkReal x8004=(gconst146*r00);
IkReal x8005=((1.0)*x8000);
IkReal x8006=((1.0)*x7999);
IkReal x8007=(gconst145*x7999);
IkReal x8008=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8007))+(((-1.0)*x8003*x8006))+(((-1.0)*r22*x8005)));
evalcond[1]=(cj0+((r11*x8007))+(((-1.0)*r12*x8005))+(((-1.0)*x8001*x8006)));
evalcond[2]=(((r01*x8007))+(((-1.0)*sj0))+(((-1.0)*x8004*x8006))+(((-1.0)*r02*x8005)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8005))+((x8000*x8003))+((cj1*sj2))+(((-1.0)*r22*x8006)));
evalcond[4]=((((-1.0)*cj0*x8008))+((x8000*x8004))+((cj0*x8002))+(((-1.0)*gconst145*r01*x8005))+(((-1.0)*r02*x8006)));
evalcond[5]=(((sj0*x8002))+((x8000*x8001))+(((-1.0)*gconst145*r11*x8005))+(((-1.0)*r12*x8006))+(((-1.0)*sj0*x8008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8009=((-1.0)*r01);
IkReal x8011 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8011)==0){
continue;
}
IkReal x8010=pow(x8011,-0.5);
CheckValue<IkReal> x8012 = IKatan2WithCheck(IkReal(x8009),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8012.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8012.value))));
IkReal gconst148=(x8009*x8010);
IkReal gconst149=((1.0)*r00*x8010);
CheckValue<IkReal> x8013 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8013.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8013.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8014=((-1.0)*r01);
CheckValue<IkReal> x8017 = IKatan2WithCheck(IkReal(x8014),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8017.valid){
continue;
}
IkReal x8015=((1.0)*(x8017.value));
IkReal x8016=x8010;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8015)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8015)));
IkReal gconst148=(x8014*x8016);
IkReal gconst149=((1.0)*r00*x8016);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8018=((-1.0)*r01);
CheckValue<IkReal> x8021 = IKatan2WithCheck(IkReal(x8018),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8021.valid){
continue;
}
IkReal x8019=((1.0)*(x8021.value));
IkReal x8020=x8010;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8019)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8019)));
IkReal gconst148=(x8018*x8020);
IkReal gconst149=((1.0)*r00*x8020);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8022=((-1.0)*r01);
CheckValue<IkReal> x8025 = IKatan2WithCheck(IkReal(x8022),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8025.valid){
continue;
}
IkReal x8023=((1.0)*(x8025.value));
IkReal x8024=x8010;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8023)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8023)));
IkReal gconst148=(x8022*x8024);
IkReal gconst149=((1.0)*r00*x8024);
IkReal x8026=r02*r02;
IkReal x8027=(r12*sj0);
IkReal x8028=((1.0)*cj0);
IkReal x8029=x8010;
j4eval[0]=((IKabs((((r02*x8027*x8029))+((cj0*x8026*x8029))+(((-1.0)*x8028*x8029)))))+(IKabs(((((-1.0)*x8027))+(((-1.0)*r02*x8028))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8030=((1.0)*sj0);
IkReal x8031=((1.0)*gconst148);
CheckValue<IkReal> x8032 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8030))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8031))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8032.valid){
continue;
}
CheckValue<IkReal> x8033=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8031))+(((-1.0)*gconst149*r21)))),-1);
if(!x8033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8032.value)+(((1.5707963267949)*(x8033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8034=IKsin(j4);
IkReal x8035=IKcos(j4);
IkReal x8036=(gconst148*r11);
IkReal x8037=(sj1*sj2);
IkReal x8038=((1.0)*x8035);
IkReal x8039=(gconst149*x8035);
IkReal x8040=(gconst148*x8034);
IkReal x8041=((1.0)*cj1*cj2);
IkReal x8042=((1.0)*x8034);
evalcond[0]=((((-1.0)*gconst149*r20*x8042))+((r21*x8040))+(((-1.0)*r22*x8038)));
evalcond[1]=(((x8034*x8036))+cj0+(((-1.0)*r12*x8038))+(((-1.0)*gconst149*r10*x8042)));
evalcond[2]=(((r01*x8040))+(((-1.0)*sj0))+(((-1.0)*r02*x8038))+(((-1.0)*gconst149*r00*x8042)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8038))+((cj1*sj2))+((r20*x8039))+(((-1.0)*r22*x8042)));
evalcond[4]=((((-1.0)*cj0*x8041))+(((-1.0)*gconst148*r01*x8038))+((cj0*x8037))+(((-1.0)*r02*x8042))+((r00*x8039)));
evalcond[5]=(((r10*x8039))+((sj0*x8037))+(((-1.0)*sj0*x8041))+(((-1.0)*x8036*x8038))+(((-1.0)*r12*x8042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8043=((1.0)*gconst149);
CheckValue<IkReal> x8044 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8043))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8044.valid){
continue;
}
CheckValue<IkReal> x8045=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8043))+(((-1.0)*gconst148*r10)))),-1);
if(!x8045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8044.value)+(((1.5707963267949)*(x8045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8046=IKsin(j4);
IkReal x8047=IKcos(j4);
IkReal x8048=(gconst148*r11);
IkReal x8049=(sj1*sj2);
IkReal x8050=((1.0)*x8047);
IkReal x8051=(gconst149*x8047);
IkReal x8052=(gconst148*x8046);
IkReal x8053=((1.0)*cj1*cj2);
IkReal x8054=((1.0)*x8046);
evalcond[0]=((((-1.0)*gconst149*r20*x8054))+(((-1.0)*r22*x8050))+((r21*x8052)));
evalcond[1]=((((-1.0)*r12*x8050))+cj0+(((-1.0)*gconst149*r10*x8054))+((x8046*x8048)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8050))+(((-1.0)*gconst149*r00*x8054))+((r01*x8052)));
evalcond[3]=(((cj2*sj1))+((r20*x8051))+(((-1.0)*gconst148*r21*x8050))+((cj1*sj2))+(((-1.0)*r22*x8054)));
evalcond[4]=(((r00*x8051))+(((-1.0)*gconst148*r01*x8050))+(((-1.0)*r02*x8054))+((cj0*x8049))+(((-1.0)*cj0*x8053)));
evalcond[5]=((((-1.0)*r12*x8054))+(((-1.0)*sj0*x8053))+((r10*x8051))+((sj0*x8049))+(((-1.0)*x8048*x8050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8055=((1.0)*gconst149);
CheckValue<IkReal> x8056 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8055)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8056.valid){
continue;
}
CheckValue<IkReal> x8057=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8055)))),-1);
if(!x8057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8056.value)+(((1.5707963267949)*(x8057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8058=IKsin(j4);
IkReal x8059=IKcos(j4);
IkReal x8060=(gconst148*r11);
IkReal x8061=(sj1*sj2);
IkReal x8062=((1.0)*x8059);
IkReal x8063=(gconst149*x8059);
IkReal x8064=(gconst148*x8058);
IkReal x8065=((1.0)*cj1*cj2);
IkReal x8066=((1.0)*x8058);
evalcond[0]=(((r21*x8064))+(((-1.0)*gconst149*r20*x8066))+(((-1.0)*r22*x8062)));
evalcond[1]=(cj0+(((-1.0)*r12*x8062))+((x8058*x8060))+(((-1.0)*gconst149*r10*x8066)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8064))+(((-1.0)*gconst149*r00*x8066))+(((-1.0)*r02*x8062)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8062))+((r20*x8063))+(((-1.0)*r22*x8066)));
evalcond[4]=((((-1.0)*cj0*x8065))+((r00*x8063))+((cj0*x8061))+(((-1.0)*gconst148*r01*x8062))+(((-1.0)*r02*x8066)));
evalcond[5]=(((r10*x8063))+(((-1.0)*sj0*x8065))+(((-1.0)*r12*x8066))+(((-1.0)*x8060*x8062))+((sj0*x8061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8067=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8067;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8067);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8068=((1.0)*cj5);
IkReal x8069=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8068)));
j4eval[0]=x8069;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8068)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8069);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8070=cj5*cj5;
IkReal x8071=r01*r01;
IkReal x8072=(r01*sj5);
IkReal x8073=(cj5*r00);
IkReal x8074=((((-1.0)*x8071))+(((-1.0)*x8070*(r00*r00)))+(((-1.0)*(r02*r02)))+((x8070*x8071))+(((2.0)*x8072*x8073)));
j4eval[0]=x8074;
j4eval[1]=IKsign(x8074);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8072))+x8073))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8075=cj5*cj5;
IkReal x8076=r01*r01;
IkReal x8077=(r01*sj5);
IkReal x8078=(cj5*r00);
CheckValue<IkReal> x8079=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8076))+((x8075*x8076))+(((2.0)*x8077*x8078))+(((-1.0)*(r02*r02)))+(((-1.0)*x8075*(r00*r00))))),-1);
if(!x8079.valid){
continue;
}
CheckValue<IkReal> x8080 = IKatan2WithCheck(IkReal(((((-1.0)*x8077))+x8078)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8079.value)))+(x8080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8081=IKsin(j4);
IkReal x8082=IKcos(j4);
IkReal x8083=(cj5*r10);
IkReal x8084=(r01*sj5);
IkReal x8085=(cj5*r00);
IkReal x8086=(cj5*r20);
IkReal x8087=((1.0)*x8082);
IkReal x8088=((1.0)*x8081);
IkReal x8089=(sj5*x8081);
evalcond[0]=((((-1.0)*x8086*x8088))+((r21*x8089))+(((-1.0)*r22*x8087)));
evalcond[1]=((((-1.0)*x8083*x8088))+((r11*x8089))+(((-1.0)*r12*x8087)));
evalcond[2]=((((-1.0)*r02*x8088))+((x8082*x8085))+(((-1.0)*x8084*x8087)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8087))+((x8081*x8084))+(((-1.0)*x8085*x8088)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8087))+((cj1*sj2))+((x8082*x8086))+(((-1.0)*r22*x8088)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8087))+((x8082*x8083))+(((-1.0)*r12*x8088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8090=((1.0)*cj5);
CheckValue<IkReal> x8091=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8090)))),-1);
if(!x8091.valid){
continue;
}
CheckValue<IkReal> x8092 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8091.value)))+(x8092.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8093=IKsin(j4);
IkReal x8094=IKcos(j4);
IkReal x8095=(cj5*r10);
IkReal x8096=(r01*sj5);
IkReal x8097=(cj5*r00);
IkReal x8098=(cj5*r20);
IkReal x8099=((1.0)*x8094);
IkReal x8100=((1.0)*x8093);
IkReal x8101=(sj5*x8093);
evalcond[0]=((((-1.0)*x8098*x8100))+(((-1.0)*r22*x8099))+((r21*x8101)));
evalcond[1]=(((r11*x8101))+(((-1.0)*x8095*x8100))+(((-1.0)*r12*x8099)));
evalcond[2]=((((-1.0)*r02*x8100))+((x8094*x8097))+(((-1.0)*x8096*x8099)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8099))+((x8093*x8096))+(((-1.0)*x8097*x8100)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8099))+((cj1*sj2))+(((-1.0)*r22*x8100))+((x8094*x8098)));
evalcond[5]=((((-1.0)*r11*sj5*x8099))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8094*x8095))+(((-1.0)*r12*x8100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8102=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8102.valid){
continue;
}
CheckValue<IkReal> x8103 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8102.value)))+(x8103.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8104=IKsin(j4);
IkReal x8105=IKcos(j4);
IkReal x8106=(cj5*r10);
IkReal x8107=(r01*sj5);
IkReal x8108=(cj5*r00);
IkReal x8109=(cj5*r20);
IkReal x8110=((1.0)*x8105);
IkReal x8111=((1.0)*x8104);
IkReal x8112=(sj5*x8104);
evalcond[0]=((((-1.0)*x8109*x8111))+((r21*x8112))+(((-1.0)*r22*x8110)));
evalcond[1]=((((-1.0)*r12*x8110))+((r11*x8112))+(((-1.0)*x8106*x8111)));
evalcond[2]=((((-1.0)*r02*x8111))+((x8105*x8108))+(((-1.0)*x8107*x8110)));
evalcond[3]=((-1.0)+(((-1.0)*x8108*x8111))+(((-1.0)*r02*x8110))+((x8104*x8107)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8110))+((cj1*sj2))+((x8105*x8109))+(((-1.0)*r22*x8111)));
evalcond[5]=((((-1.0)*r11*sj5*x8110))+(((-1.0)*r12*x8111))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8105*x8106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8113=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8113;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8113);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8114=((1.0)*cj5);
IkReal x8115=((((-1.0)*r21*x8114))+(((-1.0)*r20*sj5)));
j4eval[0]=x8115;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8114))))));
j4eval[2]=IKsign(x8115);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8116=cj5*cj5;
IkReal x8117=r01*r01;
IkReal x8118=(cj5*r00);
IkReal x8119=(r01*sj5);
IkReal x8120=(((x8116*(r00*r00)))+(((-2.0)*x8118*x8119))+(r02*r02)+(((-1.0)*x8116*x8117))+x8117);
j4eval[0]=x8120;
j4eval[1]=((IKabs(r02))+(IKabs((x8118+(((-1.0)*x8119))))));
j4eval[2]=IKsign(x8120);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8121=cj5*cj5;
IkReal x8122=r01*r01;
IkReal x8123=(r01*sj5);
IkReal x8124=(cj5*r00);
CheckValue<IkReal> x8125 = IKatan2WithCheck(IkReal((x8124+(((-1.0)*x8123)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8125.valid){
continue;
}
CheckValue<IkReal> x8126=IKPowWithIntegerCheck(IKsign((((x8121*(r00*r00)))+(((-2.0)*x8123*x8124))+(((-1.0)*x8121*x8122))+(r02*r02)+x8122)),-1);
if(!x8126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8125.value)+(((1.5707963267949)*(x8126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8127=IKsin(j4);
IkReal x8128=IKcos(j4);
IkReal x8129=(cj5*r10);
IkReal x8130=(r01*sj5);
IkReal x8131=(cj5*r00);
IkReal x8132=(cj5*r20);
IkReal x8133=((1.0)*x8128);
IkReal x8134=((1.0)*x8127);
IkReal x8135=(sj5*x8127);
evalcond[0]=((((-1.0)*x8132*x8134))+(((-1.0)*r22*x8133))+((r21*x8135)));
evalcond[1]=(((r11*x8135))+(((-1.0)*r12*x8133))+(((-1.0)*x8129*x8134)));
evalcond[2]=((((-1.0)*r02*x8134))+(((-1.0)*x8130*x8133))+((x8128*x8131)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8133))+(((-1.0)*x8131*x8134))+((x8127*x8130)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8134))+(((-1.0)*r21*sj5*x8133))+((cj1*sj2))+((x8128*x8132)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8134))+(((-1.0)*r11*sj5*x8133))+((cj1*cj2))+((x8128*x8129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8136=((1.0)*cj5);
CheckValue<IkReal> x8137=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8136))+(((-1.0)*r20*sj5)))),-1);
if(!x8137.valid){
continue;
}
CheckValue<IkReal> x8138 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8136)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8137.value)))+(x8138.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8139=IKsin(j4);
IkReal x8140=IKcos(j4);
IkReal x8141=(cj5*r10);
IkReal x8142=(r01*sj5);
IkReal x8143=(cj5*r00);
IkReal x8144=(cj5*r20);
IkReal x8145=((1.0)*x8140);
IkReal x8146=((1.0)*x8139);
IkReal x8147=(sj5*x8139);
evalcond[0]=((((-1.0)*x8144*x8146))+(((-1.0)*r22*x8145))+((r21*x8147)));
evalcond[1]=((((-1.0)*x8141*x8146))+((r11*x8147))+(((-1.0)*r12*x8145)));
evalcond[2]=(((x8140*x8143))+(((-1.0)*r02*x8146))+(((-1.0)*x8142*x8145)));
evalcond[3]=((1.0)+(((-1.0)*x8143*x8146))+(((-1.0)*r02*x8145))+((x8139*x8142)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8140*x8144))+(((-1.0)*r22*x8146))+(((-1.0)*r21*sj5*x8145)));
evalcond[5]=((((-1.0)*r11*sj5*x8145))+(((-1.0)*sj1*sj2))+((x8140*x8141))+(((-1.0)*r12*x8146))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8148 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8148.valid){
continue;
}
CheckValue<IkReal> x8149=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8148.value)+(((1.5707963267949)*(x8149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8150=IKsin(j4);
IkReal x8151=IKcos(j4);
IkReal x8152=(cj5*r10);
IkReal x8153=(r01*sj5);
IkReal x8154=(cj5*r00);
IkReal x8155=(cj5*r20);
IkReal x8156=((1.0)*x8151);
IkReal x8157=((1.0)*x8150);
IkReal x8158=(sj5*x8150);
evalcond[0]=((((-1.0)*r22*x8156))+(((-1.0)*x8155*x8157))+((r21*x8158)));
evalcond[1]=(((r11*x8158))+(((-1.0)*r12*x8156))+(((-1.0)*x8152*x8157)));
evalcond[2]=((((-1.0)*x8153*x8156))+(((-1.0)*r02*x8157))+((x8151*x8154)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8156))+((x8150*x8153))+(((-1.0)*x8154*x8157)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8151*x8155))+(((-1.0)*r21*sj5*x8156))+(((-1.0)*r22*x8157)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8156))+((x8151*x8152))+((cj1*cj2))+(((-1.0)*r12*x8157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8159=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8159);
rxp1_1=(px*r21);
rxp1_2=(r11*x8159);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8160=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8160);
rxp1_1=(px*r21);
rxp1_2=(r11*x8160);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8161=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8161);
rxp1_1=(px*r21);
rxp1_2=(r11*x8161);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8164=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8164.valid){
continue;
}
IkReal x8162=x8164.value;
IkReal x8163=(sj0*x8162);
cj4array[0]=((((-1.0)*sj1*sj2*x8163))+((cj1*cj2*x8163)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8165=IKsin(j4);
IkReal x8166=IKcos(j4);
IkReal x8167=(r21*sj5);
IkReal x8168=(cj5*r20);
IkReal x8169=((1.0)*x8165);
IkReal x8170=((1.0)*x8166);
evalcond[0]=((-1.0)*r02*x8165);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8170)));
evalcond[2]=(((x8165*x8167))+(((-1.0)*x8168*x8169)));
evalcond[3]=(((r11*sj5*x8165))+(((-1.0)*cj5*r10*x8169)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8167*x8170))+((x8166*x8168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8173=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8173.valid){
continue;
}
IkReal x8171=x8173.value;
IkReal x8172=((1.0)*x8171);
cj4array[0]=((((-1.0)*cj2*sj1*x8172))+(((-1.0)*cj1*sj2*x8172)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8174=IKsin(j4);
IkReal x8175=IKcos(j4);
IkReal x8176=(r11*sj5);
IkReal x8177=((1.0)*sj0);
IkReal x8178=((1.0)*x8175);
IkReal x8179=((1.0)*cj5*x8174);
evalcond[0]=((-1.0)*r02*x8174);
evalcond[1]=((((-1.0)*x8177))+(((-1.0)*r02*x8178)));
evalcond[2]=((((-1.0)*r20*x8179))+((r21*sj5*x8174)));
evalcond[3]=(((x8174*x8176))+(((-1.0)*r10*x8179)));
evalcond[4]=((((-1.0)*x8176*x8178))+((cj5*r10*x8175))+(((-1.0)*cj1*cj2*x8177))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8180=IKPowWithIntegerCheck(r02,-1);
if(!x8180.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8180.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8181=IKsin(j4);
IkReal x8182=IKcos(j4);
IkReal x8183=(cj5*x8182);
IkReal x8184=(sj5*x8181);
IkReal x8185=((1.0)*sj5*x8182);
IkReal x8186=((1.0)*cj5*x8181);
evalcond[0]=((-1.0)*r02*x8181);
evalcond[1]=(((r21*x8184))+(((-1.0)*r20*x8186)));
evalcond[2]=(((r11*x8184))+(((-1.0)*r10*x8186)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8185))+((r20*x8183)));
evalcond[4]=(((r10*x8183))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r11*x8185))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8187=((1.0)*sj0);
IkReal x8188=((1.0)*cj0);
CheckValue<IkReal> x8189 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8188))+(((-1.0)*r12*x8187)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8188))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8189.valid){
continue;
}
CheckValue<IkReal> x8190=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8189.value)+(((1.5707963267949)*(x8190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8191=IKsin(j4);
IkReal x8192=IKcos(j4);
IkReal x8193=(cj5*r10);
IkReal x8194=(sj1*sj2);
IkReal x8195=(r01*sj5);
IkReal x8196=(cj5*r00);
IkReal x8197=(cj5*r20);
IkReal x8198=((1.0)*x8192);
IkReal x8199=((1.0)*cj1*cj2);
IkReal x8200=((1.0)*x8191);
IkReal x8201=(sj5*x8191);
evalcond[0]=((((-1.0)*r22*x8198))+((r21*x8201))+(((-1.0)*x8197*x8200)));
evalcond[1]=(((r11*x8201))+cj0+(((-1.0)*x8193*x8200))+(((-1.0)*r12*x8198)));
evalcond[2]=((((-1.0)*r02*x8198))+(((-1.0)*sj0))+(((-1.0)*x8196*x8200))+((x8191*x8195)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8198))+(((-1.0)*r22*x8200))+((x8192*x8197)));
evalcond[4]=((((-1.0)*r02*x8200))+(((-1.0)*x8195*x8198))+((x8192*x8196))+(((-1.0)*cj0*x8199))+((cj0*x8194)));
evalcond[5]=(((sj0*x8194))+(((-1.0)*r12*x8200))+(((-1.0)*sj0*x8199))+(((-1.0)*r11*sj5*x8198))+((x8192*x8193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8202=((1.0)*cj5);
CheckValue<IkReal> x8203 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8203.valid){
continue;
}
CheckValue<IkReal> x8204=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8202)))),-1);
if(!x8204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8203.value)+(((1.5707963267949)*(x8204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8205=IKsin(j4);
IkReal x8206=IKcos(j4);
IkReal x8207=(cj5*r10);
IkReal x8208=(sj1*sj2);
IkReal x8209=(r01*sj5);
IkReal x8210=(cj5*r00);
IkReal x8211=(cj5*r20);
IkReal x8212=((1.0)*x8206);
IkReal x8213=((1.0)*cj1*cj2);
IkReal x8214=((1.0)*x8205);
IkReal x8215=(sj5*x8205);
evalcond[0]=((((-1.0)*x8211*x8214))+(((-1.0)*r22*x8212))+((r21*x8215)));
evalcond[1]=(((r11*x8215))+cj0+(((-1.0)*r12*x8212))+(((-1.0)*x8207*x8214)));
evalcond[2]=((((-1.0)*sj0))+((x8205*x8209))+(((-1.0)*r02*x8212))+(((-1.0)*x8210*x8214)));
evalcond[3]=(((x8206*x8211))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8212))+(((-1.0)*r22*x8214)));
evalcond[4]=(((x8206*x8210))+(((-1.0)*cj0*x8213))+(((-1.0)*x8209*x8212))+((cj0*x8208))+(((-1.0)*r02*x8214)));
evalcond[5]=(((sj0*x8208))+((x8206*x8207))+(((-1.0)*r12*x8214))+(((-1.0)*sj0*x8213))+(((-1.0)*r11*sj5*x8212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8216=((1.0)*cj5);
CheckValue<IkReal> x8217 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8217.valid){
continue;
}
CheckValue<IkReal> x8218=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8216))+(((-1.0)*r00*sj5)))),-1);
if(!x8218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8217.value)+(((1.5707963267949)*(x8218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8219=IKsin(j4);
IkReal x8220=IKcos(j4);
IkReal x8221=(cj5*r10);
IkReal x8222=(sj1*sj2);
IkReal x8223=(r01*sj5);
IkReal x8224=(cj5*r00);
IkReal x8225=(cj5*r20);
IkReal x8226=((1.0)*x8220);
IkReal x8227=((1.0)*cj1*cj2);
IkReal x8228=((1.0)*x8219);
IkReal x8229=(sj5*x8219);
evalcond[0]=((((-1.0)*x8225*x8228))+((r21*x8229))+(((-1.0)*r22*x8226)));
evalcond[1]=(cj0+((r11*x8229))+(((-1.0)*x8221*x8228))+(((-1.0)*r12*x8226)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8226))+(((-1.0)*x8224*x8228))+((x8219*x8223)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8220*x8225))+(((-1.0)*r21*sj5*x8226))+(((-1.0)*r22*x8228)));
evalcond[4]=((((-1.0)*x8223*x8226))+((cj0*x8222))+(((-1.0)*r02*x8228))+((x8220*x8224))+(((-1.0)*cj0*x8227)));
evalcond[5]=((((-1.0)*r11*sj5*x8226))+((x8220*x8221))+(((-1.0)*r12*x8228))+(((-1.0)*sj0*x8227))+((sj0*x8222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8230=cj5*cj5;
IkReal x8231=r21*r21;
IkReal x8232=(cj2*sj1);
IkReal x8233=(cj1*sj2);
IkReal x8234=(r21*sj5);
IkReal x8235=((1.0)*cj5*r20);
CheckValue<IkReal> x8236=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8230*x8231))+(r22*r22)+((x8230*(r20*r20)))+x8231+(((-2.0)*cj5*r20*x8234)))),-1);
if(!x8236.valid){
continue;
}
CheckValue<IkReal> x8237 = IKatan2WithCheck(IkReal((((r22*x8233))+((r22*x8232)))),IkReal(((((-1.0)*x8233*x8235))+((x8232*x8234))+(((-1.0)*x8232*x8235))+((x8233*x8234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8236.value)))+(x8237.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8238=IKsin(j4);
IkReal x8239=IKcos(j4);
IkReal x8240=(r21*sj5);
IkReal x8241=(cj5*r20);
IkReal x8242=((1.0)*x8239);
IkReal x8243=((1.0)*x8238);
evalcond[0]=((((-1.0)*x8241*x8243))+(((-1.0)*r22*x8242))+((x8238*x8240)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*x8240*x8242))+((cj1*sj2))+(((-1.0)*r22*x8243))+((x8239*x8241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8244=(cj5*sj4);
IkReal x8245=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8245))+(((-1.0)*r00*x8244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x8244))+(((-1.0)*r11*x8245))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8245))+(((-1.0)*r00*x8244))))+IKsqr((((r10*x8244))+(((-1.0)*r11*x8245))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8245))+(((-1.0)*r00*x8244))), (((r10*x8244))+(((-1.0)*r11*x8245))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8246=IKcos(j0);
IkReal x8247=IKsin(j0);
IkReal x8248=(cj4*cj5);
IkReal x8249=((1.0)*cj1);
IkReal x8250=((0.39225)*sj1);
IkReal x8251=(r11*sj5);
IkReal x8252=(cj5*r11);
IkReal x8253=((1.0)*sj5);
IkReal x8254=((1.0)*sj4);
IkReal x8255=((1.0)*sj1);
IkReal x8256=((0.09465)*sj5);
IkReal x8257=(cj5*r01);
IkReal x8258=((0.425)*cj1);
IkReal x8259=((1.0)*cj4);
IkReal x8260=(sj2*x8246);
IkReal x8261=(sj2*x8247);
IkReal x8262=((0.39225)*cj1*cj2);
IkReal x8263=(cj2*x8246);
IkReal x8264=(cj2*x8247);
evalcond[0]=((((-1.0)*r12*x8259))+((sj4*x8251))+(((-1.0)*cj5*r10*x8254))+x8246);
evalcond[1]=(((r01*sj4*sj5))+(((-1.0)*cj5*r00*x8254))+(((-1.0)*r02*x8259))+(((-1.0)*x8247)));
evalcond[2]=((((-1.0)*x8257))+(((-1.0)*r00*x8253))+(((-1.0)*x8249*x8260))+(((-1.0)*x8255*x8263)));
evalcond[3]=((((-1.0)*x8252))+(((-1.0)*r10*x8253))+(((-1.0)*x8249*x8261))+(((-1.0)*x8255*x8264)));
evalcond[4]=((((-1.0)*cj4*r01*x8253))+(((-1.0)*x8249*x8263))+((sj1*x8260))+(((-1.0)*r02*x8254))+((r00*x8248)));
evalcond[5]=(((r10*x8248))+(((-1.0)*r12*x8254))+(((-1.0)*x8251*x8259))+(((-1.0)*x8249*x8264))+((sj1*x8261)));
evalcond[6]=((((-0.09465)*x8257))+(((-1.0)*x8250*x8260))+((x8246*x8262))+(((-0.10915)*x8247))+(((-1.0)*r00*x8256))+(((-1.0)*px))+((x8246*x8258)));
evalcond[7]=(((x8247*x8258))+(((-0.09465)*x8252))+(((-1.0)*r10*x8256))+(((-1.0)*x8250*x8261))+(((-1.0)*py))+(((0.10915)*x8246))+((x8247*x8262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8265 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8265.valid){
continue;
}
CheckValue<IkReal> x8266=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8266.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8265.value)+(((1.5707963267949)*(x8266.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8267=IKcos(j0);
IkReal x8268=IKsin(j0);
IkReal x8269=((1.0)*cj1);
IkReal x8270=((0.39225)*sj1);
IkReal x8271=(cj5*r11);
IkReal x8272=((1.0)*sj5);
IkReal x8273=(cj5*r01);
IkReal x8274=((1.0)*sj1);
IkReal x8275=((0.09465)*sj5);
IkReal x8276=((0.39225)*cj1);
IkReal x8277=((0.425)*cj1);
IkReal x8278=(sj2*x8267);
IkReal x8279=(sj2*x8268);
IkReal x8280=(cj2*x8267);
IkReal x8281=(cj2*x8268);
evalcond[0]=((((-1.0)*x8269*x8278))+(((-1.0)*x8274*x8280))+(((-1.0)*r00*x8272))+(((-1.0)*x8273)));
evalcond[1]=((((-1.0)*x8269*x8279))+(((-1.0)*r10*x8272))+(((-1.0)*x8274*x8281))+(((-1.0)*x8271)));
evalcond[2]=(((x8276*x8280))+(((-1.0)*px))+(((-0.10915)*x8268))+(((-1.0)*x8270*x8278))+((x8267*x8277))+(((-1.0)*r00*x8275))+(((-0.09465)*x8273)));
evalcond[3]=(((x8268*x8277))+((x8276*x8281))+(((-1.0)*py))+(((0.10915)*x8267))+(((-1.0)*r10*x8275))+(((-1.0)*x8270*x8279))+(((-0.09465)*x8271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8282=((1.0)*cj5);
IkReal x8283=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8282)));
j4eval[0]=x8283;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x8282))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8283);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8284=((1.0)*cj5);
IkReal x8285=((((-1.0)*r11*x8284))+(((-1.0)*r10*sj5)));
j4eval[0]=x8285;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8284))))));
j4eval[2]=IKsign(x8285);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8286=((1.0)*sj0);
IkReal x8287=((1.0)*cj0);
IkReal x8288=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8288;
j4eval[1]=((IKabs(((((-1.0)*r02*x8287))+(((-1.0)*r12*x8286)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8286))+(((-1.0)*r01*sj5*x8287))))));
j4eval[2]=IKsign(x8288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8289=((-1.0)*r20);
IkReal x8291 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8291)==0){
continue;
}
IkReal x8290=pow(x8291,-0.5);
CheckValue<IkReal> x8292 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8289),IKFAST_ATAN2_MAGTHRESH);
if(!x8292.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8292.value));
IkReal gconst133=(r21*x8290);
IkReal gconst134=(x8289*x8290);
CheckValue<IkReal> x8293 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8293.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8293.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8294=((-1.0)*r20);
IkReal x8295=x8290;
CheckValue<IkReal> x8297 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8294),IKFAST_ATAN2_MAGTHRESH);
if(!x8297.valid){
continue;
}
IkReal x8296=((-1.0)*(x8297.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8296;
IkReal gconst132=x8296;
IkReal gconst133=(r21*x8295);
IkReal gconst134=(x8294*x8295);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8298=((-1.0)*r20);
IkReal x8299=x8290;
CheckValue<IkReal> x8301 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8298),IKFAST_ATAN2_MAGTHRESH);
if(!x8301.valid){
continue;
}
IkReal x8300=((-1.0)*(x8301.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8300;
IkReal gconst132=x8300;
IkReal gconst133=(r21*x8299);
IkReal gconst134=(x8298*x8299);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8302=((-1.0)*r20);
IkReal x8303=x8290;
CheckValue<IkReal> x8305 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8302),IKFAST_ATAN2_MAGTHRESH);
if(!x8305.valid){
continue;
}
IkReal x8304=((-1.0)*(x8305.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8304;
IkReal gconst132=x8304;
IkReal gconst133=(r21*x8303);
IkReal gconst134=(x8302*x8303);
IkReal x8306=r22*r22;
CheckValue<IkReal> x8309=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8306))),-1);
if(!x8309.valid){
continue;
}
IkReal x8307=x8309.value;
IkReal x8308=(x8306+((x8307*(r20*r20*r20*r20)))+((x8307*(r21*r21*r21*r21)))+(((2.0)*x8307*(r20*r20)*(r21*r21))));
j4eval[0]=x8308;
j4eval[1]=IKsign(x8308);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8310=(gconst133*r21);
IkReal x8311=(cj1*sj2);
IkReal x8312=(gconst134*r20);
IkReal x8313=(cj2*sj1);
CheckValue<IkReal> x8314 = IKatan2WithCheck(IkReal((((r22*x8311))+((r22*x8313)))),IkReal(((((-1.0)*x8311*x8312))+((x8310*x8311))+((x8310*x8313))+(((-1.0)*x8312*x8313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8314.valid){
continue;
}
CheckValue<IkReal> x8315=IKPowWithIntegerCheck(IKsign(((x8310*x8310)+(r22*r22)+(x8312*x8312)+(((-2.0)*x8310*x8312)))),-1);
if(!x8315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8314.value)+(((1.5707963267949)*(x8315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8316=IKsin(j4);
IkReal x8317=IKcos(j4);
IkReal x8318=(sj1*sj2);
IkReal x8319=(gconst133*r11);
IkReal x8320=(gconst133*r21);
IkReal x8321=(gconst133*r01);
IkReal x8322=((1.0)*x8317);
IkReal x8323=(gconst134*x8317);
IkReal x8324=((1.0)*x8316);
IkReal x8325=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8324))+((x8316*x8320))+(((-1.0)*r22*x8322)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x8324))+(((-1.0)*r12*x8322))+((x8316*x8319)));
evalcond[2]=((((-1.0)*sj0))+((x8316*x8321))+(((-1.0)*gconst134*r00*x8324))+(((-1.0)*r02*x8322)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8324))+((cj1*sj2))+((r20*x8323))+(((-1.0)*x8320*x8322)));
evalcond[4]=(((cj0*x8318))+((r00*x8323))+(((-1.0)*r02*x8324))+(((-1.0)*x8321*x8322))+(((-1.0)*cj0*x8325)));
evalcond[5]=(((r10*x8323))+((sj0*x8318))+(((-1.0)*sj0*x8325))+(((-1.0)*r12*x8324))+(((-1.0)*x8319*x8322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8326=((1.0)*gconst134);
CheckValue<IkReal> x8327 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8326))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8327.valid){
continue;
}
CheckValue<IkReal> x8328=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8326)))),-1);
if(!x8328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8327.value)+(((1.5707963267949)*(x8328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8329=IKsin(j4);
IkReal x8330=IKcos(j4);
IkReal x8331=(sj1*sj2);
IkReal x8332=(gconst133*r11);
IkReal x8333=(gconst133*r21);
IkReal x8334=(gconst133*r01);
IkReal x8335=((1.0)*x8330);
IkReal x8336=(gconst134*x8330);
IkReal x8337=((1.0)*x8329);
IkReal x8338=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8335))+((x8329*x8333))+(((-1.0)*gconst134*r20*x8337)));
evalcond[1]=(((x8329*x8332))+cj0+(((-1.0)*r12*x8335))+(((-1.0)*gconst134*r10*x8337)));
evalcond[2]=((((-1.0)*gconst134*r00*x8337))+(((-1.0)*sj0))+((x8329*x8334))+(((-1.0)*r02*x8335)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8337))+((cj1*sj2))+((r20*x8336))+(((-1.0)*x8333*x8335)));
evalcond[4]=(((r00*x8336))+(((-1.0)*r02*x8337))+((cj0*x8331))+(((-1.0)*cj0*x8338))+(((-1.0)*x8334*x8335)));
evalcond[5]=((((-1.0)*x8332*x8335))+(((-1.0)*r12*x8337))+((r10*x8336))+(((-1.0)*sj0*x8338))+((sj0*x8331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8339=((1.0)*gconst134);
CheckValue<IkReal> x8340 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8339))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8340.valid){
continue;
}
CheckValue<IkReal> x8341=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8339)))),-1);
if(!x8341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8340.value)+(((1.5707963267949)*(x8341.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8342=IKsin(j4);
IkReal x8343=IKcos(j4);
IkReal x8344=(sj1*sj2);
IkReal x8345=(gconst133*r11);
IkReal x8346=(gconst133*r21);
IkReal x8347=(gconst133*r01);
IkReal x8348=((1.0)*x8343);
IkReal x8349=(gconst134*x8343);
IkReal x8350=((1.0)*x8342);
IkReal x8351=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8350))+((x8342*x8346))+(((-1.0)*r22*x8348)));
evalcond[1]=(cj0+((x8342*x8345))+(((-1.0)*gconst134*r10*x8350))+(((-1.0)*r12*x8348)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8348))+((x8342*x8347))+(((-1.0)*gconst134*r00*x8350)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8350))+((cj1*sj2))+((r20*x8349))+(((-1.0)*x8346*x8348)));
evalcond[4]=((((-1.0)*r02*x8350))+(((-1.0)*cj0*x8351))+((cj0*x8344))+(((-1.0)*x8347*x8348))+((r00*x8349)));
evalcond[5]=((((-1.0)*x8345*x8348))+((sj0*x8344))+(((-1.0)*r12*x8350))+(((-1.0)*sj0*x8351))+((r10*x8349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8352=((-1.0)*r21);
IkReal x8354 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8354)==0){
continue;
}
IkReal x8353=pow(x8354,-0.5);
CheckValue<IkReal> x8355 = IKatan2WithCheck(IkReal(x8352),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8355.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8355.value))));
IkReal gconst136=(x8352*x8353);
IkReal gconst137=((1.0)*r20*x8353);
CheckValue<IkReal> x8356 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8356.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8356.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8357=((-1.0)*r21);
CheckValue<IkReal> x8360 = IKatan2WithCheck(IkReal(x8357),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8360.valid){
continue;
}
IkReal x8358=((1.0)*(x8360.value));
IkReal x8359=x8353;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8358)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8358)));
IkReal gconst136=(x8357*x8359);
IkReal gconst137=((1.0)*r20*x8359);
IkReal x8361=r22*r22;
IkReal x8362=((1.0)*x8361);
CheckValue<IkReal> x8366=IKPowWithIntegerCheck(((-1.0)+x8361),-1);
if(!x8366.valid){
continue;
}
IkReal x8363=x8366.value;
if((((1.0)+(((-1.0)*x8362)))) < -0.00001)
continue;
IkReal x8364=IKsqrt(((1.0)+(((-1.0)*x8362))));
IkReal x8365=(cj0*x8363*x8364);
j4eval[0]=((IKabs((x8365+(((-1.0)*x8362*x8365)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8367=((-1.0)*r21);
CheckValue<IkReal> x8370 = IKatan2WithCheck(IkReal(x8367),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8370.valid){
continue;
}
IkReal x8368=((1.0)*(x8370.value));
IkReal x8369=x8353;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8368)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8368)));
IkReal gconst136=(x8367*x8369);
IkReal gconst137=((1.0)*r20*x8369);
IkReal x8371=r22*r22;
IkReal x8372=((1.0)*x8371);
CheckValue<IkReal> x8376=IKPowWithIntegerCheck(((-1.0)+x8371),-1);
if(!x8376.valid){
continue;
}
IkReal x8373=x8376.value;
if((((1.0)+(((-1.0)*x8372)))) < -0.00001)
continue;
IkReal x8374=IKsqrt(((1.0)+(((-1.0)*x8372))));
IkReal x8375=(sj0*x8373*x8374);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8375+(((-1.0)*x8372*x8375))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8377=((-1.0)*r21);
CheckValue<IkReal> x8380 = IKatan2WithCheck(IkReal(x8377),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8380.valid){
continue;
}
IkReal x8378=((1.0)*(x8380.value));
IkReal x8379=x8353;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8378)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8378)));
IkReal gconst136=(x8377*x8379);
IkReal gconst137=((1.0)*r20*x8379);
IkReal x8381=r22*r22;
IkReal x8382=(r12*sj0);
IkReal x8383=(cj0*r02);
CheckValue<IkReal> x8387=IKPowWithIntegerCheck(((-1.0)+x8381),-1);
if(!x8387.valid){
continue;
}
IkReal x8384=x8387.value;
if((((1.0)+(((-1.0)*x8381)))) < -0.00001)
continue;
IkReal x8385=IKsqrt(((1.0)+(((-1.0)*x8381))));
IkReal x8386=(r22*x8384*x8385);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x8383))+(((-1.0)*x8382)))))+(IKabs((((x8382*x8386))+((x8383*x8386))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8388=((1.0)*sj0);
IkReal x8389=((1.0)*cj0);
CheckValue<IkReal> x8390=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8390.valid){
continue;
}
CheckValue<IkReal> x8391 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8389))+(((-1.0)*r12*x8388)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x8388))+(((-1.0)*gconst136*r01*x8389))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8390.value)))+(x8391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8392=IKsin(j4);
IkReal x8393=IKcos(j4);
IkReal x8394=(gconst136*r01);
IkReal x8395=(gconst137*r10);
IkReal x8396=(sj1*sj2);
IkReal x8397=(gconst137*r20);
IkReal x8398=(gconst136*r11);
IkReal x8399=(gconst136*r21);
IkReal x8400=(gconst137*r00);
IkReal x8401=((1.0)*x8393);
IkReal x8402=((1.0)*cj1*cj2);
IkReal x8403=((1.0)*x8392);
evalcond[0]=(((x8392*x8399))+(((-1.0)*r22*x8401))+(((-1.0)*x8397*x8403)));
evalcond[1]=((((-1.0)*x8395*x8403))+cj0+((x8392*x8398))+(((-1.0)*r12*x8401)));
evalcond[2]=((((-1.0)*sj0))+((x8392*x8394))+(((-1.0)*r02*x8401))+(((-1.0)*x8400*x8403)));
evalcond[3]=(((cj2*sj1))+((x8393*x8397))+((cj1*sj2))+(((-1.0)*x8399*x8401))+(((-1.0)*r22*x8403)));
evalcond[4]=((((-1.0)*cj0*x8402))+(((-1.0)*r02*x8403))+(((-1.0)*x8394*x8401))+((x8393*x8400))+((cj0*x8396)));
evalcond[5]=(((x8393*x8395))+(((-1.0)*sj0*x8402))+(((-1.0)*x8398*x8401))+((sj0*x8396))+(((-1.0)*r12*x8403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8404=((1.0)*gconst137);
CheckValue<IkReal> x8405 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8404))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8405.valid){
continue;
}
CheckValue<IkReal> x8406=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x8404)))),-1);
if(!x8406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8405.value)+(((1.5707963267949)*(x8406.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8407=IKsin(j4);
IkReal x8408=IKcos(j4);
IkReal x8409=(gconst136*r01);
IkReal x8410=(gconst137*r10);
IkReal x8411=(sj1*sj2);
IkReal x8412=(gconst137*r20);
IkReal x8413=(gconst136*r11);
IkReal x8414=(gconst136*r21);
IkReal x8415=(gconst137*r00);
IkReal x8416=((1.0)*x8408);
IkReal x8417=((1.0)*cj1*cj2);
IkReal x8418=((1.0)*x8407);
evalcond[0]=(((x8407*x8414))+(((-1.0)*x8412*x8418))+(((-1.0)*r22*x8416)));
evalcond[1]=((((-1.0)*r12*x8416))+cj0+(((-1.0)*x8410*x8418))+((x8407*x8413)));
evalcond[2]=(((x8407*x8409))+(((-1.0)*sj0))+(((-1.0)*x8415*x8418))+(((-1.0)*r02*x8416)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8414*x8416))+((cj1*sj2))+((x8408*x8412))+(((-1.0)*r22*x8418)));
evalcond[4]=((((-1.0)*x8409*x8416))+(((-1.0)*cj0*x8417))+(((-1.0)*r02*x8418))+((x8408*x8415))+((cj0*x8411)));
evalcond[5]=((((-1.0)*r12*x8418))+((x8408*x8410))+(((-1.0)*x8413*x8416))+(((-1.0)*sj0*x8417))+((sj0*x8411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8419=((1.0)*gconst137);
CheckValue<IkReal> x8420 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8419))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8420.valid){
continue;
}
CheckValue<IkReal> x8421=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x8419)))),-1);
if(!x8421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8420.value)+(((1.5707963267949)*(x8421.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8422=IKsin(j4);
IkReal x8423=IKcos(j4);
IkReal x8424=(gconst136*r01);
IkReal x8425=(gconst137*r10);
IkReal x8426=(sj1*sj2);
IkReal x8427=(gconst137*r20);
IkReal x8428=(gconst136*r11);
IkReal x8429=(gconst136*r21);
IkReal x8430=(gconst137*r00);
IkReal x8431=((1.0)*x8423);
IkReal x8432=((1.0)*cj1*cj2);
IkReal x8433=((1.0)*x8422);
evalcond[0]=((((-1.0)*x8427*x8433))+((x8422*x8429))+(((-1.0)*r22*x8431)));
evalcond[1]=(cj0+(((-1.0)*r12*x8431))+(((-1.0)*x8425*x8433))+((x8422*x8428)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8430*x8433))+((x8422*x8424))+(((-1.0)*r02*x8431)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8429*x8431))+((cj1*sj2))+((x8423*x8427))+(((-1.0)*r22*x8433)));
evalcond[4]=(((cj0*x8426))+(((-1.0)*x8424*x8431))+(((-1.0)*r02*x8433))+(((-1.0)*cj0*x8432))+((x8423*x8430)));
evalcond[5]=((((-1.0)*sj0*x8432))+(((-1.0)*r12*x8433))+((sj0*x8426))+((x8423*x8425))+(((-1.0)*x8428*x8431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8434=((-1.0)*r10);
IkReal x8436 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8436)==0){
continue;
}
IkReal x8435=pow(x8436,-0.5);
CheckValue<IkReal> x8437 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8434),IKFAST_ATAN2_MAGTHRESH);
if(!x8437.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8437.value));
IkReal gconst139=(r11*x8435);
IkReal gconst140=(x8434*x8435);
CheckValue<IkReal> x8438 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8438.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8438.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8439=((-1.0)*r10);
IkReal x8440=x8435;
CheckValue<IkReal> x8442 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8439),IKFAST_ATAN2_MAGTHRESH);
if(!x8442.valid){
continue;
}
IkReal x8441=((-1.0)*(x8442.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8441;
IkReal gconst138=x8441;
IkReal gconst139=(r11*x8440);
IkReal gconst140=(x8439*x8440);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8443=((1.0)*sj0);
IkReal x8444=((1.0)*gconst139);
CheckValue<IkReal> x8445 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8443))+(((-1.0)*cj0*r02)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x8444))+(((-1.0)*gconst139*r11*x8443))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8445.valid){
continue;
}
CheckValue<IkReal> x8446=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8444)))),-1);
if(!x8446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8445.value)+(((1.5707963267949)*(x8446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8447=IKsin(j4);
IkReal x8448=IKcos(j4);
IkReal x8449=(gconst140*r00);
IkReal x8450=(sj1*sj2);
IkReal x8451=(gconst139*r11);
IkReal x8452=(gconst139*r01);
IkReal x8453=(gconst139*r21);
IkReal x8454=((1.0)*x8448);
IkReal x8455=((1.0)*x8447);
IkReal x8456=((1.0)*cj1*cj2);
IkReal x8457=(gconst140*x8448);
evalcond[0]=(((x8447*x8453))+(((-1.0)*r22*x8454))+(((-1.0)*gconst140*r20*x8455)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8455))+((x8447*x8451))+(((-1.0)*r12*x8454)));
evalcond[2]=((((-1.0)*sj0))+((x8447*x8452))+(((-1.0)*x8449*x8455))+(((-1.0)*r02*x8454)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8453*x8454))+((r20*x8457))+(((-1.0)*r22*x8455)));
evalcond[4]=((((-1.0)*x8452*x8454))+((x8448*x8449))+(((-1.0)*cj0*x8456))+(((-1.0)*r02*x8455))+((cj0*x8450)));
evalcond[5]=((((-1.0)*sj0*x8456))+(((-1.0)*x8451*x8454))+(((-1.0)*r12*x8455))+((sj0*x8450))+((r10*x8457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8458=((1.0)*gconst140);
CheckValue<IkReal> x8459=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8458))+(((-1.0)*gconst139*r00)))),-1);
if(!x8459.valid){
continue;
}
CheckValue<IkReal> x8460 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8458)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8459.value)))+(x8460.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8461=IKsin(j4);
IkReal x8462=IKcos(j4);
IkReal x8463=(gconst140*r00);
IkReal x8464=(sj1*sj2);
IkReal x8465=(gconst139*r11);
IkReal x8466=(gconst139*r01);
IkReal x8467=(gconst139*r21);
IkReal x8468=((1.0)*x8462);
IkReal x8469=((1.0)*x8461);
IkReal x8470=((1.0)*cj1*cj2);
IkReal x8471=(gconst140*x8462);
evalcond[0]=((((-1.0)*gconst140*r20*x8469))+((x8461*x8467))+(((-1.0)*r22*x8468)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8469))+((x8461*x8465))+(((-1.0)*r12*x8468)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8468))+(((-1.0)*x8463*x8469))+((x8461*x8466)));
evalcond[3]=((((-1.0)*x8467*x8468))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8469))+((r20*x8471)));
evalcond[4]=((((-1.0)*r02*x8469))+((cj0*x8464))+((x8462*x8463))+(((-1.0)*x8466*x8468))+(((-1.0)*cj0*x8470)));
evalcond[5]=((((-1.0)*x8465*x8468))+(((-1.0)*sj0*x8470))+((r10*x8471))+(((-1.0)*r12*x8469))+((sj0*x8464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8472=((-1.0)*r11);
IkReal x8474 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8474)==0){
continue;
}
IkReal x8473=pow(x8474,-0.5);
CheckValue<IkReal> x8475 = IKatan2WithCheck(IkReal(x8472),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8475.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8475.value))));
IkReal gconst142=(x8472*x8473);
IkReal gconst143=((1.0)*r10*x8473);
CheckValue<IkReal> x8476 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8476.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8476.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8477=((-1.0)*r11);
CheckValue<IkReal> x8480 = IKatan2WithCheck(IkReal(x8477),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8480.valid){
continue;
}
IkReal x8478=((1.0)*(x8480.value));
IkReal x8479=x8473;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8478)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8478)));
IkReal gconst142=(x8477*x8479);
IkReal gconst143=((1.0)*r10*x8479);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8481=((-1.0)*r11);
CheckValue<IkReal> x8484 = IKatan2WithCheck(IkReal(x8481),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8484.valid){
continue;
}
IkReal x8482=((1.0)*(x8484.value));
IkReal x8483=x8473;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8482)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8482)));
IkReal gconst142=(x8481*x8483);
IkReal gconst143=((1.0)*r10*x8483);
IkReal x8485=r12*r12;
IkReal x8486=((1.0)*sj0);
IkReal x8487=(cj0*r02);
IkReal x8488=x8473;
j4eval[0]=((IKabs(((((-1.0)*x8486*x8488))+((r12*x8487*x8488))+((sj0*x8485*x8488)))))+(IKabs(((((-1.0)*x8487))+(((-1.0)*r12*x8486))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8489=((-1.0)*r11);
CheckValue<IkReal> x8492 = IKatan2WithCheck(IkReal(x8489),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8492.valid){
continue;
}
IkReal x8490=((1.0)*(x8492.value));
IkReal x8491=x8473;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8490)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8490)));
IkReal gconst142=(x8489*x8491);
IkReal gconst143=((1.0)*r10*x8491);
IkReal x8493=r12*r12;
IkReal x8494=(cj1*r22*sj2);
IkReal x8495=(cj2*r22*sj1);
CheckValue<IkReal> x8499=IKPowWithIntegerCheck(((-1.0)+x8493),-1);
if(!x8499.valid){
continue;
}
IkReal x8496=x8499.value;
if((((1.0)+(((-1.0)*x8493)))) < -0.00001)
continue;
IkReal x8497=IKsqrt(((1.0)+(((-1.0)*x8493))));
IkReal x8498=((1.0)*r12*x8496*x8497);
j4eval[0]=((IKabs((x8495+x8494)))+(IKabs(((((-1.0)*x8494*x8498))+(((-1.0)*x8495*x8498))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8500=(gconst142*r21);
IkReal x8501=(cj1*sj2);
IkReal x8502=(cj2*sj1);
IkReal x8503=(gconst143*r20);
CheckValue<IkReal> x8504=IKPowWithIntegerCheck(IKsign(((x8500*x8500)+(r22*r22)+(x8503*x8503)+(((-2.0)*x8500*x8503)))),-1);
if(!x8504.valid){
continue;
}
CheckValue<IkReal> x8505 = IKatan2WithCheck(IkReal((((r22*x8501))+((r22*x8502)))),IkReal((((x8500*x8502))+((x8500*x8501))+(((-1.0)*x8501*x8503))+(((-1.0)*x8502*x8503)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8504.value)))+(x8505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8506=IKsin(j4);
IkReal x8507=IKcos(j4);
IkReal x8508=(sj1*sj2);
IkReal x8509=(gconst143*r20);
IkReal x8510=((1.0)*x8507);
IkReal x8511=((1.0)*cj1*cj2);
IkReal x8512=((1.0)*x8506);
IkReal x8513=(gconst142*x8506);
IkReal x8514=(gconst143*x8507);
evalcond[0]=(((r21*x8513))+(((-1.0)*x8509*x8512))+(((-1.0)*r22*x8510)));
evalcond[1]=((((-1.0)*gconst143*r10*x8512))+cj0+((r11*x8513))+(((-1.0)*r12*x8510)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8512))+(((-1.0)*r02*x8510))+((r01*x8513)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8510))+((cj1*sj2))+(((-1.0)*r22*x8512))+((x8507*x8509)));
evalcond[4]=(((cj0*x8508))+(((-1.0)*r02*x8512))+(((-1.0)*cj0*x8511))+(((-1.0)*gconst142*r01*x8510))+((r00*x8514)));
evalcond[5]=(((sj0*x8508))+(((-1.0)*r12*x8512))+(((-1.0)*sj0*x8511))+(((-1.0)*gconst142*r11*x8510))+((r10*x8514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8515=((1.0)*sj0);
IkReal x8516=((1.0)*gconst142);
CheckValue<IkReal> x8517 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8515)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x8516))+(((-1.0)*gconst142*r11*x8515))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8517.valid){
continue;
}
CheckValue<IkReal> x8518=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8516))+(((-1.0)*gconst143*r21)))),-1);
if(!x8518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8517.value)+(((1.5707963267949)*(x8518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8519=IKsin(j4);
IkReal x8520=IKcos(j4);
IkReal x8521=(sj1*sj2);
IkReal x8522=(gconst143*r20);
IkReal x8523=((1.0)*x8520);
IkReal x8524=((1.0)*cj1*cj2);
IkReal x8525=((1.0)*x8519);
IkReal x8526=(gconst142*x8519);
IkReal x8527=(gconst143*x8520);
evalcond[0]=(((r21*x8526))+(((-1.0)*r22*x8523))+(((-1.0)*x8522*x8525)));
evalcond[1]=((((-1.0)*gconst143*r10*x8525))+cj0+((r11*x8526))+(((-1.0)*r12*x8523)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8523))+((r01*x8526))+(((-1.0)*gconst143*r00*x8525)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8523))+((cj1*sj2))+((x8520*x8522))+(((-1.0)*r22*x8525)));
evalcond[4]=((((-1.0)*r02*x8525))+(((-1.0)*cj0*x8524))+((r00*x8527))+((cj0*x8521))+(((-1.0)*gconst142*r01*x8523)));
evalcond[5]=(((sj0*x8521))+(((-1.0)*gconst142*r11*x8523))+(((-1.0)*sj0*x8524))+(((-1.0)*r12*x8525))+((r10*x8527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8528=((1.0)*gconst143);
CheckValue<IkReal> x8529=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8528)))),-1);
if(!x8529.valid){
continue;
}
CheckValue<IkReal> x8530 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8528))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8529.value)))+(x8530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8531=IKsin(j4);
IkReal x8532=IKcos(j4);
IkReal x8533=(sj1*sj2);
IkReal x8534=(gconst143*r20);
IkReal x8535=((1.0)*x8532);
IkReal x8536=((1.0)*cj1*cj2);
IkReal x8537=((1.0)*x8531);
IkReal x8538=(gconst142*x8531);
IkReal x8539=(gconst143*x8532);
evalcond[0]=((((-1.0)*r22*x8535))+((r21*x8538))+(((-1.0)*x8534*x8537)));
evalcond[1]=(cj0+(((-1.0)*r12*x8535))+(((-1.0)*gconst143*r10*x8537))+((r11*x8538)));
evalcond[2]=((((-1.0)*r02*x8535))+(((-1.0)*sj0))+((r01*x8538))+(((-1.0)*gconst143*r00*x8537)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8537))+((cj1*sj2))+((x8532*x8534))+(((-1.0)*gconst142*r21*x8535)));
evalcond[4]=((((-1.0)*r02*x8537))+(((-1.0)*cj0*x8536))+((r00*x8539))+(((-1.0)*gconst142*r01*x8535))+((cj0*x8533)));
evalcond[5]=((((-1.0)*sj0*x8536))+(((-1.0)*gconst142*r11*x8535))+((r10*x8539))+(((-1.0)*r12*x8537))+((sj0*x8533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8540=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8540;
j4eval[1]=IKsign(x8540);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8541=((1.0)*cj5);
IkReal x8542=((((-1.0)*r01*x8541))+(((-1.0)*r00*sj5)));
j4eval[0]=x8542;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8541)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8543=cj5*cj5;
IkReal x8544=r11*r11;
IkReal x8545=(r11*sj5);
IkReal x8546=(cj5*r10);
IkReal x8547=((r12*r12)+x8544+(((-1.0)*x8543*x8544))+(((-2.0)*x8545*x8546))+((x8543*(r10*r10))));
j4eval[0]=x8547;
j4eval[1]=IKsign(x8547);
j4eval[2]=((IKabs(r12))+(IKabs((x8546+(((-1.0)*x8545))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8548=cj5*cj5;
IkReal x8549=r11*r11;
IkReal x8550=(cj5*r10);
IkReal x8551=(r11*sj5);
CheckValue<IkReal> x8552=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x8548*(r10*r10)))+x8549+(((-2.0)*x8550*x8551))+(((-1.0)*x8548*x8549)))),-1);
if(!x8552.valid){
continue;
}
CheckValue<IkReal> x8553 = IKatan2WithCheck(IkReal((x8550+(((-1.0)*x8551)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8552.value)))+(x8553.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8554=IKsin(j4);
IkReal x8555=IKcos(j4);
IkReal x8556=(cj5*r10);
IkReal x8557=(r01*sj5);
IkReal x8558=(cj5*r00);
IkReal x8559=(cj5*r20);
IkReal x8560=((1.0)*x8555);
IkReal x8561=((1.0)*x8554);
IkReal x8562=(sj5*x8554);
evalcond[0]=((((-1.0)*x8559*x8561))+(((-1.0)*r22*x8560))+((r21*x8562)));
evalcond[1]=((((-1.0)*x8558*x8561))+((x8554*x8557))+(((-1.0)*r02*x8560)));
evalcond[2]=((((-1.0)*r12*x8561))+((x8555*x8556))+(((-1.0)*r11*sj5*x8560)));
evalcond[3]=((1.0)+((r11*x8562))+(((-1.0)*r12*x8560))+(((-1.0)*x8556*x8561)));
evalcond[4]=(((cj2*sj1))+((x8555*x8559))+((cj1*sj2))+(((-1.0)*r22*x8561))+(((-1.0)*r21*sj5*x8560)));
evalcond[5]=(((x8555*x8558))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8557*x8560))+(((-1.0)*r02*x8561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8563=((1.0)*cj5);
CheckValue<IkReal> x8564=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8563))+(((-1.0)*r00*sj5)))),-1);
if(!x8564.valid){
continue;
}
CheckValue<IkReal> x8565 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8563)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8564.value)))+(x8565.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8566=IKsin(j4);
IkReal x8567=IKcos(j4);
IkReal x8568=(cj5*r10);
IkReal x8569=(r01*sj5);
IkReal x8570=(cj5*r00);
IkReal x8571=(cj5*r20);
IkReal x8572=((1.0)*x8567);
IkReal x8573=((1.0)*x8566);
IkReal x8574=(sj5*x8566);
evalcond[0]=(((r21*x8574))+(((-1.0)*x8571*x8573))+(((-1.0)*r22*x8572)));
evalcond[1]=((((-1.0)*r02*x8572))+(((-1.0)*x8570*x8573))+((x8566*x8569)));
evalcond[2]=((((-1.0)*r11*sj5*x8572))+((x8567*x8568))+(((-1.0)*r12*x8573)));
evalcond[3]=((1.0)+(((-1.0)*x8568*x8573))+((r11*x8574))+(((-1.0)*r12*x8572)));
evalcond[4]=((((-1.0)*r21*sj5*x8572))+((cj2*sj1))+((cj1*sj2))+((x8567*x8571))+(((-1.0)*r22*x8573)));
evalcond[5]=((((-1.0)*r02*x8573))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8569*x8572))+((x8567*x8570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8575=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8575.valid){
continue;
}
CheckValue<IkReal> x8576 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8575.value)))+(x8576.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8577=IKsin(j4);
IkReal x8578=IKcos(j4);
IkReal x8579=(cj5*r10);
IkReal x8580=(r01*sj5);
IkReal x8581=(cj5*r00);
IkReal x8582=(cj5*r20);
IkReal x8583=((1.0)*x8578);
IkReal x8584=((1.0)*x8577);
IkReal x8585=(sj5*x8577);
evalcond[0]=((((-1.0)*r22*x8583))+(((-1.0)*x8582*x8584))+((r21*x8585)));
evalcond[1]=(((x8577*x8580))+(((-1.0)*r02*x8583))+(((-1.0)*x8581*x8584)));
evalcond[2]=(((x8578*x8579))+(((-1.0)*r12*x8584))+(((-1.0)*r11*sj5*x8583)));
evalcond[3]=((1.0)+((r11*x8585))+(((-1.0)*r12*x8583))+(((-1.0)*x8579*x8584)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8584))+(((-1.0)*r21*sj5*x8583))+((x8578*x8582))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x8580*x8583))+((x8578*x8581))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8586=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8586;
j4eval[1]=IKsign(x8586);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8587=((1.0)*cj5);
IkReal x8588=((((-1.0)*r21*x8587))+(((-1.0)*r20*sj5)));
j4eval[0]=x8588;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8587))))));
j4eval[2]=IKsign(x8588);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8589=cj5*cj5;
IkReal x8590=r11*r11;
IkReal x8591=(cj5*r10);
IkReal x8592=(r11*sj5);
IkReal x8593=((((-1.0)*x8590))+(((2.0)*x8591*x8592))+((x8589*x8590))+(((-1.0)*(r12*r12)))+(((-1.0)*x8589*(r10*r10))));
j4eval[0]=x8593;
j4eval[1]=((IKabs((x8591+(((-1.0)*x8592)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8593);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8594=cj5*cj5;
IkReal x8595=r11*r11;
IkReal x8596=(cj5*r10);
IkReal x8597=(r11*sj5);
CheckValue<IkReal> x8598=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8594*(r10*r10)))+(((-1.0)*x8595))+(((-1.0)*(r12*r12)))+((x8594*x8595))+(((2.0)*x8596*x8597)))),-1);
if(!x8598.valid){
continue;
}
CheckValue<IkReal> x8599 = IKatan2WithCheck(IkReal((x8596+(((-1.0)*x8597)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8598.value)))+(x8599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8600=IKsin(j4);
IkReal x8601=IKcos(j4);
IkReal x8602=(cj5*r10);
IkReal x8603=(r01*sj5);
IkReal x8604=(cj5*r00);
IkReal x8605=(cj5*r20);
IkReal x8606=((1.0)*x8601);
IkReal x8607=((1.0)*x8600);
IkReal x8608=(sj5*x8600);
evalcond[0]=((((-1.0)*r22*x8606))+((r21*x8608))+(((-1.0)*x8605*x8607)));
evalcond[1]=((((-1.0)*r02*x8606))+(((-1.0)*x8604*x8607))+((x8600*x8603)));
evalcond[2]=((((-1.0)*r12*x8607))+((x8601*x8602))+(((-1.0)*r11*sj5*x8606)));
evalcond[3]=((-1.0)+(((-1.0)*x8602*x8607))+((r11*x8608))+(((-1.0)*r12*x8606)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8607))+((x8601*x8605))+(((-1.0)*r21*sj5*x8606)));
evalcond[5]=((((-1.0)*r02*x8607))+(((-1.0)*sj1*sj2))+((x8601*x8604))+(((-1.0)*x8603*x8606))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8609=((1.0)*cj5);
CheckValue<IkReal> x8610 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x8609))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8610.valid){
continue;
}
CheckValue<IkReal> x8611=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8609))+(((-1.0)*r20*sj5)))),-1);
if(!x8611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8610.value)+(((1.5707963267949)*(x8611.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8612=IKsin(j4);
IkReal x8613=IKcos(j4);
IkReal x8614=(cj5*r10);
IkReal x8615=(r01*sj5);
IkReal x8616=(cj5*r00);
IkReal x8617=(cj5*r20);
IkReal x8618=((1.0)*x8613);
IkReal x8619=((1.0)*x8612);
IkReal x8620=(sj5*x8612);
evalcond[0]=(((r21*x8620))+(((-1.0)*r22*x8618))+(((-1.0)*x8617*x8619)));
evalcond[1]=((((-1.0)*r02*x8618))+((x8612*x8615))+(((-1.0)*x8616*x8619)));
evalcond[2]=((((-1.0)*r12*x8619))+((x8613*x8614))+(((-1.0)*r11*sj5*x8618)));
evalcond[3]=((-1.0)+(((-1.0)*x8614*x8619))+(((-1.0)*r12*x8618))+((r11*x8620)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8619))+(((-1.0)*r21*sj5*x8618))+((x8613*x8617)));
evalcond[5]=((((-1.0)*r02*x8619))+(((-1.0)*sj1*sj2))+((x8613*x8616))+((cj1*cj2))+(((-1.0)*x8615*x8618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8621 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8621.valid){
continue;
}
CheckValue<IkReal> x8622=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8621.value)+(((1.5707963267949)*(x8622.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8623=IKsin(j4);
IkReal x8624=IKcos(j4);
IkReal x8625=(cj5*r10);
IkReal x8626=(r01*sj5);
IkReal x8627=(cj5*r00);
IkReal x8628=(cj5*r20);
IkReal x8629=((1.0)*x8624);
IkReal x8630=((1.0)*x8623);
IkReal x8631=(sj5*x8623);
evalcond[0]=((((-1.0)*x8628*x8630))+((r21*x8631))+(((-1.0)*r22*x8629)));
evalcond[1]=(((x8623*x8626))+(((-1.0)*x8627*x8630))+(((-1.0)*r02*x8629)));
evalcond[2]=((((-1.0)*r12*x8630))+(((-1.0)*r11*sj5*x8629))+((x8624*x8625)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8629))+(((-1.0)*x8625*x8630))+((r11*x8631)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8629))+(((-1.0)*r22*x8630))+((x8624*x8628)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x8626*x8629))+((cj1*cj2))+((x8624*x8627))+(((-1.0)*r02*x8630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8632=((-1.0)*r00);
IkReal x8634 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8634)==0){
continue;
}
IkReal x8633=pow(x8634,-0.5);
CheckValue<IkReal> x8635 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8632),IKFAST_ATAN2_MAGTHRESH);
if(!x8635.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8635.value));
IkReal gconst145=(r01*x8633);
IkReal gconst146=(x8632*x8633);
CheckValue<IkReal> x8636 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8636.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8636.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8637=((-1.0)*r00);
IkReal x8638=x8633;
CheckValue<IkReal> x8640 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8637),IKFAST_ATAN2_MAGTHRESH);
if(!x8640.valid){
continue;
}
IkReal x8639=((-1.0)*(x8640.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8639;
IkReal gconst144=x8639;
IkReal gconst145=(r01*x8638);
IkReal gconst146=(x8637*x8638);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8641=((1.0)*sj0);
IkReal x8642=((1.0)*gconst145);
CheckValue<IkReal> x8643 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8641)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x8642))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8641)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8643.valid){
continue;
}
CheckValue<IkReal> x8644=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x8642)))),-1);
if(!x8644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8643.value)+(((1.5707963267949)*(x8644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8645=IKsin(j4);
IkReal x8646=IKcos(j4);
IkReal x8647=(gconst146*r10);
IkReal x8648=(sj1*sj2);
IkReal x8649=(gconst146*r20);
IkReal x8650=(gconst146*r00);
IkReal x8651=((1.0)*x8646);
IkReal x8652=((1.0)*x8645);
IkReal x8653=(gconst145*x8645);
IkReal x8654=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8653))+(((-1.0)*r22*x8651))+(((-1.0)*x8649*x8652)));
evalcond[1]=((((-1.0)*x8647*x8652))+(((-1.0)*r12*x8651))+cj0+((r11*x8653)));
evalcond[2]=(((r01*x8653))+(((-1.0)*sj0))+(((-1.0)*x8650*x8652))+(((-1.0)*r02*x8651)));
evalcond[3]=(((x8646*x8649))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst145*r21*x8651))+(((-1.0)*r22*x8652)));
evalcond[4]=(((cj0*x8648))+(((-1.0)*gconst145*r01*x8651))+((x8646*x8650))+(((-1.0)*cj0*x8654))+(((-1.0)*r02*x8652)));
evalcond[5]=(((x8646*x8647))+(((-1.0)*gconst145*r11*x8651))+(((-1.0)*r12*x8652))+(((-1.0)*sj0*x8654))+((sj0*x8648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8655=((1.0)*gconst146);
CheckValue<IkReal> x8656=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8655))+(((-1.0)*gconst145*r10)))),-1);
if(!x8656.valid){
continue;
}
CheckValue<IkReal> x8657 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8655))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8656.value)))+(x8657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8658=IKsin(j4);
IkReal x8659=IKcos(j4);
IkReal x8660=(gconst146*r10);
IkReal x8661=(sj1*sj2);
IkReal x8662=(gconst146*r20);
IkReal x8663=(gconst146*r00);
IkReal x8664=((1.0)*x8659);
IkReal x8665=((1.0)*x8658);
IkReal x8666=(gconst145*x8658);
IkReal x8667=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x8662*x8665))+(((-1.0)*r22*x8664))+((r21*x8666)));
evalcond[1]=(cj0+(((-1.0)*r12*x8664))+((r11*x8666))+(((-1.0)*x8660*x8665)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8664))+((r01*x8666))+(((-1.0)*x8663*x8665)));
evalcond[3]=(((cj2*sj1))+((x8659*x8662))+((cj1*sj2))+(((-1.0)*r22*x8665))+(((-1.0)*gconst145*r21*x8664)));
evalcond[4]=(((x8659*x8663))+((cj0*x8661))+(((-1.0)*cj0*x8667))+(((-1.0)*r02*x8665))+(((-1.0)*gconst145*r01*x8664)));
evalcond[5]=((((-1.0)*sj0*x8667))+((x8659*x8660))+((sj0*x8661))+(((-1.0)*gconst145*r11*x8664))+(((-1.0)*r12*x8665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8668=((-1.0)*r01);
IkReal x8670 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8670)==0){
continue;
}
IkReal x8669=pow(x8670,-0.5);
CheckValue<IkReal> x8671 = IKatan2WithCheck(IkReal(x8668),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8671.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8671.value))));
IkReal gconst148=(x8668*x8669);
IkReal gconst149=((1.0)*r00*x8669);
CheckValue<IkReal> x8672 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8672.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8672.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8673=((-1.0)*r01);
CheckValue<IkReal> x8676 = IKatan2WithCheck(IkReal(x8673),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8676.valid){
continue;
}
IkReal x8674=((1.0)*(x8676.value));
IkReal x8675=x8669;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8674)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8674)));
IkReal gconst148=(x8673*x8675);
IkReal gconst149=((1.0)*r00*x8675);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8677=((-1.0)*r01);
CheckValue<IkReal> x8680 = IKatan2WithCheck(IkReal(x8677),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8680.valid){
continue;
}
IkReal x8678=((1.0)*(x8680.value));
IkReal x8679=x8669;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8678)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8678)));
IkReal gconst148=(x8677*x8679);
IkReal gconst149=((1.0)*r00*x8679);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8681=((-1.0)*r01);
CheckValue<IkReal> x8684 = IKatan2WithCheck(IkReal(x8681),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8684.valid){
continue;
}
IkReal x8682=((1.0)*(x8684.value));
IkReal x8683=x8669;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8682)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8682)));
IkReal gconst148=(x8681*x8683);
IkReal gconst149=((1.0)*r00*x8683);
IkReal x8685=r02*r02;
IkReal x8686=(r12*sj0);
IkReal x8687=((1.0)*cj0);
IkReal x8688=x8669;
j4eval[0]=((IKabs(((((-1.0)*r02*x8687))+(((-1.0)*x8686)))))+(IKabs((((cj0*x8685*x8688))+(((-1.0)*x8687*x8688))+((r02*x8686*x8688))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8689=((1.0)*sj0);
IkReal x8690=((1.0)*gconst148);
CheckValue<IkReal> x8691 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8689))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst148*r11*x8689))+((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*cj0*r01*x8690)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8691.valid){
continue;
}
CheckValue<IkReal> x8692=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8690)))),-1);
if(!x8692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8691.value)+(((1.5707963267949)*(x8692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8693=IKsin(j4);
IkReal x8694=IKcos(j4);
IkReal x8695=(gconst148*r11);
IkReal x8696=(sj1*sj2);
IkReal x8697=((1.0)*x8694);
IkReal x8698=(gconst149*x8694);
IkReal x8699=(gconst148*x8693);
IkReal x8700=((1.0)*cj1*cj2);
IkReal x8701=((1.0)*x8693);
evalcond[0]=(((r21*x8699))+(((-1.0)*gconst149*r20*x8701))+(((-1.0)*r22*x8697)));
evalcond[1]=((((-1.0)*gconst149*r10*x8701))+cj0+(((-1.0)*r12*x8697))+((x8693*x8695)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8701))+(((-1.0)*r02*x8697))+((r01*x8699)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8697))+((r20*x8698))+(((-1.0)*r22*x8701)));
evalcond[4]=((((-1.0)*cj0*x8700))+((cj0*x8696))+((r00*x8698))+(((-1.0)*r02*x8701))+(((-1.0)*gconst148*r01*x8697)));
evalcond[5]=(((sj0*x8696))+(((-1.0)*x8695*x8697))+((r10*x8698))+(((-1.0)*sj0*x8700))+(((-1.0)*r12*x8701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8702=((1.0)*gconst149);
CheckValue<IkReal> x8703=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8702)))),-1);
if(!x8703.valid){
continue;
}
CheckValue<IkReal> x8704 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8702))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8703.value)))+(x8704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8705=IKsin(j4);
IkReal x8706=IKcos(j4);
IkReal x8707=(gconst148*r11);
IkReal x8708=(sj1*sj2);
IkReal x8709=((1.0)*x8706);
IkReal x8710=(gconst149*x8706);
IkReal x8711=(gconst148*x8705);
IkReal x8712=((1.0)*cj1*cj2);
IkReal x8713=((1.0)*x8705);
evalcond[0]=((((-1.0)*gconst149*r20*x8713))+(((-1.0)*r22*x8709))+((r21*x8711)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8713))+((x8705*x8707))+(((-1.0)*r12*x8709)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8713))+((r01*x8711))+(((-1.0)*r02*x8709)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8709))+((cj1*sj2))+(((-1.0)*r22*x8713))+((r20*x8710)));
evalcond[4]=((((-1.0)*r02*x8713))+(((-1.0)*gconst148*r01*x8709))+((cj0*x8708))+((r00*x8710))+(((-1.0)*cj0*x8712)));
evalcond[5]=((((-1.0)*sj0*x8712))+(((-1.0)*x8707*x8709))+(((-1.0)*r12*x8713))+((r10*x8710))+((sj0*x8708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8714=((1.0)*gconst149);
CheckValue<IkReal> x8715 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8714)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8715.valid){
continue;
}
CheckValue<IkReal> x8716=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8714))+(((-1.0)*gconst148*r00)))),-1);
if(!x8716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8715.value)+(((1.5707963267949)*(x8716.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8717=IKsin(j4);
IkReal x8718=IKcos(j4);
IkReal x8719=(gconst148*r11);
IkReal x8720=(sj1*sj2);
IkReal x8721=((1.0)*x8718);
IkReal x8722=(gconst149*x8718);
IkReal x8723=(gconst148*x8717);
IkReal x8724=((1.0)*cj1*cj2);
IkReal x8725=((1.0)*x8717);
evalcond[0]=(((r21*x8723))+(((-1.0)*gconst149*r20*x8725))+(((-1.0)*r22*x8721)));
evalcond[1]=((((-1.0)*gconst149*r10*x8725))+cj0+((x8717*x8719))+(((-1.0)*r12*x8721)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8725))+(((-1.0)*r02*x8721))+((r01*x8723)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8721))+((cj1*sj2))+((r20*x8722))+(((-1.0)*r22*x8725)));
evalcond[4]=((((-1.0)*cj0*x8724))+((cj0*x8720))+(((-1.0)*gconst148*r01*x8721))+(((-1.0)*r02*x8725))+((r00*x8722)));
evalcond[5]=(((r10*x8722))+(((-1.0)*x8719*x8721))+(((-1.0)*sj0*x8724))+((sj0*x8720))+(((-1.0)*r12*x8725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8726=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8726;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8726);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8727=((1.0)*cj5);
IkReal x8728=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8727)));
j4eval[0]=x8728;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8727))))));
j4eval[2]=IKsign(x8728);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8729=cj5*cj5;
IkReal x8730=r01*r01;
IkReal x8731=(r01*sj5);
IkReal x8732=(cj5*r00);
IkReal x8733=(((x8729*x8730))+(((-1.0)*(r02*r02)))+(((-1.0)*x8729*(r00*r00)))+(((-1.0)*x8730))+(((2.0)*x8731*x8732)));
j4eval[0]=x8733;
j4eval[1]=IKsign(x8733);
j4eval[2]=((IKabs(r02))+(IKabs((x8732+(((-1.0)*x8731))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8734=cj5*cj5;
IkReal x8735=r01*r01;
IkReal x8736=(r01*sj5);
IkReal x8737=(cj5*r00);
CheckValue<IkReal> x8738=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x8734*x8735))+(((2.0)*x8736*x8737))+(((-1.0)*x8735))+(((-1.0)*x8734*(r00*r00))))),-1);
if(!x8738.valid){
continue;
}
CheckValue<IkReal> x8739 = IKatan2WithCheck(IkReal((x8737+(((-1.0)*x8736)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8738.value)))+(x8739.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8740=IKsin(j4);
IkReal x8741=IKcos(j4);
IkReal x8742=(cj5*r10);
IkReal x8743=(r01*sj5);
IkReal x8744=(cj5*r00);
IkReal x8745=(cj5*r20);
IkReal x8746=((1.0)*x8741);
IkReal x8747=((1.0)*x8740);
IkReal x8748=(sj5*x8740);
evalcond[0]=((((-1.0)*r22*x8746))+(((-1.0)*x8745*x8747))+((r21*x8748)));
evalcond[1]=((((-1.0)*r12*x8746))+(((-1.0)*x8742*x8747))+((r11*x8748)));
evalcond[2]=(((x8741*x8744))+(((-1.0)*x8743*x8746))+(((-1.0)*r02*x8747)));
evalcond[3]=((-1.0)+((x8740*x8743))+(((-1.0)*x8744*x8747))+(((-1.0)*r02*x8746)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8746))+((cj1*sj2))+((x8741*x8745))+(((-1.0)*r22*x8747)));
evalcond[5]=((((-1.0)*r12*x8747))+(((-1.0)*cj1*cj2))+((x8741*x8742))+((sj1*sj2))+(((-1.0)*r11*sj5*x8746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8749=((1.0)*cj5);
CheckValue<IkReal> x8750 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8750.valid){
continue;
}
CheckValue<IkReal> x8751=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8749))+(((-1.0)*r10*sj5)))),-1);
if(!x8751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8750.value)+(((1.5707963267949)*(x8751.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8752=IKsin(j4);
IkReal x8753=IKcos(j4);
IkReal x8754=(cj5*r10);
IkReal x8755=(r01*sj5);
IkReal x8756=(cj5*r00);
IkReal x8757=(cj5*r20);
IkReal x8758=((1.0)*x8753);
IkReal x8759=((1.0)*x8752);
IkReal x8760=(sj5*x8752);
evalcond[0]=((((-1.0)*r22*x8758))+(((-1.0)*x8757*x8759))+((r21*x8760)));
evalcond[1]=((((-1.0)*x8754*x8759))+(((-1.0)*r12*x8758))+((r11*x8760)));
evalcond[2]=((((-1.0)*x8755*x8758))+((x8753*x8756))+(((-1.0)*r02*x8759)));
evalcond[3]=((-1.0)+((x8752*x8755))+(((-1.0)*x8756*x8759))+(((-1.0)*r02*x8758)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8759))+((cj1*sj2))+((x8753*x8757))+(((-1.0)*r21*sj5*x8758)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8753*x8754))+(((-1.0)*r11*sj5*x8758))+(((-1.0)*r12*x8759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8761=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8761.valid){
continue;
}
CheckValue<IkReal> x8762 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8761.value)))+(x8762.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8763=IKsin(j4);
IkReal x8764=IKcos(j4);
IkReal x8765=(cj5*r10);
IkReal x8766=(r01*sj5);
IkReal x8767=(cj5*r00);
IkReal x8768=(cj5*r20);
IkReal x8769=((1.0)*x8764);
IkReal x8770=((1.0)*x8763);
IkReal x8771=(sj5*x8763);
evalcond[0]=((((-1.0)*r22*x8769))+(((-1.0)*x8768*x8770))+((r21*x8771)));
evalcond[1]=((((-1.0)*r12*x8769))+((r11*x8771))+(((-1.0)*x8765*x8770)));
evalcond[2]=(((x8764*x8767))+(((-1.0)*r02*x8770))+(((-1.0)*x8766*x8769)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8769))+(((-1.0)*x8767*x8770))+((x8763*x8766)));
evalcond[4]=(((cj2*sj1))+((x8764*x8768))+((cj1*sj2))+(((-1.0)*r21*sj5*x8769))+(((-1.0)*r22*x8770)));
evalcond[5]=(((x8764*x8765))+(((-1.0)*r11*sj5*x8769))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8772=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8772;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8772);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8773=((1.0)*cj5);
IkReal x8774=((((-1.0)*r21*x8773))+(((-1.0)*r20*sj5)));
j4eval[0]=x8774;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x8773))+((r11*sj5))))));
j4eval[2]=IKsign(x8774);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8775=cj5*cj5;
IkReal x8776=r01*r01;
IkReal x8777=(cj5*r00);
IkReal x8778=(r01*sj5);
IkReal x8779=(x8776+(((-1.0)*x8775*x8776))+(r02*r02)+(((-2.0)*x8777*x8778))+((x8775*(r00*r00))));
j4eval[0]=x8779;
j4eval[1]=((IKabs(r02))+(IKabs((x8777+(((-1.0)*x8778))))));
j4eval[2]=IKsign(x8779);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8780=cj5*cj5;
IkReal x8781=r01*r01;
IkReal x8782=(r01*sj5);
IkReal x8783=(cj5*r00);
CheckValue<IkReal> x8784=IKPowWithIntegerCheck(IKsign((x8781+(((-2.0)*x8782*x8783))+((x8780*(r00*r00)))+(((-1.0)*x8780*x8781))+(r02*r02))),-1);
if(!x8784.valid){
continue;
}
CheckValue<IkReal> x8785 = IKatan2WithCheck(IkReal((x8783+(((-1.0)*x8782)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8784.value)))+(x8785.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8786=IKsin(j4);
IkReal x8787=IKcos(j4);
IkReal x8788=(cj5*r10);
IkReal x8789=(r01*sj5);
IkReal x8790=(cj5*r00);
IkReal x8791=(cj5*r20);
IkReal x8792=((1.0)*x8787);
IkReal x8793=((1.0)*x8786);
IkReal x8794=(sj5*x8786);
evalcond[0]=(((r21*x8794))+(((-1.0)*x8791*x8793))+(((-1.0)*r22*x8792)));
evalcond[1]=((((-1.0)*r12*x8792))+(((-1.0)*x8788*x8793))+((r11*x8794)));
evalcond[2]=((((-1.0)*x8789*x8792))+((x8787*x8790))+(((-1.0)*r02*x8793)));
evalcond[3]=((1.0)+((x8786*x8789))+(((-1.0)*r02*x8792))+(((-1.0)*x8790*x8793)));
evalcond[4]=(((cj2*sj1))+((x8787*x8791))+((cj1*sj2))+(((-1.0)*r22*x8793))+(((-1.0)*r21*sj5*x8792)));
evalcond[5]=((((-1.0)*r12*x8793))+(((-1.0)*r11*sj5*x8792))+((x8787*x8788))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8795=((1.0)*cj5);
CheckValue<IkReal> x8796=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8795))+(((-1.0)*r20*sj5)))),-1);
if(!x8796.valid){
continue;
}
CheckValue<IkReal> x8797 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8796.value)))+(x8797.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8798=IKsin(j4);
IkReal x8799=IKcos(j4);
IkReal x8800=(cj5*r10);
IkReal x8801=(r01*sj5);
IkReal x8802=(cj5*r00);
IkReal x8803=(cj5*r20);
IkReal x8804=((1.0)*x8799);
IkReal x8805=((1.0)*x8798);
IkReal x8806=(sj5*x8798);
evalcond[0]=(((r21*x8806))+(((-1.0)*r22*x8804))+(((-1.0)*x8803*x8805)));
evalcond[1]=((((-1.0)*r12*x8804))+(((-1.0)*x8800*x8805))+((r11*x8806)));
evalcond[2]=((((-1.0)*r02*x8805))+((x8799*x8802))+(((-1.0)*x8801*x8804)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8804))+(((-1.0)*x8802*x8805))+((x8798*x8801)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8805))+((cj1*sj2))+((x8799*x8803))+(((-1.0)*r21*sj5*x8804)));
evalcond[5]=((((-1.0)*r12*x8805))+(((-1.0)*sj1*sj2))+((x8799*x8800))+((cj1*cj2))+(((-1.0)*r11*sj5*x8804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8807 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8807.valid){
continue;
}
CheckValue<IkReal> x8808=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8807.value)+(((1.5707963267949)*(x8808.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8809=IKsin(j4);
IkReal x8810=IKcos(j4);
IkReal x8811=(cj5*r10);
IkReal x8812=(r01*sj5);
IkReal x8813=(cj5*r00);
IkReal x8814=(cj5*r20);
IkReal x8815=((1.0)*x8810);
IkReal x8816=((1.0)*x8809);
IkReal x8817=(sj5*x8809);
evalcond[0]=(((r21*x8817))+(((-1.0)*r22*x8815))+(((-1.0)*x8814*x8816)));
evalcond[1]=((((-1.0)*r12*x8815))+((r11*x8817))+(((-1.0)*x8811*x8816)));
evalcond[2]=(((x8810*x8813))+(((-1.0)*r02*x8816))+(((-1.0)*x8812*x8815)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8815))+((x8809*x8812))+(((-1.0)*x8813*x8816)));
evalcond[4]=(((x8810*x8814))+(((-1.0)*r22*x8816))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8815)));
evalcond[5]=(((x8810*x8811))+(((-1.0)*r12*x8816))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8818=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8818);
rxp1_1=(px*r21);
rxp1_2=(r11*x8818);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8819=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8819);
rxp1_1=(px*r21);
rxp1_2=(r11*x8819);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8820=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8820);
rxp1_1=(px*r21);
rxp1_2=(r11*x8820);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8823=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8823.valid){
continue;
}
IkReal x8821=x8823.value;
IkReal x8822=(sj0*x8821);
cj4array[0]=((((-1.0)*sj1*sj2*x8822))+((cj1*cj2*x8822)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8824=IKsin(j4);
IkReal x8825=IKcos(j4);
IkReal x8826=(r21*sj5);
IkReal x8827=(cj5*r20);
IkReal x8828=((1.0)*x8824);
IkReal x8829=((1.0)*x8825);
evalcond[0]=((-1.0)*r02*x8824);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8829)));
evalcond[2]=((((-1.0)*x8827*x8828))+((x8824*x8826)));
evalcond[3]=((((-1.0)*cj5*r10*x8828))+((r11*sj5*x8824)));
evalcond[4]=(((cj2*sj1))+((x8825*x8827))+(((-1.0)*x8826*x8829))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8832=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8832.valid){
continue;
}
IkReal x8830=x8832.value;
IkReal x8831=((1.0)*x8830);
cj4array[0]=((((-1.0)*cj1*sj2*x8831))+(((-1.0)*cj2*sj1*x8831)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8833=IKsin(j4);
IkReal x8834=IKcos(j4);
IkReal x8835=(r11*sj5);
IkReal x8836=((1.0)*sj0);
IkReal x8837=((1.0)*x8834);
IkReal x8838=((1.0)*cj5*x8833);
evalcond[0]=((-1.0)*r02*x8833);
evalcond[1]=((((-1.0)*r02*x8837))+(((-1.0)*x8836)));
evalcond[2]=((((-1.0)*r20*x8838))+((r21*sj5*x8833)));
evalcond[3]=((((-1.0)*r10*x8838))+((x8833*x8835)));
evalcond[4]=((((-1.0)*x8835*x8837))+(((-1.0)*cj1*cj2*x8836))+((cj5*r10*x8834))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8839=IKPowWithIntegerCheck(r02,-1);
if(!x8839.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8839.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8840=IKsin(j4);
IkReal x8841=IKcos(j4);
IkReal x8842=(cj5*x8841);
IkReal x8843=(sj5*x8840);
IkReal x8844=((1.0)*sj5*x8841);
IkReal x8845=((1.0)*cj5*x8840);
evalcond[0]=((-1.0)*r02*x8840);
evalcond[1]=(((r21*x8843))+(((-1.0)*r20*x8845)));
evalcond[2]=((((-1.0)*r10*x8845))+((r11*x8843)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8842))+(((-1.0)*r21*x8844)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((r10*x8842))+((sj0*sj1*sj2))+(((-1.0)*r11*x8844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8846=((1.0)*sj0);
IkReal x8847=((1.0)*cj0);
CheckValue<IkReal> x8848 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8847))+(((-1.0)*r12*x8846)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8847))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8848.valid){
continue;
}
CheckValue<IkReal> x8849=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8848.value)+(((1.5707963267949)*(x8849.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8850=IKsin(j4);
IkReal x8851=IKcos(j4);
IkReal x8852=(cj5*r10);
IkReal x8853=(sj1*sj2);
IkReal x8854=(r01*sj5);
IkReal x8855=(cj5*r00);
IkReal x8856=(cj5*r20);
IkReal x8857=((1.0)*x8851);
IkReal x8858=((1.0)*cj1*cj2);
IkReal x8859=((1.0)*x8850);
IkReal x8860=(sj5*x8850);
evalcond[0]=((((-1.0)*r22*x8857))+((r21*x8860))+(((-1.0)*x8856*x8859)));
evalcond[1]=(cj0+(((-1.0)*x8852*x8859))+(((-1.0)*r12*x8857))+((r11*x8860)));
evalcond[2]=(((x8850*x8854))+(((-1.0)*sj0))+(((-1.0)*r02*x8857))+(((-1.0)*x8855*x8859)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8859))+((cj1*sj2))+((x8851*x8856))+(((-1.0)*r21*sj5*x8857)));
evalcond[4]=((((-1.0)*cj0*x8858))+((cj0*x8853))+((x8851*x8855))+(((-1.0)*x8854*x8857))+(((-1.0)*r02*x8859)));
evalcond[5]=(((sj0*x8853))+(((-1.0)*r12*x8859))+(((-1.0)*r11*sj5*x8857))+((x8851*x8852))+(((-1.0)*sj0*x8858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8861=((1.0)*cj5);
CheckValue<IkReal> x8862=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8861)))),-1);
if(!x8862.valid){
continue;
}
CheckValue<IkReal> x8863 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8862.value)))+(x8863.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8864=IKsin(j4);
IkReal x8865=IKcos(j4);
IkReal x8866=(cj5*r10);
IkReal x8867=(sj1*sj2);
IkReal x8868=(r01*sj5);
IkReal x8869=(cj5*r00);
IkReal x8870=(cj5*r20);
IkReal x8871=((1.0)*x8865);
IkReal x8872=((1.0)*cj1*cj2);
IkReal x8873=((1.0)*x8864);
IkReal x8874=(sj5*x8864);
evalcond[0]=((((-1.0)*x8870*x8873))+(((-1.0)*r22*x8871))+((r21*x8874)));
evalcond[1]=(cj0+(((-1.0)*x8866*x8873))+((r11*x8874))+(((-1.0)*r12*x8871)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8871))+((x8864*x8868))+(((-1.0)*x8869*x8873)));
evalcond[3]=(((cj2*sj1))+((x8865*x8870))+(((-1.0)*r21*sj5*x8871))+(((-1.0)*r22*x8873))+((cj1*sj2)));
evalcond[4]=((((-1.0)*r02*x8873))+(((-1.0)*x8868*x8871))+((x8865*x8869))+((cj0*x8867))+(((-1.0)*cj0*x8872)));
evalcond[5]=((((-1.0)*r11*sj5*x8871))+((x8865*x8866))+(((-1.0)*r12*x8873))+((sj0*x8867))+(((-1.0)*sj0*x8872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8875=((1.0)*cj5);
CheckValue<IkReal> x8876=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8875))+(((-1.0)*r00*sj5)))),-1);
if(!x8876.valid){
continue;
}
CheckValue<IkReal> x8877 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8875)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8876.value)))+(x8877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8878=IKsin(j4);
IkReal x8879=IKcos(j4);
IkReal x8880=(cj5*r10);
IkReal x8881=(sj1*sj2);
IkReal x8882=(r01*sj5);
IkReal x8883=(cj5*r00);
IkReal x8884=(cj5*r20);
IkReal x8885=((1.0)*x8879);
IkReal x8886=((1.0)*cj1*cj2);
IkReal x8887=((1.0)*x8878);
IkReal x8888=(sj5*x8878);
evalcond[0]=((((-1.0)*r22*x8885))+((r21*x8888))+(((-1.0)*x8884*x8887)));
evalcond[1]=(cj0+(((-1.0)*r12*x8885))+(((-1.0)*x8880*x8887))+((r11*x8888)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8883*x8887))+((x8878*x8882))+(((-1.0)*r02*x8885)));
evalcond[3]=((((-1.0)*r22*x8887))+((cj2*sj1))+((x8879*x8884))+((cj1*sj2))+(((-1.0)*r21*sj5*x8885)));
evalcond[4]=((((-1.0)*cj0*x8886))+((x8879*x8883))+(((-1.0)*x8882*x8885))+(((-1.0)*r02*x8887))+((cj0*x8881)));
evalcond[5]=((((-1.0)*r12*x8887))+((x8879*x8880))+((sj0*x8881))+(((-1.0)*r11*sj5*x8885))+(((-1.0)*sj0*x8886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8889=cj1*cj1;
IkReal x8890=cj2*cj2;
IkReal x8891=(sj1*sj2);
IkReal x8892=((156900000.0)*py);
IkReal x8893=(cj1*cj5);
IkReal x8894=((14850585.0)*cj2);
IkReal x8895=(r00*sj5);
IkReal x8896=((16090500.0)*cj1);
IkReal x8897=((4132419.0)*cj5);
IkReal x8898=(r10*sj5);
IkReal x8899=((170000000.0)*cj1);
IkReal x8900=((156900000.0)*px);
IkReal x8901=(cj1*cj2);
IkReal x8902=((14850585.0)*cj5);
CheckValue<IkReal> x8903=IKPowWithIntegerCheck(IKsign(((66309514.0)+(((-61544025.0)*x8890))+(((123088050.0)*x8889*x8890))+(((133365000.0)*cj2*x8889))+(((-133365000.0)*cj1*x8891))+(((-123088050.0)*x8891*x8901))+(((10705975.0)*x8889)))),-1);
if(!x8903.valid){
continue;
}
CheckValue<IkReal> x8904 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+(((-1.0)*r01*x8897))+(((-4132419.0)*x8895))+((py*x8899))+((cj1*x8894*x8898))+(((-1.0)*x8891*x8892))+(((-1.0)*r11*x8891*x8902))+((x8896*x8898))+(((16090500.0)*r11*x8893))+(((-14850585.0)*x8891*x8898))+((r11*x8893*x8894))+((x8892*x8901)))),IkReal((((cj1*x8894*x8895))+(((16090500.0)*r01*x8893))+(((43660000.0)*py))+((px*x8899))+(((-1.0)*x8891*x8900))+((x8900*x8901))+(((-1.0)*r01*x8891*x8902))+((x8895*x8896))+((r11*x8897))+(((-14850585.0)*x8891*x8895))+(((4132419.0)*x8898))+((r01*x8893*x8894)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8904.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8903.value)))+(x8904.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8905=IKcos(j0);
IkReal x8906=IKsin(j0);
IkReal x8907=((0.425)*cj1);
IkReal x8908=(cj1*cj2);
IkReal x8909=(sj1*sj2);
IkReal x8910=((0.09465)*cj5);
IkReal x8911=((0.09465)*sj5);
IkReal x8912=((0.39225)*x8906);
IkReal x8913=((0.39225)*x8905);
evalcond[0]=((((-1.0)*x8909*x8913))+((x8905*x8907))+(((-1.0)*r01*x8910))+(((-1.0)*px))+(((-0.10915)*x8906))+((x8908*x8913))+(((-1.0)*r00*x8911)));
evalcond[1]=((((-1.0)*x8909*x8912))+(((0.10915)*x8905))+(((-1.0)*r11*x8910))+((x8906*x8907))+(((-1.0)*py))+((x8908*x8912))+(((-1.0)*r10*x8911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8914=((1.0)*cj5);
IkReal x8915=((((-1.0)*r01*x8914))+(((-1.0)*r00*sj5)));
j4eval[0]=x8915;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8914)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8915);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8916=((1.0)*cj5);
IkReal x8917=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8916)));
j4eval[0]=x8917;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8916))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8917);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8918=((1.0)*sj0);
IkReal x8919=((1.0)*cj0);
IkReal x8920=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8920;
j4eval[1]=((IKabs(((((-1.0)*r02*x8919))+(((-1.0)*r12*x8918)))))+(IKabs(((((-1.0)*r11*sj5*x8918))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8919))))));
j4eval[2]=IKsign(x8920);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8921=((-1.0)*r20);
IkReal x8923 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8923)==0){
continue;
}
IkReal x8922=pow(x8923,-0.5);
CheckValue<IkReal> x8924 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8921),IKFAST_ATAN2_MAGTHRESH);
if(!x8924.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8924.value));
IkReal gconst1=(r21*x8922);
IkReal gconst2=(x8921*x8922);
CheckValue<IkReal> x8925 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8925.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8925.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8926=((-1.0)*r20);
IkReal x8927=x8922;
CheckValue<IkReal> x8929 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8926),IKFAST_ATAN2_MAGTHRESH);
if(!x8929.valid){
continue;
}
IkReal x8928=((-1.0)*(x8929.value));
sj5=gconst1;
cj5=gconst2;
j5=x8928;
IkReal gconst0=x8928;
IkReal gconst1=(r21*x8927);
IkReal gconst2=(x8926*x8927);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8930=((-1.0)*r20);
IkReal x8931=x8922;
CheckValue<IkReal> x8933 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8930),IKFAST_ATAN2_MAGTHRESH);
if(!x8933.valid){
continue;
}
IkReal x8932=((-1.0)*(x8933.value));
sj5=gconst1;
cj5=gconst2;
j5=x8932;
IkReal gconst0=x8932;
IkReal gconst1=(r21*x8931);
IkReal gconst2=(x8930*x8931);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8934=((-1.0)*r20);
IkReal x8935=x8922;
CheckValue<IkReal> x8937 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8934),IKFAST_ATAN2_MAGTHRESH);
if(!x8937.valid){
continue;
}
IkReal x8936=((-1.0)*(x8937.value));
sj5=gconst1;
cj5=gconst2;
j5=x8936;
IkReal gconst0=x8936;
IkReal gconst1=(r21*x8935);
IkReal gconst2=(x8934*x8935);
IkReal x8938=r22*r22;
CheckValue<IkReal> x8942=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8938))),-1);
if(!x8942.valid){
continue;
}
IkReal x8939=x8942.value;
IkReal x8940=(sj3*x8939);
IkReal x8941=((((2.0)*x8940*(r20*r20)*(r21*r21)))+((x8940*(r20*r20*r20*r20)))+((x8940*(r21*r21*r21*r21)))+((sj3*x8938)));
j4eval[0]=x8941;
j4eval[1]=IKsign(x8941);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8943=((-1.0)*r20);
IkReal x8944=x8922;
CheckValue<IkReal> x8946 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8943),IKFAST_ATAN2_MAGTHRESH);
if(!x8946.valid){
continue;
}
IkReal x8945=((-1.0)*(x8946.value));
sj5=gconst1;
cj5=gconst2;
j5=x8945;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8945;
IkReal gconst1=(r21*x8944);
IkReal gconst2=(x8943*x8944);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8947=((-1.0)*r20);
IkReal x8948=x8922;
CheckValue<IkReal> x8950 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8947),IKFAST_ATAN2_MAGTHRESH);
if(!x8950.valid){
continue;
}
IkReal x8949=((-1.0)*(x8950.value));
sj5=gconst1;
cj5=gconst2;
j5=x8949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8949;
IkReal gconst1=(r21*x8948);
IkReal gconst2=(x8947*x8948);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8951=((-1.0)*r20);
IkReal x8952=x8922;
CheckValue<IkReal> x8954 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8951),IKFAST_ATAN2_MAGTHRESH);
if(!x8954.valid){
continue;
}
IkReal x8953=((-1.0)*(x8954.value));
sj5=gconst1;
cj5=gconst2;
j5=x8953;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8953;
IkReal gconst1=(r21*x8952);
IkReal gconst2=(x8951*x8952);
IkReal x8955=((1.0)*(r22*r22));
CheckValue<IkReal> x8959=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8955))),-1);
if(!x8959.valid){
continue;
}
IkReal x8956=x8959.value;
IkReal x8957=((1.0)*x8956);
IkReal x8958=((((-1.0)*x8957*(r20*r20*r20*r20)))+(((-2.0)*x8956*(r20*r20)*(r21*r21)))+(((-1.0)*x8957*(r21*r21*r21*r21)))+(((-1.0)*x8955)));
j4eval[0]=x8958;
j4eval[1]=IKsign(x8958);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8960=((-1.0)*r20);
IkReal x8961=x8922;
CheckValue<IkReal> x8963 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8960),IKFAST_ATAN2_MAGTHRESH);
if(!x8963.valid){
continue;
}
IkReal x8962=((-1.0)*(x8963.value));
sj5=gconst1;
cj5=gconst2;
j5=x8962;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8962;
IkReal gconst1=(r21*x8961);
IkReal gconst2=(x8960*x8961);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8964=((-1.0)*r20);
IkReal x8965=x8922;
CheckValue<IkReal> x8967 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8964),IKFAST_ATAN2_MAGTHRESH);
if(!x8967.valid){
continue;
}
IkReal x8966=((-1.0)*(x8967.value));
sj5=gconst1;
cj5=gconst2;
j5=x8966;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8966;
IkReal gconst1=(r21*x8965);
IkReal gconst2=(x8964*x8965);
IkReal x8968=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8972=IKPowWithIntegerCheck(x8968,-1);
if(!x8972.valid){
continue;
}
IkReal x8969=x8972.value;
IkReal x8970=((1.0)*x8969);
IkReal x8971=((((-1.0)*x8970*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8969))+(((-1.0)*x8970*(r10*r10)*(r20*r20))));
j4eval[0]=x8971;
j4eval[1]=r12;
j4eval[2]=x8968;
j4eval[3]=IKsign(x8971);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8973=((-1.0)*r20);
IkReal x8974=x8922;
CheckValue<IkReal> x8976 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8973),IKFAST_ATAN2_MAGTHRESH);
if(!x8976.valid){
continue;
}
IkReal x8975=((-1.0)*(x8976.value));
sj5=gconst1;
cj5=gconst2;
j5=x8975;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8975;
IkReal gconst1=(r21*x8974);
IkReal gconst2=(x8973*x8974);
IkReal x8977=r22*r22;
IkReal x8978=(cj1*r12*sj2);
IkReal x8979=(cj2*r12*sj1);
CheckValue<IkReal> x8983=IKPowWithIntegerCheck(((-1.0)+x8977),-1);
if(!x8983.valid){
continue;
}
IkReal x8980=x8983.value;
if((((1.0)+(((-1.0)*x8977)))) < -0.00001)
continue;
IkReal x8981=IKsqrt(((1.0)+(((-1.0)*x8977))));
IkReal x8982=(r22*x8980*x8981);
j4eval[0]=((IKabs((((x8979*x8982))+((x8978*x8982)))))+(IKabs(((((-1.0)*x8979))+(((-1.0)*x8978))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8984=(cj1*sj2);
IkReal x8985=(cj2*sj1);
IkReal x8986=((1.0)*r12);
IkReal x8987=(gconst1*r11);
IkReal x8988=((1.0)*gconst2*r10);
CheckValue<IkReal> x8989=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8989.valid){
continue;
}
CheckValue<IkReal> x8990 = IKatan2WithCheck(IkReal(((((-1.0)*x8984*x8988))+(((-1.0)*x8985*x8988))+((x8984*x8987))+((x8985*x8987)))),IkReal(((((-1.0)*x8984*x8986))+(((-1.0)*x8985*x8986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8989.value)))+(x8990.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8991=IKcos(j4);
IkReal x8992=IKsin(j4);
IkReal x8993=((1.0)*x8991);
IkReal x8994=(gconst1*x8991);
IkReal x8995=(gconst1*x8992);
IkReal x8996=((1.0)*gconst2*x8992);
evalcond[0]=(((r11*x8994))+((r12*x8992))+(((-1.0)*gconst2*r10*x8993)));
evalcond[1]=(((r21*x8995))+(((-1.0)*r22*x8993))+(((-1.0)*r20*x8996)));
evalcond[2]=(((r01*x8995))+(((-1.0)*r02*x8993))+(((-1.0)*r00*x8996)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8993))+((r11*x8995))+(((-1.0)*r10*x8996)));
evalcond[4]=(((cj2*sj1))+((r21*x8994))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8993))+((r22*x8992)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8994))+(((-1.0)*gconst2*r00*x8993))+((r02*x8992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8997=(gconst2*r10);
IkReal x8998=(gconst1*r11);
CheckValue<IkReal> x8999=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x8998*x8998)))+(((-1.0)*(x8997*x8997)))+(((2.0)*x8997*x8998)))),-1);
if(!x8999.valid){
continue;
}
CheckValue<IkReal> x9000 = IKatan2WithCheck(IkReal((x8998+(((-1.0)*x8997)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8999.value)))+(x9000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9001=IKcos(j4);
IkReal x9002=IKsin(j4);
IkReal x9003=((1.0)*x9001);
IkReal x9004=(gconst1*x9001);
IkReal x9005=(gconst1*x9002);
IkReal x9006=((1.0)*gconst2*x9002);
evalcond[0]=((((-1.0)*gconst2*r10*x9003))+((r11*x9004))+((r12*x9002)));
evalcond[1]=((((-1.0)*r22*x9003))+((r21*x9005))+(((-1.0)*r20*x9006)));
evalcond[2]=((((-1.0)*r02*x9003))+(((-1.0)*r00*x9006))+((r01*x9005)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9003))+(((-1.0)*r10*x9006))+((r11*x9005)));
evalcond[4]=(((cj2*sj1))+((r21*x9004))+((r22*x9002))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9003)));
evalcond[5]=(((r02*x9002))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9003))+((r01*x9004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9007=((1.0)*gconst2);
CheckValue<IkReal> x9008 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9007)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9008.valid){
continue;
}
CheckValue<IkReal> x9009=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9007)))),-1);
if(!x9009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9008.value)+(((1.5707963267949)*(x9009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9010=IKcos(j4);
IkReal x9011=IKsin(j4);
IkReal x9012=((1.0)*x9010);
IkReal x9013=(gconst1*x9010);
IkReal x9014=(gconst1*x9011);
IkReal x9015=((1.0)*gconst2*x9011);
evalcond[0]=(((r12*x9011))+(((-1.0)*gconst2*r10*x9012))+((r11*x9013)));
evalcond[1]=((((-1.0)*r22*x9012))+(((-1.0)*r20*x9015))+((r21*x9014)));
evalcond[2]=((((-1.0)*r00*x9015))+(((-1.0)*r02*x9012))+((r01*x9014)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9015))+(((-1.0)*r12*x9012))+((r11*x9014)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9012))+((cj1*sj2))+((r22*x9011))+((r21*x9013)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x9011))+((r01*x9013))+(((-1.0)*gconst2*r00*x9012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9016=((-1.0)*r20);
IkReal x9017=x8922;
CheckValue<IkReal> x9019 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9016),IKFAST_ATAN2_MAGTHRESH);
if(!x9019.valid){
continue;
}
IkReal x9018=((-1.0)*(x9019.value));
sj5=gconst1;
cj5=gconst2;
j5=x9018;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9018;
IkReal gconst1=(r21*x9017);
IkReal gconst2=(x9016*x9017);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9020=((-1.0)*r20);
IkReal x9021=x8922;
CheckValue<IkReal> x9023 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9020),IKFAST_ATAN2_MAGTHRESH);
if(!x9023.valid){
continue;
}
IkReal x9022=((-1.0)*(x9023.value));
sj5=gconst1;
cj5=gconst2;
j5=x9022;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9022;
IkReal gconst1=(r21*x9021);
IkReal gconst2=(x9020*x9021);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9024=((-1.0)*r20);
IkReal x9025=x8922;
CheckValue<IkReal> x9027 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9024),IKFAST_ATAN2_MAGTHRESH);
if(!x9027.valid){
continue;
}
IkReal x9026=((-1.0)*(x9027.value));
sj5=gconst1;
cj5=gconst2;
j5=x9026;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9026;
IkReal gconst1=(r21*x9025);
IkReal gconst2=(x9024*x9025);
IkReal x9028=r22*r22;
IkReal x9029=(cj1*r12*sj2);
IkReal x9030=(cj2*r12*sj1);
CheckValue<IkReal> x9034=IKPowWithIntegerCheck(((-1.0)+x9028),-1);
if(!x9034.valid){
continue;
}
IkReal x9031=x9034.value;
if((((1.0)+(((-1.0)*x9028)))) < -0.00001)
continue;
IkReal x9032=IKsqrt(((1.0)+(((-1.0)*x9028))));
IkReal x9033=(r22*x9031*x9032);
j4eval[0]=((IKabs((((x9030*x9033))+((x9029*x9033)))))+(IKabs(((((-1.0)*x9030))+(((-1.0)*x9029))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9035=(cj1*sj2);
IkReal x9036=(cj2*sj1);
IkReal x9037=((1.0)*r12);
IkReal x9038=(gconst1*r11);
IkReal x9039=((1.0)*gconst2*r10);
CheckValue<IkReal> x9040=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9040.valid){
continue;
}
CheckValue<IkReal> x9041 = IKatan2WithCheck(IkReal(((((-1.0)*x9035*x9039))+(((-1.0)*x9036*x9039))+((x9036*x9038))+((x9035*x9038)))),IkReal(((((-1.0)*x9035*x9037))+(((-1.0)*x9036*x9037)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9040.value)))+(x9041.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9042=IKcos(j4);
IkReal x9043=IKsin(j4);
IkReal x9044=((1.0)*x9042);
IkReal x9045=(gconst1*x9042);
IkReal x9046=(gconst1*x9043);
IkReal x9047=((1.0)*gconst2*x9043);
evalcond[0]=(((r12*x9043))+((r11*x9045))+(((-1.0)*gconst2*r10*x9044)));
evalcond[1]=((((-1.0)*r22*x9044))+(((-1.0)*r20*x9047))+((r21*x9046)));
evalcond[2]=(((r01*x9046))+(((-1.0)*r00*x9047))+(((-1.0)*r02*x9044)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9047))+(((-1.0)*r12*x9044))+((r11*x9046)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9043))+((r21*x9045))+(((-1.0)*gconst2*r20*x9044)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9045))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9044))+((r02*x9043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9048=(gconst1*r11);
IkReal x9049=(gconst2*r10);
CheckValue<IkReal> x9050=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9048*x9048)+(x9049*x9049)+(((-2.0)*x9048*x9049)))),-1);
if(!x9050.valid){
continue;
}
CheckValue<IkReal> x9051 = IKatan2WithCheck(IkReal(((((-1.0)*x9049))+x9048)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9050.value)))+(x9051.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9052=IKcos(j4);
IkReal x9053=IKsin(j4);
IkReal x9054=((1.0)*x9052);
IkReal x9055=(gconst1*x9052);
IkReal x9056=(gconst1*x9053);
IkReal x9057=((1.0)*gconst2*x9053);
evalcond[0]=((((-1.0)*gconst2*r10*x9054))+((r12*x9053))+((r11*x9055)));
evalcond[1]=((((-1.0)*r22*x9054))+(((-1.0)*r20*x9057))+((r21*x9056)));
evalcond[2]=((((-1.0)*r02*x9054))+(((-1.0)*r00*x9057))+((r01*x9056)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9057))+(((-1.0)*r12*x9054))+((r11*x9056)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9053))+(((-1.0)*gconst2*r20*x9054))+((r21*x9055)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9055))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9054))+((r02*x9053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9058 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9058.valid){
continue;
}
CheckValue<IkReal> x9059=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9058.value)+(((1.5707963267949)*(x9059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9060=IKcos(j4);
IkReal x9061=IKsin(j4);
IkReal x9062=((1.0)*x9060);
IkReal x9063=(gconst1*x9060);
IkReal x9064=(gconst1*x9061);
IkReal x9065=((1.0)*gconst2*x9061);
evalcond[0]=(((r11*x9063))+((r12*x9061))+(((-1.0)*gconst2*r10*x9062)));
evalcond[1]=((((-1.0)*r20*x9065))+((r21*x9064))+(((-1.0)*r22*x9062)));
evalcond[2]=(((r01*x9064))+(((-1.0)*r02*x9062))+(((-1.0)*r00*x9065)));
evalcond[3]=((-1.0)+((r11*x9064))+(((-1.0)*r10*x9065))+(((-1.0)*r12*x9062)));
evalcond[4]=(((cj2*sj1))+((r22*x9061))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9062))+((r21*x9063)));
evalcond[5]=(((r01*x9063))+(((-1.0)*gconst2*r00*x9062))+(((-1.0)*sj1*sj2))+((r02*x9061))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9066=((-1.0)*r20);
IkReal x9067=x8922;
CheckValue<IkReal> x9069 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9066),IKFAST_ATAN2_MAGTHRESH);
if(!x9069.valid){
continue;
}
IkReal x9068=((-1.0)*(x9069.value));
sj5=gconst1;
cj5=gconst2;
j5=x9068;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9068;
IkReal gconst1=(r21*x9067);
IkReal gconst2=(x9066*x9067);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9070=((-1.0)*r20);
IkReal x9071=x8922;
CheckValue<IkReal> x9073 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9070),IKFAST_ATAN2_MAGTHRESH);
if(!x9073.valid){
continue;
}
IkReal x9072=((-1.0)*(x9073.value));
sj5=gconst1;
cj5=gconst2;
j5=x9072;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9072;
IkReal gconst1=(r21*x9071);
IkReal gconst2=(x9070*x9071);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9074=((-1.0)*r20);
IkReal x9075=x8922;
CheckValue<IkReal> x9077 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9074),IKFAST_ATAN2_MAGTHRESH);
if(!x9077.valid){
continue;
}
IkReal x9076=((-1.0)*(x9077.value));
sj5=gconst1;
cj5=gconst2;
j5=x9076;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9076;
IkReal gconst1=(r21*x9075);
IkReal gconst2=(x9074*x9075);
IkReal x9078=r22*r22;
IkReal x9079=((1.0)*r02);
IkReal x9080=(cj1*sj2);
IkReal x9081=(cj2*sj1);
CheckValue<IkReal> x9085=IKPowWithIntegerCheck(((-1.0)+x9078),-1);
if(!x9085.valid){
continue;
}
IkReal x9082=x9085.value;
if((((1.0)+(((-1.0)*x9078)))) < -0.00001)
continue;
IkReal x9083=IKsqrt(((1.0)+(((-1.0)*x9078))));
IkReal x9084=(r02*r22*x9082*x9083);
j4eval[0]=((IKabs(((((-1.0)*x9079*x9081))+(((-1.0)*x9079*x9080)))))+(IKabs((((x9081*x9084))+((x9080*x9084))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9086=(cj1*sj2);
IkReal x9087=(gconst1*r01);
IkReal x9088=((1.0)*r02);
IkReal x9089=(cj2*sj1);
IkReal x9090=((1.0)*gconst2*r00);
CheckValue<IkReal> x9091=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9091.valid){
continue;
}
CheckValue<IkReal> x9092 = IKatan2WithCheck(IkReal((((x9087*x9089))+(((-1.0)*x9086*x9090))+((x9086*x9087))+(((-1.0)*x9089*x9090)))),IkReal(((((-1.0)*x9086*x9088))+(((-1.0)*x9088*x9089)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9091.value)))+(x9092.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9093=IKcos(j4);
IkReal x9094=IKsin(j4);
IkReal x9095=((1.0)*x9093);
IkReal x9096=(gconst1*x9093);
IkReal x9097=(gconst1*x9094);
IkReal x9098=((1.0)*gconst2*x9094);
evalcond[0]=((((-1.0)*gconst2*r00*x9095))+((r01*x9096))+((r02*x9094)));
evalcond[1]=((((-1.0)*r20*x9098))+((r21*x9097))+(((-1.0)*r22*x9095)));
evalcond[2]=(((r11*x9097))+(((-1.0)*r10*x9098))+(((-1.0)*r12*x9095)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9098))+((r01*x9097))+(((-1.0)*r02*x9095)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9095))+((cj1*sj2))+((r21*x9096))+((r22*x9094)));
evalcond[5]=(((r11*x9096))+((r12*x9094))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9099=(gconst1*r01);
IkReal x9100=(gconst2*r00);
CheckValue<IkReal> x9101 = IKatan2WithCheck(IkReal(((((-1.0)*x9100))+x9099)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9101.valid){
continue;
}
CheckValue<IkReal> x9102=IKPowWithIntegerCheck(IKsign(((x9100*x9100)+(((-2.0)*x9099*x9100))+(x9099*x9099)+(r02*r02))),-1);
if(!x9102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9101.value)+(((1.5707963267949)*(x9102.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9103=IKcos(j4);
IkReal x9104=IKsin(j4);
IkReal x9105=((1.0)*x9103);
IkReal x9106=(gconst1*x9103);
IkReal x9107=(gconst1*x9104);
IkReal x9108=((1.0)*gconst2*x9104);
evalcond[0]=(((r02*x9104))+(((-1.0)*gconst2*r00*x9105))+((r01*x9106)));
evalcond[1]=((((-1.0)*r22*x9105))+((r21*x9107))+(((-1.0)*r20*x9108)));
evalcond[2]=((((-1.0)*r10*x9108))+(((-1.0)*r12*x9105))+((r11*x9107)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9105))+(((-1.0)*r00*x9108))+((r01*x9107)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9104))+((r21*x9106))+(((-1.0)*gconst2*r20*x9105)));
evalcond[5]=((((-1.0)*gconst2*r10*x9105))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9104))+((r11*x9106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9109=((1.0)*gconst2);
CheckValue<IkReal> x9110=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9109)))),-1);
if(!x9110.valid){
continue;
}
CheckValue<IkReal> x9111 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9109))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9110.value)))+(x9111.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9112=IKcos(j4);
IkReal x9113=IKsin(j4);
IkReal x9114=((1.0)*x9112);
IkReal x9115=(gconst1*x9112);
IkReal x9116=(gconst1*x9113);
IkReal x9117=((1.0)*gconst2*x9113);
evalcond[0]=((((-1.0)*gconst2*r00*x9114))+((r01*x9115))+((r02*x9113)));
evalcond[1]=(((r21*x9116))+(((-1.0)*r22*x9114))+(((-1.0)*r20*x9117)));
evalcond[2]=((((-1.0)*r10*x9117))+((r11*x9116))+(((-1.0)*r12*x9114)));
evalcond[3]=((-1.0)+((r01*x9116))+(((-1.0)*r02*x9114))+(((-1.0)*r00*x9117)));
evalcond[4]=(((r21*x9115))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9114))+((r22*x9113)));
evalcond[5]=(((r12*x9113))+((r11*x9115))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9118=((-1.0)*r20);
IkReal x9119=x8922;
CheckValue<IkReal> x9121 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9118),IKFAST_ATAN2_MAGTHRESH);
if(!x9121.valid){
continue;
}
IkReal x9120=((-1.0)*(x9121.value));
sj5=gconst1;
cj5=gconst2;
j5=x9120;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9120;
IkReal gconst1=(r21*x9119);
IkReal gconst2=(x9118*x9119);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9122=((-1.0)*r20);
IkReal x9123=x8922;
CheckValue<IkReal> x9125 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9122),IKFAST_ATAN2_MAGTHRESH);
if(!x9125.valid){
continue;
}
IkReal x9124=((-1.0)*(x9125.value));
sj5=gconst1;
cj5=gconst2;
j5=x9124;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9124;
IkReal gconst1=(r21*x9123);
IkReal gconst2=(x9122*x9123);
IkReal x9126=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9130=IKPowWithIntegerCheck(x9126,-1);
if(!x9130.valid){
continue;
}
IkReal x9127=x9130.value;
IkReal x9128=((1.0)*x9127);
IkReal x9129=((((-2.0)*r00*r01*r20*r21*x9127))+(((-1.0)*(r02*r02)))+(((-1.0)*x9128*(r00*r00)*(r20*r20)))+(((-1.0)*x9128*(r01*r01)*(r21*r21))));
j4eval[0]=x9129;
j4eval[1]=IKsign(x9129);
j4eval[2]=r02;
j4eval[3]=x9126;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9131=((-1.0)*r20);
IkReal x9132=x8922;
CheckValue<IkReal> x9134 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9131),IKFAST_ATAN2_MAGTHRESH);
if(!x9134.valid){
continue;
}
IkReal x9133=((-1.0)*(x9134.value));
sj5=gconst1;
cj5=gconst2;
j5=x9133;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9133;
IkReal gconst1=(r21*x9132);
IkReal gconst2=(x9131*x9132);
IkReal x9135=r22*r22;
IkReal x9136=((1.0)*r02);
IkReal x9137=(cj1*sj2);
IkReal x9138=(cj2*sj1);
CheckValue<IkReal> x9142=IKPowWithIntegerCheck(((-1.0)+x9135),-1);
if(!x9142.valid){
continue;
}
IkReal x9139=x9142.value;
if((((1.0)+(((-1.0)*x9135)))) < -0.00001)
continue;
IkReal x9140=IKsqrt(((1.0)+(((-1.0)*x9135))));
IkReal x9141=(r02*r22*x9139*x9140);
j4eval[0]=((IKabs((((x9138*x9141))+((x9137*x9141)))))+(IKabs(((((-1.0)*x9136*x9137))+(((-1.0)*x9136*x9138))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9143=(cj1*sj2);
IkReal x9144=(gconst1*r01);
IkReal x9145=((1.0)*r02);
IkReal x9146=(cj2*sj1);
IkReal x9147=((1.0)*gconst2*r00);
CheckValue<IkReal> x9148=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9148.valid){
continue;
}
CheckValue<IkReal> x9149 = IKatan2WithCheck(IkReal((((x9144*x9146))+(((-1.0)*x9146*x9147))+(((-1.0)*x9143*x9147))+((x9143*x9144)))),IkReal(((((-1.0)*x9143*x9145))+(((-1.0)*x9145*x9146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9148.value)))+(x9149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9150=IKcos(j4);
IkReal x9151=IKsin(j4);
IkReal x9152=((1.0)*x9150);
IkReal x9153=(gconst1*x9150);
IkReal x9154=(gconst1*x9151);
IkReal x9155=((1.0)*gconst2*x9151);
evalcond[0]=(((r02*x9151))+(((-1.0)*gconst2*r00*x9152))+((r01*x9153)));
evalcond[1]=((((-1.0)*r20*x9155))+(((-1.0)*r22*x9152))+((r21*x9154)));
evalcond[2]=(((r11*x9154))+(((-1.0)*r12*x9152))+(((-1.0)*r10*x9155)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9152))+((r01*x9154))+(((-1.0)*r00*x9155)));
evalcond[4]=(((cj2*sj1))+((r22*x9151))+(((-1.0)*gconst2*r20*x9152))+((cj1*sj2))+((r21*x9153)));
evalcond[5]=(((r11*x9153))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9152))+((cj1*cj2))+((r12*x9151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9156=(gconst1*r01);
IkReal x9157=(gconst2*r00);
CheckValue<IkReal> x9158 = IKatan2WithCheck(IkReal((x9156+(((-1.0)*x9157)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9158.valid){
continue;
}
CheckValue<IkReal> x9159=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9157*x9157)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9156*x9156)))+(((2.0)*x9156*x9157)))),-1);
if(!x9159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9158.value)+(((1.5707963267949)*(x9159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9160=IKcos(j4);
IkReal x9161=IKsin(j4);
IkReal x9162=((1.0)*x9160);
IkReal x9163=(gconst1*x9160);
IkReal x9164=(gconst1*x9161);
IkReal x9165=((1.0)*gconst2*x9161);
evalcond[0]=(((r01*x9163))+((r02*x9161))+(((-1.0)*gconst2*r00*x9162)));
evalcond[1]=((((-1.0)*r22*x9162))+((r21*x9164))+(((-1.0)*r20*x9165)));
evalcond[2]=((((-1.0)*r12*x9162))+(((-1.0)*r10*x9165))+((r11*x9164)));
evalcond[3]=((1.0)+((r01*x9164))+(((-1.0)*r02*x9162))+(((-1.0)*r00*x9165)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9161))+((r21*x9163))+(((-1.0)*gconst2*r20*x9162)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9162))+((r11*x9163))+((r12*x9161))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9166 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9166.valid){
continue;
}
CheckValue<IkReal> x9167=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9166.value)+(((1.5707963267949)*(x9167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9168=IKcos(j4);
IkReal x9169=IKsin(j4);
IkReal x9170=((1.0)*x9168);
IkReal x9171=(gconst1*x9168);
IkReal x9172=(gconst1*x9169);
IkReal x9173=((1.0)*gconst2*x9169);
evalcond[0]=((((-1.0)*gconst2*r00*x9170))+((r02*x9169))+((r01*x9171)));
evalcond[1]=(((r21*x9172))+(((-1.0)*r22*x9170))+(((-1.0)*r20*x9173)));
evalcond[2]=((((-1.0)*r10*x9173))+(((-1.0)*r12*x9170))+((r11*x9172)));
evalcond[3]=((1.0)+((r01*x9172))+(((-1.0)*r02*x9170))+(((-1.0)*r00*x9173)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9170))+((cj1*sj2))+((r22*x9169))+((r21*x9171)));
evalcond[5]=((((-1.0)*gconst2*r10*x9170))+(((-1.0)*sj1*sj2))+((r12*x9169))+((cj1*cj2))+((r11*x9171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9174=((-1.0)*r20);
IkReal x9175=((-1.0)*px);
CheckValue<IkReal> x9177 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9174),IKFAST_ATAN2_MAGTHRESH);
if(!x9177.valid){
continue;
}
IkReal x9176=((-1.0)*(x9177.value));
sj5=gconst1;
cj5=gconst2;
j5=x9176;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9175);
rxp1_1=(px*r21);
rxp1_2=(r11*x9175);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9176;
IkReal gconst1=r21;
IkReal gconst2=x9174;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9178=((-1.0)*r20);
IkReal x9179=((-1.0)*px);
CheckValue<IkReal> x9181 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9178),IKFAST_ATAN2_MAGTHRESH);
if(!x9181.valid){
continue;
}
IkReal x9180=((-1.0)*(x9181.value));
sj5=gconst1;
cj5=gconst2;
j5=x9180;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9179);
rxp1_1=(px*r21);
rxp1_2=(r11*x9179);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9180;
IkReal gconst1=r21;
IkReal gconst2=x9178;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9182=((-1.0)*r20);
IkReal x9183=((-1.0)*px);
CheckValue<IkReal> x9185 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9182),IKFAST_ATAN2_MAGTHRESH);
if(!x9185.valid){
continue;
}
IkReal x9184=((-1.0)*(x9185.value));
sj5=gconst1;
cj5=gconst2;
j5=x9184;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9183);
rxp1_1=(px*r21);
rxp1_2=(r11*x9183);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9184;
IkReal gconst1=r21;
IkReal gconst2=x9182;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9188=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9188.valid){
continue;
}
IkReal x9186=x9188.value;
IkReal x9187=(sj0*x9186);
cj4array[0]=(((cj1*cj2*x9187))+(((-1.0)*sj1*sj2*x9187)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9189=IKsin(j4);
IkReal x9190=IKcos(j4);
IkReal x9191=((1.0)*gconst2);
IkReal x9192=(gconst1*r21);
evalcond[0]=(r02*x9189);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9190)));
evalcond[2]=(((x9189*x9192))+(((-1.0)*r20*x9189*x9191)));
evalcond[3]=((((-1.0)*r10*x9189*x9191))+((gconst1*r11*x9189)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x9190*x9191))+((x9190*x9192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9195=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9195.valid){
continue;
}
IkReal x9193=x9195.value;
IkReal x9194=((1.0)*x9193);
cj4array[0]=((((-1.0)*cj2*sj1*x9194))+(((-1.0)*cj1*sj2*x9194)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9196=IKsin(j4);
IkReal x9197=IKcos(j4);
IkReal x9198=((1.0)*sj0);
IkReal x9199=(gconst1*x9196);
IkReal x9200=((1.0)*x9197);
IkReal x9201=((1.0)*gconst2*x9196);
evalcond[0]=(r02*x9196);
evalcond[1]=((((-1.0)*r02*x9200))+(((-1.0)*x9198)));
evalcond[2]=(((r21*x9199))+(((-1.0)*r20*x9201)));
evalcond[3]=((((-1.0)*r10*x9201))+((r11*x9199)));
evalcond[4]=((((-1.0)*gconst2*r10*x9200))+((gconst1*r11*x9197))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x9198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9202=IKPowWithIntegerCheck(r02,-1);
if(!x9202.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9202.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9203=IKsin(j4);
IkReal x9204=IKcos(j4);
IkReal x9205=(gconst1*r21);
IkReal x9206=(gconst1*r11);
IkReal x9207=((1.0)*gconst2*r10);
IkReal x9208=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9203);
evalcond[1]=(((x9203*x9205))+(((-1.0)*x9203*x9208)));
evalcond[2]=(((x9203*x9206))+(((-1.0)*x9203*x9207)));
evalcond[3]=(((cj2*sj1))+((x9204*x9205))+((cj1*sj2))+(((-1.0)*x9204*x9208)));
evalcond[4]=(((x9204*x9206))+(((-1.0)*x9204*x9207))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9209=(cj2*sj1);
IkReal x9210=(cj1*sj2);
IkReal x9211=(gconst1*r21);
IkReal x9212=((1.0)*gconst2*r20);
CheckValue<IkReal> x9213 = IKatan2WithCheck(IkReal((((r22*x9209))+((r22*x9210)))),IkReal((((x9209*x9211))+(((-1.0)*x9210*x9212))+((x9210*x9211))+(((-1.0)*x9209*x9212)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9213.valid){
continue;
}
CheckValue<IkReal> x9214=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst2*r20*x9211))+(((-1.0)*gconst2*r20*x9212))+(((-1.0)*(r22*r22)))+(((-1.0)*(x9211*x9211))))),-1);
if(!x9214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9213.value)+(((1.5707963267949)*(x9214.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9215=IKsin(j4);
IkReal x9216=IKcos(j4);
IkReal x9217=(sj1*sj2);
IkReal x9218=(gconst2*r10);
IkReal x9219=(gconst2*r00);
IkReal x9220=(gconst2*r20);
IkReal x9221=((1.0)*x9216);
IkReal x9222=(gconst1*x9216);
IkReal x9223=((1.0)*cj1*cj2);
IkReal x9224=(gconst1*x9215);
IkReal x9225=((1.0)*x9215);
evalcond[0]=(((r21*x9224))+(((-1.0)*x9220*x9225))+(((-1.0)*r22*x9221)));
evalcond[1]=(cj0+((r11*x9224))+(((-1.0)*x9218*x9225))+(((-1.0)*r12*x9221)));
evalcond[2]=(((r01*x9224))+(((-1.0)*sj0))+(((-1.0)*r02*x9221))+(((-1.0)*x9219*x9225)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9222))+(((-1.0)*x9220*x9221))+((r22*x9215)));
evalcond[4]=(((r01*x9222))+(((-1.0)*x9219*x9221))+(((-1.0)*cj0*x9223))+((r02*x9215))+((cj0*x9217)));
evalcond[5]=(((r12*x9215))+((r11*x9222))+((sj0*x9217))+(((-1.0)*x9218*x9221))+(((-1.0)*sj0*x9223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9226=((1.0)*gconst2);
CheckValue<IkReal> x9227 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9226))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9227.valid){
continue;
}
CheckValue<IkReal> x9228=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9226)))),-1);
if(!x9228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9227.value)+(((1.5707963267949)*(x9228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9229=IKsin(j4);
IkReal x9230=IKcos(j4);
IkReal x9231=(sj1*sj2);
IkReal x9232=(gconst2*r10);
IkReal x9233=(gconst2*r00);
IkReal x9234=(gconst2*r20);
IkReal x9235=((1.0)*x9230);
IkReal x9236=(gconst1*x9230);
IkReal x9237=((1.0)*cj1*cj2);
IkReal x9238=(gconst1*x9229);
IkReal x9239=((1.0)*x9229);
evalcond[0]=(((r21*x9238))+(((-1.0)*x9234*x9239))+(((-1.0)*r22*x9235)));
evalcond[1]=(cj0+(((-1.0)*r12*x9235))+(((-1.0)*x9232*x9239))+((r11*x9238)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9233*x9239))+((r01*x9238))+(((-1.0)*r02*x9235)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9236))+((r22*x9229))+(((-1.0)*x9234*x9235)));
evalcond[4]=((((-1.0)*cj0*x9237))+((cj0*x9231))+((r02*x9229))+(((-1.0)*x9233*x9235))+((r01*x9236)));
evalcond[5]=((((-1.0)*sj0*x9237))+((r12*x9229))+(((-1.0)*x9232*x9235))+((r11*x9236))+((sj0*x9231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9240=((1.0)*gconst2);
CheckValue<IkReal> x9241 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9240))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9241.valid){
continue;
}
CheckValue<IkReal> x9242=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9240)))),-1);
if(!x9242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9241.value)+(((1.5707963267949)*(x9242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9243=IKsin(j4);
IkReal x9244=IKcos(j4);
IkReal x9245=(sj1*sj2);
IkReal x9246=(gconst2*r10);
IkReal x9247=(gconst2*r00);
IkReal x9248=(gconst2*r20);
IkReal x9249=((1.0)*x9244);
IkReal x9250=(gconst1*x9244);
IkReal x9251=((1.0)*cj1*cj2);
IkReal x9252=(gconst1*x9243);
IkReal x9253=((1.0)*x9243);
evalcond[0]=((((-1.0)*r22*x9249))+((r21*x9252))+(((-1.0)*x9248*x9253)));
evalcond[1]=((((-1.0)*x9246*x9253))+cj0+(((-1.0)*r12*x9249))+((r11*x9252)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9247*x9253))+((r01*x9252))+(((-1.0)*r02*x9249)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9250))+((r22*x9243))+(((-1.0)*x9248*x9249)));
evalcond[4]=((((-1.0)*cj0*x9251))+(((-1.0)*x9247*x9249))+((cj0*x9245))+((r02*x9243))+((r01*x9250)));
evalcond[5]=((((-1.0)*x9246*x9249))+((r12*x9243))+((sj0*x9245))+((r11*x9250))+(((-1.0)*sj0*x9251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9254=((-1.0)*r20);
IkReal x9255=x8922;
CheckValue<IkReal> x9257 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9254),IKFAST_ATAN2_MAGTHRESH);
if(!x9257.valid){
continue;
}
IkReal x9256=((-1.0)*(x9257.value));
sj5=gconst1;
cj5=gconst2;
j5=x9256;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9256;
IkReal gconst1=(r21*x9255);
IkReal gconst2=(x9254*x9255);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9258=((-1.0)*r20);
IkReal x9259=x8922;
CheckValue<IkReal> x9261 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9258),IKFAST_ATAN2_MAGTHRESH);
if(!x9261.valid){
continue;
}
IkReal x9260=((-1.0)*(x9261.value));
sj5=gconst1;
cj5=gconst2;
j5=x9260;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9260;
IkReal gconst1=(r21*x9259);
IkReal gconst2=(x9258*x9259);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9262=((-1.0)*r20);
IkReal x9263=x8922;
CheckValue<IkReal> x9265 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9262),IKFAST_ATAN2_MAGTHRESH);
if(!x9265.valid){
continue;
}
IkReal x9264=((-1.0)*(x9265.value));
sj5=gconst1;
cj5=gconst2;
j5=x9264;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9264;
IkReal gconst1=(r21*x9263);
IkReal gconst2=(x9262*x9263);
IkReal x9266=r22*r22;
CheckValue<IkReal> x9269=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9266))),-1);
if(!x9269.valid){
continue;
}
IkReal x9267=x9269.value;
IkReal x9268=(x9266+((x9267*(r21*r21*r21*r21)))+(((2.0)*x9267*(r20*r20)*(r21*r21)))+((x9267*(r20*r20*r20*r20))));
j4eval[0]=x9268;
j4eval[1]=IKsign(x9268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9270=((-1.0)*r20);
IkReal x9271=x8922;
CheckValue<IkReal> x9273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9270),IKFAST_ATAN2_MAGTHRESH);
if(!x9273.valid){
continue;
}
IkReal x9272=((-1.0)*(x9273.value));
sj5=gconst1;
cj5=gconst2;
j5=x9272;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9272;
IkReal gconst1=(r21*x9271);
IkReal gconst2=(x9270*x9271);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9274=((-1.0)*r20);
IkReal x9275=x8922;
CheckValue<IkReal> x9277 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9274),IKFAST_ATAN2_MAGTHRESH);
if(!x9277.valid){
continue;
}
IkReal x9276=((-1.0)*(x9277.value));
sj5=gconst1;
cj5=gconst2;
j5=x9276;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9276;
IkReal gconst1=(r21*x9275);
IkReal gconst2=(x9274*x9275);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9278=((-1.0)*r20);
IkReal x9279=x8922;
CheckValue<IkReal> x9281 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9278),IKFAST_ATAN2_MAGTHRESH);
if(!x9281.valid){
continue;
}
IkReal x9280=((-1.0)*(x9281.value));
sj5=gconst1;
cj5=gconst2;
j5=x9280;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9280;
IkReal gconst1=(r21*x9279);
IkReal gconst2=(x9278*x9279);
IkReal x9282=r22*r22;
IkReal x9283=(cj1*r12*sj2);
IkReal x9284=(cj2*r12*sj1);
CheckValue<IkReal> x9288=IKPowWithIntegerCheck(((-1.0)+x9282),-1);
if(!x9288.valid){
continue;
}
IkReal x9285=x9288.value;
if((((1.0)+(((-1.0)*x9282)))) < -0.00001)
continue;
IkReal x9286=IKsqrt(((1.0)+(((-1.0)*x9282))));
IkReal x9287=((1.0)*r22*x9285*x9286);
j4eval[0]=((IKabs(((((-1.0)*x9284*x9287))+(((-1.0)*x9283*x9287)))))+(IKabs((x9284+x9283))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9289=((1.0)*gconst1);
IkReal x9290=(cj2*sj1);
IkReal x9291=(gconst2*r10);
IkReal x9292=(cj1*sj2);
CheckValue<IkReal> x9293 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9289*x9292))+(((-1.0)*r11*x9289*x9290))+((x9291*x9292))+((x9290*x9291)))),IkReal((((r12*x9292))+((r12*x9290)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9293.valid){
continue;
}
CheckValue<IkReal> x9294=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9289)))),-1);
if(!x9294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9293.value)+(((1.5707963267949)*(x9294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9295=IKsin(j4);
IkReal x9296=IKcos(j4);
IkReal x9297=((1.0)*x9296);
IkReal x9298=(gconst2*x9296);
IkReal x9299=(gconst1*x9295);
IkReal x9300=((1.0)*x9295);
evalcond[0]=((((-1.0)*r22*x9297))+((r21*x9299))+(((-1.0)*gconst2*r20*x9300)));
evalcond[1]=(((r01*x9299))+(((-1.0)*gconst2*r00*x9300))+(((-1.0)*r02*x9297)));
evalcond[2]=((((-1.0)*gconst1*r11*x9297))+((r10*x9298))+(((-1.0)*r12*x9300)));
evalcond[3]=((1.0)+((r11*x9299))+(((-1.0)*gconst2*r10*x9300))+(((-1.0)*r12*x9297)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9297))+((cj1*sj2))+((r20*x9298))+(((-1.0)*r22*x9300)));
evalcond[5]=(((r00*x9298))+(((-1.0)*gconst1*r01*x9297))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9301=(gconst1*r11);
IkReal x9302=(gconst2*r10);
CheckValue<IkReal> x9303 = IKatan2WithCheck(IkReal((x9302+(((-1.0)*x9301)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9303.valid){
continue;
}
CheckValue<IkReal> x9304=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9302*x9302)+(x9301*x9301)+(((-2.0)*x9301*x9302)))),-1);
if(!x9304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9303.value)+(((1.5707963267949)*(x9304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9305=IKsin(j4);
IkReal x9306=IKcos(j4);
IkReal x9307=((1.0)*x9306);
IkReal x9308=(gconst2*x9306);
IkReal x9309=(gconst1*x9305);
IkReal x9310=((1.0)*x9305);
evalcond[0]=(((r21*x9309))+(((-1.0)*r22*x9307))+(((-1.0)*gconst2*r20*x9310)));
evalcond[1]=((((-1.0)*gconst2*r00*x9310))+((r01*x9309))+(((-1.0)*r02*x9307)));
evalcond[2]=((((-1.0)*gconst1*r11*x9307))+((r10*x9308))+(((-1.0)*r12*x9310)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9310))+((r11*x9309))+(((-1.0)*r12*x9307)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9307))+((cj1*sj2))+((r20*x9308))+(((-1.0)*r22*x9310)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9307))+(((-1.0)*r02*x9310))+((r00*x9308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9311=((1.0)*gconst2);
CheckValue<IkReal> x9312 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9311))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9312.valid){
continue;
}
CheckValue<IkReal> x9313=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9311)))),-1);
if(!x9313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9312.value)+(((1.5707963267949)*(x9313.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9314=IKsin(j4);
IkReal x9315=IKcos(j4);
IkReal x9316=((1.0)*x9315);
IkReal x9317=(gconst2*x9315);
IkReal x9318=(gconst1*x9314);
IkReal x9319=((1.0)*x9314);
evalcond[0]=(((r21*x9318))+(((-1.0)*r22*x9316))+(((-1.0)*gconst2*r20*x9319)));
evalcond[1]=((((-1.0)*gconst2*r00*x9319))+((r01*x9318))+(((-1.0)*r02*x9316)));
evalcond[2]=((((-1.0)*gconst1*r11*x9316))+((r10*x9317))+(((-1.0)*r12*x9319)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9319))+((r11*x9318))+(((-1.0)*r12*x9316)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9316))+((cj1*sj2))+((r20*x9317))+(((-1.0)*r22*x9319)));
evalcond[5]=((((-1.0)*gconst1*r01*x9316))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9319))+((r00*x9317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9320=((-1.0)*r20);
IkReal x9321=x8922;
CheckValue<IkReal> x9323 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9320),IKFAST_ATAN2_MAGTHRESH);
if(!x9323.valid){
continue;
}
IkReal x9322=((-1.0)*(x9323.value));
sj5=gconst1;
cj5=gconst2;
j5=x9322;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9322;
IkReal gconst1=(r21*x9321);
IkReal gconst2=(x9320*x9321);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9324=((-1.0)*r20);
IkReal x9325=x8922;
CheckValue<IkReal> x9327 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9324),IKFAST_ATAN2_MAGTHRESH);
if(!x9327.valid){
continue;
}
IkReal x9326=((-1.0)*(x9327.value));
sj5=gconst1;
cj5=gconst2;
j5=x9326;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9326;
IkReal gconst1=(r21*x9325);
IkReal gconst2=(x9324*x9325);
IkReal x9328=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9332=IKPowWithIntegerCheck(x9328,-1);
if(!x9332.valid){
continue;
}
IkReal x9329=x9332.value;
IkReal x9330=((1.0)*x9329);
IkReal x9331=((((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9329))+(((-1.0)*x9330*(r10*r10)*(r20*r20)))+(((-1.0)*x9330*(r11*r11)*(r21*r21))));
j4eval[0]=x9331;
j4eval[1]=r12;
j4eval[2]=x9328;
j4eval[3]=IKsign(x9331);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9333=((-1.0)*r20);
IkReal x9334=x8922;
CheckValue<IkReal> x9336 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9333),IKFAST_ATAN2_MAGTHRESH);
if(!x9336.valid){
continue;
}
IkReal x9335=((-1.0)*(x9336.value));
sj5=gconst1;
cj5=gconst2;
j5=x9335;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9335;
IkReal gconst1=(r21*x9334);
IkReal gconst2=(x9333*x9334);
IkReal x9337=r22*r22;
IkReal x9338=(cj1*r12*sj2);
IkReal x9339=(cj2*r12*sj1);
CheckValue<IkReal> x9343=IKPowWithIntegerCheck(((-1.0)+x9337),-1);
if(!x9343.valid){
continue;
}
IkReal x9340=x9343.value;
if((((1.0)+(((-1.0)*x9337)))) < -0.00001)
continue;
IkReal x9341=IKsqrt(((1.0)+(((-1.0)*x9337))));
IkReal x9342=((1.0)*r22*x9340*x9341);
j4eval[0]=((IKabs(((((-1.0)*x9338*x9342))+(((-1.0)*x9339*x9342)))))+(IKabs((x9339+x9338))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9344=((1.0)*gconst1);
IkReal x9345=(cj2*sj1);
IkReal x9346=(gconst2*r10);
IkReal x9347=(cj1*sj2);
CheckValue<IkReal> x9348=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9344)))),-1);
if(!x9348.valid){
continue;
}
CheckValue<IkReal> x9349 = IKatan2WithCheck(IkReal((((x9346*x9347))+((x9345*x9346))+(((-1.0)*r11*x9344*x9347))+(((-1.0)*r11*x9344*x9345)))),IkReal((((r12*x9345))+((r12*x9347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9348.value)))+(x9349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9350=IKsin(j4);
IkReal x9351=IKcos(j4);
IkReal x9352=((1.0)*x9351);
IkReal x9353=(gconst2*x9351);
IkReal x9354=(gconst1*x9350);
IkReal x9355=((1.0)*x9350);
evalcond[0]=((((-1.0)*r22*x9352))+(((-1.0)*gconst2*r20*x9355))+((r21*x9354)));
evalcond[1]=((((-1.0)*r02*x9352))+((r01*x9354))+(((-1.0)*gconst2*r00*x9355)));
evalcond[2]=((((-1.0)*r12*x9355))+((r10*x9353))+(((-1.0)*gconst1*r11*x9352)));
evalcond[3]=((-1.0)+((r11*x9354))+(((-1.0)*r12*x9352))+(((-1.0)*gconst2*r10*x9355)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9355))+((cj1*sj2))+((r20*x9353))+(((-1.0)*gconst1*r21*x9352)));
evalcond[5]=((((-1.0)*gconst1*r01*x9352))+(((-1.0)*r02*x9355))+(((-1.0)*sj1*sj2))+((r00*x9353))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9356=(gconst1*r11);
IkReal x9357=(gconst2*r10);
CheckValue<IkReal> x9358=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9357*x9357)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9356*x9356)))+(((2.0)*x9356*x9357)))),-1);
if(!x9358.valid){
continue;
}
CheckValue<IkReal> x9359 = IKatan2WithCheck(IkReal((x9357+(((-1.0)*x9356)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9358.value)))+(x9359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9360=IKsin(j4);
IkReal x9361=IKcos(j4);
IkReal x9362=((1.0)*x9361);
IkReal x9363=(gconst2*x9361);
IkReal x9364=(gconst1*x9360);
IkReal x9365=((1.0)*x9360);
evalcond[0]=(((r21*x9364))+(((-1.0)*r22*x9362))+(((-1.0)*gconst2*r20*x9365)));
evalcond[1]=((((-1.0)*r02*x9362))+((r01*x9364))+(((-1.0)*gconst2*r00*x9365)));
evalcond[2]=((((-1.0)*gconst1*r11*x9362))+(((-1.0)*r12*x9365))+((r10*x9363)));
evalcond[3]=((-1.0)+((r11*x9364))+(((-1.0)*gconst2*r10*x9365))+(((-1.0)*r12*x9362)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9362))+((cj1*sj2))+(((-1.0)*r22*x9365))+((r20*x9363)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9365))+(((-1.0)*gconst1*r01*x9362))+((cj1*cj2))+((r00*x9363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9366 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9366.valid){
continue;
}
CheckValue<IkReal> x9367=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9366.value)+(((1.5707963267949)*(x9367.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9368=IKsin(j4);
IkReal x9369=IKcos(j4);
IkReal x9370=((1.0)*x9369);
IkReal x9371=(gconst2*x9369);
IkReal x9372=(gconst1*x9368);
IkReal x9373=((1.0)*x9368);
evalcond[0]=(((r21*x9372))+(((-1.0)*r22*x9370))+(((-1.0)*gconst2*r20*x9373)));
evalcond[1]=((((-1.0)*r02*x9370))+(((-1.0)*gconst2*r00*x9373))+((r01*x9372)));
evalcond[2]=((((-1.0)*r12*x9373))+((r10*x9371))+(((-1.0)*gconst1*r11*x9370)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9373))+((r11*x9372))+(((-1.0)*r12*x9370)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9370))+((cj1*sj2))+(((-1.0)*r22*x9373))+((r20*x9371)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9373))+((cj1*cj2))+((r00*x9371))+(((-1.0)*gconst1*r01*x9370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9374=((-1.0)*r20);
IkReal x9375=x8922;
CheckValue<IkReal> x9377 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9374),IKFAST_ATAN2_MAGTHRESH);
if(!x9377.valid){
continue;
}
IkReal x9376=((-1.0)*(x9377.value));
sj5=gconst1;
cj5=gconst2;
j5=x9376;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9376;
IkReal gconst1=(r21*x9375);
IkReal gconst2=(x9374*x9375);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9378=((-1.0)*r20);
IkReal x9379=x8922;
CheckValue<IkReal> x9381 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9378),IKFAST_ATAN2_MAGTHRESH);
if(!x9381.valid){
continue;
}
IkReal x9380=((-1.0)*(x9381.value));
sj5=gconst1;
cj5=gconst2;
j5=x9380;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9380;
IkReal gconst1=(r21*x9379);
IkReal gconst2=(x9378*x9379);
IkReal x9382=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9386=IKPowWithIntegerCheck(x9382,-1);
if(!x9386.valid){
continue;
}
IkReal x9383=x9386.value;
IkReal x9384=((1.0)*x9383);
IkReal x9385=((((-1.0)*x9384*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9384*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x9383)));
j4eval[0]=x9385;
j4eval[1]=IKsign(x9385);
j4eval[2]=r02;
j4eval[3]=x9382;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9387=((-1.0)*r20);
IkReal x9388=x8922;
CheckValue<IkReal> x9390 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9387),IKFAST_ATAN2_MAGTHRESH);
if(!x9390.valid){
continue;
}
IkReal x9389=((-1.0)*(x9390.value));
sj5=gconst1;
cj5=gconst2;
j5=x9389;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9389;
IkReal gconst1=(r21*x9388);
IkReal gconst2=(x9387*x9388);
IkReal x9391=r22*r22;
IkReal x9392=(cj1*r02*sj2);
IkReal x9393=(cj2*r02*sj1);
CheckValue<IkReal> x9397=IKPowWithIntegerCheck(((-1.0)+x9391),-1);
if(!x9397.valid){
continue;
}
IkReal x9394=x9397.value;
if((((1.0)+(((-1.0)*x9391)))) < -0.00001)
continue;
IkReal x9395=IKsqrt(((1.0)+(((-1.0)*x9391))));
IkReal x9396=((1.0)*r22*x9394*x9395);
j4eval[0]=((IKabs(((((-1.0)*x9392*x9396))+(((-1.0)*x9393*x9396)))))+(IKabs((x9393+x9392))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9398=(cj2*sj1);
IkReal x9399=(cj1*sj2);
IkReal x9400=(gconst2*r00);
IkReal x9401=((1.0)*gconst1*r01);
CheckValue<IkReal> x9402 = IKatan2WithCheck(IkReal((((x9399*x9400))+((x9398*x9400))+(((-1.0)*x9399*x9401))+(((-1.0)*x9398*x9401)))),IkReal((((r02*x9399))+((r02*x9398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9402.valid){
continue;
}
CheckValue<IkReal> x9403=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9402.value)+(((1.5707963267949)*(x9403.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9404=IKsin(j4);
IkReal x9405=IKcos(j4);
IkReal x9406=(gconst1*r11);
IkReal x9407=(gconst1*r21);
IkReal x9408=(gconst1*r01);
IkReal x9409=((1.0)*x9405);
IkReal x9410=(gconst2*x9405);
IkReal x9411=((1.0)*x9404);
evalcond[0]=((((-1.0)*r22*x9409))+((x9404*x9407))+(((-1.0)*gconst2*r20*x9411)));
evalcond[1]=(((x9404*x9406))+(((-1.0)*r12*x9409))+(((-1.0)*gconst2*r10*x9411)));
evalcond[2]=((((-1.0)*r02*x9411))+((r00*x9410))+(((-1.0)*x9408*x9409)));
evalcond[3]=((-1.0)+((x9404*x9408))+(((-1.0)*gconst2*r00*x9411))+(((-1.0)*r02*x9409)));
evalcond[4]=(((r20*x9410))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9411))+(((-1.0)*x9407*x9409)));
evalcond[5]=((((-1.0)*x9406*x9409))+(((-1.0)*r12*x9411))+((r10*x9410))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9412=(gconst2*r00);
IkReal x9413=(gconst1*r01);
CheckValue<IkReal> x9414=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9413*x9413)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9412*x9412)))+(((2.0)*x9412*x9413)))),-1);
if(!x9414.valid){
continue;
}
CheckValue<IkReal> x9415 = IKatan2WithCheck(IkReal((x9412+(((-1.0)*x9413)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9414.value)))+(x9415.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9416=IKsin(j4);
IkReal x9417=IKcos(j4);
IkReal x9418=(gconst1*r11);
IkReal x9419=(gconst1*r21);
IkReal x9420=(gconst1*r01);
IkReal x9421=((1.0)*x9417);
IkReal x9422=(gconst2*x9417);
IkReal x9423=((1.0)*x9416);
evalcond[0]=((((-1.0)*gconst2*r20*x9423))+(((-1.0)*r22*x9421))+((x9416*x9419)));
evalcond[1]=((((-1.0)*gconst2*r10*x9423))+(((-1.0)*r12*x9421))+((x9416*x9418)));
evalcond[2]=(((r00*x9422))+(((-1.0)*x9420*x9421))+(((-1.0)*r02*x9423)));
evalcond[3]=((-1.0)+((x9416*x9420))+(((-1.0)*r02*x9421))+(((-1.0)*gconst2*r00*x9423)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9422))+(((-1.0)*r22*x9423))+(((-1.0)*x9419*x9421)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9423))+((r10*x9422))+(((-1.0)*x9418*x9421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9424=((1.0)*gconst2);
CheckValue<IkReal> x9425=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9424)))),-1);
if(!x9425.valid){
continue;
}
CheckValue<IkReal> x9426 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9424))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9425.value)))+(x9426.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9427=IKsin(j4);
IkReal x9428=IKcos(j4);
IkReal x9429=(gconst1*r11);
IkReal x9430=(gconst1*r21);
IkReal x9431=(gconst1*r01);
IkReal x9432=((1.0)*x9428);
IkReal x9433=(gconst2*x9428);
IkReal x9434=((1.0)*x9427);
evalcond[0]=(((x9427*x9430))+(((-1.0)*gconst2*r20*x9434))+(((-1.0)*r22*x9432)));
evalcond[1]=((((-1.0)*gconst2*r10*x9434))+((x9427*x9429))+(((-1.0)*r12*x9432)));
evalcond[2]=((((-1.0)*x9431*x9432))+(((-1.0)*r02*x9434))+((r00*x9433)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x9434))+((x9427*x9431))+(((-1.0)*r02*x9432)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9433))+(((-1.0)*r22*x9434))+(((-1.0)*x9430*x9432)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9434))+((r10*x9433))+(((-1.0)*x9429*x9432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9435=((-1.0)*r20);
IkReal x9436=x8922;
CheckValue<IkReal> x9438 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9435),IKFAST_ATAN2_MAGTHRESH);
if(!x9438.valid){
continue;
}
IkReal x9437=((-1.0)*(x9438.value));
sj5=gconst1;
cj5=gconst2;
j5=x9437;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9437;
IkReal gconst1=(r21*x9436);
IkReal gconst2=(x9435*x9436);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9439=((-1.0)*r20);
IkReal x9440=x8922;
CheckValue<IkReal> x9442 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9439),IKFAST_ATAN2_MAGTHRESH);
if(!x9442.valid){
continue;
}
IkReal x9441=((-1.0)*(x9442.value));
sj5=gconst1;
cj5=gconst2;
j5=x9441;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9441;
IkReal gconst1=(r21*x9440);
IkReal gconst2=(x9439*x9440);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9443=((-1.0)*r20);
IkReal x9444=x8922;
CheckValue<IkReal> x9446 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9443),IKFAST_ATAN2_MAGTHRESH);
if(!x9446.valid){
continue;
}
IkReal x9445=((-1.0)*(x9446.value));
sj5=gconst1;
cj5=gconst2;
j5=x9445;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9445;
IkReal gconst1=(r21*x9444);
IkReal gconst2=(x9443*x9444);
IkReal x9447=r22*r22;
IkReal x9448=(cj1*r02*sj2);
IkReal x9449=(cj2*r02*sj1);
CheckValue<IkReal> x9453=IKPowWithIntegerCheck(((-1.0)+x9447),-1);
if(!x9453.valid){
continue;
}
IkReal x9450=x9453.value;
if((((1.0)+(((-1.0)*x9447)))) < -0.00001)
continue;
IkReal x9451=IKsqrt(((1.0)+(((-1.0)*x9447))));
IkReal x9452=((1.0)*r22*x9450*x9451);
j4eval[0]=((IKabs(((((-1.0)*x9449*x9452))+(((-1.0)*x9448*x9452)))))+(IKabs((x9449+x9448))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9454=(cj2*sj1);
IkReal x9455=(cj1*sj2);
IkReal x9456=(gconst2*r00);
IkReal x9457=((1.0)*gconst1*r01);
CheckValue<IkReal> x9458 = IKatan2WithCheck(IkReal((((x9455*x9456))+(((-1.0)*x9454*x9457))+(((-1.0)*x9455*x9457))+((x9454*x9456)))),IkReal((((r02*x9454))+((r02*x9455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9458.valid){
continue;
}
CheckValue<IkReal> x9459=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9458.value)+(((1.5707963267949)*(x9459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9460=IKsin(j4);
IkReal x9461=IKcos(j4);
IkReal x9462=(gconst1*r11);
IkReal x9463=(gconst1*r21);
IkReal x9464=(gconst1*r01);
IkReal x9465=((1.0)*x9461);
IkReal x9466=(gconst2*x9461);
IkReal x9467=((1.0)*x9460);
evalcond[0]=((((-1.0)*gconst2*r20*x9467))+((x9460*x9463))+(((-1.0)*r22*x9465)));
evalcond[1]=(((x9460*x9462))+(((-1.0)*r12*x9465))+(((-1.0)*gconst2*r10*x9467)));
evalcond[2]=(((r00*x9466))+(((-1.0)*x9464*x9465))+(((-1.0)*r02*x9467)));
evalcond[3]=((1.0)+((x9460*x9464))+(((-1.0)*gconst2*r00*x9467))+(((-1.0)*r02*x9465)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9467))+((r20*x9466))+(((-1.0)*x9463*x9465)));
evalcond[5]=(((r10*x9466))+(((-1.0)*sj1*sj2))+(((-1.0)*x9462*x9465))+(((-1.0)*r12*x9467))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9468=(gconst1*r01);
IkReal x9469=(gconst2*r00);
CheckValue<IkReal> x9470 = IKatan2WithCheck(IkReal((x9469+(((-1.0)*x9468)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9470.valid){
continue;
}
CheckValue<IkReal> x9471=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9468*x9469))+(x9469*x9469)+(x9468*x9468)+(r02*r02))),-1);
if(!x9471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9470.value)+(((1.5707963267949)*(x9471.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9472=IKsin(j4);
IkReal x9473=IKcos(j4);
IkReal x9474=(gconst1*r11);
IkReal x9475=(gconst1*r21);
IkReal x9476=(gconst1*r01);
IkReal x9477=((1.0)*x9473);
IkReal x9478=(gconst2*x9473);
IkReal x9479=((1.0)*x9472);
evalcond[0]=((((-1.0)*gconst2*r20*x9479))+(((-1.0)*r22*x9477))+((x9472*x9475)));
evalcond[1]=((((-1.0)*r12*x9477))+((x9472*x9474))+(((-1.0)*gconst2*r10*x9479)));
evalcond[2]=((((-1.0)*r02*x9479))+(((-1.0)*x9476*x9477))+((r00*x9478)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9477))+(((-1.0)*gconst2*r00*x9479))+((x9472*x9476)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9475*x9477))+(((-1.0)*r22*x9479))+((r20*x9478)));
evalcond[5]=(((r10*x9478))+(((-1.0)*sj1*sj2))+(((-1.0)*x9474*x9477))+(((-1.0)*r12*x9479))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9480 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9480.valid){
continue;
}
CheckValue<IkReal> x9481=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9480.value)+(((1.5707963267949)*(x9481.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9482=IKsin(j4);
IkReal x9483=IKcos(j4);
IkReal x9484=(gconst1*r11);
IkReal x9485=(gconst1*r21);
IkReal x9486=(gconst1*r01);
IkReal x9487=((1.0)*x9483);
IkReal x9488=(gconst2*x9483);
IkReal x9489=((1.0)*x9482);
evalcond[0]=((((-1.0)*r22*x9487))+(((-1.0)*gconst2*r20*x9489))+((x9482*x9485)));
evalcond[1]=((((-1.0)*gconst2*r10*x9489))+((x9482*x9484))+(((-1.0)*r12*x9487)));
evalcond[2]=(((r00*x9488))+(((-1.0)*r02*x9489))+(((-1.0)*x9486*x9487)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9489))+(((-1.0)*r02*x9487))+((x9482*x9486)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9485*x9487))+((cj1*sj2))+((r20*x9488))+(((-1.0)*r22*x9489)));
evalcond[5]=((((-1.0)*x9484*x9487))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r10*x9488))+(((-1.0)*r12*x9489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9490=((-1.0)*r20);
IkReal x9491=((-1.0)*px);
CheckValue<IkReal> x9493 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9490),IKFAST_ATAN2_MAGTHRESH);
if(!x9493.valid){
continue;
}
IkReal x9492=((-1.0)*(x9493.value));
sj5=gconst1;
cj5=gconst2;
j5=x9492;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9491);
rxp1_1=(px*r21);
rxp1_2=(r11*x9491);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9492;
IkReal gconst1=r21;
IkReal gconst2=x9490;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9494=((-1.0)*r20);
IkReal x9495=((-1.0)*px);
CheckValue<IkReal> x9497 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9494),IKFAST_ATAN2_MAGTHRESH);
if(!x9497.valid){
continue;
}
IkReal x9496=((-1.0)*(x9497.value));
sj5=gconst1;
cj5=gconst2;
j5=x9496;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9495);
rxp1_1=(px*r21);
rxp1_2=(r11*x9495);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9496;
IkReal gconst1=r21;
IkReal gconst2=x9494;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9498=((-1.0)*r20);
IkReal x9499=((-1.0)*px);
CheckValue<IkReal> x9501 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9498),IKFAST_ATAN2_MAGTHRESH);
if(!x9501.valid){
continue;
}
IkReal x9500=((-1.0)*(x9501.value));
sj5=gconst1;
cj5=gconst2;
j5=x9500;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9499);
rxp1_1=(px*r21);
rxp1_2=(r11*x9499);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9500;
IkReal gconst1=r21;
IkReal gconst2=x9498;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9504=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9504.valid){
continue;
}
IkReal x9502=x9504.value;
IkReal x9503=(sj0*x9502);
cj4array[0]=((((-1.0)*sj1*sj2*x9503))+((cj1*cj2*x9503)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9505=IKsin(j4);
IkReal x9506=IKcos(j4);
IkReal x9507=(gconst1*x9505);
IkReal x9508=((1.0)*x9506);
IkReal x9509=((1.0)*gconst2*x9505);
evalcond[0]=((-1.0)*r02*x9505);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9508)));
evalcond[2]=(((r21*x9507))+(((-1.0)*r20*x9509)));
evalcond[3]=(((r11*x9507))+(((-1.0)*r10*x9509)));
evalcond[4]=((((-1.0)*gconst1*r21*x9508))+((cj2*sj1))+((cj1*sj2))+((gconst2*r20*x9506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9512=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9512.valid){
continue;
}
IkReal x9510=x9512.value;
IkReal x9511=((1.0)*x9510);
cj4array[0]=((((-1.0)*cj2*sj1*x9511))+(((-1.0)*cj1*sj2*x9511)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9513=IKsin(j4);
IkReal x9514=IKcos(j4);
IkReal x9515=(gconst2*r10);
IkReal x9516=((1.0)*sj0);
IkReal x9517=(gconst1*r11);
IkReal x9518=((1.0)*x9513);
IkReal x9519=((1.0)*x9514);
evalcond[0]=((-1.0)*r02*x9513);
evalcond[1]=((((-1.0)*r02*x9519))+(((-1.0)*x9516)));
evalcond[2]=((((-1.0)*gconst2*r20*x9518))+((gconst1*r21*x9513)));
evalcond[3]=(((x9513*x9517))+(((-1.0)*x9515*x9518)));
evalcond[4]=((((-1.0)*x9517*x9519))+(((-1.0)*cj1*cj2*x9516))+((x9514*x9515))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9520=IKPowWithIntegerCheck(r02,-1);
if(!x9520.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9520.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9521=IKsin(j4);
IkReal x9522=IKcos(j4);
IkReal x9523=(gconst2*r10);
IkReal x9524=(gconst1*r11);
IkReal x9525=(gconst1*r21);
IkReal x9526=(gconst2*r20);
IkReal x9527=((1.0)*x9521);
IkReal x9528=((1.0)*x9522);
evalcond[0]=((-1.0)*r02*x9521);
evalcond[1]=(((x9521*x9525))+(((-1.0)*x9526*x9527)));
evalcond[2]=(((x9521*x9524))+(((-1.0)*x9523*x9527)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9525*x9528))+((cj1*sj2))+((x9522*x9526)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9524*x9528))+((sj0*sj1*sj2))+((x9522*x9523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9529=(cj2*sj1);
IkReal x9530=(cj1*sj2);
IkReal x9531=(gconst1*r21);
IkReal x9532=((1.0)*gconst2*r20);
CheckValue<IkReal> x9533=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x9531*x9531)+(((gconst2*gconst2)*(r20*r20)))+(((-2.0)*gconst2*r20*x9531)))),-1);
if(!x9533.valid){
continue;
}
CheckValue<IkReal> x9534 = IKatan2WithCheck(IkReal((((r22*x9530))+((r22*x9529)))),IkReal((((x9529*x9531))+(((-1.0)*x9530*x9532))+((x9530*x9531))+(((-1.0)*x9529*x9532)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9533.value)))+(x9534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9535=IKsin(j4);
IkReal x9536=IKcos(j4);
IkReal x9537=(gconst1*r11);
IkReal x9538=(sj1*sj2);
IkReal x9539=(gconst1*r21);
IkReal x9540=(gconst1*r01);
IkReal x9541=((1.0)*x9536);
IkReal x9542=(gconst2*x9536);
IkReal x9543=((1.0)*cj1*cj2);
IkReal x9544=((1.0)*x9535);
evalcond[0]=((((-1.0)*r22*x9541))+((x9535*x9539))+(((-1.0)*gconst2*r20*x9544)));
evalcond[1]=((((-1.0)*r12*x9541))+cj0+(((-1.0)*gconst2*r10*x9544))+((x9535*x9537)));
evalcond[2]=((((-1.0)*sj0))+((x9535*x9540))+(((-1.0)*r02*x9541))+(((-1.0)*gconst2*r00*x9544)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9544))+((r20*x9542))+(((-1.0)*x9539*x9541)));
evalcond[4]=((((-1.0)*cj0*x9543))+(((-1.0)*x9540*x9541))+(((-1.0)*r02*x9544))+((cj0*x9538))+((r00*x9542)));
evalcond[5]=((((-1.0)*r12*x9544))+(((-1.0)*x9537*x9541))+(((-1.0)*sj0*x9543))+((sj0*x9538))+((r10*x9542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9545=((1.0)*gconst2);
CheckValue<IkReal> x9546=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9545)))),-1);
if(!x9546.valid){
continue;
}
CheckValue<IkReal> x9547 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9545))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9546.value)))+(x9547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9548=IKsin(j4);
IkReal x9549=IKcos(j4);
IkReal x9550=(gconst1*r11);
IkReal x9551=(sj1*sj2);
IkReal x9552=(gconst1*r21);
IkReal x9553=(gconst1*r01);
IkReal x9554=((1.0)*x9549);
IkReal x9555=(gconst2*x9549);
IkReal x9556=((1.0)*cj1*cj2);
IkReal x9557=((1.0)*x9548);
evalcond[0]=(((x9548*x9552))+(((-1.0)*r22*x9554))+(((-1.0)*gconst2*r20*x9557)));
evalcond[1]=(cj0+((x9548*x9550))+(((-1.0)*gconst2*r10*x9557))+(((-1.0)*r12*x9554)));
evalcond[2]=((((-1.0)*sj0))+((x9548*x9553))+(((-1.0)*r02*x9554))+(((-1.0)*gconst2*r00*x9557)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x9557))+((cj1*sj2))+((r20*x9555))+(((-1.0)*x9552*x9554)));
evalcond[4]=((((-1.0)*cj0*x9556))+(((-1.0)*r02*x9557))+(((-1.0)*x9553*x9554))+((r00*x9555))+((cj0*x9551)));
evalcond[5]=(((sj0*x9551))+(((-1.0)*sj0*x9556))+(((-1.0)*x9550*x9554))+((r10*x9555))+(((-1.0)*r12*x9557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9558=((1.0)*gconst2);
CheckValue<IkReal> x9559 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9559.valid){
continue;
}
CheckValue<IkReal> x9560=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9558)))),-1);
if(!x9560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9559.value)+(((1.5707963267949)*(x9560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9561=IKsin(j4);
IkReal x9562=IKcos(j4);
IkReal x9563=(gconst1*r11);
IkReal x9564=(sj1*sj2);
IkReal x9565=(gconst1*r21);
IkReal x9566=(gconst1*r01);
IkReal x9567=((1.0)*x9562);
IkReal x9568=(gconst2*x9562);
IkReal x9569=((1.0)*cj1*cj2);
IkReal x9570=((1.0)*x9561);
evalcond[0]=((((-1.0)*gconst2*r20*x9570))+((x9561*x9565))+(((-1.0)*r22*x9567)));
evalcond[1]=(cj0+((x9561*x9563))+(((-1.0)*gconst2*r10*x9570))+(((-1.0)*r12*x9567)));
evalcond[2]=((((-1.0)*sj0))+((x9561*x9566))+(((-1.0)*gconst2*r00*x9570))+(((-1.0)*r02*x9567)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9570))+(((-1.0)*x9565*x9567))+((r20*x9568)));
evalcond[4]=(((cj0*x9564))+((r00*x9568))+(((-1.0)*r02*x9570))+(((-1.0)*x9566*x9567))+(((-1.0)*cj0*x9569)));
evalcond[5]=(((sj0*x9564))+(((-1.0)*x9563*x9567))+(((-1.0)*r12*x9570))+(((-1.0)*sj0*x9569))+((r10*x9568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9571=((-1.0)*r20);
IkReal x9572=x8922;
CheckValue<IkReal> x9574 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9571),IKFAST_ATAN2_MAGTHRESH);
if(!x9574.valid){
continue;
}
IkReal x9573=((-1.0)*(x9574.value));
sj5=gconst1;
cj5=gconst2;
j5=x9573;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9573;
IkReal gconst1=(r21*x9572);
IkReal gconst2=(x9571*x9572);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9575=((-1.0)*r20);
IkReal x9576=x8922;
CheckValue<IkReal> x9578 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9575),IKFAST_ATAN2_MAGTHRESH);
if(!x9578.valid){
continue;
}
IkReal x9577=((-1.0)*(x9578.value));
sj5=gconst1;
cj5=gconst2;
j5=x9577;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9577;
IkReal gconst1=(r21*x9576);
IkReal gconst2=(x9575*x9576);
CheckValue<IkReal> x9586=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9586.valid){
continue;
}
IkReal x9579=x9586.value;
IkReal x9580=(sj3*x9579);
IkReal x9581=(r11*x9580);
IkReal x9582=(r00*x9580);
IkReal x9583=(r01*x9580);
IkReal x9584=(r10*x9580);
IkReal x9585=(r20*r21*x9580);
j4eval[0]=IKsign((((r00*r20*r21*x9581))+((r02*r12*sj3))+((r01*x9581*(r21*r21)))+((r10*x9582*(r20*r20)))+((r10*r20*r21*x9583))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9587=gconst2*gconst2;
IkReal x9588=gconst1*gconst1;
IkReal x9589=((1.0)*cj3);
IkReal x9590=((1.0)*sj3);
IkReal x9591=(r11*sj3);
IkReal x9592=(r10*sj3);
IkReal x9593=(gconst1*gconst2*r00);
IkReal x9594=(gconst1*gconst2*r01);
IkReal x9595=(r00*x9587);
IkReal x9596=(r01*x9588);
CheckValue<IkReal> x9597 = IKatan2WithCheck(IkReal((((gconst2*r02*x9591))+((gconst1*r02*x9592)))),IkReal(((((-1.0)*r11*x9590*x9595))+(((-1.0)*r10*x9590*x9593))+((x9592*x9596))+((x9591*x9594)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9597.valid){
continue;
}
CheckValue<IkReal> x9598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9589))+((cj3*r11*x9593))+(((-1.0)*r11*x9589*x9596))+((cj3*r10*x9594))+(((-1.0)*r10*x9589*x9595)))),-1);
if(!x9598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9597.value)+(((1.5707963267949)*(x9598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9599=IKsin(j4);
IkReal x9600=IKcos(j4);
IkReal x9601=(sj1*sj2);
IkReal x9602=(gconst1*sj3);
IkReal x9603=(cj3*gconst1);
IkReal x9604=(cj3*gconst2);
IkReal x9605=((1.0)*cj2);
IkReal x9606=(cj1*sj2);
IkReal x9607=(gconst2*sj3);
IkReal x9608=(cj1*x9605);
IkReal x9609=((1.0)*x9600);
IkReal x9610=((1.0)*x9599);
IkReal x9611=(gconst1*x9599);
IkReal x9612=(cj3*x9599);
IkReal x9613=(x9600*x9607);
evalcond[0]=((((-1.0)*r22*x9609))+(((-1.0)*gconst2*r20*x9610))+((r21*x9611)));
evalcond[1]=(((r01*x9611))+(((-1.0)*r02*x9609))+(((-1.0)*gconst2*r00*x9610)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9610))+((r11*x9611))+(((-1.0)*r12*x9609)));
evalcond[3]=((((-1.0)*r10*x9604*x9609))+((r10*x9602))+((r11*x9607))+((r11*x9600*x9603))+((r12*x9612)));
evalcond[4]=((((-1.0)*r11*x9602*x9609))+((r10*x9613))+((r10*x9603))+((r11*x9604))+(((-1.0)*r12*sj3*x9610)));
evalcond[5]=((((-1.0)*r20*x9604*x9609))+((cj2*sj1))+((r21*x9607))+((r22*x9612))+((r20*x9602))+x9606+((r21*x9600*x9603)));
evalcond[6]=((((-1.0)*x9608))+((r00*x9602))+(((-1.0)*r00*x9604*x9609))+((r01*x9607))+((r02*x9612))+x9601+((r01*x9600*x9603)));
evalcond[7]=(((r20*x9613))+((r21*x9604))+(((-1.0)*x9608))+(((-1.0)*r21*x9602*x9609))+((r20*x9603))+(((-1.0)*r22*sj3*x9610))+x9601);
evalcond[8]=((((-1.0)*sj1*x9605))+((r00*x9613))+((r00*x9603))+((r01*x9604))+(((-1.0)*x9606))+(((-1.0)*r02*sj3*x9610))+(((-1.0)*r01*x9602*x9609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9614=gconst2*gconst2;
IkReal x9615=gconst1*gconst1;
IkReal x9616=(gconst2*r11);
IkReal x9617=(cj3*r02);
IkReal x9618=(gconst1*r01);
IkReal x9619=(cj3*r10);
IkReal x9620=(r10*sj3);
IkReal x9621=((1.0)*gconst1*r00);
IkReal x9622=(r01*x9615);
IkReal x9623=(r00*x9614);
CheckValue<IkReal> x9624 = IKatan2WithCheck(IkReal((((x9616*x9617))+((gconst1*r10*x9617)))),IkReal((((x9619*x9622))+((cj3*x9616*x9618))+(((-1.0)*cj3*r11*x9623))+(((-1.0)*gconst2*x9619*x9621)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9624.valid){
continue;
}
CheckValue<IkReal> x9625=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9620*x9623))+(((-1.0)*sj3*x9616*x9621))+((r11*sj3*x9622))+(((-1.0)*gconst2*x9618*x9620)))),-1);
if(!x9625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9624.value)+(((1.5707963267949)*(x9625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9626=IKsin(j4);
IkReal x9627=IKcos(j4);
IkReal x9628=(sj1*sj2);
IkReal x9629=(gconst1*sj3);
IkReal x9630=(cj3*gconst1);
IkReal x9631=(cj3*gconst2);
IkReal x9632=((1.0)*cj2);
IkReal x9633=(cj1*sj2);
IkReal x9634=(gconst2*sj3);
IkReal x9635=(cj1*x9632);
IkReal x9636=((1.0)*x9627);
IkReal x9637=((1.0)*x9626);
IkReal x9638=(gconst1*x9626);
IkReal x9639=(cj3*x9626);
IkReal x9640=(x9627*x9634);
evalcond[0]=((((-1.0)*r22*x9636))+((r21*x9638))+(((-1.0)*gconst2*r20*x9637)));
evalcond[1]=(((r01*x9638))+(((-1.0)*gconst2*r00*x9637))+(((-1.0)*r02*x9636)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9637))+(((-1.0)*r12*x9636))+((r11*x9638)));
evalcond[3]=(((r11*x9627*x9630))+((r10*x9629))+(((-1.0)*r10*x9631*x9636))+((r12*x9639))+((r11*x9634)));
evalcond[4]=(((r10*x9630))+(((-1.0)*r12*sj3*x9637))+((r10*x9640))+((r11*x9631))+(((-1.0)*r11*x9629*x9636)));
evalcond[5]=(((cj2*sj1))+((r20*x9629))+(((-1.0)*r20*x9631*x9636))+((r21*x9634))+((r21*x9627*x9630))+((r22*x9639))+x9633);
evalcond[6]=(((r01*x9634))+((r00*x9629))+(((-1.0)*r00*x9631*x9636))+x9628+((r02*x9639))+((r01*x9627*x9630))+(((-1.0)*x9635)));
evalcond[7]=((((-1.0)*r21*x9629*x9636))+((r20*x9630))+((r21*x9631))+(((-1.0)*r22*sj3*x9637))+x9628+((r20*x9640))+(((-1.0)*x9635)));
evalcond[8]=(((r00*x9630))+((r01*x9631))+(((-1.0)*x9633))+(((-1.0)*r02*sj3*x9637))+((r00*x9640))+(((-1.0)*r01*x9629*x9636))+(((-1.0)*sj1*x9632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9641=((1.0)*gconst2);
CheckValue<IkReal> x9642 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9641))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9642.valid){
continue;
}
CheckValue<IkReal> x9643=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9641)))),-1);
if(!x9643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9642.value)+(((1.5707963267949)*(x9643.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9644=IKsin(j4);
IkReal x9645=IKcos(j4);
IkReal x9646=(sj1*sj2);
IkReal x9647=(gconst1*sj3);
IkReal x9648=(cj3*gconst1);
IkReal x9649=(cj3*gconst2);
IkReal x9650=((1.0)*cj2);
IkReal x9651=(cj1*sj2);
IkReal x9652=(gconst2*sj3);
IkReal x9653=(cj1*x9650);
IkReal x9654=((1.0)*x9645);
IkReal x9655=((1.0)*x9644);
IkReal x9656=(gconst1*x9644);
IkReal x9657=(cj3*x9644);
IkReal x9658=(x9645*x9652);
evalcond[0]=((((-1.0)*gconst2*r20*x9655))+((r21*x9656))+(((-1.0)*r22*x9654)));
evalcond[1]=(((r01*x9656))+(((-1.0)*gconst2*r00*x9655))+(((-1.0)*r02*x9654)));
evalcond[2]=((1.0)+((r11*x9656))+(((-1.0)*r12*x9654))+(((-1.0)*gconst2*r10*x9655)));
evalcond[3]=(((r11*x9652))+((r12*x9657))+(((-1.0)*r10*x9649*x9654))+((r10*x9647))+((r11*x9645*x9648)));
evalcond[4]=(((r11*x9649))+(((-1.0)*r11*x9647*x9654))+((r10*x9648))+((r10*x9658))+(((-1.0)*r12*sj3*x9655)));
evalcond[5]=(((cj2*sj1))+((r21*x9645*x9648))+((r21*x9652))+(((-1.0)*r20*x9649*x9654))+x9651+((r20*x9647))+((r22*x9657)));
evalcond[6]=(((r01*x9652))+((r00*x9647))+x9646+((r02*x9657))+(((-1.0)*r00*x9649*x9654))+((r01*x9645*x9648))+(((-1.0)*x9653)));
evalcond[7]=(((r20*x9658))+x9646+((r20*x9648))+(((-1.0)*r22*sj3*x9655))+((r21*x9649))+(((-1.0)*r21*x9647*x9654))+(((-1.0)*x9653)));
evalcond[8]=((((-1.0)*r02*sj3*x9655))+((r00*x9658))+((r00*x9648))+((r01*x9649))+(((-1.0)*x9651))+(((-1.0)*r01*x9647*x9654))+(((-1.0)*sj1*x9650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9659=((-1.0)*r20);
IkReal x9660=x8922;
CheckValue<IkReal> x9662 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9659),IKFAST_ATAN2_MAGTHRESH);
if(!x9662.valid){
continue;
}
IkReal x9661=((-1.0)*(x9662.value));
sj5=gconst1;
cj5=gconst2;
j5=x9661;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9661;
IkReal gconst1=(r21*x9660);
IkReal gconst2=(x9659*x9660);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9663=((-1.0)*r20);
IkReal x9664=x8922;
CheckValue<IkReal> x9666 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9663),IKFAST_ATAN2_MAGTHRESH);
if(!x9666.valid){
continue;
}
IkReal x9665=((-1.0)*(x9666.value));
sj5=gconst1;
cj5=gconst2;
j5=x9665;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9665;
IkReal gconst1=(r21*x9664);
IkReal gconst2=(x9663*x9664);
CheckValue<IkReal> x9674=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9674.valid){
continue;
}
IkReal x9667=x9674.value;
IkReal x9668=(sj3*x9667);
IkReal x9669=(r11*x9668);
IkReal x9670=(r00*x9668);
IkReal x9671=(r01*x9668);
IkReal x9672=(r10*x9668);
IkReal x9673=(r20*r21*x9668);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9669))+((r01*x9669*(r21*r21)))+((r10*r20*r21*x9671))+((r10*x9670*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9675=gconst2*gconst2;
IkReal x9676=gconst1*gconst1;
IkReal x9677=((1.0)*cj3);
IkReal x9678=((1.0)*sj3);
IkReal x9679=(r11*sj3);
IkReal x9680=(r10*sj3);
IkReal x9681=(gconst1*gconst2*r00);
IkReal x9682=(gconst1*gconst2*r01);
IkReal x9683=(r00*x9675);
IkReal x9684=(r01*x9676);
CheckValue<IkReal> x9685 = IKatan2WithCheck(IkReal((((gconst1*r02*x9680))+((gconst2*r02*x9679)))),IkReal(((((-1.0)*r10*x9678*x9681))+((x9679*x9682))+((x9680*x9684))+(((-1.0)*r11*x9678*x9683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9685.valid){
continue;
}
CheckValue<IkReal> x9686=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9677*x9683))+(((-1.0)*r02*r12*x9677))+(((-1.0)*r11*x9677*x9684))+((cj3*r11*x9681))+((cj3*r10*x9682)))),-1);
if(!x9686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9685.value)+(((1.5707963267949)*(x9686.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9687=IKsin(j4);
IkReal x9688=IKcos(j4);
IkReal x9689=(cj2*sj1);
IkReal x9690=(cj1*sj2);
IkReal x9691=(gconst1*sj3);
IkReal x9692=(cj3*gconst1);
IkReal x9693=(sj1*sj2);
IkReal x9694=(cj3*gconst2);
IkReal x9695=(cj1*cj2);
IkReal x9696=(gconst2*sj3);
IkReal x9697=((1.0)*x9688);
IkReal x9698=((1.0)*x9687);
IkReal x9699=(gconst1*x9687);
IkReal x9700=(cj3*x9687);
IkReal x9701=(x9690+x9689);
IkReal x9702=(x9688*x9696);
evalcond[0]=(((r21*x9699))+(((-1.0)*r22*x9697))+(((-1.0)*gconst2*r20*x9698)));
evalcond[1]=((((-1.0)*gconst2*r00*x9698))+(((-1.0)*r02*x9697))+((r01*x9699)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9698))+(((-1.0)*r12*x9697))+((r11*x9699)));
evalcond[3]=(((r12*x9700))+((r11*x9688*x9692))+(((-1.0)*r10*x9694*x9697))+((r11*x9696))+((r10*x9691)));
evalcond[4]=(((r10*x9702))+(((-1.0)*r11*x9691*x9697))+((r11*x9694))+((r10*x9692))+(((-1.0)*r12*sj3*x9698)));
evalcond[5]=((((-1.0)*r20*x9694*x9697))+x9701+((r21*x9696))+((r21*x9688*x9692))+((r20*x9691))+((r22*x9700)));
evalcond[6]=((((-1.0)*x9693))+(((-1.0)*r00*x9694*x9697))+((r02*x9700))+x9695+((r01*x9688*x9692))+((r00*x9691))+((r01*x9696)));
evalcond[7]=((((-1.0)*r01*x9691*x9697))+(((-1.0)*r02*sj3*x9698))+((r00*x9702))+x9701+((r00*x9692))+((r01*x9694)));
evalcond[8]=((((-1.0)*x9695))+(((-1.0)*r22*sj3*x9698))+((r20*x9702))+((r21*x9694))+x9693+(((-1.0)*r21*x9691*x9697))+((r20*x9692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9703=gconst2*gconst2;
IkReal x9704=gconst1*gconst1;
IkReal x9705=(gconst2*r11);
IkReal x9706=(cj3*r02);
IkReal x9707=(gconst1*r01);
IkReal x9708=(cj3*r10);
IkReal x9709=(r10*sj3);
IkReal x9710=((1.0)*gconst1*r00);
IkReal x9711=(r01*x9704);
IkReal x9712=(r00*x9703);
CheckValue<IkReal> x9713=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst2*x9707*x9709))+(((-1.0)*sj3*x9705*x9710))+((x9709*x9712))+((r11*sj3*x9711)))),-1);
if(!x9713.valid){
continue;
}
CheckValue<IkReal> x9714 = IKatan2WithCheck(IkReal((((gconst1*r10*x9706))+((x9705*x9706)))),IkReal((((cj3*x9705*x9707))+(((-1.0)*gconst2*x9708*x9710))+(((-1.0)*cj3*r11*x9712))+((x9708*x9711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9713.value)))+(x9714.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9715=IKsin(j4);
IkReal x9716=IKcos(j4);
IkReal x9717=(cj2*sj1);
IkReal x9718=(cj1*sj2);
IkReal x9719=(gconst1*sj3);
IkReal x9720=(cj3*gconst1);
IkReal x9721=(sj1*sj2);
IkReal x9722=(cj3*gconst2);
IkReal x9723=(cj1*cj2);
IkReal x9724=(gconst2*sj3);
IkReal x9725=((1.0)*x9716);
IkReal x9726=((1.0)*x9715);
IkReal x9727=(gconst1*x9715);
IkReal x9728=(cj3*x9715);
IkReal x9729=(x9718+x9717);
IkReal x9730=(x9716*x9724);
evalcond[0]=((((-1.0)*gconst2*r20*x9726))+(((-1.0)*r22*x9725))+((r21*x9727)));
evalcond[1]=(((r01*x9727))+(((-1.0)*r02*x9725))+(((-1.0)*gconst2*r00*x9726)));
evalcond[2]=((-1.0)+((r11*x9727))+(((-1.0)*r12*x9725))+(((-1.0)*gconst2*r10*x9726)));
evalcond[3]=(((r11*x9716*x9720))+((r11*x9724))+(((-1.0)*r10*x9722*x9725))+((r12*x9728))+((r10*x9719)));
evalcond[4]=(((r11*x9722))+(((-1.0)*r12*sj3*x9726))+(((-1.0)*r11*x9719*x9725))+((r10*x9720))+((r10*x9730)));
evalcond[5]=(((r21*x9716*x9720))+(((-1.0)*r20*x9722*x9725))+x9729+((r20*x9719))+((r21*x9724))+((r22*x9728)));
evalcond[6]=(((r01*x9724))+((r02*x9728))+x9723+((r01*x9716*x9720))+(((-1.0)*r00*x9722*x9725))+((r00*x9719))+(((-1.0)*x9721)));
evalcond[7]=(((r01*x9722))+(((-1.0)*r02*sj3*x9726))+x9729+(((-1.0)*r01*x9719*x9725))+((r00*x9720))+((r00*x9730)));
evalcond[8]=((((-1.0)*r21*x9719*x9725))+((r20*x9730))+x9721+((r20*x9720))+(((-1.0)*r22*sj3*x9726))+((r21*x9722))+(((-1.0)*x9723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9731 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9731.valid){
continue;
}
CheckValue<IkReal> x9732=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9731.value)+(((1.5707963267949)*(x9732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9733=IKsin(j4);
IkReal x9734=IKcos(j4);
IkReal x9735=(cj2*sj1);
IkReal x9736=(cj1*sj2);
IkReal x9737=(gconst1*sj3);
IkReal x9738=(cj3*gconst1);
IkReal x9739=(sj1*sj2);
IkReal x9740=(cj3*gconst2);
IkReal x9741=(cj1*cj2);
IkReal x9742=(gconst2*sj3);
IkReal x9743=((1.0)*x9734);
IkReal x9744=((1.0)*x9733);
IkReal x9745=(gconst1*x9733);
IkReal x9746=(cj3*x9733);
IkReal x9747=(x9735+x9736);
IkReal x9748=(x9734*x9742);
evalcond[0]=(((r21*x9745))+(((-1.0)*gconst2*r20*x9744))+(((-1.0)*r22*x9743)));
evalcond[1]=((((-1.0)*gconst2*r00*x9744))+(((-1.0)*r02*x9743))+((r01*x9745)));
evalcond[2]=((-1.0)+((r11*x9745))+(((-1.0)*gconst2*r10*x9744))+(((-1.0)*r12*x9743)));
evalcond[3]=(((r11*x9742))+((r11*x9734*x9738))+(((-1.0)*r10*x9740*x9743))+((r12*x9746))+((r10*x9737)));
evalcond[4]=(((r11*x9740))+((r10*x9748))+(((-1.0)*r12*sj3*x9744))+(((-1.0)*r11*x9737*x9743))+((r10*x9738)));
evalcond[5]=(((r21*x9742))+((r22*x9746))+((r20*x9737))+x9747+((r21*x9734*x9738))+(((-1.0)*r20*x9740*x9743)));
evalcond[6]=(((r02*x9746))+x9741+((r01*x9734*x9738))+((r01*x9742))+(((-1.0)*r00*x9740*x9743))+(((-1.0)*x9739))+((r00*x9737)));
evalcond[7]=((((-1.0)*r01*x9737*x9743))+(((-1.0)*r02*sj3*x9744))+x9747+((r01*x9740))+((r00*x9748))+((r00*x9738)));
evalcond[8]=((((-1.0)*r21*x9737*x9743))+((r21*x9740))+((r20*x9738))+(((-1.0)*x9741))+x9739+((r20*x9748))+(((-1.0)*r22*sj3*x9744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9749=((-1.0)*r20);
IkReal x9750=x8922;
CheckValue<IkReal> x9752 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9749),IKFAST_ATAN2_MAGTHRESH);
if(!x9752.valid){
continue;
}
IkReal x9751=((-1.0)*(x9752.value));
sj5=gconst1;
cj5=gconst2;
j5=x9751;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9751;
IkReal gconst1=(r21*x9750);
IkReal gconst2=(x9749*x9750);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9753=((-1.0)*r20);
IkReal x9754=x8922;
CheckValue<IkReal> x9756 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9753),IKFAST_ATAN2_MAGTHRESH);
if(!x9756.valid){
continue;
}
IkReal x9755=((-1.0)*(x9756.value));
sj5=gconst1;
cj5=gconst2;
j5=x9755;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9755;
IkReal gconst1=(r21*x9754);
IkReal gconst2=(x9753*x9754);
CheckValue<IkReal> x9764=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9764.valid){
continue;
}
IkReal x9757=x9764.value;
IkReal x9758=(sj3*x9757);
IkReal x9759=(r11*x9758);
IkReal x9760=(r00*x9758);
IkReal x9761=(r01*x9758);
IkReal x9762=(r10*x9758);
IkReal x9763=(r20*r21*x9758);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9760*(r20*r20)))+((r00*r20*r21*x9759))+((r10*r20*r21*x9761))+((r01*x9759*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9765=gconst1*gconst1;
IkReal x9766=gconst2*gconst2;
IkReal x9767=((1.0)*cj3);
IkReal x9768=(gconst2*r10);
IkReal x9769=(r01*sj3);
IkReal x9770=(gconst1*r00*sj3);
IkReal x9771=(gconst1*gconst2*r11);
IkReal x9772=(r10*x9766);
IkReal x9773=(r11*x9765);
CheckValue<IkReal> x9774 = IKatan2WithCheck(IkReal((((r12*x9770))+((gconst2*r12*x9769)))),IkReal((((r00*sj3*x9773))+((x9769*x9771))+(((-1.0)*x9769*x9772))+(((-1.0)*x9768*x9770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9774.valid){
continue;
}
CheckValue<IkReal> x9775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9767))+(((-1.0)*r01*x9767*x9773))+((cj3*gconst1*r01*x9768))+(((-1.0)*r00*x9767*x9772))+((cj3*r00*x9771)))),-1);
if(!x9775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9774.value)+(((1.5707963267949)*(x9775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9776=IKsin(j4);
IkReal x9777=IKcos(j4);
IkReal x9778=(sj1*sj2);
IkReal x9779=(gconst1*sj3);
IkReal x9780=(cj3*gconst1);
IkReal x9781=(cj3*gconst2);
IkReal x9782=((1.0)*cj2);
IkReal x9783=(cj1*sj2);
IkReal x9784=(gconst2*sj3);
IkReal x9785=(cj1*x9782);
IkReal x9786=((1.0)*x9777);
IkReal x9787=((1.0)*x9776);
IkReal x9788=(gconst1*x9776);
IkReal x9789=(cj3*x9776);
IkReal x9790=(x9777*x9784);
evalcond[0]=(((r21*x9788))+(((-1.0)*gconst2*r20*x9787))+(((-1.0)*r22*x9786)));
evalcond[1]=((((-1.0)*r12*x9786))+((r11*x9788))+(((-1.0)*gconst2*r10*x9787)));
evalcond[2]=((-1.0)+((r01*x9788))+(((-1.0)*gconst2*r00*x9787))+(((-1.0)*r02*x9786)));
evalcond[3]=((((-1.0)*r00*x9781*x9786))+((r01*x9784))+((r00*x9779))+((r02*x9789))+((r01*x9777*x9780)));
evalcond[4]=(((r00*x9780))+(((-1.0)*r02*sj3*x9787))+((r01*x9781))+((r00*x9790))+(((-1.0)*r01*x9779*x9786)));
evalcond[5]=(((cj2*sj1))+((r21*x9784))+((r22*x9789))+(((-1.0)*r20*x9781*x9786))+x9783+((r21*x9777*x9780))+((r20*x9779)));
evalcond[6]=(((r10*x9779))+x9778+((r11*x9777*x9780))+((r11*x9784))+(((-1.0)*r10*x9781*x9786))+((r12*x9789))+(((-1.0)*x9785)));
evalcond[7]=(((r21*x9781))+((r20*x9790))+(((-1.0)*r22*sj3*x9787))+x9778+(((-1.0)*r21*x9779*x9786))+((r20*x9780))+(((-1.0)*x9785)));
evalcond[8]=(((r10*x9790))+(((-1.0)*sj1*x9782))+(((-1.0)*r12*sj3*x9787))+((r10*x9780))+((r11*x9781))+(((-1.0)*x9783))+(((-1.0)*r11*x9779*x9786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9791=gconst2*gconst2;
IkReal x9792=gconst1*gconst1;
IkReal x9793=(gconst1*r00);
IkReal x9794=(r11*sj3);
IkReal x9795=((1.0)*gconst2);
IkReal x9796=(cj3*r12);
IkReal x9797=(cj3*r11);
IkReal x9798=(gconst2*r01);
IkReal x9799=(cj3*r10);
IkReal x9800=(r10*sj3);
CheckValue<IkReal> x9801=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x9793*x9794*x9795))+(((-1.0)*gconst1*r01*x9795*x9800))+((r01*x9792*x9794))+((r00*x9791*x9800)))),-1);
if(!x9801.valid){
continue;
}
CheckValue<IkReal> x9802 = IKatan2WithCheck(IkReal((((x9793*x9796))+((x9796*x9798)))),IkReal(((((-1.0)*r01*x9791*x9799))+((r00*x9792*x9797))+((gconst1*x9797*x9798))+(((-1.0)*x9793*x9795*x9799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9801.value)))+(x9802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9803=IKsin(j4);
IkReal x9804=IKcos(j4);
IkReal x9805=(sj1*sj2);
IkReal x9806=(gconst1*sj3);
IkReal x9807=(cj3*gconst1);
IkReal x9808=(cj3*gconst2);
IkReal x9809=((1.0)*cj2);
IkReal x9810=(cj1*sj2);
IkReal x9811=(gconst2*sj3);
IkReal x9812=(cj1*x9809);
IkReal x9813=((1.0)*x9804);
IkReal x9814=((1.0)*x9803);
IkReal x9815=(gconst1*x9803);
IkReal x9816=(cj3*x9803);
IkReal x9817=(x9804*x9811);
evalcond[0]=(((r21*x9815))+(((-1.0)*r22*x9813))+(((-1.0)*gconst2*r20*x9814)));
evalcond[1]=((((-1.0)*gconst2*r10*x9814))+((r11*x9815))+(((-1.0)*r12*x9813)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9814))+(((-1.0)*r02*x9813))+((r01*x9815)));
evalcond[3]=(((r00*x9806))+(((-1.0)*r00*x9808*x9813))+((r02*x9816))+((r01*x9804*x9807))+((r01*x9811)));
evalcond[4]=(((r00*x9807))+(((-1.0)*r01*x9806*x9813))+(((-1.0)*r02*sj3*x9814))+((r01*x9808))+((r00*x9817)));
evalcond[5]=((((-1.0)*r20*x9808*x9813))+((cj2*sj1))+((r21*x9811))+((r22*x9816))+((r21*x9804*x9807))+((r20*x9806))+x9810);
evalcond[6]=(((r10*x9806))+(((-1.0)*x9812))+((r12*x9816))+((r11*x9811))+((r11*x9804*x9807))+(((-1.0)*r10*x9808*x9813))+x9805);
evalcond[7]=(((r21*x9808))+(((-1.0)*r21*x9806*x9813))+(((-1.0)*x9812))+(((-1.0)*r22*sj3*x9814))+((r20*x9807))+x9805+((r20*x9817)));
evalcond[8]=(((r10*x9807))+(((-1.0)*x9810))+((r11*x9808))+(((-1.0)*r12*sj3*x9814))+(((-1.0)*sj1*x9809))+(((-1.0)*r11*x9806*x9813))+((r10*x9817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9818=((1.0)*gconst2);
CheckValue<IkReal> x9819 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9819.valid){
continue;
}
CheckValue<IkReal> x9820=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9818)))),-1);
if(!x9820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9819.value)+(((1.5707963267949)*(x9820.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9821=IKsin(j4);
IkReal x9822=IKcos(j4);
IkReal x9823=(sj1*sj2);
IkReal x9824=(gconst1*sj3);
IkReal x9825=(cj3*gconst1);
IkReal x9826=(cj3*gconst2);
IkReal x9827=((1.0)*cj2);
IkReal x9828=(cj1*sj2);
IkReal x9829=(gconst2*sj3);
IkReal x9830=(cj1*x9827);
IkReal x9831=((1.0)*x9822);
IkReal x9832=((1.0)*x9821);
IkReal x9833=(gconst1*x9821);
IkReal x9834=(cj3*x9821);
IkReal x9835=(x9822*x9829);
evalcond[0]=(((r21*x9833))+(((-1.0)*r22*x9831))+(((-1.0)*gconst2*r20*x9832)));
evalcond[1]=(((r11*x9833))+(((-1.0)*gconst2*r10*x9832))+(((-1.0)*r12*x9831)));
evalcond[2]=((-1.0)+((r01*x9833))+(((-1.0)*r02*x9831))+(((-1.0)*gconst2*r00*x9832)));
evalcond[3]=((((-1.0)*r00*x9826*x9831))+((r01*x9822*x9825))+((r00*x9824))+((r01*x9829))+((r02*x9834)));
evalcond[4]=((((-1.0)*r02*sj3*x9832))+((r00*x9835))+((r00*x9825))+((r01*x9826))+(((-1.0)*r01*x9824*x9831)));
evalcond[5]=(((r20*x9824))+(((-1.0)*r20*x9826*x9831))+((cj2*sj1))+((r22*x9834))+((r21*x9829))+((r21*x9822*x9825))+x9828);
evalcond[6]=((((-1.0)*x9830))+((r11*x9829))+((r12*x9834))+(((-1.0)*r10*x9826*x9831))+((r11*x9822*x9825))+x9823+((r10*x9824)));
evalcond[7]=((((-1.0)*x9830))+((r20*x9825))+(((-1.0)*r22*sj3*x9832))+((r21*x9826))+((r20*x9835))+(((-1.0)*r21*x9824*x9831))+x9823);
evalcond[8]=(((r10*x9835))+((r11*x9826))+(((-1.0)*r12*sj3*x9832))+(((-1.0)*x9828))+((r10*x9825))+(((-1.0)*sj1*x9827))+(((-1.0)*r11*x9824*x9831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9836=((-1.0)*r20);
IkReal x9837=x8922;
CheckValue<IkReal> x9839 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9836),IKFAST_ATAN2_MAGTHRESH);
if(!x9839.valid){
continue;
}
IkReal x9838=((-1.0)*(x9839.value));
sj5=gconst1;
cj5=gconst2;
j5=x9838;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9838;
IkReal gconst1=(r21*x9837);
IkReal gconst2=(x9836*x9837);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9840=((-1.0)*r20);
IkReal x9841=x8922;
CheckValue<IkReal> x9843 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9840),IKFAST_ATAN2_MAGTHRESH);
if(!x9843.valid){
continue;
}
IkReal x9842=((-1.0)*(x9843.value));
sj5=gconst1;
cj5=gconst2;
j5=x9842;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9842;
IkReal gconst1=(r21*x9841);
IkReal gconst2=(x9840*x9841);
CheckValue<IkReal> x9851=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9851.valid){
continue;
}
IkReal x9844=x9851.value;
IkReal x9845=(sj3*x9844);
IkReal x9846=(r11*x9845);
IkReal x9847=(r00*x9845);
IkReal x9848=(r01*x9845);
IkReal x9849=(r10*x9845);
IkReal x9850=(r20*r21*x9845);
j4eval[0]=IKsign((((r00*r20*r21*x9846))+((r02*r12*sj3))+((r10*x9847*(r20*r20)))+((r01*x9846*(r21*r21)))+((r10*r20*r21*x9848))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9852=gconst1*gconst1;
IkReal x9853=gconst2*gconst2;
IkReal x9854=((1.0)*cj3);
IkReal x9855=(gconst2*r10);
IkReal x9856=(r01*sj3);
IkReal x9857=(gconst1*r00*sj3);
IkReal x9858=(gconst1*gconst2*r11);
IkReal x9859=(r10*x9853);
IkReal x9860=(r11*x9852);
CheckValue<IkReal> x9861=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9858))+(((-1.0)*r02*r12*x9854))+((cj3*gconst1*r01*x9855))+(((-1.0)*r00*x9854*x9859))+(((-1.0)*r01*x9854*x9860)))),-1);
if(!x9861.valid){
continue;
}
CheckValue<IkReal> x9862 = IKatan2WithCheck(IkReal((((gconst2*r12*x9856))+((r12*x9857)))),IkReal((((x9856*x9858))+(((-1.0)*x9856*x9859))+((r00*sj3*x9860))+(((-1.0)*x9855*x9857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9861.value)))+(x9862.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9863=IKsin(j4);
IkReal x9864=IKcos(j4);
IkReal x9865=(cj2*sj1);
IkReal x9866=(cj1*sj2);
IkReal x9867=(gconst1*sj3);
IkReal x9868=(cj3*gconst1);
IkReal x9869=(sj1*sj2);
IkReal x9870=(cj3*gconst2);
IkReal x9871=(cj1*cj2);
IkReal x9872=(gconst2*sj3);
IkReal x9873=((1.0)*x9864);
IkReal x9874=((1.0)*x9863);
IkReal x9875=(gconst1*x9863);
IkReal x9876=(cj3*x9863);
IkReal x9877=(x9865+x9866);
IkReal x9878=(x9864*x9872);
evalcond[0]=((((-1.0)*gconst2*r20*x9874))+((r21*x9875))+(((-1.0)*r22*x9873)));
evalcond[1]=((((-1.0)*gconst2*r10*x9874))+((r11*x9875))+(((-1.0)*r12*x9873)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9873))+(((-1.0)*gconst2*r00*x9874))+((r01*x9875)));
evalcond[3]=(((r02*x9876))+((r01*x9864*x9868))+((r00*x9867))+(((-1.0)*r00*x9870*x9873))+((r01*x9872)));
evalcond[4]=(((r00*x9868))+(((-1.0)*r02*sj3*x9874))+((r00*x9878))+((r01*x9870))+(((-1.0)*r01*x9867*x9873)));
evalcond[5]=(((r21*x9864*x9868))+((r21*x9872))+((r22*x9876))+(((-1.0)*r20*x9870*x9873))+((r20*x9867))+x9877);
evalcond[6]=(((r12*x9876))+((r11*x9864*x9868))+(((-1.0)*x9869))+(((-1.0)*r10*x9870*x9873))+((r10*x9867))+((r11*x9872))+x9871);
evalcond[7]=((((-1.0)*r12*sj3*x9874))+((r10*x9878))+(((-1.0)*r11*x9867*x9873))+((r10*x9868))+((r11*x9870))+x9877);
evalcond[8]=((((-1.0)*r21*x9867*x9873))+(((-1.0)*x9871))+((r21*x9870))+((r20*x9878))+(((-1.0)*r22*sj3*x9874))+((r20*x9868))+x9869);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9879=gconst2*gconst2;
IkReal x9880=gconst1*gconst1;
IkReal x9881=(gconst1*r00);
IkReal x9882=(r11*sj3);
IkReal x9883=((1.0)*gconst2);
IkReal x9884=(cj3*r12);
IkReal x9885=(cj3*r11);
IkReal x9886=(gconst2*r01);
IkReal x9887=(cj3*r10);
IkReal x9888=(r10*sj3);
CheckValue<IkReal> x9889 = IKatan2WithCheck(IkReal((((x9884*x9886))+((x9881*x9884)))),IkReal((((gconst1*x9885*x9886))+(((-1.0)*x9881*x9883*x9887))+(((-1.0)*r01*x9879*x9887))+((r00*x9880*x9885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9889.valid){
continue;
}
CheckValue<IkReal> x9890=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9883*x9888))+(((-1.0)*x9881*x9882*x9883))+((r00*x9879*x9888))+((r01*x9880*x9882)))),-1);
if(!x9890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9889.value)+(((1.5707963267949)*(x9890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9891=IKsin(j4);
IkReal x9892=IKcos(j4);
IkReal x9893=(cj2*sj1);
IkReal x9894=(cj1*sj2);
IkReal x9895=(gconst1*sj3);
IkReal x9896=(cj3*gconst1);
IkReal x9897=(sj1*sj2);
IkReal x9898=(cj3*gconst2);
IkReal x9899=(cj1*cj2);
IkReal x9900=(gconst2*sj3);
IkReal x9901=((1.0)*x9892);
IkReal x9902=((1.0)*x9891);
IkReal x9903=(gconst1*x9891);
IkReal x9904=(cj3*x9891);
IkReal x9905=(x9894+x9893);
IkReal x9906=(x9892*x9900);
evalcond[0]=((((-1.0)*gconst2*r20*x9902))+(((-1.0)*r22*x9901))+((r21*x9903)));
evalcond[1]=((((-1.0)*r12*x9901))+((r11*x9903))+(((-1.0)*gconst2*r10*x9902)));
evalcond[2]=((1.0)+((r01*x9903))+(((-1.0)*r02*x9901))+(((-1.0)*gconst2*r00*x9902)));
evalcond[3]=(((r02*x9904))+((r00*x9895))+((r01*x9900))+((r01*x9892*x9896))+(((-1.0)*r00*x9898*x9901)));
evalcond[4]=(((r01*x9898))+((r00*x9896))+(((-1.0)*r01*x9895*x9901))+((r00*x9906))+(((-1.0)*r02*sj3*x9902)));
evalcond[5]=(((r21*x9892*x9896))+(((-1.0)*r20*x9898*x9901))+((r22*x9904))+((r21*x9900))+((r20*x9895))+x9905);
evalcond[6]=(((r12*x9904))+((r11*x9900))+((r11*x9892*x9896))+(((-1.0)*x9897))+((r10*x9895))+x9899+(((-1.0)*r10*x9898*x9901)));
evalcond[7]=(((r11*x9898))+x9905+((r10*x9896))+((r10*x9906))+(((-1.0)*r12*sj3*x9902))+(((-1.0)*r11*x9895*x9901)));
evalcond[8]=((((-1.0)*r22*sj3*x9902))+((r20*x9906))+((r21*x9898))+(((-1.0)*x9899))+((r20*x9896))+(((-1.0)*r21*x9895*x9901))+x9897);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9907 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9907.valid){
continue;
}
CheckValue<IkReal> x9908=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9907.value)+(((1.5707963267949)*(x9908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9909=IKsin(j4);
IkReal x9910=IKcos(j4);
IkReal x9911=(cj2*sj1);
IkReal x9912=(cj1*sj2);
IkReal x9913=(gconst1*sj3);
IkReal x9914=(cj3*gconst1);
IkReal x9915=(sj1*sj2);
IkReal x9916=(cj3*gconst2);
IkReal x9917=(cj1*cj2);
IkReal x9918=(gconst2*sj3);
IkReal x9919=((1.0)*x9910);
IkReal x9920=((1.0)*x9909);
IkReal x9921=(gconst1*x9909);
IkReal x9922=(cj3*x9909);
IkReal x9923=(x9911+x9912);
IkReal x9924=(x9910*x9918);
evalcond[0]=((((-1.0)*gconst2*r20*x9920))+(((-1.0)*r22*x9919))+((r21*x9921)));
evalcond[1]=((((-1.0)*gconst2*r10*x9920))+(((-1.0)*r12*x9919))+((r11*x9921)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9919))+(((-1.0)*gconst2*r00*x9920))+((r01*x9921)));
evalcond[3]=(((r02*x9922))+((r01*x9918))+((r01*x9910*x9914))+((r00*x9913))+(((-1.0)*r00*x9916*x9919)));
evalcond[4]=((((-1.0)*r01*x9913*x9919))+((r01*x9916))+((r00*x9914))+(((-1.0)*r02*sj3*x9920))+((r00*x9924)));
evalcond[5]=(((r20*x9913))+(((-1.0)*r20*x9916*x9919))+((r21*x9910*x9914))+((r21*x9918))+x9923+((r22*x9922)));
evalcond[6]=((((-1.0)*r10*x9916*x9919))+(((-1.0)*x9915))+((r11*x9918))+((r11*x9910*x9914))+((r12*x9922))+x9917+((r10*x9913)));
evalcond[7]=(((r10*x9924))+(((-1.0)*r11*x9913*x9919))+((r11*x9916))+(((-1.0)*r12*sj3*x9920))+x9923+((r10*x9914)));
evalcond[8]=(((r20*x9914))+(((-1.0)*x9917))+((r20*x9924))+(((-1.0)*r21*x9913*x9919))+((r21*x9916))+x9915+(((-1.0)*r22*sj3*x9920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9925=((-1.0)*r20);
IkReal x9926=((-1.0)*px);
CheckValue<IkReal> x9928 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9925),IKFAST_ATAN2_MAGTHRESH);
if(!x9928.valid){
continue;
}
IkReal x9927=((-1.0)*(x9928.value));
sj5=gconst1;
cj5=gconst2;
j5=x9927;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9926);
rxp1_1=(px*r21);
rxp1_2=(r11*x9926);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9927;
IkReal gconst1=r21;
IkReal gconst2=x9925;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9929=((-1.0)*r20);
IkReal x9930=((-1.0)*px);
CheckValue<IkReal> x9932 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9929),IKFAST_ATAN2_MAGTHRESH);
if(!x9932.valid){
continue;
}
IkReal x9931=((-1.0)*(x9932.value));
sj5=gconst1;
cj5=gconst2;
j5=x9931;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9930);
rxp1_1=(px*r21);
rxp1_2=(r11*x9930);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9931;
IkReal gconst1=r21;
IkReal gconst2=x9929;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9933=((-1.0)*r20);
IkReal x9934=((-1.0)*px);
CheckValue<IkReal> x9936 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9933),IKFAST_ATAN2_MAGTHRESH);
if(!x9936.valid){
continue;
}
IkReal x9935=((-1.0)*(x9936.value));
sj5=gconst1;
cj5=gconst2;
j5=x9935;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9934);
rxp1_1=(px*r21);
rxp1_2=(r11*x9934);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9935;
IkReal gconst1=r21;
IkReal gconst2=x9933;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9937=((-1.0)*r20);
IkReal x9938=((-1.0)*px);
CheckValue<IkReal> x9940 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9937),IKFAST_ATAN2_MAGTHRESH);
if(!x9940.valid){
continue;
}
IkReal x9939=((-1.0)*(x9940.value));
sj5=gconst1;
cj5=gconst2;
j5=x9939;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9938);
rxp1_1=(px*r21);
rxp1_2=(r11*x9938);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9939;
IkReal gconst1=r21;
IkReal gconst2=x9937;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9941=((-1.0)*r20);
IkReal x9942=((-1.0)*px);
CheckValue<IkReal> x9944 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9941),IKFAST_ATAN2_MAGTHRESH);
if(!x9944.valid){
continue;
}
IkReal x9943=((-1.0)*(x9944.value));
sj5=gconst1;
cj5=gconst2;
j5=x9943;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9942);
rxp1_1=(px*r21);
rxp1_2=(r11*x9942);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9943;
IkReal gconst1=r21;
IkReal gconst2=x9941;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9945=((-1.0)*r20);
IkReal x9946=((-1.0)*px);
CheckValue<IkReal> x9948 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9945),IKFAST_ATAN2_MAGTHRESH);
if(!x9948.valid){
continue;
}
IkReal x9947=((-1.0)*(x9948.value));
sj5=gconst1;
cj5=gconst2;
j5=x9947;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9946);
rxp1_1=(px*r21);
rxp1_2=(r11*x9946);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9947;
IkReal gconst1=r21;
IkReal gconst2=x9945;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9951=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9951.valid){
continue;
}
IkReal x9949=x9951.value;
IkReal x9950=(sj0*x9949);
cj4array[0]=(((cj1*sj2*x9950))+((cj2*sj1*x9950)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9952=IKsin(j4);
IkReal x9953=IKcos(j4);
IkReal x9954=(gconst1*x9952);
IkReal x9955=((1.0)*x9953);
IkReal x9956=((1.0)*gconst2*x9952);
evalcond[0]=((-1.0)*r02*x9952);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9955)));
evalcond[2]=((((-1.0)*r20*x9956))+((r21*x9954)));
evalcond[3]=(((r11*x9954))+(((-1.0)*r10*x9956)));
evalcond[4]=((((-1.0)*gconst1*r21*x9955))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst2*r20*x9953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9958=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9958.valid){
continue;
}
IkReal x9957=x9958.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9957))+((cj1*cj2*x9957)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9959=IKsin(j4);
IkReal x9960=IKcos(j4);
IkReal x9961=(gconst2*r10);
IkReal x9962=((1.0)*sj0);
IkReal x9963=((1.0)*x9959);
IkReal x9964=(gconst1*x9959);
IkReal x9965=((1.0)*x9960);
evalcond[0]=((-1.0)*r02*x9959);
evalcond[1]=((((-1.0)*x9962))+(((-1.0)*r02*x9965)));
evalcond[2]=(((r21*x9964))+(((-1.0)*gconst2*r20*x9963)));
evalcond[3]=((((-1.0)*x9961*x9963))+((r11*x9964)));
evalcond[4]=((((-1.0)*cj2*sj1*x9962))+(((-1.0)*cj1*sj2*x9962))+(((-1.0)*gconst1*r11*x9965))+((x9960*x9961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9966=IKPowWithIntegerCheck(r02,-1);
if(!x9966.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9966.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9967=IKsin(j4);
IkReal x9968=IKcos(j4);
IkReal x9969=(gconst2*r10);
IkReal x9970=((1.0)*sj0);
IkReal x9971=(gconst1*r11);
IkReal x9972=(gconst1*r21);
IkReal x9973=(gconst2*r20);
IkReal x9974=((1.0)*x9967);
IkReal x9975=((1.0)*x9968);
evalcond[0]=((-1.0)*r02*x9967);
evalcond[1]=((((-1.0)*x9973*x9974))+((x9967*x9972)));
evalcond[2]=((((-1.0)*x9969*x9974))+((x9967*x9971)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9972*x9975))+((x9968*x9973)));
evalcond[4]=(((x9968*x9969))+(((-1.0)*cj2*sj1*x9970))+(((-1.0)*cj1*sj2*x9970))+(((-1.0)*x9971*x9975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9976=((-1.0)*r20);
IkReal x9977=((-1.0)*px);
CheckValue<IkReal> x9979 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9976),IKFAST_ATAN2_MAGTHRESH);
if(!x9979.valid){
continue;
}
IkReal x9978=((-1.0)*(x9979.value));
sj5=gconst1;
cj5=gconst2;
j5=x9978;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9977);
rxp1_1=(px*r21);
rxp1_2=(r11*x9977);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9978;
IkReal gconst1=r21;
IkReal gconst2=x9976;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9980=((-1.0)*r20);
IkReal x9981=((-1.0)*px);
CheckValue<IkReal> x9983 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9980),IKFAST_ATAN2_MAGTHRESH);
if(!x9983.valid){
continue;
}
IkReal x9982=((-1.0)*(x9983.value));
sj5=gconst1;
cj5=gconst2;
j5=x9982;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9981);
rxp1_1=(px*r21);
rxp1_2=(r11*x9981);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9982;
IkReal gconst1=r21;
IkReal gconst2=x9980;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9984=((-1.0)*r20);
IkReal x9985=((-1.0)*px);
CheckValue<IkReal> x9987 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9984),IKFAST_ATAN2_MAGTHRESH);
if(!x9987.valid){
continue;
}
IkReal x9986=((-1.0)*(x9987.value));
sj5=gconst1;
cj5=gconst2;
j5=x9986;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9985);
rxp1_1=(px*r21);
rxp1_2=(r11*x9985);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9986;
IkReal gconst1=r21;
IkReal gconst2=x9984;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9990=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9990.valid){
continue;
}
IkReal x9988=x9990.value;
IkReal x9989=(sj0*x9988);
cj4array[0]=(((cj1*sj2*x9989))+((cj2*sj1*x9989)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9991=IKsin(j4);
IkReal x9992=IKcos(j4);
IkReal x9993=((1.0)*gconst2);
IkReal x9994=(gconst1*r21);
evalcond[0]=(r02*x9991);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9992)));
evalcond[2]=(((x9991*x9994))+(((-1.0)*r20*x9991*x9993)));
evalcond[3]=((((-1.0)*r10*x9991*x9993))+((gconst1*r11*x9991)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x9992*x9993))+((x9992*x9994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9996=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9996.valid){
continue;
}
IkReal x9995=x9996.value;
cj4array[0]=(((cj1*cj2*x9995))+(((-1.0)*sj1*sj2*x9995)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9997=IKsin(j4);
IkReal x9998=IKcos(j4);
IkReal x9999=((1.0)*sj0);
IkReal x10000=(gconst1*x9997);
IkReal x10001=((1.0)*x9998);
IkReal x10002=((1.0)*gconst2*x9997);
evalcond[0]=(r02*x9997);
evalcond[1]=((((-1.0)*r02*x10001))+(((-1.0)*x9999)));
evalcond[2]=((((-1.0)*r20*x10002))+((r21*x10000)));
evalcond[3]=(((r11*x10000))+(((-1.0)*r10*x10002)));
evalcond[4]=(((gconst1*r11*x9998))+(((-1.0)*cj2*sj1*x9999))+(((-1.0)*cj1*sj2*x9999))+(((-1.0)*gconst2*r10*x10001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10003=IKPowWithIntegerCheck(r02,-1);
if(!x10003.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10003.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10004=IKsin(j4);
IkReal x10005=IKcos(j4);
IkReal x10006=(gconst1*r21);
IkReal x10007=((1.0)*sj0);
IkReal x10008=(gconst1*r11);
IkReal x10009=((1.0)*gconst2*r10);
IkReal x10010=((1.0)*gconst2*r20);
evalcond[0]=(r02*x10004);
evalcond[1]=(((x10004*x10006))+(((-1.0)*x10004*x10010)));
evalcond[2]=((((-1.0)*x10004*x10009))+((x10004*x10008)));
evalcond[3]=((((-1.0)*x10005*x10010))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10005*x10006)));
evalcond[4]=((((-1.0)*x10005*x10009))+(((-1.0)*cj2*sj1*x10007))+(((-1.0)*cj1*sj2*x10007))+((x10005*x10008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10012=IKPowWithIntegerCheck(r02,-1);
if(!x10012.valid){
continue;
}
IkReal x10011=x10012.value;
CheckValue<IkReal> x10013=IKPowWithIntegerCheck(cj3,-1);
if(!x10013.valid){
continue;
}
if( IKabs((x10011*(x10013.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x10011)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10011*(x10013.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x10011))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10011*(x10013.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x10011));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10014=IKsin(j4);
IkReal x10015=IKcos(j4);
IkReal x10016=(gconst2*r10);
IkReal x10017=(gconst1*r11);
IkReal x10018=(sj1*sj2);
IkReal x10019=(gconst2*r20);
IkReal x10020=(cj2*sj1);
IkReal x10021=((1.0)*sj0);
IkReal x10022=(gconst1*r20);
IkReal x10023=(gconst2*r11);
IkReal x10024=(gconst1*r21);
IkReal x10025=((1.0)*cj0);
IkReal x10026=(gconst1*r10);
IkReal x10027=(cj1*sj2);
IkReal x10028=(gconst2*r21);
IkReal x10029=(sj3*x10015);
IkReal x10030=((1.0)*cj1*cj2);
IkReal x10031=(cj3*x10015);
IkReal x10032=(r02*x10014);
IkReal x10033=((1.0)*x10014);
evalcond[0]=((((-1.0)*x10021))+(((-1.0)*r02*x10015)));
evalcond[1]=((((-1.0)*x10019*x10033))+((x10014*x10024)));
evalcond[2]=(cj0+((x10014*x10017))+(((-1.0)*x10016*x10033)));
evalcond[3]=(((cj0*x10018))+((cj3*x10032))+(((-1.0)*cj1*cj2*x10025)));
evalcond[4]=((((-1.0)*sj3*x10032))+(((-1.0)*x10025*x10027))+(((-1.0)*x10020*x10025)));
evalcond[5]=(((x10024*x10031))+((sj3*x10028))+((sj3*x10022))+(((-1.0)*x10019*x10031))+x10027+x10020);
evalcond[6]=(((x10019*x10029))+x10018+(((-1.0)*x10030))+((cj3*x10022))+((cj3*x10028))+(((-1.0)*x10024*x10029)));
evalcond[7]=((((-1.0)*x10016*x10031))+((sj3*x10026))+((sj3*x10023))+((x10017*x10031))+(((-1.0)*cj1*cj2*x10021))+((sj0*x10018)));
evalcond[8]=((((-1.0)*x10017*x10029))+((x10016*x10029))+(((-1.0)*x10021*x10027))+((cj3*x10023))+((cj3*x10026))+(((-1.0)*x10020*x10021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10034=((1.0)*sj3);
IkReal x10035=((1.0)*gconst2);
CheckValue<IkReal> x10036=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10035))),-1);
if(!x10036.valid){
continue;
}
CheckValue<IkReal> x10037=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10035))),-1);
if(!x10037.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10036.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10037.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10034))+(((-1.0)*gconst2*r21*x10034)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10036.value)))+IKsqr(((x10037.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10034))+(((-1.0)*gconst2*r21*x10034))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10036.value)), ((x10037.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10034))+(((-1.0)*gconst2*r21*x10034))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10038=IKsin(j4);
IkReal x10039=IKcos(j4);
IkReal x10040=(gconst2*r10);
IkReal x10041=(gconst1*r11);
IkReal x10042=(sj1*sj2);
IkReal x10043=(gconst2*r20);
IkReal x10044=(cj2*sj1);
IkReal x10045=((1.0)*sj0);
IkReal x10046=(gconst1*r20);
IkReal x10047=(gconst2*r11);
IkReal x10048=(gconst1*r21);
IkReal x10049=((1.0)*cj0);
IkReal x10050=(gconst1*r10);
IkReal x10051=(cj1*sj2);
IkReal x10052=(gconst2*r21);
IkReal x10053=(sj3*x10039);
IkReal x10054=((1.0)*cj1*cj2);
IkReal x10055=(cj3*x10039);
IkReal x10056=(r02*x10038);
IkReal x10057=((1.0)*x10038);
evalcond[0]=((((-1.0)*r02*x10039))+(((-1.0)*x10045)));
evalcond[1]=((((-1.0)*x10043*x10057))+((x10038*x10048)));
evalcond[2]=(cj0+(((-1.0)*x10040*x10057))+((x10038*x10041)));
evalcond[3]=((((-1.0)*cj1*cj2*x10049))+((cj0*x10042))+((cj3*x10056)));
evalcond[4]=((((-1.0)*x10044*x10049))+(((-1.0)*x10049*x10051))+(((-1.0)*sj3*x10056)));
evalcond[5]=(((sj3*x10052))+(((-1.0)*x10043*x10055))+((sj3*x10046))+x10051+x10044+((x10048*x10055)));
evalcond[6]=((((-1.0)*x10054))+((x10043*x10053))+x10042+((cj3*x10046))+(((-1.0)*x10048*x10053))+((cj3*x10052)));
evalcond[7]=(((sj3*x10050))+((sj0*x10042))+((x10041*x10055))+((sj3*x10047))+(((-1.0)*cj1*cj2*x10045))+(((-1.0)*x10040*x10055)));
evalcond[8]=((((-1.0)*x10044*x10045))+((x10040*x10053))+((cj3*x10047))+(((-1.0)*x10041*x10053))+(((-1.0)*x10045*x10051))+((cj3*x10050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10058=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10058.valid){
continue;
}
CheckValue<IkReal> x10059=IKPowWithIntegerCheck(r02,-1);
if(!x10059.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10058.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10059.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10058.value)))+IKsqr(((-1.0)*sj0*(x10059.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10058.value)), ((-1.0)*sj0*(x10059.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10060=IKsin(j4);
IkReal x10061=IKcos(j4);
IkReal x10062=(gconst2*r10);
IkReal x10063=(gconst1*r11);
IkReal x10064=(sj1*sj2);
IkReal x10065=(gconst2*r20);
IkReal x10066=(cj2*sj1);
IkReal x10067=((1.0)*sj0);
IkReal x10068=(gconst1*r20);
IkReal x10069=(gconst2*r11);
IkReal x10070=(gconst1*r21);
IkReal x10071=((1.0)*cj0);
IkReal x10072=(gconst1*r10);
IkReal x10073=(cj1*sj2);
IkReal x10074=(gconst2*r21);
IkReal x10075=(sj3*x10061);
IkReal x10076=((1.0)*cj1*cj2);
IkReal x10077=(cj3*x10061);
IkReal x10078=(r02*x10060);
IkReal x10079=((1.0)*x10060);
evalcond[0]=((((-1.0)*x10067))+(((-1.0)*r02*x10061)));
evalcond[1]=(((x10060*x10070))+(((-1.0)*x10065*x10079)));
evalcond[2]=(((x10060*x10063))+cj0+(((-1.0)*x10062*x10079)));
evalcond[3]=((((-1.0)*cj1*cj2*x10071))+((cj0*x10064))+((cj3*x10078)));
evalcond[4]=((((-1.0)*x10066*x10071))+(((-1.0)*sj3*x10078))+(((-1.0)*x10071*x10073)));
evalcond[5]=(((sj3*x10068))+((sj3*x10074))+((x10070*x10077))+x10073+x10066+(((-1.0)*x10065*x10077)));
evalcond[6]=((((-1.0)*x10070*x10075))+((x10065*x10075))+(((-1.0)*x10076))+x10064+((cj3*x10068))+((cj3*x10074)));
evalcond[7]=(((sj3*x10069))+((sj3*x10072))+(((-1.0)*cj1*cj2*x10067))+((sj0*x10064))+(((-1.0)*x10062*x10077))+((x10063*x10077)));
evalcond[8]=((((-1.0)*x10066*x10067))+((x10062*x10075))+(((-1.0)*x10067*x10073))+(((-1.0)*x10063*x10075))+((cj3*x10069))+((cj3*x10072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10080=gconst1*gconst1;
IkReal x10081=r21*r21;
IkReal x10082=gconst2*gconst2;
IkReal x10083=r20*r20;
IkReal x10084=(gconst2*r20);
IkReal x10085=(cj1*cj2);
IkReal x10086=(sj1*sj2);
IkReal x10087=(gconst1*r21);
IkReal x10088=(cj3*gconst2);
IkReal x10089=(cj3*r20);
CheckValue<IkReal> x10090 = IKatan2WithCheck(IkReal((((gconst1*r22*x10089))+((r21*r22*x10088))+(((-1.0)*r22*x10085))+((r22*x10086)))),IkReal(((((-1.0)*x10084*x10086))+((x10084*x10085))+(((-1.0)*x10085*x10087))+((r21*x10080*x10089))+(((-1.0)*gconst1*x10083*x10088))+((x10086*x10087))+(((-1.0)*r21*x10082*x10089))+((gconst1*x10081*x10088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10090.valid){
continue;
}
CheckValue<IkReal> x10091=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x10084*x10087))+((sj3*x10082*x10083))+((sj3*x10080*x10081)))),-1);
if(!x10091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10090.value)+(((1.5707963267949)*(x10091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10092=IKsin(j4);
IkReal x10093=IKcos(j4);
IkReal x10094=(cj3*gconst1);
IkReal x10095=(gconst1*r01);
IkReal x10096=(gconst1*r11);
IkReal x10097=(sj1*sj2);
IkReal x10098=(cj3*gconst2);
IkReal x10099=(gconst1*sj3);
IkReal x10100=(gconst2*sj3);
IkReal x10101=((1.0)*sj0);
IkReal x10102=(cj1*sj2);
IkReal x10103=((1.0)*x10093);
IkReal x10104=((1.0)*x10092);
IkReal x10105=((1.0)*cj1*cj2);
IkReal x10106=(cj3*x10092);
IkReal x10107=((1.0)*cj2*sj1);
IkReal x10108=(x10093*x10100);
evalcond[0]=((((-1.0)*gconst2*r20*x10104))+(((-1.0)*r22*x10103))+((gconst1*r21*x10092)));
evalcond[1]=((((-1.0)*r12*x10103))+cj0+((x10092*x10096))+(((-1.0)*gconst2*r10*x10104)));
evalcond[2]=(((x10092*x10095))+(((-1.0)*r02*x10103))+(((-1.0)*gconst2*r00*x10104))+(((-1.0)*x10101)));
evalcond[3]=(((r21*x10100))+((cj2*sj1))+x10102+(((-1.0)*r20*x10098*x10103))+((r21*x10093*x10094))+((r20*x10099))+((r22*x10106)));
evalcond[4]=(((r20*x10108))+x10097+(((-1.0)*r21*x10099*x10103))+((r21*x10098))+(((-1.0)*r22*sj3*x10104))+((r20*x10094))+(((-1.0)*x10105)));
evalcond[5]=(((r01*x10100))+(((-1.0)*cj0*x10105))+((cj0*x10097))+((r01*x10093*x10094))+(((-1.0)*r00*x10098*x10103))+((r02*x10106))+((r00*x10099)));
evalcond[6]=(((r11*x10093*x10094))+(((-1.0)*cj1*cj2*x10101))+(((-1.0)*r10*x10098*x10103))+((sj0*x10097))+((r11*x10100))+((r10*x10099))+((r12*x10106)));
evalcond[7]=(((r00*x10108))+(((-1.0)*cj0*x10107))+(((-1.0)*sj3*x10095*x10103))+(((-1.0)*cj0*x10102))+(((-1.0)*r02*sj3*x10104))+((r01*x10098))+((r00*x10094)));
evalcond[8]=((((-1.0)*sj3*x10096*x10103))+(((-1.0)*r12*sj3*x10104))+((r11*x10098))+(((-1.0)*x10101*x10102))+(((-1.0)*cj2*sj1*x10101))+((r10*x10108))+((r10*x10094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10109=((1.0)*gconst2);
CheckValue<IkReal> x10110 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10109))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10110.valid){
continue;
}
CheckValue<IkReal> x10111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10109))+(((-1.0)*gconst1*r10)))),-1);
if(!x10111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10110.value)+(((1.5707963267949)*(x10111.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10112=IKsin(j4);
IkReal x10113=IKcos(j4);
IkReal x10114=(cj3*gconst1);
IkReal x10115=(gconst1*r01);
IkReal x10116=(gconst1*r11);
IkReal x10117=(sj1*sj2);
IkReal x10118=(cj3*gconst2);
IkReal x10119=(gconst1*sj3);
IkReal x10120=(gconst2*sj3);
IkReal x10121=((1.0)*sj0);
IkReal x10122=(cj1*sj2);
IkReal x10123=((1.0)*x10113);
IkReal x10124=((1.0)*x10112);
IkReal x10125=((1.0)*cj1*cj2);
IkReal x10126=(cj3*x10112);
IkReal x10127=((1.0)*cj2*sj1);
IkReal x10128=(x10113*x10120);
evalcond[0]=(((gconst1*r21*x10112))+(((-1.0)*gconst2*r20*x10124))+(((-1.0)*r22*x10123)));
evalcond[1]=(cj0+((x10112*x10116))+(((-1.0)*gconst2*r10*x10124))+(((-1.0)*r12*x10123)));
evalcond[2]=((((-1.0)*gconst2*r00*x10124))+(((-1.0)*r02*x10123))+((x10112*x10115))+(((-1.0)*x10121)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x10118*x10123))+((r20*x10119))+((r21*x10120))+x10122+((r22*x10126))+((r21*x10113*x10114)));
evalcond[4]=(((r21*x10118))+(((-1.0)*r21*x10119*x10123))+((r20*x10128))+((r20*x10114))+(((-1.0)*r22*sj3*x10124))+x10117+(((-1.0)*x10125)));
evalcond[5]=(((cj0*x10117))+(((-1.0)*r00*x10118*x10123))+((r00*x10119))+((r01*x10113*x10114))+((r02*x10126))+((r01*x10120))+(((-1.0)*cj0*x10125)));
evalcond[6]=(((r11*x10113*x10114))+((sj0*x10117))+((r10*x10119))+(((-1.0)*r10*x10118*x10123))+((r12*x10126))+(((-1.0)*cj1*cj2*x10121))+((r11*x10120)));
evalcond[7]=(((r01*x10118))+((r00*x10114))+(((-1.0)*cj0*x10122))+(((-1.0)*sj3*x10115*x10123))+((r00*x10128))+(((-1.0)*cj0*x10127))+(((-1.0)*r02*sj3*x10124)));
evalcond[8]=((((-1.0)*x10121*x10122))+((r10*x10128))+(((-1.0)*cj2*sj1*x10121))+((r11*x10118))+(((-1.0)*r12*sj3*x10124))+((r10*x10114))+(((-1.0)*sj3*x10116*x10123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10129=((1.0)*gconst2);
CheckValue<IkReal> x10130=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10129)))),-1);
if(!x10130.valid){
continue;
}
CheckValue<IkReal> x10131 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x10129))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10130.value)))+(x10131.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10132=IKsin(j4);
IkReal x10133=IKcos(j4);
IkReal x10134=(cj3*gconst1);
IkReal x10135=(gconst1*r01);
IkReal x10136=(gconst1*r11);
IkReal x10137=(sj1*sj2);
IkReal x10138=(cj3*gconst2);
IkReal x10139=(gconst1*sj3);
IkReal x10140=(gconst2*sj3);
IkReal x10141=((1.0)*sj0);
IkReal x10142=(cj1*sj2);
IkReal x10143=((1.0)*x10133);
IkReal x10144=((1.0)*x10132);
IkReal x10145=((1.0)*cj1*cj2);
IkReal x10146=(cj3*x10132);
IkReal x10147=((1.0)*cj2*sj1);
IkReal x10148=(x10133*x10140);
evalcond[0]=(((gconst1*r21*x10132))+(((-1.0)*gconst2*r20*x10144))+(((-1.0)*r22*x10143)));
evalcond[1]=(cj0+(((-1.0)*r12*x10143))+((x10132*x10136))+(((-1.0)*gconst2*r10*x10144)));
evalcond[2]=((((-1.0)*r02*x10143))+(((-1.0)*x10141))+((x10132*x10135))+(((-1.0)*gconst2*r00*x10144)));
evalcond[3]=(((cj2*sj1))+((r20*x10139))+((r21*x10133*x10134))+(((-1.0)*r20*x10138*x10143))+((r21*x10140))+x10142+((r22*x10146)));
evalcond[4]=(((r20*x10134))+((r21*x10138))+(((-1.0)*r21*x10139*x10143))+x10137+(((-1.0)*r22*sj3*x10144))+(((-1.0)*x10145))+((r20*x10148)));
evalcond[5]=((((-1.0)*r00*x10138*x10143))+((r01*x10133*x10134))+((r02*x10146))+((cj0*x10137))+((r00*x10139))+((r01*x10140))+(((-1.0)*cj0*x10145)));
evalcond[6]=(((r12*x10146))+(((-1.0)*cj1*cj2*x10141))+(((-1.0)*r10*x10138*x10143))+((r10*x10139))+((r11*x10133*x10134))+((sj0*x10137))+((r11*x10140)));
evalcond[7]=((((-1.0)*r02*sj3*x10144))+(((-1.0)*cj0*x10142))+(((-1.0)*sj3*x10135*x10143))+((r01*x10138))+((r00*x10134))+((r00*x10148))+(((-1.0)*cj0*x10147)));
evalcond[8]=(((r11*x10138))+((r10*x10134))+((r10*x10148))+(((-1.0)*sj3*x10136*x10143))+(((-1.0)*cj2*sj1*x10141))+(((-1.0)*r12*sj3*x10144))+(((-1.0)*x10141*x10142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10149=((-1.0)*r21);
IkReal x10151 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10151)==0){
continue;
}
IkReal x10150=pow(x10151,-0.5);
CheckValue<IkReal> x10152 = IKatan2WithCheck(IkReal(x10149),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10152.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10152.value))));
IkReal gconst4=(x10149*x10150);
IkReal gconst5=((1.0)*r20*x10150);
CheckValue<IkReal> x10153 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10153.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10153.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10154=((-1.0)*r21);
CheckValue<IkReal> x10157 = IKatan2WithCheck(IkReal(x10154),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10157.valid){
continue;
}
IkReal x10155=((1.0)*(x10157.value));
IkReal x10156=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10155)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10155)));
IkReal gconst4=(x10154*x10156);
IkReal gconst5=((1.0)*r20*x10156);
IkReal x10158=r22*r22;
IkReal x10159=((1.0)*x10158);
CheckValue<IkReal> x10163=IKPowWithIntegerCheck(((-1.0)+x10158),-1);
if(!x10163.valid){
continue;
}
IkReal x10160=x10163.value;
if((((1.0)+(((-1.0)*x10159)))) < -0.00001)
continue;
IkReal x10161=IKsqrt(((1.0)+(((-1.0)*x10159))));
IkReal x10162=(cj0*x10160*x10161);
j4eval[0]=((IKabs((x10162+(((-1.0)*x10159*x10162)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10164=((-1.0)*r21);
CheckValue<IkReal> x10167 = IKatan2WithCheck(IkReal(x10164),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10167.valid){
continue;
}
IkReal x10165=((1.0)*(x10167.value));
IkReal x10166=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10165)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10165)));
IkReal gconst4=(x10164*x10166);
IkReal gconst5=((1.0)*r20*x10166);
IkReal x10168=r22*r22;
IkReal x10169=((1.0)*x10168);
CheckValue<IkReal> x10173=IKPowWithIntegerCheck(((-1.0)+x10168),-1);
if(!x10173.valid){
continue;
}
IkReal x10170=x10173.value;
if((((1.0)+(((-1.0)*x10169)))) < -0.00001)
continue;
IkReal x10171=IKsqrt(((1.0)+(((-1.0)*x10169))));
IkReal x10172=(sj0*x10170*x10171);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x10169*x10172))+x10172))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10174=((-1.0)*r21);
CheckValue<IkReal> x10177 = IKatan2WithCheck(IkReal(x10174),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10177.valid){
continue;
}
IkReal x10175=((1.0)*(x10177.value));
IkReal x10176=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10175)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10175)));
IkReal gconst4=(x10174*x10176);
IkReal gconst5=((1.0)*r20*x10176);
IkReal x10178=r22*r22;
IkReal x10179=(r12*sj0);
IkReal x10180=(cj0*r02);
CheckValue<IkReal> x10184=IKPowWithIntegerCheck(((-1.0)+x10178),-1);
if(!x10184.valid){
continue;
}
IkReal x10181=x10184.value;
if((((1.0)+(((-1.0)*x10178)))) < -0.00001)
continue;
IkReal x10182=IKsqrt(((1.0)+(((-1.0)*x10178))));
IkReal x10183=(r22*x10181*x10182);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x10179))+(((-1.0)*x10180)))))+(IKabs((((x10180*x10183))+((x10179*x10183))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10185=((-1.0)*r21);
CheckValue<IkReal> x10188 = IKatan2WithCheck(IkReal(x10185),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10188.valid){
continue;
}
IkReal x10186=((1.0)*(x10188.value));
IkReal x10187=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10186)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10186)));
IkReal gconst4=(x10185*x10187);
IkReal gconst5=((1.0)*r20*x10187);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10189=((-1.0)*r21);
CheckValue<IkReal> x10192 = IKatan2WithCheck(IkReal(x10189),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10192.valid){
continue;
}
IkReal x10190=((1.0)*(x10192.value));
IkReal x10191=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10190)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10190)));
IkReal gconst4=(x10189*x10191);
IkReal gconst5=((1.0)*r20*x10191);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10193=((-1.0)*r21);
CheckValue<IkReal> x10196 = IKatan2WithCheck(IkReal(x10193),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10196.valid){
continue;
}
IkReal x10194=((1.0)*(x10196.value));
IkReal x10195=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10194)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10194)));
IkReal gconst4=(x10193*x10195);
IkReal gconst5=((1.0)*r20*x10195);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10197=((-1.0)*r21);
CheckValue<IkReal> x10200 = IKatan2WithCheck(IkReal(x10197),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10200.valid){
continue;
}
IkReal x10198=((1.0)*(x10200.value));
IkReal x10199=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10198)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10198)));
IkReal gconst4=(x10197*x10199);
IkReal gconst5=((1.0)*r20*x10199);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10201=((-1.0)*r21);
CheckValue<IkReal> x10204 = IKatan2WithCheck(IkReal(x10201),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10204.valid){
continue;
}
IkReal x10202=((1.0)*(x10204.value));
IkReal x10203=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10202)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10202)));
IkReal gconst4=(x10201*x10203);
IkReal gconst5=((1.0)*r20*x10203);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10205=((-1.0)*r21);
CheckValue<IkReal> x10208 = IKatan2WithCheck(IkReal(x10205),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10208.valid){
continue;
}
IkReal x10206=((1.0)*(x10208.value));
IkReal x10207=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10206)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10206)));
IkReal gconst4=(x10205*x10207);
IkReal gconst5=((1.0)*r20*x10207);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10209=(gconst5*r10);
IkReal x10210=(gconst4*r11);
CheckValue<IkReal> x10211=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10210*x10210)+(x10209*x10209)+(((-2.0)*x10209*x10210)))),-1);
if(!x10211.valid){
continue;
}
CheckValue<IkReal> x10212 = IKatan2WithCheck(IkReal((x10209+(((-1.0)*x10210)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10211.value)))+(x10212.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10213=IKsin(j4);
IkReal x10214=IKcos(j4);
IkReal x10215=(gconst4*r11);
IkReal x10216=((1.0)*cj1);
IkReal x10217=(gconst5*r10);
IkReal x10218=(gconst4*r01);
IkReal x10219=(gconst5*r00);
IkReal x10220=(gconst4*r21);
IkReal x10221=(gconst5*r20);
IkReal x10222=((1.0)*x10214);
IkReal x10223=((1.0)*x10213);
evalcond[0]=(((x10213*x10220))+(((-1.0)*x10221*x10223))+(((-1.0)*r22*x10222)));
evalcond[1]=((((-1.0)*r02*x10222))+((x10213*x10218))+(((-1.0)*x10219*x10223)));
evalcond[2]=(((x10214*x10217))+(((-1.0)*x10215*x10222))+(((-1.0)*r12*x10223)));
evalcond[3]=((1.0)+(((-1.0)*x10217*x10223))+((x10213*x10215))+(((-1.0)*r12*x10222)));
evalcond[4]=((((-1.0)*x10220*x10222))+((sj1*sj2))+(((-1.0)*cj2*x10216))+((x10214*x10221))+(((-1.0)*r22*x10223)));
evalcond[5]=((((-1.0)*r02*x10223))+((x10214*x10219))+(((-1.0)*sj2*x10216))+(((-1.0)*cj2*sj1))+(((-1.0)*x10218*x10222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10224=((1.0)*gconst5);
CheckValue<IkReal> x10225=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10224)))),-1);
if(!x10225.valid){
continue;
}
CheckValue<IkReal> x10226 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10224))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10225.value)))+(x10226.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10227=IKsin(j4);
IkReal x10228=IKcos(j4);
IkReal x10229=(gconst4*r11);
IkReal x10230=((1.0)*cj1);
IkReal x10231=(gconst5*r10);
IkReal x10232=(gconst4*r01);
IkReal x10233=(gconst5*r00);
IkReal x10234=(gconst4*r21);
IkReal x10235=(gconst5*r20);
IkReal x10236=((1.0)*x10228);
IkReal x10237=((1.0)*x10227);
evalcond[0]=((((-1.0)*x10235*x10237))+(((-1.0)*r22*x10236))+((x10227*x10234)));
evalcond[1]=((((-1.0)*x10233*x10237))+((x10227*x10232))+(((-1.0)*r02*x10236)));
evalcond[2]=(((x10228*x10231))+(((-1.0)*r12*x10237))+(((-1.0)*x10229*x10236)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10236))+(((-1.0)*x10231*x10237))+((x10227*x10229)));
evalcond[4]=((((-1.0)*x10234*x10236))+((sj1*sj2))+(((-1.0)*cj2*x10230))+((x10228*x10235))+(((-1.0)*r22*x10237)));
evalcond[5]=((((-1.0)*x10232*x10236))+(((-1.0)*cj2*sj1))+((x10228*x10233))+(((-1.0)*sj2*x10230))+(((-1.0)*r02*x10237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10238 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10238.valid){
continue;
}
CheckValue<IkReal> x10239=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10238.value)+(((1.5707963267949)*(x10239.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10240=IKsin(j4);
IkReal x10241=IKcos(j4);
IkReal x10242=(gconst4*r11);
IkReal x10243=((1.0)*cj1);
IkReal x10244=(gconst5*r10);
IkReal x10245=(gconst4*r01);
IkReal x10246=(gconst5*r00);
IkReal x10247=(gconst4*r21);
IkReal x10248=(gconst5*r20);
IkReal x10249=((1.0)*x10241);
IkReal x10250=((1.0)*x10240);
evalcond[0]=((((-1.0)*x10248*x10250))+((x10240*x10247))+(((-1.0)*r22*x10249)));
evalcond[1]=(((x10240*x10245))+(((-1.0)*x10246*x10250))+(((-1.0)*r02*x10249)));
evalcond[2]=(((x10241*x10244))+(((-1.0)*r12*x10250))+(((-1.0)*x10242*x10249)));
evalcond[3]=((1.0)+((x10240*x10242))+(((-1.0)*r12*x10249))+(((-1.0)*x10244*x10250)));
evalcond[4]=((((-1.0)*x10247*x10249))+((x10241*x10248))+(((-1.0)*cj2*x10243))+((sj1*sj2))+(((-1.0)*r22*x10250)));
evalcond[5]=((((-1.0)*r02*x10250))+((x10241*x10246))+(((-1.0)*cj2*sj1))+(((-1.0)*x10245*x10249))+(((-1.0)*sj2*x10243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10251=((-1.0)*r21);
CheckValue<IkReal> x10254 = IKatan2WithCheck(IkReal(x10251),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10254.valid){
continue;
}
IkReal x10252=((1.0)*(x10254.value));
IkReal x10253=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10252)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10252)));
IkReal gconst4=(x10251*x10253);
IkReal gconst5=((1.0)*r20*x10253);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10255=((-1.0)*r21);
CheckValue<IkReal> x10258 = IKatan2WithCheck(IkReal(x10255),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10258.valid){
continue;
}
IkReal x10256=((1.0)*(x10258.value));
IkReal x10257=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10256)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10256)));
IkReal gconst4=(x10255*x10257);
IkReal gconst5=((1.0)*r20*x10257);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10259=((-1.0)*r21);
CheckValue<IkReal> x10262 = IKatan2WithCheck(IkReal(x10259),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10262.valid){
continue;
}
IkReal x10260=((1.0)*(x10262.value));
IkReal x10261=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10260)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10260)));
IkReal gconst4=(x10259*x10261);
IkReal gconst5=((1.0)*r20*x10261);
IkReal x10263=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10267=IKPowWithIntegerCheck(x10263,-1);
if(!x10267.valid){
continue;
}
IkReal x10264=x10267.value;
IkReal x10265=((1.0)*x10264);
IkReal x10266=((((-1.0)*x10265*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10264))+(((-1.0)*x10265*(r10*r10)*(r20*r20))));
j4eval[0]=x10266;
j4eval[1]=r12;
j4eval[2]=x10263;
j4eval[3]=IKsign(x10266);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10268=(gconst5*r10);
IkReal x10269=(gconst4*r11);
CheckValue<IkReal> x10270 = IKatan2WithCheck(IkReal(((((-1.0)*x10268))+x10269)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10270.valid){
continue;
}
CheckValue<IkReal> x10271=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10268*x10268)))+(((-1.0)*(x10269*x10269)))+(((-1.0)*(r12*r12)))+(((2.0)*x10268*x10269)))),-1);
if(!x10271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10270.value)+(((1.5707963267949)*(x10271.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10272=IKcos(j4);
IkReal x10273=IKsin(j4);
IkReal x10274=(gconst4*r11);
IkReal x10275=(gconst5*r10);
IkReal x10276=((1.0)*cj1);
IkReal x10277=(gconst5*r00);
IkReal x10278=(gconst5*r20);
IkReal x10279=((1.0)*x10272);
IkReal x10280=(gconst4*x10272);
IkReal x10281=((1.0)*x10273);
IkReal x10282=(gconst4*x10273);
evalcond[0]=(((r12*x10273))+(((-1.0)*x10275*x10279))+((x10272*x10274)));
evalcond[1]=((((-1.0)*x10278*x10281))+(((-1.0)*r22*x10279))+((r21*x10282)));
evalcond[2]=(((r01*x10282))+(((-1.0)*x10277*x10281))+(((-1.0)*r02*x10279)));
evalcond[3]=((1.0)+(((-1.0)*x10275*x10281))+(((-1.0)*r12*x10279))+((x10273*x10274)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x10276))+(((-1.0)*x10278*x10279))+((r21*x10280))+((r22*x10273)));
evalcond[5]=(((r01*x10280))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10276))+(((-1.0)*x10277*x10279))+((r02*x10273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10283=((1.0)*gconst5);
CheckValue<IkReal> x10284=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10283)))),-1);
if(!x10284.valid){
continue;
}
CheckValue<IkReal> x10285 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10284.value)))+(x10285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10286=IKcos(j4);
IkReal x10287=IKsin(j4);
IkReal x10288=(gconst4*r11);
IkReal x10289=(gconst5*r10);
IkReal x10290=((1.0)*cj1);
IkReal x10291=(gconst5*r00);
IkReal x10292=(gconst5*r20);
IkReal x10293=((1.0)*x10286);
IkReal x10294=(gconst4*x10286);
IkReal x10295=((1.0)*x10287);
IkReal x10296=(gconst4*x10287);
evalcond[0]=(((r12*x10287))+(((-1.0)*x10289*x10293))+((x10286*x10288)));
evalcond[1]=((((-1.0)*x10292*x10295))+((r21*x10296))+(((-1.0)*r22*x10293)));
evalcond[2]=((((-1.0)*x10291*x10295))+(((-1.0)*r02*x10293))+((r01*x10296)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10293))+((x10287*x10288))+(((-1.0)*x10289*x10295)));
evalcond[4]=((((-1.0)*x10292*x10293))+((sj1*sj2))+((r22*x10287))+((r21*x10294))+(((-1.0)*cj2*x10290)));
evalcond[5]=((((-1.0)*sj2*x10290))+(((-1.0)*cj2*sj1))+(((-1.0)*x10291*x10293))+((r02*x10287))+((r01*x10294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10297 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10297.valid){
continue;
}
CheckValue<IkReal> x10298=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10297.value)+(((1.5707963267949)*(x10298.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10299=IKcos(j4);
IkReal x10300=IKsin(j4);
IkReal x10301=(gconst4*r11);
IkReal x10302=(gconst5*r10);
IkReal x10303=((1.0)*cj1);
IkReal x10304=(gconst5*r00);
IkReal x10305=(gconst5*r20);
IkReal x10306=((1.0)*x10299);
IkReal x10307=(gconst4*x10299);
IkReal x10308=((1.0)*x10300);
IkReal x10309=(gconst4*x10300);
evalcond[0]=(((x10299*x10301))+(((-1.0)*x10302*x10306))+((r12*x10300)));
evalcond[1]=((((-1.0)*x10305*x10308))+(((-1.0)*r22*x10306))+((r21*x10309)));
evalcond[2]=((((-1.0)*r02*x10306))+(((-1.0)*x10304*x10308))+((r01*x10309)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10306))+((x10300*x10301))+(((-1.0)*x10302*x10308)));
evalcond[4]=((((-1.0)*x10305*x10306))+(((-1.0)*cj2*x10303))+((sj1*sj2))+((r21*x10307))+((r22*x10300)));
evalcond[5]=(((r02*x10300))+(((-1.0)*sj2*x10303))+(((-1.0)*cj2*sj1))+(((-1.0)*x10304*x10306))+((r01*x10307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10310=((-1.0)*r21);
CheckValue<IkReal> x10313 = IKatan2WithCheck(IkReal(x10310),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10313.valid){
continue;
}
IkReal x10311=((1.0)*(x10313.value));
IkReal x10312=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10311)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10311)));
IkReal gconst4=(x10310*x10312);
IkReal gconst5=((1.0)*r20*x10312);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10314=((-1.0)*r21);
CheckValue<IkReal> x10317 = IKatan2WithCheck(IkReal(x10314),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10317.valid){
continue;
}
IkReal x10315=((1.0)*(x10317.value));
IkReal x10316=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10315)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10315)));
IkReal gconst4=(x10314*x10316);
IkReal gconst5=((1.0)*r20*x10316);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10318=((-1.0)*r21);
CheckValue<IkReal> x10321 = IKatan2WithCheck(IkReal(x10318),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10321.valid){
continue;
}
IkReal x10319=((1.0)*(x10321.value));
IkReal x10320=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10319)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10319)));
IkReal gconst4=(x10318*x10320);
IkReal gconst5=((1.0)*r20*x10320);
IkReal x10322=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10326=IKPowWithIntegerCheck(x10322,-1);
if(!x10326.valid){
continue;
}
IkReal x10323=x10326.value;
IkReal x10324=((1.0)*x10323);
IkReal x10325=((((-1.0)*x10324*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10324*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10323)));
j4eval[0]=x10325;
j4eval[1]=r12;
j4eval[2]=x10322;
j4eval[3]=IKsign(x10325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10327=(gconst5*r10);
IkReal x10328=(gconst4*r11);
CheckValue<IkReal> x10329 = IKatan2WithCheck(IkReal(((((-1.0)*x10327))+x10328)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10329.valid){
continue;
}
CheckValue<IkReal> x10330=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10328*x10328)))+(((-1.0)*(r12*r12)))+(((2.0)*x10327*x10328))+(((-1.0)*(x10327*x10327))))),-1);
if(!x10330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10329.value)+(((1.5707963267949)*(x10330.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10331=IKcos(j4);
IkReal x10332=IKsin(j4);
IkReal x10333=(gconst4*r11);
IkReal x10334=(gconst5*r10);
IkReal x10335=(gconst5*r00);
IkReal x10336=(gconst5*r20);
IkReal x10337=((1.0)*x10331);
IkReal x10338=(gconst4*x10331);
IkReal x10339=((1.0)*x10332);
IkReal x10340=(gconst4*x10332);
evalcond[0]=((((-1.0)*x10334*x10337))+((r12*x10332))+((x10331*x10333)));
evalcond[1]=((((-1.0)*x10336*x10339))+(((-1.0)*r22*x10337))+((r21*x10340)));
evalcond[2]=(((r01*x10340))+(((-1.0)*x10335*x10339))+(((-1.0)*r02*x10337)));
evalcond[3]=((1.0)+(((-1.0)*x10334*x10339))+(((-1.0)*r12*x10337))+((x10332*x10333)));
evalcond[4]=((((-1.0)*x10336*x10337))+((cj2*sj1))+((r22*x10332))+((cj1*sj2))+((r21*x10338)));
evalcond[5]=(((r02*x10332))+((r01*x10338))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10335*x10337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10341=((1.0)*gconst5);
CheckValue<IkReal> x10342 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10342.valid){
continue;
}
CheckValue<IkReal> x10343=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10341)))),-1);
if(!x10343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10342.value)+(((1.5707963267949)*(x10343.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10344=IKcos(j4);
IkReal x10345=IKsin(j4);
IkReal x10346=(gconst4*r11);
IkReal x10347=(gconst5*r10);
IkReal x10348=(gconst5*r00);
IkReal x10349=(gconst5*r20);
IkReal x10350=((1.0)*x10344);
IkReal x10351=(gconst4*x10344);
IkReal x10352=((1.0)*x10345);
IkReal x10353=(gconst4*x10345);
evalcond[0]=(((x10344*x10346))+((r12*x10345))+(((-1.0)*x10347*x10350)));
evalcond[1]=(((r21*x10353))+(((-1.0)*r22*x10350))+(((-1.0)*x10349*x10352)));
evalcond[2]=(((r01*x10353))+(((-1.0)*x10348*x10352))+(((-1.0)*r02*x10350)));
evalcond[3]=((1.0)+((x10345*x10346))+(((-1.0)*r12*x10350))+(((-1.0)*x10347*x10352)));
evalcond[4]=(((r21*x10351))+((cj2*sj1))+((cj1*sj2))+((r22*x10345))+(((-1.0)*x10349*x10350)));
evalcond[5]=(((r01*x10351))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10348*x10350))+((r02*x10345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10354 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10354.valid){
continue;
}
CheckValue<IkReal> x10355=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10354.value)+(((1.5707963267949)*(x10355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10356=IKcos(j4);
IkReal x10357=IKsin(j4);
IkReal x10358=(gconst4*r11);
IkReal x10359=(gconst5*r10);
IkReal x10360=(gconst5*r00);
IkReal x10361=(gconst5*r20);
IkReal x10362=((1.0)*x10356);
IkReal x10363=(gconst4*x10356);
IkReal x10364=((1.0)*x10357);
IkReal x10365=(gconst4*x10357);
evalcond[0]=((((-1.0)*x10359*x10362))+((x10356*x10358))+((r12*x10357)));
evalcond[1]=(((r21*x10365))+(((-1.0)*x10361*x10364))+(((-1.0)*r22*x10362)));
evalcond[2]=((((-1.0)*x10360*x10364))+((r01*x10365))+(((-1.0)*r02*x10362)));
evalcond[3]=((1.0)+(((-1.0)*x10359*x10364))+(((-1.0)*r12*x10362))+((x10357*x10358)));
evalcond[4]=(((cj2*sj1))+((r21*x10363))+((cj1*sj2))+(((-1.0)*x10361*x10362))+((r22*x10357)));
evalcond[5]=((((-1.0)*x10360*x10362))+((r01*x10363))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10366=((-1.0)*r21);
CheckValue<IkReal> x10369 = IKatan2WithCheck(IkReal(x10366),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10369.valid){
continue;
}
IkReal x10367=((1.0)*(x10369.value));
IkReal x10368=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10367)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10367)));
IkReal gconst4=(x10366*x10368);
IkReal gconst5=((1.0)*r20*x10368);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10370=((-1.0)*r21);
CheckValue<IkReal> x10373 = IKatan2WithCheck(IkReal(x10370),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10373.valid){
continue;
}
IkReal x10371=((1.0)*(x10373.value));
IkReal x10372=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10371)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10371)));
IkReal gconst4=(x10370*x10372);
IkReal gconst5=((1.0)*r20*x10372);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10374=((-1.0)*r21);
CheckValue<IkReal> x10377 = IKatan2WithCheck(IkReal(x10374),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10377.valid){
continue;
}
IkReal x10375=((1.0)*(x10377.value));
IkReal x10376=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10375)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10375)));
IkReal gconst4=(x10374*x10376);
IkReal gconst5=((1.0)*r20*x10376);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10378=(gconst5*r10);
IkReal x10379=(gconst4*r11);
CheckValue<IkReal> x10380 = IKatan2WithCheck(IkReal((x10378+(((-1.0)*x10379)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10380.valid){
continue;
}
CheckValue<IkReal> x10381=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10378*x10379))+(x10378*x10378)+(x10379*x10379))),-1);
if(!x10381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10380.value)+(((1.5707963267949)*(x10381.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10382=IKsin(j4);
IkReal x10383=IKcos(j4);
IkReal x10384=(gconst4*r11);
IkReal x10385=(gconst5*r10);
IkReal x10386=(gconst4*r01);
IkReal x10387=(gconst5*r00);
IkReal x10388=(gconst4*r21);
IkReal x10389=(gconst5*r20);
IkReal x10390=((1.0)*x10383);
IkReal x10391=((1.0)*x10382);
evalcond[0]=((((-1.0)*x10389*x10391))+(((-1.0)*r22*x10390))+((x10382*x10388)));
evalcond[1]=((((-1.0)*x10387*x10391))+(((-1.0)*r02*x10390))+((x10382*x10386)));
evalcond[2]=((((-1.0)*x10384*x10390))+((x10383*x10385))+(((-1.0)*r12*x10391)));
evalcond[3]=((1.0)+(((-1.0)*x10385*x10391))+(((-1.0)*r12*x10390))+((x10382*x10384)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10383*x10389))+(((-1.0)*r22*x10391))+(((-1.0)*x10388*x10390)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10383*x10387))+(((-1.0)*x10386*x10390))+(((-1.0)*r02*x10391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10392=((1.0)*gconst5);
CheckValue<IkReal> x10393=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10392)))),-1);
if(!x10393.valid){
continue;
}
CheckValue<IkReal> x10394 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10392))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10393.value)))+(x10394.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10395=IKsin(j4);
IkReal x10396=IKcos(j4);
IkReal x10397=(gconst4*r11);
IkReal x10398=(gconst5*r10);
IkReal x10399=(gconst4*r01);
IkReal x10400=(gconst5*r00);
IkReal x10401=(gconst4*r21);
IkReal x10402=(gconst5*r20);
IkReal x10403=((1.0)*x10396);
IkReal x10404=((1.0)*x10395);
evalcond[0]=((((-1.0)*x10402*x10404))+(((-1.0)*r22*x10403))+((x10395*x10401)));
evalcond[1]=(((x10395*x10399))+(((-1.0)*x10400*x10404))+(((-1.0)*r02*x10403)));
evalcond[2]=((((-1.0)*x10397*x10403))+(((-1.0)*r12*x10404))+((x10396*x10398)));
evalcond[3]=((1.0)+((x10395*x10397))+(((-1.0)*x10398*x10404))+(((-1.0)*r12*x10403)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10396*x10402))+(((-1.0)*x10401*x10403))+(((-1.0)*r22*x10404)));
evalcond[5]=(((x10396*x10400))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10399*x10403))+(((-1.0)*r02*x10404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10405 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10405.valid){
continue;
}
CheckValue<IkReal> x10406=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10405.value)+(((1.5707963267949)*(x10406.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10407=IKsin(j4);
IkReal x10408=IKcos(j4);
IkReal x10409=(gconst4*r11);
IkReal x10410=(gconst5*r10);
IkReal x10411=(gconst4*r01);
IkReal x10412=(gconst5*r00);
IkReal x10413=(gconst4*r21);
IkReal x10414=(gconst5*r20);
IkReal x10415=((1.0)*x10408);
IkReal x10416=((1.0)*x10407);
evalcond[0]=((((-1.0)*x10414*x10416))+((x10407*x10413))+(((-1.0)*r22*x10415)));
evalcond[1]=((((-1.0)*r02*x10415))+(((-1.0)*x10412*x10416))+((x10407*x10411)));
evalcond[2]=((((-1.0)*x10409*x10415))+((x10408*x10410))+(((-1.0)*r12*x10416)));
evalcond[3]=((1.0)+((x10407*x10409))+(((-1.0)*r12*x10415))+(((-1.0)*x10410*x10416)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10413*x10415))+((x10408*x10414))+((cj1*sj2))+(((-1.0)*r22*x10416)));
evalcond[5]=((((-1.0)*r02*x10416))+((x10408*x10412))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10411*x10415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10417=gconst4*gconst4;
IkReal x10418=gconst5*gconst5;
IkReal x10419=(r10*r21);
IkReal x10420=((1.0)*cj3);
IkReal x10421=(r11*r21);
IkReal x10422=(r11*r20);
IkReal x10423=(r22*sj3);
IkReal x10424=(gconst4*r10);
IkReal x10425=((1.0)*sj3);
IkReal x10426=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10427=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x10418*x10420))+(((-1.0)*x10417*x10420*x10421))+((x10422*x10426))+((x10419*x10426))+(((-1.0)*r12*r22*x10420)))),-1);
if(!x10427.valid){
continue;
}
CheckValue<IkReal> x10428 = IKatan2WithCheck(IkReal((((gconst5*r11*x10423))+((x10423*x10424)))),IkReal(((((-1.0)*gconst5*r20*x10424*x10425))+((gconst4*gconst5*sj3*x10421))+((sj3*x10417*x10419))+(((-1.0)*x10418*x10422*x10425)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10427.value)))+(x10428.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10429=IKsin(j4);
IkReal x10430=IKcos(j4);
IkReal x10431=(sj1*sj2);
IkReal x10432=(gconst5*sj3);
IkReal x10433=(cj3*gconst5);
IkReal x10434=(gconst4*r11);
IkReal x10435=((1.0)*cj1);
IkReal x10436=(gconst4*r01);
IkReal x10437=(cj2*sj1);
IkReal x10438=(gconst4*r21);
IkReal x10439=(gconst4*sj3);
IkReal x10440=(cj3*gconst4);
IkReal x10441=(cj2*x10435);
IkReal x10442=((1.0)*x10430);
IkReal x10443=((1.0)*x10429);
IkReal x10444=(cj3*x10429);
IkReal x10445=(cj3*x10430);
evalcond[0]=((((-1.0)*gconst5*r20*x10443))+(((-1.0)*r22*x10442))+((x10429*x10438)));
evalcond[1]=((((-1.0)*r02*x10442))+(((-1.0)*gconst5*r00*x10443))+((x10429*x10436)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10442))+((x10429*x10434))+(((-1.0)*gconst5*r10*x10443)));
evalcond[3]=(((x10434*x10445))+((r12*x10444))+((r10*x10439))+((r11*x10432))+(((-1.0)*r10*x10433*x10442)));
evalcond[4]=((((-1.0)*sj3*x10434*x10442))+(((-1.0)*r12*sj3*x10443))+((r10*x10430*x10432))+((r11*x10433))+((r10*x10440)));
evalcond[5]=(((r22*x10444))+(((-1.0)*r20*x10433*x10442))+((cj1*sj2))+((x10438*x10445))+x10437+((r20*x10439))+((r21*x10432)));
evalcond[6]=(((r01*x10432))+((x10436*x10445))+(((-1.0)*x10441))+((r02*x10444))+x10431+(((-1.0)*r00*x10433*x10442))+((r00*x10439)));
evalcond[7]=((((-1.0)*r22*sj3*x10443))+(((-1.0)*sj3*x10438*x10442))+((r20*x10430*x10432))+(((-1.0)*x10441))+((r20*x10440))+x10431+((r21*x10433)));
evalcond[8]=((((-1.0)*sj3*x10436*x10442))+((r01*x10433))+(((-1.0)*r02*sj3*x10443))+(((-1.0)*sj2*x10435))+((r00*x10440))+(((-1.0)*x10437))+((r00*x10430*x10432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10446=((1.0)*gconst5);
CheckValue<IkReal> x10447 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10446))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10447.valid){
continue;
}
CheckValue<IkReal> x10448=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10446)))),-1);
if(!x10448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10447.value)+(((1.5707963267949)*(x10448.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10449=IKsin(j4);
IkReal x10450=IKcos(j4);
IkReal x10451=(sj1*sj2);
IkReal x10452=(gconst5*sj3);
IkReal x10453=(cj3*gconst5);
IkReal x10454=(gconst4*r11);
IkReal x10455=((1.0)*cj1);
IkReal x10456=(gconst4*r01);
IkReal x10457=(cj2*sj1);
IkReal x10458=(gconst4*r21);
IkReal x10459=(gconst4*sj3);
IkReal x10460=(cj3*gconst4);
IkReal x10461=(cj2*x10455);
IkReal x10462=((1.0)*x10450);
IkReal x10463=((1.0)*x10449);
IkReal x10464=(cj3*x10449);
IkReal x10465=(cj3*x10450);
evalcond[0]=(((x10449*x10458))+(((-1.0)*gconst5*r20*x10463))+(((-1.0)*r22*x10462)));
evalcond[1]=((((-1.0)*r02*x10462))+((x10449*x10456))+(((-1.0)*gconst5*r00*x10463)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10463))+((x10449*x10454))+(((-1.0)*r12*x10462)));
evalcond[3]=(((r10*x10459))+((r12*x10464))+((r11*x10452))+(((-1.0)*r10*x10453*x10462))+((x10454*x10465)));
evalcond[4]=(((r11*x10453))+((r10*x10450*x10452))+(((-1.0)*sj3*x10454*x10462))+(((-1.0)*r12*sj3*x10463))+((r10*x10460)));
evalcond[5]=(((cj1*sj2))+((r22*x10464))+x10457+((r21*x10452))+(((-1.0)*r20*x10453*x10462))+((x10458*x10465))+((r20*x10459)));
evalcond[6]=(((r00*x10459))+((r01*x10452))+((x10456*x10465))+x10451+(((-1.0)*r00*x10453*x10462))+((r02*x10464))+(((-1.0)*x10461)));
evalcond[7]=(((r20*x10460))+(((-1.0)*r22*sj3*x10463))+x10451+((r21*x10453))+((r20*x10450*x10452))+(((-1.0)*sj3*x10458*x10462))+(((-1.0)*x10461)));
evalcond[8]=((((-1.0)*x10457))+((r00*x10460))+(((-1.0)*sj3*x10456*x10462))+((r01*x10453))+(((-1.0)*r02*sj3*x10463))+(((-1.0)*sj2*x10455))+((r00*x10450*x10452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10466 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10466.valid){
continue;
}
CheckValue<IkReal> x10467=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10466.value)+(((1.5707963267949)*(x10467.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10468=IKsin(j4);
IkReal x10469=IKcos(j4);
IkReal x10470=(sj1*sj2);
IkReal x10471=(gconst5*sj3);
IkReal x10472=(cj3*gconst5);
IkReal x10473=(gconst4*r11);
IkReal x10474=((1.0)*cj1);
IkReal x10475=(gconst4*r01);
IkReal x10476=(cj2*sj1);
IkReal x10477=(gconst4*r21);
IkReal x10478=(gconst4*sj3);
IkReal x10479=(cj3*gconst4);
IkReal x10480=(cj2*x10474);
IkReal x10481=((1.0)*x10469);
IkReal x10482=((1.0)*x10468);
IkReal x10483=(cj3*x10468);
IkReal x10484=(cj3*x10469);
evalcond[0]=((((-1.0)*r22*x10481))+((x10468*x10477))+(((-1.0)*gconst5*r20*x10482)));
evalcond[1]=((((-1.0)*r02*x10481))+((x10468*x10475))+(((-1.0)*gconst5*r00*x10482)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10482))+(((-1.0)*r12*x10481))+((x10468*x10473)));
evalcond[3]=(((x10473*x10484))+((r12*x10483))+((r11*x10471))+((r10*x10478))+(((-1.0)*r10*x10472*x10481)));
evalcond[4]=(((r10*x10469*x10471))+((r11*x10472))+(((-1.0)*r12*sj3*x10482))+((r10*x10479))+(((-1.0)*sj3*x10473*x10481)));
evalcond[5]=(((x10477*x10484))+((r20*x10478))+((cj1*sj2))+(((-1.0)*r20*x10472*x10481))+((r22*x10483))+((r21*x10471))+x10476);
evalcond[6]=((((-1.0)*r00*x10472*x10481))+((x10475*x10484))+((r01*x10471))+((r00*x10478))+(((-1.0)*x10480))+((r02*x10483))+x10470);
evalcond[7]=(((r20*x10479))+(((-1.0)*r22*sj3*x10482))+(((-1.0)*x10480))+((r21*x10472))+x10470+(((-1.0)*sj3*x10477*x10481))+((r20*x10469*x10471)));
evalcond[8]=((((-1.0)*x10476))+((r01*x10472))+((r00*x10479))+((r00*x10469*x10471))+(((-1.0)*sj2*x10474))+(((-1.0)*sj3*x10475*x10481))+(((-1.0)*r02*sj3*x10482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10485=((-1.0)*r21);
CheckValue<IkReal> x10488 = IKatan2WithCheck(IkReal(x10485),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10488.valid){
continue;
}
IkReal x10486=((1.0)*(x10488.value));
IkReal x10487=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10486)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10486)));
IkReal gconst4=(x10485*x10487);
IkReal gconst5=((1.0)*r20*x10487);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10489=((-1.0)*r21);
CheckValue<IkReal> x10492 = IKatan2WithCheck(IkReal(x10489),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10492.valid){
continue;
}
IkReal x10490=((1.0)*(x10492.value));
IkReal x10491=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10490)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10490)));
IkReal gconst4=(x10489*x10491);
IkReal gconst5=((1.0)*r20*x10491);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10493=((-1.0)*r21);
CheckValue<IkReal> x10496 = IKatan2WithCheck(IkReal(x10493),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10496.valid){
continue;
}
IkReal x10494=((1.0)*(x10496.value));
IkReal x10495=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10494)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10494)));
IkReal gconst4=(x10493*x10495);
IkReal gconst5=((1.0)*r20*x10495);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10497=((-1.0)*r21);
CheckValue<IkReal> x10500 = IKatan2WithCheck(IkReal(x10497),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10500.valid){
continue;
}
IkReal x10498=((1.0)*(x10500.value));
IkReal x10499=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10498)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10498)));
IkReal gconst4=(x10497*x10499);
IkReal gconst5=((1.0)*r20*x10499);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10501=((-1.0)*r21);
CheckValue<IkReal> x10504 = IKatan2WithCheck(IkReal(x10501),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10504.valid){
continue;
}
IkReal x10502=((1.0)*(x10504.value));
IkReal x10503=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10502)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10502)));
IkReal gconst4=(x10501*x10503);
IkReal gconst5=((1.0)*r20*x10503);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10505=((-1.0)*r21);
CheckValue<IkReal> x10508 = IKatan2WithCheck(IkReal(x10505),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10508.valid){
continue;
}
IkReal x10506=((1.0)*(x10508.value));
IkReal x10507=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10506)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10506)));
IkReal gconst4=(x10505*x10507);
IkReal gconst5=((1.0)*r20*x10507);
IkReal x10509=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10513=IKPowWithIntegerCheck(x10509,-1);
if(!x10513.valid){
continue;
}
IkReal x10510=x10513.value;
IkReal x10511=((1.0)*x10510);
IkReal x10512=((((-2.0)*r10*r11*r20*r21*x10510))+(((-1.0)*x10511*(r10*r10)*(r20*r20)))+(((-1.0)*x10511*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x10512;
j4eval[1]=r12;
j4eval[2]=x10509;
j4eval[3]=IKsign(x10512);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10514=(gconst5*r10);
IkReal x10515=(gconst4*r11);
CheckValue<IkReal> x10516=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10515*x10515)))+(((-1.0)*(r12*r12)))+(((2.0)*x10514*x10515))+(((-1.0)*(x10514*x10514))))),-1);
if(!x10516.valid){
continue;
}
CheckValue<IkReal> x10517 = IKatan2WithCheck(IkReal(((((-1.0)*x10515))+x10514)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10516.value)))+(x10517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10518=IKsin(j4);
IkReal x10519=IKcos(j4);
IkReal x10520=(gconst4*r11);
IkReal x10521=(gconst5*r10);
IkReal x10522=(gconst4*r01);
IkReal x10523=(gconst5*r00);
IkReal x10524=(gconst4*r21);
IkReal x10525=(gconst5*r20);
IkReal x10526=((1.0)*x10519);
IkReal x10527=((1.0)*x10518);
evalcond[0]=((((-1.0)*r22*x10526))+((x10518*x10524))+(((-1.0)*x10525*x10527)));
evalcond[1]=((((-1.0)*x10523*x10527))+(((-1.0)*r02*x10526))+((x10518*x10522)));
evalcond[2]=((((-1.0)*x10520*x10526))+(((-1.0)*r12*x10527))+((x10519*x10521)));
evalcond[3]=((-1.0)+(((-1.0)*x10521*x10527))+(((-1.0)*r12*x10526))+((x10518*x10520)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10527))+((x10519*x10523))+(((-1.0)*x10522*x10526)));
evalcond[5]=((((-1.0)*r22*x10527))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10519*x10525))+(((-1.0)*x10524*x10526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10528=((1.0)*gconst5);
CheckValue<IkReal> x10529=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10528))+(((-1.0)*gconst4*r20)))),-1);
if(!x10529.valid){
continue;
}
CheckValue<IkReal> x10530 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10528)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10529.value)))+(x10530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10531=IKsin(j4);
IkReal x10532=IKcos(j4);
IkReal x10533=(gconst4*r11);
IkReal x10534=(gconst5*r10);
IkReal x10535=(gconst4*r01);
IkReal x10536=(gconst5*r00);
IkReal x10537=(gconst4*r21);
IkReal x10538=(gconst5*r20);
IkReal x10539=((1.0)*x10532);
IkReal x10540=((1.0)*x10531);
evalcond[0]=((((-1.0)*r22*x10539))+(((-1.0)*x10538*x10540))+((x10531*x10537)));
evalcond[1]=((((-1.0)*r02*x10539))+((x10531*x10535))+(((-1.0)*x10536*x10540)));
evalcond[2]=((((-1.0)*r12*x10540))+((x10532*x10534))+(((-1.0)*x10533*x10539)));
evalcond[3]=((-1.0)+(((-1.0)*x10534*x10540))+(((-1.0)*r12*x10539))+((x10531*x10533)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10540))+(((-1.0)*x10535*x10539))+((x10532*x10536)));
evalcond[5]=((((-1.0)*x10537*x10539))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10540))+((x10532*x10538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10541=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10541.valid){
continue;
}
CheckValue<IkReal> x10542 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10541.value)))+(x10542.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10543=IKsin(j4);
IkReal x10544=IKcos(j4);
IkReal x10545=(gconst4*r11);
IkReal x10546=(gconst5*r10);
IkReal x10547=(gconst4*r01);
IkReal x10548=(gconst5*r00);
IkReal x10549=(gconst4*r21);
IkReal x10550=(gconst5*r20);
IkReal x10551=((1.0)*x10544);
IkReal x10552=((1.0)*x10543);
evalcond[0]=((((-1.0)*x10550*x10552))+((x10543*x10549))+(((-1.0)*r22*x10551)));
evalcond[1]=(((x10543*x10547))+(((-1.0)*r02*x10551))+(((-1.0)*x10548*x10552)));
evalcond[2]=((((-1.0)*x10545*x10551))+(((-1.0)*r12*x10552))+((x10544*x10546)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10551))+(((-1.0)*x10546*x10552))+((x10543*x10545)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10547*x10551))+((x10544*x10548))+(((-1.0)*r02*x10552)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10544*x10550))+(((-1.0)*r22*x10552))+(((-1.0)*x10549*x10551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10553=((-1.0)*r21);
CheckValue<IkReal> x10556 = IKatan2WithCheck(IkReal(x10553),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10556.valid){
continue;
}
IkReal x10554=((1.0)*(x10556.value));
IkReal x10555=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10554)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10554)));
IkReal gconst4=(x10553*x10555);
IkReal gconst5=((1.0)*r20*x10555);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10557=((-1.0)*r21);
CheckValue<IkReal> x10560 = IKatan2WithCheck(IkReal(x10557),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10560.valid){
continue;
}
IkReal x10558=((1.0)*(x10560.value));
IkReal x10559=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10558)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10558)));
IkReal gconst4=(x10557*x10559);
IkReal gconst5=((1.0)*r20*x10559);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10561=((-1.0)*r21);
CheckValue<IkReal> x10564 = IKatan2WithCheck(IkReal(x10561),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10564.valid){
continue;
}
IkReal x10562=((1.0)*(x10564.value));
IkReal x10563=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10562)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10562)));
IkReal gconst4=(x10561*x10563);
IkReal gconst5=((1.0)*r20*x10563);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10565=(gconst5*r10);
IkReal x10566=(gconst4*r11);
CheckValue<IkReal> x10567=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10565*x10566))+(r12*r12)+(x10566*x10566)+(x10565*x10565))),-1);
if(!x10567.valid){
continue;
}
CheckValue<IkReal> x10568 = IKatan2WithCheck(IkReal(((((-1.0)*x10565))+x10566)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10567.value)))+(x10568.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10569=IKcos(j4);
IkReal x10570=IKsin(j4);
IkReal x10571=(gconst4*r11);
IkReal x10572=(gconst5*r10);
IkReal x10573=(gconst5*r00);
IkReal x10574=(gconst5*r20);
IkReal x10575=((1.0)*x10569);
IkReal x10576=(gconst4*x10569);
IkReal x10577=((1.0)*x10570);
IkReal x10578=(gconst4*x10570);
evalcond[0]=(((x10569*x10571))+(((-1.0)*x10572*x10575))+((r12*x10570)));
evalcond[1]=((((-1.0)*r22*x10575))+((r21*x10578))+(((-1.0)*x10574*x10577)));
evalcond[2]=(((r01*x10578))+(((-1.0)*x10573*x10577))+(((-1.0)*r02*x10575)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10575))+((x10570*x10571))+(((-1.0)*x10572*x10577)));
evalcond[4]=(((cj2*sj1))+((r01*x10576))+((cj1*sj2))+(((-1.0)*x10573*x10575))+((r02*x10570)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10576))+((r22*x10570))+(((-1.0)*x10574*x10575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10579=((1.0)*gconst5);
CheckValue<IkReal> x10580=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x10579)))),-1);
if(!x10580.valid){
continue;
}
CheckValue<IkReal> x10581 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10579))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10580.value)))+(x10581.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10582=IKcos(j4);
IkReal x10583=IKsin(j4);
IkReal x10584=(gconst4*r11);
IkReal x10585=(gconst5*r10);
IkReal x10586=(gconst5*r00);
IkReal x10587=(gconst5*r20);
IkReal x10588=((1.0)*x10582);
IkReal x10589=(gconst4*x10582);
IkReal x10590=((1.0)*x10583);
IkReal x10591=(gconst4*x10583);
evalcond[0]=(((r12*x10583))+(((-1.0)*x10585*x10588))+((x10582*x10584)));
evalcond[1]=(((r21*x10591))+(((-1.0)*r22*x10588))+(((-1.0)*x10587*x10590)));
evalcond[2]=(((r01*x10591))+(((-1.0)*r02*x10588))+(((-1.0)*x10586*x10590)));
evalcond[3]=((-1.0)+(((-1.0)*x10585*x10590))+((x10583*x10584))+(((-1.0)*r12*x10588)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x10583))+(((-1.0)*x10586*x10588))+((r01*x10589)));
evalcond[5]=((((-1.0)*x10587*x10588))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10589))+((r22*x10583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10592=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10592.valid){
continue;
}
CheckValue<IkReal> x10593 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10593.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10592.value)))+(x10593.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10594=IKcos(j4);
IkReal x10595=IKsin(j4);
IkReal x10596=(gconst4*r11);
IkReal x10597=(gconst5*r10);
IkReal x10598=(gconst5*r00);
IkReal x10599=(gconst5*r20);
IkReal x10600=((1.0)*x10594);
IkReal x10601=(gconst4*x10594);
IkReal x10602=((1.0)*x10595);
IkReal x10603=(gconst4*x10595);
evalcond[0]=(((r12*x10595))+((x10594*x10596))+(((-1.0)*x10597*x10600)));
evalcond[1]=(((r21*x10603))+(((-1.0)*r22*x10600))+(((-1.0)*x10599*x10602)));
evalcond[2]=((((-1.0)*x10598*x10602))+((r01*x10603))+(((-1.0)*r02*x10600)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10600))+((x10595*x10596))+(((-1.0)*x10597*x10602)));
evalcond[4]=((((-1.0)*x10598*x10600))+((r01*x10601))+((cj2*sj1))+((cj1*sj2))+((r02*x10595)));
evalcond[5]=(((r21*x10601))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10595))+(((-1.0)*x10599*x10600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10604=((-1.0)*r21);
CheckValue<IkReal> x10607 = IKatan2WithCheck(IkReal(x10604),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10607.valid){
continue;
}
IkReal x10605=((1.0)*(x10607.value));
IkReal x10606=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10605)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10605)));
IkReal gconst4=(x10604*x10606);
IkReal gconst5=((1.0)*r20*x10606);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10608=((-1.0)*r21);
CheckValue<IkReal> x10611 = IKatan2WithCheck(IkReal(x10608),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10611.valid){
continue;
}
IkReal x10609=((1.0)*(x10611.value));
IkReal x10610=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10609)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10609)));
IkReal gconst4=(x10608*x10610);
IkReal gconst5=((1.0)*r20*x10610);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10612=((-1.0)*r21);
CheckValue<IkReal> x10615 = IKatan2WithCheck(IkReal(x10612),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10615.valid){
continue;
}
IkReal x10613=((1.0)*(x10615.value));
IkReal x10614=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10613)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10613)));
IkReal gconst4=(x10612*x10614);
IkReal gconst5=((1.0)*r20*x10614);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10616=(gconst5*r10);
IkReal x10617=(gconst4*r11);
CheckValue<IkReal> x10618 = IKatan2WithCheck(IkReal(((((-1.0)*x10616))+x10617)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10618.valid){
continue;
}
CheckValue<IkReal> x10619=IKPowWithIntegerCheck(IKsign(((x10616*x10616)+(r12*r12)+(((-2.0)*x10616*x10617))+(x10617*x10617))),-1);
if(!x10619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10618.value)+(((1.5707963267949)*(x10619.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10620=IKcos(j4);
IkReal x10621=IKsin(j4);
IkReal x10622=(gconst5*r10);
IkReal x10623=(gconst5*r00);
IkReal x10624=(gconst5*r20);
IkReal x10625=((1.0)*x10620);
IkReal x10626=(gconst4*x10621);
IkReal x10627=(gconst4*x10620);
IkReal x10628=((1.0)*x10621);
evalcond[0]=((((-1.0)*x10622*x10625))+((r11*x10627))+((r12*x10621)));
evalcond[1]=(((r21*x10626))+(((-1.0)*x10624*x10628))+(((-1.0)*r22*x10625)));
evalcond[2]=((((-1.0)*r02*x10625))+(((-1.0)*x10623*x10628))+((r01*x10626)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10625))+(((-1.0)*x10622*x10628))+((r11*x10626)));
evalcond[4]=(((r21*x10627))+((cj2*sj1))+(((-1.0)*x10624*x10625))+((cj1*sj2))+((r22*x10621)));
evalcond[5]=((((-1.0)*x10623*x10625))+(((-1.0)*sj1*sj2))+((r01*x10627))+((r02*x10621))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10629=((1.0)*gconst5);
CheckValue<IkReal> x10630=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10629))+(((-1.0)*gconst4*r20)))),-1);
if(!x10630.valid){
continue;
}
CheckValue<IkReal> x10631 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10629))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10630.value)))+(x10631.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10632=IKcos(j4);
IkReal x10633=IKsin(j4);
IkReal x10634=(gconst5*r10);
IkReal x10635=(gconst5*r00);
IkReal x10636=(gconst5*r20);
IkReal x10637=((1.0)*x10632);
IkReal x10638=(gconst4*x10633);
IkReal x10639=(gconst4*x10632);
IkReal x10640=((1.0)*x10633);
evalcond[0]=((((-1.0)*x10634*x10637))+((r12*x10633))+((r11*x10639)));
evalcond[1]=((((-1.0)*x10636*x10640))+(((-1.0)*r22*x10637))+((r21*x10638)));
evalcond[2]=((((-1.0)*r02*x10637))+((r01*x10638))+(((-1.0)*x10635*x10640)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10637))+((r11*x10638))+(((-1.0)*x10634*x10640)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10636*x10637))+((r22*x10633))+((r21*x10639)));
evalcond[5]=((((-1.0)*x10635*x10637))+((r01*x10639))+(((-1.0)*sj1*sj2))+((r02*x10633))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10641=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10641.valid){
continue;
}
CheckValue<IkReal> x10642 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10641.value)))+(x10642.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10643=IKcos(j4);
IkReal x10644=IKsin(j4);
IkReal x10645=(gconst5*r10);
IkReal x10646=(gconst5*r00);
IkReal x10647=(gconst5*r20);
IkReal x10648=((1.0)*x10643);
IkReal x10649=(gconst4*x10644);
IkReal x10650=(gconst4*x10643);
IkReal x10651=((1.0)*x10644);
evalcond[0]=((((-1.0)*x10645*x10648))+((r11*x10650))+((r12*x10644)));
evalcond[1]=(((r21*x10649))+(((-1.0)*x10647*x10651))+(((-1.0)*r22*x10648)));
evalcond[2]=((((-1.0)*r02*x10648))+(((-1.0)*x10646*x10651))+((r01*x10649)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10648))+(((-1.0)*x10645*x10651))+((r11*x10649)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10647*x10648))+((r22*x10644))+((r21*x10650)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x10646*x10648))+((r02*x10644))+((cj1*cj2))+((r01*x10650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10652=((-1.0)*r21);
CheckValue<IkReal> x10655 = IKatan2WithCheck(IkReal(x10652),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10655.valid){
continue;
}
IkReal x10653=((1.0)*(x10655.value));
IkReal x10654=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10653)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10653)));
IkReal gconst4=(x10652*x10654);
IkReal gconst5=((1.0)*r20*x10654);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10656=((-1.0)*r21);
CheckValue<IkReal> x10659 = IKatan2WithCheck(IkReal(x10656),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10659.valid){
continue;
}
IkReal x10657=((1.0)*(x10659.value));
IkReal x10658=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10657)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10657)));
IkReal gconst4=(x10656*x10658);
IkReal gconst5=((1.0)*r20*x10658);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10660=((-1.0)*r21);
CheckValue<IkReal> x10663 = IKatan2WithCheck(IkReal(x10660),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10663.valid){
continue;
}
IkReal x10661=((1.0)*(x10663.value));
IkReal x10662=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10661)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10661)));
IkReal gconst4=(x10660*x10662);
IkReal gconst5=((1.0)*r20*x10662);
IkReal x10664=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10668=IKPowWithIntegerCheck(x10664,-1);
if(!x10668.valid){
continue;
}
IkReal x10665=x10668.value;
IkReal x10666=((1.0)*x10665);
IkReal x10667=((((-1.0)*x10666*(r10*r10)*(r20*r20)))+(((-1.0)*x10666*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10665)));
j4eval[0]=x10667;
j4eval[1]=r12;
j4eval[2]=x10664;
j4eval[3]=IKsign(x10667);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10669=(gconst5*r10);
IkReal x10670=(gconst4*r11);
CheckValue<IkReal> x10671 = IKatan2WithCheck(IkReal(((((-1.0)*x10670))+x10669)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10671.valid){
continue;
}
CheckValue<IkReal> x10672=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10670*x10670)))+(((-1.0)*(x10669*x10669)))+(((2.0)*x10669*x10670))+(((-1.0)*(r12*r12))))),-1);
if(!x10672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10671.value)+(((1.5707963267949)*(x10672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10673=IKsin(j4);
IkReal x10674=IKcos(j4);
IkReal x10675=(gconst4*r11);
IkReal x10676=(gconst5*r10);
IkReal x10677=(gconst5*r00);
IkReal x10678=(gconst5*r20);
IkReal x10679=((1.0)*x10674);
IkReal x10680=(gconst4*x10673);
IkReal x10681=((1.0)*x10673);
evalcond[0]=((((-1.0)*x10678*x10681))+(((-1.0)*r22*x10679))+((r21*x10680)));
evalcond[1]=((((-1.0)*r02*x10679))+((r01*x10680))+(((-1.0)*x10677*x10681)));
evalcond[2]=((((-1.0)*r12*x10681))+(((-1.0)*x10675*x10679))+((x10674*x10676)));
evalcond[3]=((-1.0)+((x10673*x10675))+(((-1.0)*x10676*x10681))+(((-1.0)*r12*x10679)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10681))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10679))+((x10674*x10678)));
evalcond[5]=((((-1.0)*r02*x10681))+(((-1.0)*sj1*sj2))+((x10674*x10677))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10682=((1.0)*gconst5);
CheckValue<IkReal> x10683=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10682))+(((-1.0)*gconst4*r20)))),-1);
if(!x10683.valid){
continue;
}
CheckValue<IkReal> x10684 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10683.value)))+(x10684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10685=IKsin(j4);
IkReal x10686=IKcos(j4);
IkReal x10687=(gconst4*r11);
IkReal x10688=(gconst5*r10);
IkReal x10689=(gconst5*r00);
IkReal x10690=(gconst5*r20);
IkReal x10691=((1.0)*x10686);
IkReal x10692=(gconst4*x10685);
IkReal x10693=((1.0)*x10685);
evalcond[0]=(((r21*x10692))+(((-1.0)*x10690*x10693))+(((-1.0)*r22*x10691)));
evalcond[1]=((((-1.0)*r02*x10691))+(((-1.0)*x10689*x10693))+((r01*x10692)));
evalcond[2]=((((-1.0)*r12*x10693))+((x10686*x10688))+(((-1.0)*x10687*x10691)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10691))+((x10685*x10687))+(((-1.0)*x10688*x10693)));
evalcond[4]=(((x10686*x10690))+((cj2*sj1))+(((-1.0)*gconst4*r21*x10691))+((cj1*sj2))+(((-1.0)*r22*x10693)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x10686*x10689))+(((-1.0)*r02*x10693))+(((-1.0)*gconst4*r01*x10691))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10694=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10694.valid){
continue;
}
CheckValue<IkReal> x10695 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10694.value)))+(x10695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10696=IKsin(j4);
IkReal x10697=IKcos(j4);
IkReal x10698=(gconst4*r11);
IkReal x10699=(gconst5*r10);
IkReal x10700=(gconst5*r00);
IkReal x10701=(gconst5*r20);
IkReal x10702=((1.0)*x10697);
IkReal x10703=(gconst4*x10696);
IkReal x10704=((1.0)*x10696);
evalcond[0]=((((-1.0)*r22*x10702))+((r21*x10703))+(((-1.0)*x10701*x10704)));
evalcond[1]=(((r01*x10703))+(((-1.0)*r02*x10702))+(((-1.0)*x10700*x10704)));
evalcond[2]=((((-1.0)*r12*x10704))+(((-1.0)*x10698*x10702))+((x10697*x10699)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10702))+(((-1.0)*x10699*x10704))+((x10696*x10698)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10702))+((cj1*sj2))+(((-1.0)*r22*x10704))+((x10697*x10701)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10702))+((x10697*x10700))+(((-1.0)*r02*x10704))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10705=((-1.0)*r21);
IkReal x10706=((-1.0)*px);
CheckValue<IkReal> x10708 = IKatan2WithCheck(IkReal(x10705),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10708.valid){
continue;
}
IkReal x10707=((1.0)*(x10708.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10707)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10706);
rxp1_1=(px*r21);
rxp1_2=(r11*x10706);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10707)));
IkReal gconst4=x10705;
IkReal gconst5=((1.0)*r20);
IkReal x10709=((1.0)*cj3);
IkReal x10710=(r10*r20);
IkReal x10711=(r11*r21);
j4eval[0]=((((-1.0)*x10710))+(((-1.0)*x10711)));
j4eval[1]=((((-1.0)*x10709*x10711))+(((-1.0)*x10709*x10710)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10712=((-1.0)*r21);
IkReal x10713=((-1.0)*px);
CheckValue<IkReal> x10715 = IKatan2WithCheck(IkReal(x10712),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10715.valid){
continue;
}
IkReal x10714=((1.0)*(x10715.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10714)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10713);
rxp1_1=(px*r21);
rxp1_2=(r11*x10713);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10714)));
IkReal gconst4=x10712;
IkReal gconst5=((1.0)*r20);
IkReal x10716=((1.0)*r11*r21);
IkReal x10717=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10717))+(((-1.0)*x10716)));
j4eval[1]=(((sj3*x10717))+((sj3*x10716)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10718=((-1.0)*r21);
IkReal x10719=((-1.0)*px);
CheckValue<IkReal> x10721 = IKatan2WithCheck(IkReal(x10718),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10721.valid){
continue;
}
IkReal x10720=((1.0)*(x10721.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10720)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10719);
rxp1_1=(px*r21);
rxp1_2=(r11*x10719);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10720)));
IkReal gconst4=x10718;
IkReal gconst5=((1.0)*r20);
IkReal x10722=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r21*x10722))+(((-1.0)*r10*r20*x10722)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10723=((1.0)*r10);
CheckValue<IkReal> x10724=IKPowWithIntegerCheck(cj3,-1);
if(!x10724.valid){
continue;
}
CheckValue<IkReal> x10725=IKPowWithIntegerCheck(r02,-1);
if(!x10725.valid){
continue;
}
CheckValue<IkReal> x10726=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10723))),-1);
if(!x10726.valid){
continue;
}
if( IKabs(((x10724.value)*(x10725.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10726.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10723)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10724.value)*(x10725.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10726.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10723))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10724.value)*(x10725.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10726.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10723))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10727=IKsin(j4);
IkReal x10728=IKcos(j4);
IkReal x10729=(cj2*sj1);
IkReal x10730=(cj1*sj2);
IkReal x10731=(gconst5*sj3);
IkReal x10732=(gconst4*r11);
IkReal x10733=(sj1*sj2);
IkReal x10734=((1.0)*gconst5);
IkReal x10735=(cj1*cj2);
IkReal x10736=(gconst4*r21);
IkReal x10737=(cj3*gconst4);
IkReal x10738=(gconst4*sj3);
IkReal x10739=(cj3*gconst5);
IkReal x10740=(r20*x10728);
IkReal x10741=(r10*x10728);
IkReal x10742=(cj3*x10728);
IkReal x10743=(r02*x10727);
IkReal x10744=(x10729+x10730);
IkReal x10745=((1.0)*sj3*x10728);
evalcond[0]=((-1.0)*r02*x10728);
evalcond[1]=(((x10727*x10736))+(((-1.0)*r20*x10727*x10734)));
evalcond[2]=(((cj3*x10743))+(((-1.0)*x10733))+x10735);
evalcond[3]=((((-1.0)*sj3*x10743))+x10744);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10727*x10734))+((x10727*x10732)));
evalcond[5]=(((r10*x10738))+((x10732*x10742))+(((-1.0)*cj3*x10734*x10741))+((r11*x10731)));
evalcond[6]=(((r10*x10737))+((x10731*x10741))+(((-1.0)*x10732*x10745))+((r11*x10739)));
evalcond[7]=(((r21*x10731))+((x10736*x10742))+(((-1.0)*cj3*x10734*x10740))+((r20*x10738))+x10744);
evalcond[8]=(((x10731*x10740))+((r21*x10739))+((r20*x10737))+(((-1.0)*x10735))+(((-1.0)*x10736*x10745))+x10733);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10746=((1.0)*gconst5);
IkReal x10747=(gconst4*r11);
CheckValue<IkReal> x10748=IKPowWithIntegerCheck(((((-1.0)*r10*x10746))+x10747),-1);
if(!x10748.valid){
continue;
}
CheckValue<IkReal> x10749=IKPowWithIntegerCheck(((((-1.0)*sj3*x10747))+((gconst5*r10*sj3))),-1);
if(!x10749.valid){
continue;
}
if( IKabs(x10748.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10749.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10746)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10748.value)+IKsqr(((x10749.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10746))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10748.value, ((x10749.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10746))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10750=IKsin(j4);
IkReal x10751=IKcos(j4);
IkReal x10752=(cj2*sj1);
IkReal x10753=(cj1*sj2);
IkReal x10754=(gconst5*sj3);
IkReal x10755=(gconst4*r11);
IkReal x10756=(sj1*sj2);
IkReal x10757=((1.0)*gconst5);
IkReal x10758=(cj1*cj2);
IkReal x10759=(gconst4*r21);
IkReal x10760=(cj3*gconst4);
IkReal x10761=(gconst4*sj3);
IkReal x10762=(cj3*gconst5);
IkReal x10763=(r20*x10751);
IkReal x10764=(r10*x10751);
IkReal x10765=(cj3*x10751);
IkReal x10766=(r02*x10750);
IkReal x10767=(x10752+x10753);
IkReal x10768=((1.0)*sj3*x10751);
evalcond[0]=((-1.0)*r02*x10751);
evalcond[1]=((((-1.0)*r20*x10750*x10757))+((x10750*x10759)));
evalcond[2]=(((cj3*x10766))+x10758+(((-1.0)*x10756)));
evalcond[3]=((((-1.0)*sj3*x10766))+x10767);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10750*x10757))+((x10750*x10755)));
evalcond[5]=((((-1.0)*cj3*x10757*x10764))+((x10755*x10765))+((r11*x10754))+((r10*x10761)));
evalcond[6]=(((r11*x10762))+(((-1.0)*x10755*x10768))+((r10*x10760))+((x10754*x10764)));
evalcond[7]=(((x10759*x10765))+(((-1.0)*cj3*x10757*x10763))+((r20*x10761))+x10767+((r21*x10754)));
evalcond[8]=(((r20*x10760))+((r21*x10762))+x10756+(((-1.0)*x10759*x10768))+((x10754*x10763))+(((-1.0)*x10758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10769=((1.0)*sj3);
IkReal x10770=(gconst4*r11);
IkReal x10771=((1.0)*gconst5*r10);
CheckValue<IkReal> x10772=IKPowWithIntegerCheck(((((-1.0)*x10771))+x10770),-1);
if(!x10772.valid){
continue;
}
CheckValue<IkReal> x10773=IKPowWithIntegerCheck((((cj3*x10770))+(((-1.0)*cj3*x10771))),-1);
if(!x10773.valid){
continue;
}
if( IKabs(x10772.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10773.value)*(((((-1.0)*gconst5*r11*x10769))+(((-1.0)*gconst4*r10*x10769)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10772.value)+IKsqr(((x10773.value)*(((((-1.0)*gconst5*r11*x10769))+(((-1.0)*gconst4*r10*x10769))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10772.value, ((x10773.value)*(((((-1.0)*gconst5*r11*x10769))+(((-1.0)*gconst4*r10*x10769))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10774=IKsin(j4);
IkReal x10775=IKcos(j4);
IkReal x10776=(cj2*sj1);
IkReal x10777=(cj1*sj2);
IkReal x10778=(gconst5*sj3);
IkReal x10779=(gconst4*r11);
IkReal x10780=(sj1*sj2);
IkReal x10781=((1.0)*gconst5);
IkReal x10782=(cj1*cj2);
IkReal x10783=(gconst4*r21);
IkReal x10784=(cj3*gconst4);
IkReal x10785=(gconst4*sj3);
IkReal x10786=(cj3*gconst5);
IkReal x10787=(r20*x10775);
IkReal x10788=(r10*x10775);
IkReal x10789=(cj3*x10775);
IkReal x10790=(r02*x10774);
IkReal x10791=(x10776+x10777);
IkReal x10792=((1.0)*sj3*x10775);
evalcond[0]=((-1.0)*r02*x10775);
evalcond[1]=((((-1.0)*r20*x10774*x10781))+((x10774*x10783)));
evalcond[2]=((((-1.0)*x10780))+((cj3*x10790))+x10782);
evalcond[3]=((((-1.0)*sj3*x10790))+x10791);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10774*x10781))+((x10774*x10779)));
evalcond[5]=(((r11*x10778))+((x10779*x10789))+((r10*x10785))+(((-1.0)*cj3*x10781*x10788)));
evalcond[6]=(((r11*x10786))+((x10778*x10788))+(((-1.0)*x10779*x10792))+((r10*x10784)));
evalcond[7]=(((x10783*x10789))+((r20*x10785))+((r21*x10778))+x10791+(((-1.0)*cj3*x10781*x10787)));
evalcond[8]=(((r21*x10786))+((x10778*x10787))+((r20*x10784))+(((-1.0)*x10782))+x10780+(((-1.0)*x10783*x10792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10793=gconst4*gconst4;
IkReal x10794=gconst5*gconst5;
IkReal x10795=(r10*r21);
IkReal x10796=((1.0)*cj3);
IkReal x10797=(r11*r21);
IkReal x10798=(r11*r20);
IkReal x10799=(r22*sj3);
IkReal x10800=(gconst4*r10);
IkReal x10801=((1.0)*sj3);
IkReal x10802=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x10796))+((x10795*x10802))+(((-1.0)*x10793*x10796*x10797))+((x10798*x10802))+(((-1.0)*r10*r20*x10794*x10796)))),-1);
if(!x10803.valid){
continue;
}
CheckValue<IkReal> x10804 = IKatan2WithCheck(IkReal((((x10799*x10800))+((gconst5*r11*x10799)))),IkReal(((((-1.0)*gconst5*r20*x10800*x10801))+((sj3*x10793*x10795))+(((-1.0)*x10794*x10798*x10801))+((gconst4*gconst5*sj3*x10797)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10803.value)))+(x10804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10805=IKsin(j4);
IkReal x10806=IKcos(j4);
IkReal x10807=(cj2*sj1);
IkReal x10808=(cj1*sj2);
IkReal x10809=(gconst5*sj3);
IkReal x10810=(gconst4*r11);
IkReal x10811=(sj1*sj2);
IkReal x10812=(gconst5*r10);
IkReal x10813=(cj1*cj2);
IkReal x10814=(gconst4*r01);
IkReal x10815=(gconst4*r21);
IkReal x10816=(gconst5*r00);
IkReal x10817=(gconst4*sj3);
IkReal x10818=(cj3*gconst5);
IkReal x10819=(cj3*gconst4);
IkReal x10820=((1.0)*x10806);
IkReal x10821=((1.0)*x10805);
IkReal x10822=(cj3*x10805);
IkReal x10823=(cj3*x10806);
IkReal x10824=(x10808+x10807);
evalcond[0]=(((x10805*x10815))+(((-1.0)*gconst5*r20*x10821))+(((-1.0)*r22*x10820)));
evalcond[1]=(((x10805*x10814))+(((-1.0)*r02*x10820))+(((-1.0)*x10816*x10821)));
evalcond[2]=((-1.0)+((x10805*x10810))+(((-1.0)*x10812*x10821))+(((-1.0)*r12*x10820)));
evalcond[3]=(((r12*x10822))+((x10810*x10823))+(((-1.0)*cj3*x10812*x10820))+((r11*x10809))+((r10*x10817)));
evalcond[4]=(((r10*x10806*x10809))+(((-1.0)*r12*sj3*x10821))+((r10*x10819))+((r11*x10818))+(((-1.0)*sj3*x10810*x10820)));
evalcond[5]=(((x10815*x10823))+(((-1.0)*r20*x10818*x10820))+((r20*x10817))+((r21*x10809))+((r22*x10822))+x10824);
evalcond[6]=((((-1.0)*x10811))+((r02*x10822))+((x10814*x10823))+((r01*x10809))+(((-1.0)*cj3*x10816*x10820))+((r00*x10817))+x10813);
evalcond[7]=((((-1.0)*r02*sj3*x10821))+(((-1.0)*sj3*x10814*x10820))+((r01*x10818))+((r00*x10806*x10809))+((r00*x10819))+x10824);
evalcond[8]=(((r20*x10806*x10809))+(((-1.0)*x10813))+((r20*x10819))+(((-1.0)*r22*sj3*x10821))+(((-1.0)*sj3*x10815*x10820))+((r21*x10818))+x10811);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10825=((1.0)*gconst5);
CheckValue<IkReal> x10826 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10825)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10826.valid){
continue;
}
CheckValue<IkReal> x10827=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10825))+(((-1.0)*gconst4*r20)))),-1);
if(!x10827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10826.value)+(((1.5707963267949)*(x10827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10828=IKsin(j4);
IkReal x10829=IKcos(j4);
IkReal x10830=(cj2*sj1);
IkReal x10831=(cj1*sj2);
IkReal x10832=(gconst5*sj3);
IkReal x10833=(gconst4*r11);
IkReal x10834=(sj1*sj2);
IkReal x10835=(gconst5*r10);
IkReal x10836=(cj1*cj2);
IkReal x10837=(gconst4*r01);
IkReal x10838=(gconst4*r21);
IkReal x10839=(gconst5*r00);
IkReal x10840=(gconst4*sj3);
IkReal x10841=(cj3*gconst5);
IkReal x10842=(cj3*gconst4);
IkReal x10843=((1.0)*x10829);
IkReal x10844=((1.0)*x10828);
IkReal x10845=(cj3*x10828);
IkReal x10846=(cj3*x10829);
IkReal x10847=(x10831+x10830);
evalcond[0]=((((-1.0)*r22*x10843))+(((-1.0)*gconst5*r20*x10844))+((x10828*x10838)));
evalcond[1]=((((-1.0)*r02*x10843))+(((-1.0)*x10839*x10844))+((x10828*x10837)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10843))+(((-1.0)*x10835*x10844))+((x10828*x10833)));
evalcond[3]=(((x10833*x10846))+(((-1.0)*cj3*x10835*x10843))+((r12*x10845))+((r10*x10840))+((r11*x10832)));
evalcond[4]=((((-1.0)*sj3*x10833*x10843))+((r10*x10829*x10832))+((r11*x10841))+(((-1.0)*r12*sj3*x10844))+((r10*x10842)));
evalcond[5]=(((x10838*x10846))+((r22*x10845))+((r20*x10840))+((r21*x10832))+(((-1.0)*r20*x10841*x10843))+x10847);
evalcond[6]=((((-1.0)*x10834))+((r00*x10840))+((r02*x10845))+((r01*x10832))+(((-1.0)*cj3*x10839*x10843))+((x10837*x10846))+x10836);
evalcond[7]=(((r01*x10841))+((r00*x10842))+(((-1.0)*r02*sj3*x10844))+(((-1.0)*sj3*x10837*x10843))+((r00*x10829*x10832))+x10847);
evalcond[8]=((((-1.0)*x10836))+(((-1.0)*r22*sj3*x10844))+((r20*x10829*x10832))+((r21*x10841))+((r20*x10842))+(((-1.0)*sj3*x10838*x10843))+x10834);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10848=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10848.valid){
continue;
}
CheckValue<IkReal> x10849 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10848.value)))+(x10849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10850=IKsin(j4);
IkReal x10851=IKcos(j4);
IkReal x10852=(cj2*sj1);
IkReal x10853=(cj1*sj2);
IkReal x10854=(gconst5*sj3);
IkReal x10855=(gconst4*r11);
IkReal x10856=(sj1*sj2);
IkReal x10857=(gconst5*r10);
IkReal x10858=(cj1*cj2);
IkReal x10859=(gconst4*r01);
IkReal x10860=(gconst4*r21);
IkReal x10861=(gconst5*r00);
IkReal x10862=(gconst4*sj3);
IkReal x10863=(cj3*gconst5);
IkReal x10864=(cj3*gconst4);
IkReal x10865=((1.0)*x10851);
IkReal x10866=((1.0)*x10850);
IkReal x10867=(cj3*x10850);
IkReal x10868=(cj3*x10851);
IkReal x10869=(x10853+x10852);
evalcond[0]=((((-1.0)*r22*x10865))+(((-1.0)*gconst5*r20*x10866))+((x10850*x10860)));
evalcond[1]=((((-1.0)*x10861*x10866))+((x10850*x10859))+(((-1.0)*r02*x10865)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10865))+(((-1.0)*x10857*x10866))+((x10850*x10855)));
evalcond[3]=(((r11*x10854))+((r12*x10867))+((x10855*x10868))+((r10*x10862))+(((-1.0)*cj3*x10857*x10865)));
evalcond[4]=((((-1.0)*sj3*x10855*x10865))+((r11*x10863))+((r10*x10851*x10854))+((r10*x10864))+(((-1.0)*r12*sj3*x10866)));
evalcond[5]=(((r21*x10854))+((x10860*x10868))+(((-1.0)*r20*x10863*x10865))+((r20*x10862))+((r22*x10867))+x10869);
evalcond[6]=(((x10859*x10868))+((r01*x10854))+((r00*x10862))+(((-1.0)*cj3*x10861*x10865))+(((-1.0)*x10856))+((r02*x10867))+x10858);
evalcond[7]=(((r00*x10851*x10854))+((r00*x10864))+(((-1.0)*sj3*x10859*x10865))+((r01*x10863))+(((-1.0)*r02*sj3*x10866))+x10869);
evalcond[8]=((((-1.0)*r22*sj3*x10866))+((r21*x10863))+(((-1.0)*sj3*x10860*x10865))+((r20*x10864))+(((-1.0)*x10858))+((r20*x10851*x10854))+x10856);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10870=((-1.0)*r21);
CheckValue<IkReal> x10873 = IKatan2WithCheck(IkReal(x10870),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10873.valid){
continue;
}
IkReal x10871=((1.0)*(x10873.value));
IkReal x10872=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10871)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10871)));
IkReal gconst4=(x10870*x10872);
IkReal gconst5=((1.0)*r20*x10872);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10874=((-1.0)*r21);
CheckValue<IkReal> x10877 = IKatan2WithCheck(IkReal(x10874),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10877.valid){
continue;
}
IkReal x10875=((1.0)*(x10877.value));
IkReal x10876=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10875)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10875)));
IkReal gconst4=(x10874*x10876);
IkReal gconst5=((1.0)*r20*x10876);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10878=((-1.0)*r21);
CheckValue<IkReal> x10881 = IKatan2WithCheck(IkReal(x10878),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10881.valid){
continue;
}
IkReal x10879=((1.0)*(x10881.value));
IkReal x10880=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10879)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10879)));
IkReal gconst4=(x10878*x10880);
IkReal gconst5=((1.0)*r20*x10880);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10882=((-1.0)*r21);
CheckValue<IkReal> x10885 = IKatan2WithCheck(IkReal(x10882),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10885.valid){
continue;
}
IkReal x10883=((1.0)*(x10885.value));
IkReal x10884=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10883)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10883)));
IkReal gconst4=(x10882*x10884);
IkReal gconst5=((1.0)*r20*x10884);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10886=((-1.0)*r21);
CheckValue<IkReal> x10889 = IKatan2WithCheck(IkReal(x10886),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10889.valid){
continue;
}
IkReal x10887=((1.0)*(x10889.value));
IkReal x10888=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10887)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10887)));
IkReal gconst4=(x10886*x10888);
IkReal gconst5=((1.0)*r20*x10888);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10890=((-1.0)*r21);
CheckValue<IkReal> x10893 = IKatan2WithCheck(IkReal(x10890),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10893.valid){
continue;
}
IkReal x10891=((1.0)*(x10893.value));
IkReal x10892=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10891)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10891)));
IkReal gconst4=(x10890*x10892);
IkReal gconst5=((1.0)*r20*x10892);
IkReal x10894=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10898=IKPowWithIntegerCheck(x10894,-1);
if(!x10898.valid){
continue;
}
IkReal x10895=x10898.value;
IkReal x10896=((1.0)*x10895);
IkReal x10897=((((-1.0)*x10896*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10896*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10895)));
j4eval[0]=x10897;
j4eval[1]=r02;
j4eval[2]=x10894;
j4eval[3]=IKsign(x10897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10899=(gconst5*r00);
IkReal x10900=(gconst4*r01);
CheckValue<IkReal> x10901=IKPowWithIntegerCheck(IKsign(((((2.0)*x10899*x10900))+(((-1.0)*(x10899*x10899)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10900*x10900))))),-1);
if(!x10901.valid){
continue;
}
CheckValue<IkReal> x10902 = IKatan2WithCheck(IkReal(((((-1.0)*x10900))+x10899)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10901.value)))+(x10902.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10903=IKsin(j4);
IkReal x10904=IKcos(j4);
IkReal x10905=(gconst4*r11);
IkReal x10906=((1.0)*cj1);
IkReal x10907=(gconst5*r10);
IkReal x10908=(gconst4*r01);
IkReal x10909=(gconst5*r00);
IkReal x10910=(gconst4*r21);
IkReal x10911=(gconst5*r20);
IkReal x10912=((1.0)*x10904);
IkReal x10913=((1.0)*x10903);
evalcond[0]=((((-1.0)*r22*x10912))+(((-1.0)*x10911*x10913))+((x10903*x10910)));
evalcond[1]=((((-1.0)*r12*x10912))+((x10903*x10905))+(((-1.0)*x10907*x10913)));
evalcond[2]=((((-1.0)*x10908*x10912))+(((-1.0)*r02*x10913))+((x10904*x10909)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10912))+((x10903*x10908))+(((-1.0)*x10909*x10913)));
evalcond[4]=((((-1.0)*r22*x10913))+((sj1*sj2))+(((-1.0)*x10910*x10912))+(((-1.0)*cj2*x10906))+((x10904*x10911)));
evalcond[5]=((((-1.0)*r12*x10913))+(((-1.0)*cj2*sj1))+(((-1.0)*x10905*x10912))+((x10904*x10907))+(((-1.0)*sj2*x10906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10914=((1.0)*gconst5);
CheckValue<IkReal> x10915=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10914))+(((-1.0)*gconst4*r10)))),-1);
if(!x10915.valid){
continue;
}
CheckValue<IkReal> x10916 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10914))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10915.value)))+(x10916.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10917=IKsin(j4);
IkReal x10918=IKcos(j4);
IkReal x10919=(gconst4*r11);
IkReal x10920=((1.0)*cj1);
IkReal x10921=(gconst5*r10);
IkReal x10922=(gconst4*r01);
IkReal x10923=(gconst5*r00);
IkReal x10924=(gconst4*r21);
IkReal x10925=(gconst5*r20);
IkReal x10926=((1.0)*x10918);
IkReal x10927=((1.0)*x10917);
evalcond[0]=(((x10917*x10924))+(((-1.0)*r22*x10926))+(((-1.0)*x10925*x10927)));
evalcond[1]=((((-1.0)*r12*x10926))+(((-1.0)*x10921*x10927))+((x10917*x10919)));
evalcond[2]=((((-1.0)*r02*x10927))+((x10918*x10923))+(((-1.0)*x10922*x10926)));
evalcond[3]=((-1.0)+((x10917*x10922))+(((-1.0)*r02*x10926))+(((-1.0)*x10923*x10927)));
evalcond[4]=((((-1.0)*r22*x10927))+((sj1*sj2))+(((-1.0)*x10924*x10926))+(((-1.0)*cj2*x10920))+((x10918*x10925)));
evalcond[5]=((((-1.0)*sj2*x10920))+(((-1.0)*r12*x10927))+(((-1.0)*cj2*sj1))+(((-1.0)*x10919*x10926))+((x10918*x10921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10928 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10928.valid){
continue;
}
CheckValue<IkReal> x10929=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10928.value)+(((1.5707963267949)*(x10929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10930=IKsin(j4);
IkReal x10931=IKcos(j4);
IkReal x10932=(gconst4*r11);
IkReal x10933=((1.0)*cj1);
IkReal x10934=(gconst5*r10);
IkReal x10935=(gconst4*r01);
IkReal x10936=(gconst5*r00);
IkReal x10937=(gconst4*r21);
IkReal x10938=(gconst5*r20);
IkReal x10939=((1.0)*x10931);
IkReal x10940=((1.0)*x10930);
evalcond[0]=(((x10930*x10937))+(((-1.0)*r22*x10939))+(((-1.0)*x10938*x10940)));
evalcond[1]=(((x10930*x10932))+(((-1.0)*r12*x10939))+(((-1.0)*x10934*x10940)));
evalcond[2]=(((x10931*x10936))+(((-1.0)*r02*x10940))+(((-1.0)*x10935*x10939)));
evalcond[3]=((-1.0)+(((-1.0)*x10936*x10940))+((x10930*x10935))+(((-1.0)*r02*x10939)));
evalcond[4]=(((x10931*x10938))+(((-1.0)*x10937*x10939))+((sj1*sj2))+(((-1.0)*r22*x10940))+(((-1.0)*cj2*x10933)));
evalcond[5]=(((x10931*x10934))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x10940))+(((-1.0)*x10932*x10939))+(((-1.0)*sj2*x10933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10941=((-1.0)*r21);
CheckValue<IkReal> x10944 = IKatan2WithCheck(IkReal(x10941),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10944.valid){
continue;
}
IkReal x10942=((1.0)*(x10944.value));
IkReal x10943=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10942)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10942)));
IkReal gconst4=(x10941*x10943);
IkReal gconst5=((1.0)*r20*x10943);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10945=((-1.0)*r21);
CheckValue<IkReal> x10948 = IKatan2WithCheck(IkReal(x10945),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10948.valid){
continue;
}
IkReal x10946=((1.0)*(x10948.value));
IkReal x10947=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10946)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10946)));
IkReal gconst4=(x10945*x10947);
IkReal gconst5=((1.0)*r20*x10947);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10949=((-1.0)*r21);
CheckValue<IkReal> x10952 = IKatan2WithCheck(IkReal(x10949),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10952.valid){
continue;
}
IkReal x10950=((1.0)*(x10952.value));
IkReal x10951=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10950)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10950)));
IkReal gconst4=(x10949*x10951);
IkReal gconst5=((1.0)*r20*x10951);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10953=(gconst4*r01);
IkReal x10954=(gconst5*r00);
CheckValue<IkReal> x10955=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10953*x10954))+(x10954*x10954)+(x10953*x10953)+(r02*r02))),-1);
if(!x10955.valid){
continue;
}
CheckValue<IkReal> x10956 = IKatan2WithCheck(IkReal(((((-1.0)*x10954))+x10953)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10955.value)))+(x10956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10957=IKcos(j4);
IkReal x10958=IKsin(j4);
IkReal x10959=(gconst4*r11);
IkReal x10960=(gconst5*r10);
IkReal x10961=((1.0)*cj1);
IkReal x10962=(gconst5*r00);
IkReal x10963=(gconst5*r20);
IkReal x10964=((1.0)*x10957);
IkReal x10965=(gconst4*x10957);
IkReal x10966=((1.0)*x10958);
IkReal x10967=(gconst4*x10958);
evalcond[0]=(((r02*x10958))+((r01*x10965))+(((-1.0)*x10962*x10964)));
evalcond[1]=((((-1.0)*x10963*x10966))+(((-1.0)*r22*x10964))+((r21*x10967)));
evalcond[2]=((((-1.0)*x10960*x10966))+((x10958*x10959))+(((-1.0)*r12*x10964)));
evalcond[3]=((-1.0)+((r01*x10967))+(((-1.0)*x10962*x10966))+(((-1.0)*r02*x10964)));
evalcond[4]=(((r22*x10958))+(((-1.0)*x10963*x10964))+((sj1*sj2))+((r21*x10965))+(((-1.0)*cj2*x10961)));
evalcond[5]=((((-1.0)*x10960*x10964))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10961))+((r12*x10958))+((x10957*x10959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10968=((1.0)*gconst5);
CheckValue<IkReal> x10969 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10968))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10969.valid){
continue;
}
CheckValue<IkReal> x10970=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10968))+(((-1.0)*gconst4*r10)))),-1);
if(!x10970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10969.value)+(((1.5707963267949)*(x10970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10971=IKcos(j4);
IkReal x10972=IKsin(j4);
IkReal x10973=(gconst4*r11);
IkReal x10974=(gconst5*r10);
IkReal x10975=((1.0)*cj1);
IkReal x10976=(gconst5*r00);
IkReal x10977=(gconst5*r20);
IkReal x10978=((1.0)*x10971);
IkReal x10979=(gconst4*x10971);
IkReal x10980=((1.0)*x10972);
IkReal x10981=(gconst4*x10972);
evalcond[0]=(((r02*x10972))+(((-1.0)*x10976*x10978))+((r01*x10979)));
evalcond[1]=(((r21*x10981))+(((-1.0)*r22*x10978))+(((-1.0)*x10977*x10980)));
evalcond[2]=(((x10972*x10973))+(((-1.0)*x10974*x10980))+(((-1.0)*r12*x10978)));
evalcond[3]=((-1.0)+((r01*x10981))+(((-1.0)*r02*x10978))+(((-1.0)*x10976*x10980)));
evalcond[4]=((((-1.0)*cj2*x10975))+((r22*x10972))+((sj1*sj2))+((r21*x10979))+(((-1.0)*x10977*x10978)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x10971*x10973))+(((-1.0)*sj2*x10975))+((r12*x10972))+(((-1.0)*x10974*x10978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10982 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10982.valid){
continue;
}
CheckValue<IkReal> x10983=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10982.value)+(((1.5707963267949)*(x10983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10984=IKcos(j4);
IkReal x10985=IKsin(j4);
IkReal x10986=(gconst4*r11);
IkReal x10987=(gconst5*r10);
IkReal x10988=((1.0)*cj1);
IkReal x10989=(gconst5*r00);
IkReal x10990=(gconst5*r20);
IkReal x10991=((1.0)*x10984);
IkReal x10992=(gconst4*x10984);
IkReal x10993=((1.0)*x10985);
IkReal x10994=(gconst4*x10985);
evalcond[0]=(((r01*x10992))+(((-1.0)*x10989*x10991))+((r02*x10985)));
evalcond[1]=(((r21*x10994))+(((-1.0)*r22*x10991))+(((-1.0)*x10990*x10993)));
evalcond[2]=(((x10985*x10986))+(((-1.0)*r12*x10991))+(((-1.0)*x10987*x10993)));
evalcond[3]=((-1.0)+((r01*x10994))+(((-1.0)*x10989*x10993))+(((-1.0)*r02*x10991)));
evalcond[4]=(((r22*x10985))+((r21*x10992))+(((-1.0)*cj2*x10988))+((sj1*sj2))+(((-1.0)*x10990*x10991)));
evalcond[5]=(((r12*x10985))+(((-1.0)*sj2*x10988))+(((-1.0)*cj2*sj1))+((x10984*x10986))+(((-1.0)*x10987*x10991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10995=((-1.0)*r21);
CheckValue<IkReal> x10998 = IKatan2WithCheck(IkReal(x10995),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10998.valid){
continue;
}
IkReal x10996=((1.0)*(x10998.value));
IkReal x10997=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10996)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10996)));
IkReal gconst4=(x10995*x10997);
IkReal gconst5=((1.0)*r20*x10997);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10999=((-1.0)*r21);
CheckValue<IkReal> x11002 = IKatan2WithCheck(IkReal(x10999),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11002.valid){
continue;
}
IkReal x11000=((1.0)*(x11002.value));
IkReal x11001=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11000)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11000)));
IkReal gconst4=(x10999*x11001);
IkReal gconst5=((1.0)*r20*x11001);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11003=((-1.0)*r21);
CheckValue<IkReal> x11006 = IKatan2WithCheck(IkReal(x11003),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11006.valid){
continue;
}
IkReal x11004=((1.0)*(x11006.value));
IkReal x11005=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11004)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11004)));
IkReal gconst4=(x11003*x11005);
IkReal gconst5=((1.0)*r20*x11005);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11007=(gconst4*r01);
IkReal x11008=(gconst5*r00);
CheckValue<IkReal> x11009=IKPowWithIntegerCheck(IKsign(((x11007*x11007)+(x11008*x11008)+(r02*r02)+(((-2.0)*x11007*x11008)))),-1);
if(!x11009.valid){
continue;
}
CheckValue<IkReal> x11010 = IKatan2WithCheck(IkReal((x11007+(((-1.0)*x11008)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11009.value)))+(x11010.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11011=IKcos(j4);
IkReal x11012=IKsin(j4);
IkReal x11013=(gconst4*r11);
IkReal x11014=(gconst5*r10);
IkReal x11015=(gconst5*r00);
IkReal x11016=(gconst5*r20);
IkReal x11017=((1.0)*x11011);
IkReal x11018=(gconst4*x11011);
IkReal x11019=((1.0)*x11012);
IkReal x11020=(gconst4*x11012);
evalcond[0]=((((-1.0)*x11015*x11017))+((r01*x11018))+((r02*x11012)));
evalcond[1]=((((-1.0)*r22*x11017))+((r21*x11020))+(((-1.0)*x11016*x11019)));
evalcond[2]=((((-1.0)*x11014*x11019))+((x11012*x11013))+(((-1.0)*r12*x11017)));
evalcond[3]=((-1.0)+((r01*x11020))+(((-1.0)*r02*x11017))+(((-1.0)*x11015*x11019)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11012))+((r21*x11018))+(((-1.0)*x11016*x11017)));
evalcond[5]=((((-1.0)*x11014*x11017))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11011*x11013))+((r12*x11012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11021=((1.0)*gconst5);
CheckValue<IkReal> x11022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11021))+(((-1.0)*gconst4*r10)))),-1);
if(!x11022.valid){
continue;
}
CheckValue<IkReal> x11023 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11021))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11022.value)))+(x11023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11024=IKcos(j4);
IkReal x11025=IKsin(j4);
IkReal x11026=(gconst4*r11);
IkReal x11027=(gconst5*r10);
IkReal x11028=(gconst5*r00);
IkReal x11029=(gconst5*r20);
IkReal x11030=((1.0)*x11024);
IkReal x11031=(gconst4*x11024);
IkReal x11032=((1.0)*x11025);
IkReal x11033=(gconst4*x11025);
evalcond[0]=((((-1.0)*x11028*x11030))+((r01*x11031))+((r02*x11025)));
evalcond[1]=(((r21*x11033))+(((-1.0)*x11029*x11032))+(((-1.0)*r22*x11030)));
evalcond[2]=(((x11025*x11026))+(((-1.0)*r12*x11030))+(((-1.0)*x11027*x11032)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11030))+(((-1.0)*x11028*x11032))+((r01*x11033)));
evalcond[4]=(((cj2*sj1))+((r21*x11031))+((cj1*sj2))+(((-1.0)*x11029*x11030))+((r22*x11025)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11024*x11026))+((r12*x11025))+(((-1.0)*x11027*x11030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11034 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11034.valid){
continue;
}
CheckValue<IkReal> x11035=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11034.value)+(((1.5707963267949)*(x11035.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11036=IKcos(j4);
IkReal x11037=IKsin(j4);
IkReal x11038=(gconst4*r11);
IkReal x11039=(gconst5*r10);
IkReal x11040=(gconst5*r00);
IkReal x11041=(gconst5*r20);
IkReal x11042=((1.0)*x11036);
IkReal x11043=(gconst4*x11036);
IkReal x11044=((1.0)*x11037);
IkReal x11045=(gconst4*x11037);
evalcond[0]=(((r01*x11043))+((r02*x11037))+(((-1.0)*x11040*x11042)));
evalcond[1]=((((-1.0)*r22*x11042))+(((-1.0)*x11041*x11044))+((r21*x11045)));
evalcond[2]=(((x11037*x11038))+(((-1.0)*r12*x11042))+(((-1.0)*x11039*x11044)));
evalcond[3]=((-1.0)+((r01*x11045))+(((-1.0)*r02*x11042))+(((-1.0)*x11040*x11044)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11041*x11042))+((cj1*sj2))+((r22*x11037))+((r21*x11043)));
evalcond[5]=(((x11036*x11038))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11037))+(((-1.0)*x11039*x11042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11046=((-1.0)*r21);
CheckValue<IkReal> x11049 = IKatan2WithCheck(IkReal(x11046),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11049.valid){
continue;
}
IkReal x11047=((1.0)*(x11049.value));
IkReal x11048=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11047)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11047)));
IkReal gconst4=(x11046*x11048);
IkReal gconst5=((1.0)*r20*x11048);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11050=((-1.0)*r21);
CheckValue<IkReal> x11053 = IKatan2WithCheck(IkReal(x11050),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11053.valid){
continue;
}
IkReal x11051=((1.0)*(x11053.value));
IkReal x11052=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11051)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11051)));
IkReal gconst4=(x11050*x11052);
IkReal gconst5=((1.0)*r20*x11052);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11054=((-1.0)*r21);
CheckValue<IkReal> x11057 = IKatan2WithCheck(IkReal(x11054),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11057.valid){
continue;
}
IkReal x11055=((1.0)*(x11057.value));
IkReal x11056=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11055)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11055)));
IkReal gconst4=(x11054*x11056);
IkReal gconst5=((1.0)*r20*x11056);
IkReal x11058=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11062=IKPowWithIntegerCheck(x11058,-1);
if(!x11062.valid){
continue;
}
IkReal x11059=x11062.value;
IkReal x11060=((1.0)*x11059);
IkReal x11061=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11059))+(((-1.0)*x11060*(r00*r00)*(r20*r20)))+(((-1.0)*x11060*(r01*r01)*(r21*r21))));
j4eval[0]=x11061;
j4eval[1]=r02;
j4eval[2]=x11058;
j4eval[3]=IKsign(x11061);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11063=(gconst5*r00);
IkReal x11064=(gconst4*r01);
CheckValue<IkReal> x11065 = IKatan2WithCheck(IkReal((x11063+(((-1.0)*x11064)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11065.valid){
continue;
}
CheckValue<IkReal> x11066=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11064*x11064)))+(((2.0)*x11063*x11064))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11063*x11063))))),-1);
if(!x11066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11065.value)+(((1.5707963267949)*(x11066.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11067=IKsin(j4);
IkReal x11068=IKcos(j4);
IkReal x11069=(gconst4*r11);
IkReal x11070=(gconst5*r10);
IkReal x11071=(gconst4*r01);
IkReal x11072=(gconst5*r00);
IkReal x11073=(gconst4*r21);
IkReal x11074=(gconst5*r20);
IkReal x11075=((1.0)*x11068);
IkReal x11076=((1.0)*x11067);
evalcond[0]=((((-1.0)*x11074*x11076))+(((-1.0)*r22*x11075))+((x11067*x11073)));
evalcond[1]=((((-1.0)*x11070*x11076))+((x11067*x11069))+(((-1.0)*r12*x11075)));
evalcond[2]=((((-1.0)*x11071*x11075))+(((-1.0)*r02*x11076))+((x11068*x11072)));
evalcond[3]=((-1.0)+(((-1.0)*x11072*x11076))+(((-1.0)*r02*x11075))+((x11067*x11071)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11073*x11075))+((cj1*sj2))+((x11068*x11074))+(((-1.0)*r22*x11076)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11068*x11070))+(((-1.0)*x11069*x11075))+(((-1.0)*r12*x11076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11077=((1.0)*gconst5);
CheckValue<IkReal> x11078=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11077))+(((-1.0)*gconst4*r10)))),-1);
if(!x11078.valid){
continue;
}
CheckValue<IkReal> x11079 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11077))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11078.value)))+(x11079.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11080=IKsin(j4);
IkReal x11081=IKcos(j4);
IkReal x11082=(gconst4*r11);
IkReal x11083=(gconst5*r10);
IkReal x11084=(gconst4*r01);
IkReal x11085=(gconst5*r00);
IkReal x11086=(gconst4*r21);
IkReal x11087=(gconst5*r20);
IkReal x11088=((1.0)*x11081);
IkReal x11089=((1.0)*x11080);
evalcond[0]=((((-1.0)*r22*x11088))+(((-1.0)*x11087*x11089))+((x11080*x11086)));
evalcond[1]=((((-1.0)*r12*x11088))+((x11080*x11082))+(((-1.0)*x11083*x11089)));
evalcond[2]=((((-1.0)*r02*x11089))+((x11081*x11085))+(((-1.0)*x11084*x11088)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11088))+(((-1.0)*x11085*x11089))+((x11080*x11084)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11089))+((x11081*x11087))+(((-1.0)*x11086*x11088)));
evalcond[5]=((((-1.0)*x11082*x11088))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11081*x11083))+(((-1.0)*r12*x11089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11090 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11090.valid){
continue;
}
CheckValue<IkReal> x11091=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11090.value)+(((1.5707963267949)*(x11091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11092=IKsin(j4);
IkReal x11093=IKcos(j4);
IkReal x11094=(gconst4*r11);
IkReal x11095=(gconst5*r10);
IkReal x11096=(gconst4*r01);
IkReal x11097=(gconst5*r00);
IkReal x11098=(gconst4*r21);
IkReal x11099=(gconst5*r20);
IkReal x11100=((1.0)*x11093);
IkReal x11101=((1.0)*x11092);
evalcond[0]=(((x11092*x11098))+(((-1.0)*x11099*x11101))+(((-1.0)*r22*x11100)));
evalcond[1]=(((x11092*x11094))+(((-1.0)*r12*x11100))+(((-1.0)*x11095*x11101)));
evalcond[2]=(((x11093*x11097))+(((-1.0)*x11096*x11100))+(((-1.0)*r02*x11101)));
evalcond[3]=((-1.0)+(((-1.0)*x11097*x11101))+((x11092*x11096))+(((-1.0)*r02*x11100)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11098*x11100))+((cj1*sj2))+((x11093*x11099))+(((-1.0)*r22*x11101)));
evalcond[5]=(((x11093*x11095))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11101))+(((-1.0)*x11094*x11100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11102=gconst4*gconst4;
IkReal x11103=gconst5*gconst5;
IkReal x11104=(r01*r20);
IkReal x11105=(gconst4*sj3);
IkReal x11106=(r01*r21);
IkReal x11107=((1.0)*cj3);
IkReal x11108=(r00*r21);
IkReal x11109=(r00*r20);
IkReal x11110=(cj3*gconst4*gconst5);
IkReal x11111=((1.0)*x11103);
CheckValue<IkReal> x11112 = IKatan2WithCheck(IkReal((((r00*r22*x11105))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*gconst5*x11105*x11109))+((sj3*x11102*x11108))+(((-1.0)*sj3*x11104*x11111))+((gconst5*x11105*x11106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11112.valid){
continue;
}
CheckValue<IkReal> x11113=IKPowWithIntegerCheck(IKsign((((x11104*x11110))+(((-1.0)*r02*r22*x11107))+(((-1.0)*x11103*x11107*x11109))+(((-1.0)*x11102*x11106*x11107))+((x11108*x11110)))),-1);
if(!x11113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11112.value)+(((1.5707963267949)*(x11113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11114=IKsin(j4);
IkReal x11115=IKcos(j4);
IkReal x11116=(sj1*sj2);
IkReal x11117=(gconst5*sj3);
IkReal x11118=(gconst4*r11);
IkReal x11119=(gconst5*r10);
IkReal x11120=((1.0)*cj1);
IkReal x11121=(gconst4*r01);
IkReal x11122=(cj2*sj1);
IkReal x11123=(gconst5*r00);
IkReal x11124=(gconst4*sj3);
IkReal x11125=(cj3*gconst5);
IkReal x11126=(cj3*gconst4);
IkReal x11127=(gconst4*r21);
IkReal x11128=(cj2*x11120);
IkReal x11129=((1.0)*x11115);
IkReal x11130=((1.0)*x11114);
IkReal x11131=(cj3*x11114);
IkReal x11132=(cj3*x11115);
evalcond[0]=(((x11114*x11127))+(((-1.0)*r22*x11129))+(((-1.0)*gconst5*r20*x11130)));
evalcond[1]=((((-1.0)*r12*x11129))+((x11114*x11118))+(((-1.0)*x11119*x11130)));
evalcond[2]=((-1.0)+((x11114*x11121))+(((-1.0)*r02*x11129))+(((-1.0)*x11123*x11130)));
evalcond[3]=(((r02*x11131))+((x11121*x11132))+(((-1.0)*cj3*x11123*x11129))+((r00*x11124))+((r01*x11117)));
evalcond[4]=((((-1.0)*r02*sj3*x11130))+((r00*x11115*x11117))+(((-1.0)*sj3*x11121*x11129))+((r00*x11126))+((r01*x11125)));
evalcond[5]=(((r22*x11131))+((r21*x11115*x11126))+((cj1*sj2))+(((-1.0)*r20*x11125*x11129))+x11122+((r21*x11117))+((r20*x11124)));
evalcond[6]=((((-1.0)*x11128))+((r10*x11124))+x11116+((r11*x11117))+((r12*x11131))+(((-1.0)*cj3*x11119*x11129))+((x11118*x11132)));
evalcond[7]=((((-1.0)*x11128))+((r21*x11125))+((r20*x11115*x11117))+x11116+(((-1.0)*r22*sj3*x11130))+(((-1.0)*r21*x11124*x11129))+((r20*x11126)));
evalcond[8]=((((-1.0)*x11122))+(((-1.0)*sj3*x11118*x11129))+(((-1.0)*r12*sj3*x11130))+((r10*x11126))+((r11*x11125))+((r10*x11115*x11117))+(((-1.0)*sj2*x11120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11133=((1.0)*gconst5);
CheckValue<IkReal> x11134=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11133))+(((-1.0)*gconst4*r10)))),-1);
if(!x11134.valid){
continue;
}
CheckValue<IkReal> x11135 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11133))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11134.value)))+(x11135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11136=IKsin(j4);
IkReal x11137=IKcos(j4);
IkReal x11138=(sj1*sj2);
IkReal x11139=(gconst5*sj3);
IkReal x11140=(gconst4*r11);
IkReal x11141=(gconst5*r10);
IkReal x11142=((1.0)*cj1);
IkReal x11143=(gconst4*r01);
IkReal x11144=(cj2*sj1);
IkReal x11145=(gconst5*r00);
IkReal x11146=(gconst4*sj3);
IkReal x11147=(cj3*gconst5);
IkReal x11148=(cj3*gconst4);
IkReal x11149=(gconst4*r21);
IkReal x11150=(cj2*x11142);
IkReal x11151=((1.0)*x11137);
IkReal x11152=((1.0)*x11136);
IkReal x11153=(cj3*x11136);
IkReal x11154=(cj3*x11137);
evalcond[0]=((((-1.0)*gconst5*r20*x11152))+(((-1.0)*r22*x11151))+((x11136*x11149)));
evalcond[1]=((((-1.0)*x11141*x11152))+((x11136*x11140))+(((-1.0)*r12*x11151)));
evalcond[2]=((-1.0)+((x11136*x11143))+(((-1.0)*r02*x11151))+(((-1.0)*x11145*x11152)));
evalcond[3]=(((r00*x11146))+((x11143*x11154))+((r02*x11153))+(((-1.0)*cj3*x11145*x11151))+((r01*x11139)));
evalcond[4]=(((r01*x11147))+((r00*x11148))+(((-1.0)*sj3*x11143*x11151))+(((-1.0)*r02*sj3*x11152))+((r00*x11137*x11139)));
evalcond[5]=(((r22*x11153))+((cj1*sj2))+((r21*x11139))+x11144+(((-1.0)*r20*x11147*x11151))+((r20*x11146))+((r21*x11137*x11148)));
evalcond[6]=(((x11140*x11154))+x11138+((r12*x11153))+((r10*x11146))+((r11*x11139))+(((-1.0)*cj3*x11141*x11151))+(((-1.0)*x11150)));
evalcond[7]=((((-1.0)*r21*x11146*x11151))+((r21*x11147))+((r20*x11137*x11139))+x11138+((r20*x11148))+(((-1.0)*r22*sj3*x11152))+(((-1.0)*x11150)));
evalcond[8]=((((-1.0)*sj3*x11140*x11151))+(((-1.0)*r12*sj3*x11152))+(((-1.0)*x11144))+((r11*x11147))+((r10*x11137*x11139))+((r10*x11148))+(((-1.0)*sj2*x11142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11155 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11155.valid){
continue;
}
CheckValue<IkReal> x11156=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11155.value)+(((1.5707963267949)*(x11156.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11157=IKsin(j4);
IkReal x11158=IKcos(j4);
IkReal x11159=(sj1*sj2);
IkReal x11160=(gconst5*sj3);
IkReal x11161=(gconst4*r11);
IkReal x11162=(gconst5*r10);
IkReal x11163=((1.0)*cj1);
IkReal x11164=(gconst4*r01);
IkReal x11165=(cj2*sj1);
IkReal x11166=(gconst5*r00);
IkReal x11167=(gconst4*sj3);
IkReal x11168=(cj3*gconst5);
IkReal x11169=(cj3*gconst4);
IkReal x11170=(gconst4*r21);
IkReal x11171=(cj2*x11163);
IkReal x11172=((1.0)*x11158);
IkReal x11173=((1.0)*x11157);
IkReal x11174=(cj3*x11157);
IkReal x11175=(cj3*x11158);
evalcond[0]=((((-1.0)*r22*x11172))+((x11157*x11170))+(((-1.0)*gconst5*r20*x11173)));
evalcond[1]=((((-1.0)*r12*x11172))+((x11157*x11161))+(((-1.0)*x11162*x11173)));
evalcond[2]=((-1.0)+(((-1.0)*x11166*x11173))+((x11157*x11164))+(((-1.0)*r02*x11172)));
evalcond[3]=(((r01*x11160))+(((-1.0)*cj3*x11166*x11172))+((r00*x11167))+((r02*x11174))+((x11164*x11175)));
evalcond[4]=(((r01*x11168))+((r00*x11169))+(((-1.0)*r02*sj3*x11173))+(((-1.0)*sj3*x11164*x11172))+((r00*x11158*x11160)));
evalcond[5]=(((r20*x11167))+((cj1*sj2))+x11165+((r22*x11174))+(((-1.0)*r20*x11168*x11172))+((r21*x11160))+((r21*x11158*x11169)));
evalcond[6]=(((x11161*x11175))+((r12*x11174))+((r11*x11160))+(((-1.0)*x11171))+x11159+((r10*x11167))+(((-1.0)*cj3*x11162*x11172)));
evalcond[7]=((((-1.0)*r22*sj3*x11173))+((r20*x11169))+(((-1.0)*x11171))+x11159+((r21*x11168))+((r20*x11158*x11160))+(((-1.0)*r21*x11167*x11172)));
evalcond[8]=((((-1.0)*sj2*x11163))+((r11*x11168))+(((-1.0)*x11165))+(((-1.0)*r12*sj3*x11173))+(((-1.0)*sj3*x11161*x11172))+((r10*x11158*x11160))+((r10*x11169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11176=((-1.0)*r21);
CheckValue<IkReal> x11179 = IKatan2WithCheck(IkReal(x11176),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11179.valid){
continue;
}
IkReal x11177=((1.0)*(x11179.value));
IkReal x11178=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11177)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11177)));
IkReal gconst4=(x11176*x11178);
IkReal gconst5=((1.0)*r20*x11178);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11180=((-1.0)*r21);
CheckValue<IkReal> x11183 = IKatan2WithCheck(IkReal(x11180),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11183.valid){
continue;
}
IkReal x11181=((1.0)*(x11183.value));
IkReal x11182=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11181)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11181)));
IkReal gconst4=(x11180*x11182);
IkReal gconst5=((1.0)*r20*x11182);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11184=((-1.0)*r21);
CheckValue<IkReal> x11187 = IKatan2WithCheck(IkReal(x11184),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11187.valid){
continue;
}
IkReal x11185=((1.0)*(x11187.value));
IkReal x11186=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11185)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11185)));
IkReal gconst4=(x11184*x11186);
IkReal gconst5=((1.0)*r20*x11186);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11188=((-1.0)*r21);
CheckValue<IkReal> x11191 = IKatan2WithCheck(IkReal(x11188),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11191.valid){
continue;
}
IkReal x11189=((1.0)*(x11191.value));
IkReal x11190=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11189)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11189)));
IkReal gconst4=(x11188*x11190);
IkReal gconst5=((1.0)*r20*x11190);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11192=((-1.0)*r21);
CheckValue<IkReal> x11195 = IKatan2WithCheck(IkReal(x11192),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11195.valid){
continue;
}
IkReal x11193=((1.0)*(x11195.value));
IkReal x11194=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11193)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11193)));
IkReal gconst4=(x11192*x11194);
IkReal gconst5=((1.0)*r20*x11194);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11196=((-1.0)*r21);
CheckValue<IkReal> x11199 = IKatan2WithCheck(IkReal(x11196),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11199.valid){
continue;
}
IkReal x11197=((1.0)*(x11199.value));
IkReal x11198=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11197)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11197)));
IkReal gconst4=(x11196*x11198);
IkReal gconst5=((1.0)*r20*x11198);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11200=(gconst5*r00);
IkReal x11201=(gconst4*r01);
CheckValue<IkReal> x11202=IKPowWithIntegerCheck(IKsign(((x11201*x11201)+(((-2.0)*x11200*x11201))+(x11200*x11200)+(r02*r02))),-1);
if(!x11202.valid){
continue;
}
CheckValue<IkReal> x11203 = IKatan2WithCheck(IkReal((x11200+(((-1.0)*x11201)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11202.value)))+(x11203.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11204=IKsin(j4);
IkReal x11205=IKcos(j4);
IkReal x11206=(gconst4*r11);
IkReal x11207=(gconst5*r10);
IkReal x11208=(gconst4*r01);
IkReal x11209=(gconst5*r00);
IkReal x11210=(gconst4*r21);
IkReal x11211=(gconst5*r20);
IkReal x11212=((1.0)*x11205);
IkReal x11213=((1.0)*x11204);
evalcond[0]=(((x11204*x11210))+(((-1.0)*x11211*x11213))+(((-1.0)*r22*x11212)));
evalcond[1]=(((x11204*x11206))+(((-1.0)*r12*x11212))+(((-1.0)*x11207*x11213)));
evalcond[2]=(((x11205*x11209))+(((-1.0)*r02*x11213))+(((-1.0)*x11208*x11212)));
evalcond[3]=((1.0)+(((-1.0)*x11209*x11213))+((x11204*x11208))+(((-1.0)*r02*x11212)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11205*x11207))+(((-1.0)*r12*x11213))+(((-1.0)*x11206*x11212)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11205*x11211))+(((-1.0)*x11210*x11212))+(((-1.0)*r22*x11213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11214=((1.0)*gconst5);
CheckValue<IkReal> x11215=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11214))+(((-1.0)*gconst4*r20)))),-1);
if(!x11215.valid){
continue;
}
CheckValue<IkReal> x11216 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11215.value)))+(x11216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11217=IKsin(j4);
IkReal x11218=IKcos(j4);
IkReal x11219=(gconst4*r11);
IkReal x11220=(gconst5*r10);
IkReal x11221=(gconst4*r01);
IkReal x11222=(gconst5*r00);
IkReal x11223=(gconst4*r21);
IkReal x11224=(gconst5*r20);
IkReal x11225=((1.0)*x11218);
IkReal x11226=((1.0)*x11217);
evalcond[0]=(((x11217*x11223))+(((-1.0)*x11224*x11226))+(((-1.0)*r22*x11225)));
evalcond[1]=(((x11217*x11219))+(((-1.0)*x11220*x11226))+(((-1.0)*r12*x11225)));
evalcond[2]=(((x11218*x11222))+(((-1.0)*x11221*x11225))+(((-1.0)*r02*x11226)));
evalcond[3]=((1.0)+(((-1.0)*x11222*x11226))+((x11217*x11221))+(((-1.0)*r02*x11225)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11219*x11225))+((x11218*x11220))+(((-1.0)*r12*x11226)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11223*x11225))+((x11218*x11224))+(((-1.0)*r22*x11226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11227=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11227.valid){
continue;
}
CheckValue<IkReal> x11228 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11227.value)))+(x11228.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11229=IKsin(j4);
IkReal x11230=IKcos(j4);
IkReal x11231=(gconst4*r11);
IkReal x11232=(gconst5*r10);
IkReal x11233=(gconst4*r01);
IkReal x11234=(gconst5*r00);
IkReal x11235=(gconst4*r21);
IkReal x11236=(gconst5*r20);
IkReal x11237=((1.0)*x11230);
IkReal x11238=((1.0)*x11229);
evalcond[0]=(((x11229*x11235))+(((-1.0)*r22*x11237))+(((-1.0)*x11236*x11238)));
evalcond[1]=((((-1.0)*x11232*x11238))+((x11229*x11231))+(((-1.0)*r12*x11237)));
evalcond[2]=((((-1.0)*r02*x11238))+(((-1.0)*x11233*x11237))+((x11230*x11234)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11237))+((x11229*x11233))+(((-1.0)*x11234*x11238)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11231*x11237))+((cj1*sj2))+((x11230*x11232))+(((-1.0)*r12*x11238)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11230*x11236))+(((-1.0)*x11235*x11237))+(((-1.0)*r22*x11238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11239=((-1.0)*r21);
CheckValue<IkReal> x11242 = IKatan2WithCheck(IkReal(x11239),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11242.valid){
continue;
}
IkReal x11240=((1.0)*(x11242.value));
IkReal x11241=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11240)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11240)));
IkReal gconst4=(x11239*x11241);
IkReal gconst5=((1.0)*r20*x11241);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11243=((-1.0)*r21);
CheckValue<IkReal> x11246 = IKatan2WithCheck(IkReal(x11243),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11246.valid){
continue;
}
IkReal x11244=((1.0)*(x11246.value));
IkReal x11245=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11244)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11244)));
IkReal gconst4=(x11243*x11245);
IkReal gconst5=((1.0)*r20*x11245);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11247=((-1.0)*r21);
CheckValue<IkReal> x11250 = IKatan2WithCheck(IkReal(x11247),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11250.valid){
continue;
}
IkReal x11248=((1.0)*(x11250.value));
IkReal x11249=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11248)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11248)));
IkReal gconst4=(x11247*x11249);
IkReal gconst5=((1.0)*r20*x11249);
IkReal x11251=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11255=IKPowWithIntegerCheck(x11251,-1);
if(!x11255.valid){
continue;
}
IkReal x11252=x11255.value;
IkReal x11253=((1.0)*x11252);
IkReal x11254=((((-2.0)*r00*r01*r20*r21*x11252))+(((-1.0)*(r02*r02)))+(((-1.0)*x11253*(r01*r01)*(r21*r21)))+(((-1.0)*x11253*(r00*r00)*(r20*r20))));
j4eval[0]=x11254;
j4eval[1]=IKsign(x11254);
j4eval[2]=r02;
j4eval[3]=x11251;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11256=(gconst4*r01);
IkReal x11257=(gconst5*r00);
CheckValue<IkReal> x11258=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11257*x11257)))+(((-1.0)*(x11256*x11256)))+(((2.0)*x11256*x11257)))),-1);
if(!x11258.valid){
continue;
}
CheckValue<IkReal> x11259 = IKatan2WithCheck(IkReal(((((-1.0)*x11257))+x11256)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11258.value)))+(x11259.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11260=IKcos(j4);
IkReal x11261=IKsin(j4);
IkReal x11262=(gconst4*r11);
IkReal x11263=(gconst5*r10);
IkReal x11264=(gconst5*r00);
IkReal x11265=(gconst5*r20);
IkReal x11266=((1.0)*x11260);
IkReal x11267=(gconst4*x11260);
IkReal x11268=((1.0)*x11261);
IkReal x11269=(gconst4*x11261);
evalcond[0]=(((r02*x11261))+(((-1.0)*x11264*x11266))+((r01*x11267)));
evalcond[1]=(((r21*x11269))+(((-1.0)*r22*x11266))+(((-1.0)*x11265*x11268)));
evalcond[2]=(((x11261*x11262))+(((-1.0)*x11263*x11268))+(((-1.0)*r12*x11266)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11266))+(((-1.0)*x11264*x11268))+((r01*x11269)));
evalcond[4]=(((cj2*sj1))+((x11260*x11262))+((cj1*sj2))+(((-1.0)*x11263*x11266))+((r12*x11261)));
evalcond[5]=(((r21*x11267))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11261))+(((-1.0)*x11265*x11266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11270=((1.0)*gconst5);
CheckValue<IkReal> x11271 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11271.valid){
continue;
}
CheckValue<IkReal> x11272=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11270))+(((-1.0)*gconst4*r20)))),-1);
if(!x11272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11271.value)+(((1.5707963267949)*(x11272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11273=IKcos(j4);
IkReal x11274=IKsin(j4);
IkReal x11275=(gconst4*r11);
IkReal x11276=(gconst5*r10);
IkReal x11277=(gconst5*r00);
IkReal x11278=(gconst5*r20);
IkReal x11279=((1.0)*x11273);
IkReal x11280=(gconst4*x11273);
IkReal x11281=((1.0)*x11274);
IkReal x11282=(gconst4*x11274);
evalcond[0]=((((-1.0)*x11277*x11279))+((r02*x11274))+((r01*x11280)));
evalcond[1]=((((-1.0)*x11278*x11281))+((r21*x11282))+(((-1.0)*r22*x11279)));
evalcond[2]=((((-1.0)*x11276*x11281))+(((-1.0)*r12*x11279))+((x11274*x11275)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11279))+((r01*x11282))+(((-1.0)*x11277*x11281)));
evalcond[4]=(((cj2*sj1))+((x11273*x11275))+((r12*x11274))+((cj1*sj2))+(((-1.0)*x11276*x11279)));
evalcond[5]=(((r22*x11274))+((r21*x11280))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11278*x11279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11283=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11283.valid){
continue;
}
CheckValue<IkReal> x11284 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11283.value)))+(x11284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11285=IKcos(j4);
IkReal x11286=IKsin(j4);
IkReal x11287=(gconst4*r11);
IkReal x11288=(gconst5*r10);
IkReal x11289=(gconst5*r00);
IkReal x11290=(gconst5*r20);
IkReal x11291=((1.0)*x11285);
IkReal x11292=(gconst4*x11285);
IkReal x11293=((1.0)*x11286);
IkReal x11294=(gconst4*x11286);
evalcond[0]=(((r01*x11292))+((r02*x11286))+(((-1.0)*x11289*x11291)));
evalcond[1]=((((-1.0)*r22*x11291))+((r21*x11294))+(((-1.0)*x11290*x11293)));
evalcond[2]=((((-1.0)*x11288*x11293))+((x11286*x11287))+(((-1.0)*r12*x11291)));
evalcond[3]=((1.0)+((r01*x11294))+(((-1.0)*r02*x11291))+(((-1.0)*x11289*x11293)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11288*x11291))+((r12*x11286))+((x11285*x11287)));
evalcond[5]=(((r22*x11286))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11292))+(((-1.0)*x11290*x11291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11295=((-1.0)*r21);
CheckValue<IkReal> x11298 = IKatan2WithCheck(IkReal(x11295),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11298.valid){
continue;
}
IkReal x11296=((1.0)*(x11298.value));
IkReal x11297=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11296)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11296)));
IkReal gconst4=(x11295*x11297);
IkReal gconst5=((1.0)*r20*x11297);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11299=((-1.0)*r21);
CheckValue<IkReal> x11302 = IKatan2WithCheck(IkReal(x11299),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11302.valid){
continue;
}
IkReal x11300=((1.0)*(x11302.value));
IkReal x11301=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11300)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11300)));
IkReal gconst4=(x11299*x11301);
IkReal gconst5=((1.0)*r20*x11301);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11303=((-1.0)*r21);
CheckValue<IkReal> x11306 = IKatan2WithCheck(IkReal(x11303),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11306.valid){
continue;
}
IkReal x11304=((1.0)*(x11306.value));
IkReal x11305=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11304)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11304)));
IkReal gconst4=(x11303*x11305);
IkReal gconst5=((1.0)*r20*x11305);
IkReal x11307=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11311=IKPowWithIntegerCheck(x11307,-1);
if(!x11311.valid){
continue;
}
IkReal x11308=x11311.value;
IkReal x11309=((1.0)*x11308);
IkReal x11310=((((-1.0)*x11309*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11309*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x11308)));
j4eval[0]=x11310;
j4eval[1]=IKsign(x11310);
j4eval[2]=r02;
j4eval[3]=x11307;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11312=(gconst4*r01);
IkReal x11313=(gconst5*r00);
CheckValue<IkReal> x11314=IKPowWithIntegerCheck(IKsign(((((2.0)*x11312*x11313))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11312*x11312)))+(((-1.0)*(x11313*x11313))))),-1);
if(!x11314.valid){
continue;
}
CheckValue<IkReal> x11315 = IKatan2WithCheck(IkReal((x11312+(((-1.0)*x11313)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11314.value)))+(x11315.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11316=IKcos(j4);
IkReal x11317=IKsin(j4);
IkReal x11318=(gconst5*r10);
IkReal x11319=(gconst5*r00);
IkReal x11320=(gconst5*r20);
IkReal x11321=((1.0)*x11316);
IkReal x11322=(gconst4*x11317);
IkReal x11323=(gconst4*x11316);
IkReal x11324=((1.0)*x11317);
evalcond[0]=((((-1.0)*x11319*x11321))+((r02*x11317))+((r01*x11323)));
evalcond[1]=((((-1.0)*r22*x11321))+((r21*x11322))+(((-1.0)*x11320*x11324)));
evalcond[2]=((((-1.0)*r12*x11321))+(((-1.0)*x11318*x11324))+((r11*x11322)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11321))+(((-1.0)*x11319*x11324))+((r01*x11322)));
evalcond[4]=(((cj2*sj1))+((r22*x11317))+((cj1*sj2))+((r21*x11323))+(((-1.0)*x11320*x11321)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11318*x11321))+((cj1*cj2))+((r12*x11317))+((r11*x11323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11325=((1.0)*gconst5);
CheckValue<IkReal> x11326 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11325)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11326.valid){
continue;
}
CheckValue<IkReal> x11327=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11325))+(((-1.0)*gconst4*r20)))),-1);
if(!x11327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11326.value)+(((1.5707963267949)*(x11327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11328=IKcos(j4);
IkReal x11329=IKsin(j4);
IkReal x11330=(gconst5*r10);
IkReal x11331=(gconst5*r00);
IkReal x11332=(gconst5*r20);
IkReal x11333=((1.0)*x11328);
IkReal x11334=(gconst4*x11329);
IkReal x11335=(gconst4*x11328);
IkReal x11336=((1.0)*x11329);
evalcond[0]=(((r02*x11329))+(((-1.0)*x11331*x11333))+((r01*x11335)));
evalcond[1]=((((-1.0)*r22*x11333))+(((-1.0)*x11332*x11336))+((r21*x11334)));
evalcond[2]=((((-1.0)*r12*x11333))+((r11*x11334))+(((-1.0)*x11330*x11336)));
evalcond[3]=((1.0)+(((-1.0)*x11331*x11336))+((r01*x11334))+(((-1.0)*r02*x11333)));
evalcond[4]=(((cj2*sj1))+((r22*x11329))+((cj1*sj2))+(((-1.0)*x11332*x11333))+((r21*x11335)));
evalcond[5]=(((r11*x11335))+(((-1.0)*sj1*sj2))+(((-1.0)*x11330*x11333))+((cj1*cj2))+((r12*x11329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11337=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11337.valid){
continue;
}
CheckValue<IkReal> x11338 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11337.value)))+(x11338.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11339=IKcos(j4);
IkReal x11340=IKsin(j4);
IkReal x11341=(gconst5*r10);
IkReal x11342=(gconst5*r00);
IkReal x11343=(gconst5*r20);
IkReal x11344=((1.0)*x11339);
IkReal x11345=(gconst4*x11340);
IkReal x11346=(gconst4*x11339);
IkReal x11347=((1.0)*x11340);
evalcond[0]=((((-1.0)*x11342*x11344))+((r01*x11346))+((r02*x11340)));
evalcond[1]=((((-1.0)*x11343*x11347))+(((-1.0)*r22*x11344))+((r21*x11345)));
evalcond[2]=(((r11*x11345))+(((-1.0)*r12*x11344))+(((-1.0)*x11341*x11347)));
evalcond[3]=((1.0)+(((-1.0)*x11342*x11347))+((r01*x11345))+(((-1.0)*r02*x11344)));
evalcond[4]=((((-1.0)*x11343*x11344))+((cj2*sj1))+((cj1*sj2))+((r22*x11340))+((r21*x11346)));
evalcond[5]=(((r11*x11346))+(((-1.0)*sj1*sj2))+((r12*x11340))+((cj1*cj2))+(((-1.0)*x11341*x11344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11348=((-1.0)*r21);
CheckValue<IkReal> x11351 = IKatan2WithCheck(IkReal(x11348),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11351.valid){
continue;
}
IkReal x11349=((1.0)*(x11351.value));
IkReal x11350=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11349)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11349)));
IkReal gconst4=(x11348*x11350);
IkReal gconst5=((1.0)*r20*x11350);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11352=((-1.0)*r21);
CheckValue<IkReal> x11355 = IKatan2WithCheck(IkReal(x11352),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11355.valid){
continue;
}
IkReal x11353=((1.0)*(x11355.value));
IkReal x11354=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11353)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11353)));
IkReal gconst4=(x11352*x11354);
IkReal gconst5=((1.0)*r20*x11354);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11356=((-1.0)*r21);
CheckValue<IkReal> x11359 = IKatan2WithCheck(IkReal(x11356),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11359.valid){
continue;
}
IkReal x11357=((1.0)*(x11359.value));
IkReal x11358=x10150;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11357)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11357)));
IkReal gconst4=(x11356*x11358);
IkReal gconst5=((1.0)*r20*x11358);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11360=(gconst5*r00);
IkReal x11361=(gconst4*r01);
CheckValue<IkReal> x11362=IKPowWithIntegerCheck(IKsign(((x11360*x11360)+(x11361*x11361)+(((-2.0)*x11360*x11361))+(r02*r02))),-1);
if(!x11362.valid){
continue;
}
CheckValue<IkReal> x11363 = IKatan2WithCheck(IkReal(((((-1.0)*x11361))+x11360)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11362.value)))+(x11363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11364=IKsin(j4);
IkReal x11365=IKcos(j4);
IkReal x11366=(gconst4*r11);
IkReal x11367=(gconst5*r10);
IkReal x11368=(gconst5*r00);
IkReal x11369=(gconst5*r20);
IkReal x11370=((1.0)*x11365);
IkReal x11371=(gconst4*x11364);
IkReal x11372=((1.0)*x11364);
evalcond[0]=(((r21*x11371))+(((-1.0)*r22*x11370))+(((-1.0)*x11369*x11372)));
evalcond[1]=((((-1.0)*x11367*x11372))+(((-1.0)*r12*x11370))+((x11364*x11366)));
evalcond[2]=((((-1.0)*gconst4*r01*x11370))+(((-1.0)*r02*x11372))+((x11365*x11368)));
evalcond[3]=((1.0)+((r01*x11371))+(((-1.0)*x11368*x11372))+(((-1.0)*r02*x11370)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11372))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11370))+((x11365*x11369)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x11372))+(((-1.0)*x11366*x11370))+((cj1*cj2))+((x11365*x11367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11373=((1.0)*gconst5);
CheckValue<IkReal> x11374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11373))+(((-1.0)*gconst4*r20)))),-1);
if(!x11374.valid){
continue;
}
CheckValue<IkReal> x11375 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11373))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11374.value)))+(x11375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11376=IKsin(j4);
IkReal x11377=IKcos(j4);
IkReal x11378=(gconst4*r11);
IkReal x11379=(gconst5*r10);
IkReal x11380=(gconst5*r00);
IkReal x11381=(gconst5*r20);
IkReal x11382=((1.0)*x11377);
IkReal x11383=(gconst4*x11376);
IkReal x11384=((1.0)*x11376);
evalcond[0]=((((-1.0)*x11381*x11384))+(((-1.0)*r22*x11382))+((r21*x11383)));
evalcond[1]=(((x11376*x11378))+(((-1.0)*x11379*x11384))+(((-1.0)*r12*x11382)));
evalcond[2]=((((-1.0)*r02*x11384))+((x11377*x11380))+(((-1.0)*gconst4*r01*x11382)));
evalcond[3]=((1.0)+(((-1.0)*x11380*x11384))+((r01*x11383))+(((-1.0)*r02*x11382)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x11382))+((cj1*sj2))+(((-1.0)*r22*x11384))+((x11377*x11381)));
evalcond[5]=(((x11377*x11379))+(((-1.0)*x11378*x11382))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x11384))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11385=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11385.valid){
continue;
}
CheckValue<IkReal> x11386 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11385.value)))+(x11386.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11387=IKsin(j4);
IkReal x11388=IKcos(j4);
IkReal x11389=(gconst4*r11);
IkReal x11390=(gconst5*r10);
IkReal x11391=(gconst5*r00);
IkReal x11392=(gconst5*r20);
IkReal x11393=((1.0)*x11388);
IkReal x11394=(gconst4*x11387);
IkReal x11395=((1.0)*x11387);
evalcond[0]=((((-1.0)*x11392*x11395))+(((-1.0)*r22*x11393))+((r21*x11394)));
evalcond[1]=((((-1.0)*x11390*x11395))+((x11387*x11389))+(((-1.0)*r12*x11393)));
evalcond[2]=((((-1.0)*gconst4*r01*x11393))+((x11388*x11391))+(((-1.0)*r02*x11395)));
evalcond[3]=((1.0)+((r01*x11394))+(((-1.0)*x11391*x11395))+(((-1.0)*r02*x11393)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11393))+((x11388*x11392))+(((-1.0)*r22*x11395)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x11388*x11390))+((cj1*cj2))+(((-1.0)*r12*x11395))+(((-1.0)*x11389*x11393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11396=((-1.0)*r21);
IkReal x11397=((-1.0)*r20);
CheckValue<IkReal> x11399 = IKatan2WithCheck(IkReal(x11396),IkReal(x11397),IKFAST_ATAN2_MAGTHRESH);
if(!x11399.valid){
continue;
}
IkReal x11398=((1.0)*(x11399.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11398)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11397);
rxp0_2=(py*r00);
rxp1_0=(py*x11396);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11398)));
IkReal gconst4=x11396;
IkReal gconst5=((1.0)*r20);
IkReal x11400=((1.0)*r01*r21);
IkReal x11401=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11401))+(((-1.0)*x11400)));
j4eval[1]=((((-1.0)*cj3*x11400))+(((-1.0)*cj3*x11401)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11402=((-1.0)*r21);
IkReal x11403=((-1.0)*r20);
CheckValue<IkReal> x11405 = IKatan2WithCheck(IkReal(x11402),IkReal(x11403),IKFAST_ATAN2_MAGTHRESH);
if(!x11405.valid){
continue;
}
IkReal x11404=((1.0)*(x11405.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11404)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11403);
rxp0_2=(py*r00);
rxp1_0=(py*x11402);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11404)));
IkReal gconst4=x11402;
IkReal gconst5=((1.0)*r20);
IkReal x11406=((1.0)*r01*r21);
IkReal x11407=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11406))+(((-1.0)*x11407)));
j4eval[1]=(((sj3*x11406))+((sj3*x11407)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11408=((-1.0)*r21);
IkReal x11409=((-1.0)*r20);
CheckValue<IkReal> x11411 = IKatan2WithCheck(IkReal(x11408),IkReal(x11409),IKFAST_ATAN2_MAGTHRESH);
if(!x11411.valid){
continue;
}
IkReal x11410=((1.0)*(x11411.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11410)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11409);
rxp0_2=(py*r00);
rxp1_0=(py*x11408);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11410)));
IkReal gconst4=x11408;
IkReal gconst5=((1.0)*r20);
IkReal x11412=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r21*x11412))+(((-1.0)*r00*r20*x11412)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11413=((1.0)*gconst5);
CheckValue<IkReal> x11414=IKPowWithIntegerCheck(cj3,-1);
if(!x11414.valid){
continue;
}
CheckValue<IkReal> x11415=IKPowWithIntegerCheck(r12,-1);
if(!x11415.valid){
continue;
}
CheckValue<IkReal> x11416=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11413))+((cj3*gconst4*r01))),-1);
if(!x11416.valid){
continue;
}
if( IKabs(((x11414.value)*(x11415.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11416.value)*(((((-1.0)*r01*sj3*x11413))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11414.value)*(x11415.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11416.value)*(((((-1.0)*r01*sj3*x11413))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11414.value)*(x11415.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11416.value)*(((((-1.0)*r01*sj3*x11413))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11417=IKsin(j4);
IkReal x11418=IKcos(j4);
IkReal x11419=(cj2*sj1);
IkReal x11420=(cj1*sj2);
IkReal x11421=(sj1*sj2);
IkReal x11422=(gconst5*sj3);
IkReal x11423=(gconst5*r00);
IkReal x11424=(cj3*gconst5);
IkReal x11425=(gconst4*sj3);
IkReal x11426=(cj3*gconst4);
IkReal x11427=(cj1*cj2);
IkReal x11428=((1.0)*x11417);
IkReal x11429=(gconst4*x11417);
IkReal x11430=((1.0)*x11418);
IkReal x11431=(x11419+x11420);
IkReal x11432=(x11418*x11422);
IkReal x11433=(x11418*x11426);
evalcond[0]=((-1.0)*r12*x11418);
evalcond[1]=(((r21*x11429))+(((-1.0)*gconst5*r20*x11428)));
evalcond[2]=(((cj3*r12*x11417))+x11427+(((-1.0)*x11421)));
evalcond[3]=(x11431+(((-1.0)*r12*sj3*x11428)));
evalcond[4]=((1.0)+((r01*x11429))+(((-1.0)*x11423*x11428)));
evalcond[5]=((((-1.0)*cj3*x11423*x11430))+((r01*x11433))+((r01*x11422))+((r00*x11425)));
evalcond[6]=((((-1.0)*r01*x11425*x11430))+((r01*x11424))+((r00*x11426))+((r00*x11432)));
evalcond[7]=(((r20*x11425))+x11431+(((-1.0)*r20*x11424*x11430))+((r21*x11422))+((r21*x11433)));
evalcond[8]=(((r20*x11432))+((r20*x11426))+x11421+((r21*x11424))+(((-1.0)*r21*x11425*x11430))+(((-1.0)*x11427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11434=((1.0)*gconst4);
IkReal x11435=(gconst5*r00);
CheckValue<IkReal> x11436=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11435))),-1);
if(!x11436.valid){
continue;
}
CheckValue<IkReal> x11437=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11434))+((sj3*x11435))),-1);
if(!x11437.valid){
continue;
}
if( IKabs(((-1.0)*(x11436.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11437.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11434)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11436.value)))+IKsqr(((x11437.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11434))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11436.value)), ((x11437.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11434))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11438=IKsin(j4);
IkReal x11439=IKcos(j4);
IkReal x11440=(cj2*sj1);
IkReal x11441=(cj1*sj2);
IkReal x11442=(sj1*sj2);
IkReal x11443=(gconst5*sj3);
IkReal x11444=(gconst5*r00);
IkReal x11445=(cj3*gconst5);
IkReal x11446=(gconst4*sj3);
IkReal x11447=(cj3*gconst4);
IkReal x11448=(cj1*cj2);
IkReal x11449=((1.0)*x11438);
IkReal x11450=(gconst4*x11438);
IkReal x11451=((1.0)*x11439);
IkReal x11452=(x11441+x11440);
IkReal x11453=(x11439*x11443);
IkReal x11454=(x11439*x11447);
evalcond[0]=((-1.0)*r12*x11439);
evalcond[1]=(((r21*x11450))+(((-1.0)*gconst5*r20*x11449)));
evalcond[2]=((((-1.0)*x11442))+x11448+((cj3*r12*x11438)));
evalcond[3]=(x11452+(((-1.0)*r12*sj3*x11449)));
evalcond[4]=((1.0)+((r01*x11450))+(((-1.0)*x11444*x11449)));
evalcond[5]=(((r00*x11446))+(((-1.0)*cj3*x11444*x11451))+((r01*x11454))+((r01*x11443)));
evalcond[6]=(((r00*x11447))+(((-1.0)*r01*x11446*x11451))+((r00*x11453))+((r01*x11445)));
evalcond[7]=(x11452+((r21*x11454))+(((-1.0)*r20*x11445*x11451))+((r20*x11446))+((r21*x11443)));
evalcond[8]=((((-1.0)*x11448))+x11442+((r20*x11453))+((r20*x11447))+((r21*x11445))+(((-1.0)*r21*x11446*x11451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11455=((1.0)*gconst5);
IkReal x11456=(gconst4*r01);
CheckValue<IkReal> x11457=IKPowWithIntegerCheck(((((-1.0)*r00*x11455))+x11456),-1);
if(!x11457.valid){
continue;
}
CheckValue<IkReal> x11458=IKPowWithIntegerCheck((((cj3*x11456))+(((-1.0)*cj3*r00*x11455))),-1);
if(!x11458.valid){
continue;
}
if( IKabs(((-1.0)*(x11457.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11458.value)*(((((-1.0)*r01*sj3*x11455))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11457.value)))+IKsqr(((x11458.value)*(((((-1.0)*r01*sj3*x11455))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11457.value)), ((x11458.value)*(((((-1.0)*r01*sj3*x11455))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11459=IKsin(j4);
IkReal x11460=IKcos(j4);
IkReal x11461=(cj2*sj1);
IkReal x11462=(cj1*sj2);
IkReal x11463=(sj1*sj2);
IkReal x11464=(gconst5*sj3);
IkReal x11465=(gconst5*r00);
IkReal x11466=(cj3*gconst5);
IkReal x11467=(gconst4*sj3);
IkReal x11468=(cj3*gconst4);
IkReal x11469=(cj1*cj2);
IkReal x11470=((1.0)*x11459);
IkReal x11471=(gconst4*x11459);
IkReal x11472=((1.0)*x11460);
IkReal x11473=(x11462+x11461);
IkReal x11474=(x11460*x11464);
IkReal x11475=(x11460*x11468);
evalcond[0]=((-1.0)*r12*x11460);
evalcond[1]=((((-1.0)*gconst5*r20*x11470))+((r21*x11471)));
evalcond[2]=(x11469+((cj3*r12*x11459))+(((-1.0)*x11463)));
evalcond[3]=(x11473+(((-1.0)*r12*sj3*x11470)));
evalcond[4]=((1.0)+(((-1.0)*x11465*x11470))+((r01*x11471)));
evalcond[5]=((((-1.0)*cj3*x11465*x11472))+((r01*x11464))+((r00*x11467))+((r01*x11475)));
evalcond[6]=(((r00*x11474))+((r01*x11466))+(((-1.0)*r01*x11467*x11472))+((r00*x11468)));
evalcond[7]=(x11473+(((-1.0)*r20*x11466*x11472))+((r20*x11467))+((r21*x11475))+((r21*x11464)));
evalcond[8]=(x11463+((r20*x11474))+((r20*x11468))+(((-1.0)*r21*x11467*x11472))+((r21*x11466))+(((-1.0)*x11469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11476=gconst4*gconst4;
IkReal x11477=gconst5*gconst5;
IkReal x11478=(r01*r20);
IkReal x11479=(gconst4*sj3);
IkReal x11480=(r01*r21);
IkReal x11481=((1.0)*cj3);
IkReal x11482=(r00*r21);
IkReal x11483=(r00*r20);
IkReal x11484=(cj3*gconst4*gconst5);
IkReal x11485=((1.0)*x11477);
CheckValue<IkReal> x11486=IKPowWithIntegerCheck(IKsign((((x11482*x11484))+(((-1.0)*x11476*x11480*x11481))+(((-1.0)*r02*r22*x11481))+((x11478*x11484))+(((-1.0)*x11477*x11481*x11483)))),-1);
if(!x11486.valid){
continue;
}
CheckValue<IkReal> x11487 = IKatan2WithCheck(IkReal((((r00*r22*x11479))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x11476*x11482))+(((-1.0)*gconst5*x11479*x11483))+(((-1.0)*sj3*x11478*x11485))+((gconst5*x11479*x11480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11486.value)))+(x11487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11488=IKsin(j4);
IkReal x11489=IKcos(j4);
IkReal x11490=(cj2*sj1);
IkReal x11491=(cj1*sj2);
IkReal x11492=(gconst5*sj3);
IkReal x11493=(gconst4*r11);
IkReal x11494=(sj1*sj2);
IkReal x11495=(gconst5*r10);
IkReal x11496=(cj1*cj2);
IkReal x11497=(gconst4*r01);
IkReal x11498=(gconst5*r00);
IkReal x11499=(gconst4*sj3);
IkReal x11500=(cj3*gconst5);
IkReal x11501=(cj3*gconst4);
IkReal x11502=(gconst4*r21);
IkReal x11503=((1.0)*x11489);
IkReal x11504=((1.0)*x11488);
IkReal x11505=(cj3*x11488);
IkReal x11506=(cj3*x11489);
IkReal x11507=(x11490+x11491);
evalcond[0]=((((-1.0)*gconst5*r20*x11504))+((x11488*x11502))+(((-1.0)*r22*x11503)));
evalcond[1]=((((-1.0)*r12*x11503))+(((-1.0)*x11495*x11504))+((x11488*x11493)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11503))+(((-1.0)*x11498*x11504))+((x11488*x11497)));
evalcond[3]=(((r00*x11499))+(((-1.0)*cj3*x11498*x11503))+((x11497*x11506))+((r01*x11492))+((r02*x11505)));
evalcond[4]=((((-1.0)*r02*sj3*x11504))+(((-1.0)*sj3*x11497*x11503))+((r00*x11501))+((r01*x11500))+((r00*x11489*x11492)));
evalcond[5]=(x11507+((r21*x11492))+((r21*x11489*x11501))+((r20*x11499))+(((-1.0)*r20*x11500*x11503))+((r22*x11505)));
evalcond[6]=(x11496+((r12*x11505))+((r11*x11492))+((r10*x11499))+(((-1.0)*cj3*x11495*x11503))+(((-1.0)*x11494))+((x11493*x11506)));
evalcond[7]=((((-1.0)*r12*sj3*x11504))+x11507+((r10*x11489*x11492))+((r11*x11500))+((r10*x11501))+(((-1.0)*sj3*x11493*x11503)));
evalcond[8]=(x11494+((r21*x11500))+(((-1.0)*r21*x11499*x11503))+((r20*x11501))+(((-1.0)*r22*sj3*x11504))+((r20*x11489*x11492))+(((-1.0)*x11496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11508=((1.0)*gconst5);
CheckValue<IkReal> x11509=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11508))+(((-1.0)*gconst4*r20)))),-1);
if(!x11509.valid){
continue;
}
CheckValue<IkReal> x11510 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11508))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11509.value)))+(x11510.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11511=IKsin(j4);
IkReal x11512=IKcos(j4);
IkReal x11513=(cj2*sj1);
IkReal x11514=(cj1*sj2);
IkReal x11515=(gconst5*sj3);
IkReal x11516=(gconst4*r11);
IkReal x11517=(sj1*sj2);
IkReal x11518=(gconst5*r10);
IkReal x11519=(cj1*cj2);
IkReal x11520=(gconst4*r01);
IkReal x11521=(gconst5*r00);
IkReal x11522=(gconst4*sj3);
IkReal x11523=(cj3*gconst5);
IkReal x11524=(cj3*gconst4);
IkReal x11525=(gconst4*r21);
IkReal x11526=((1.0)*x11512);
IkReal x11527=((1.0)*x11511);
IkReal x11528=(cj3*x11511);
IkReal x11529=(cj3*x11512);
IkReal x11530=(x11514+x11513);
evalcond[0]=((((-1.0)*gconst5*r20*x11527))+((x11511*x11525))+(((-1.0)*r22*x11526)));
evalcond[1]=((((-1.0)*x11518*x11527))+((x11511*x11516))+(((-1.0)*r12*x11526)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11526))+(((-1.0)*x11521*x11527))+((x11511*x11520)));
evalcond[3]=(((r01*x11515))+(((-1.0)*cj3*x11521*x11526))+((r00*x11522))+((x11520*x11529))+((r02*x11528)));
evalcond[4]=((((-1.0)*sj3*x11520*x11526))+(((-1.0)*r02*sj3*x11527))+((r00*x11512*x11515))+((r01*x11523))+((r00*x11524)));
evalcond[5]=(((r21*x11512*x11524))+x11530+(((-1.0)*r20*x11523*x11526))+((r20*x11522))+((r21*x11515))+((r22*x11528)));
evalcond[6]=((((-1.0)*x11517))+x11519+(((-1.0)*cj3*x11518*x11526))+((x11516*x11529))+((r12*x11528))+((r10*x11522))+((r11*x11515)));
evalcond[7]=(x11530+(((-1.0)*sj3*x11516*x11526))+(((-1.0)*r12*sj3*x11527))+((r11*x11523))+((r10*x11512*x11515))+((r10*x11524)));
evalcond[8]=((((-1.0)*r21*x11522*x11526))+(((-1.0)*x11519))+x11517+((r20*x11512*x11515))+((r21*x11523))+((r20*x11524))+(((-1.0)*r22*sj3*x11527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11531=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11531.valid){
continue;
}
CheckValue<IkReal> x11532 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11531.value)))+(x11532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11533=IKsin(j4);
IkReal x11534=IKcos(j4);
IkReal x11535=(cj2*sj1);
IkReal x11536=(cj1*sj2);
IkReal x11537=(gconst5*sj3);
IkReal x11538=(gconst4*r11);
IkReal x11539=(sj1*sj2);
IkReal x11540=(gconst5*r10);
IkReal x11541=(cj1*cj2);
IkReal x11542=(gconst4*r01);
IkReal x11543=(gconst5*r00);
IkReal x11544=(gconst4*sj3);
IkReal x11545=(cj3*gconst5);
IkReal x11546=(cj3*gconst4);
IkReal x11547=(gconst4*r21);
IkReal x11548=((1.0)*x11534);
IkReal x11549=((1.0)*x11533);
IkReal x11550=(cj3*x11533);
IkReal x11551=(cj3*x11534);
IkReal x11552=(x11535+x11536);
evalcond[0]=(((x11533*x11547))+(((-1.0)*gconst5*r20*x11549))+(((-1.0)*r22*x11548)));
evalcond[1]=((((-1.0)*x11540*x11549))+((x11533*x11538))+(((-1.0)*r12*x11548)));
evalcond[2]=((1.0)+((x11533*x11542))+(((-1.0)*r02*x11548))+(((-1.0)*x11543*x11549)));
evalcond[3]=(((r00*x11544))+((r02*x11550))+((r01*x11537))+(((-1.0)*cj3*x11543*x11548))+((x11542*x11551)));
evalcond[4]=(((r00*x11546))+((r01*x11545))+(((-1.0)*sj3*x11542*x11548))+(((-1.0)*r02*sj3*x11549))+((r00*x11534*x11537)));
evalcond[5]=(((r21*x11534*x11546))+x11552+((r22*x11550))+((r21*x11537))+((r20*x11544))+(((-1.0)*r20*x11545*x11548)));
evalcond[6]=(((r12*x11550))+((r10*x11544))+x11541+(((-1.0)*cj3*x11540*x11548))+((r11*x11537))+(((-1.0)*x11539))+((x11538*x11551)));
evalcond[7]=(((r10*x11546))+x11552+(((-1.0)*sj3*x11538*x11548))+((r11*x11545))+(((-1.0)*r12*sj3*x11549))+((r10*x11534*x11537)));
evalcond[8]=(x11539+(((-1.0)*r21*x11544*x11548))+((r20*x11534*x11537))+(((-1.0)*x11541))+((r20*x11546))+(((-1.0)*r22*sj3*x11549))+((r21*x11545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11553=((-1.0)*r21);
IkReal x11554=((-1.0)*px);
CheckValue<IkReal> x11556 = IKatan2WithCheck(IkReal(x11553),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11556.valid){
continue;
}
IkReal x11555=((1.0)*(x11556.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11555)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11554);
rxp1_1=(px*r21);
rxp1_2=(r11*x11554);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11555)));
IkReal gconst4=x11553;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11557=((-1.0)*r21);
IkReal x11558=((-1.0)*px);
CheckValue<IkReal> x11560 = IKatan2WithCheck(IkReal(x11557),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11560.valid){
continue;
}
IkReal x11559=((1.0)*(x11560.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11559)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11558);
rxp1_1=(px*r21);
rxp1_2=(r11*x11558);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11559)));
IkReal gconst4=x11557;
IkReal gconst5=((1.0)*r20);
IkReal x11561=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x11561*(r21*r21)))+((x11561*(r10*r10)))+(((-1.0)*x11561)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11562=((-1.0)*r21);
IkReal x11563=((-1.0)*px);
CheckValue<IkReal> x11565 = IKatan2WithCheck(IkReal(x11562),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11565.valid){
continue;
}
IkReal x11564=((1.0)*(x11565.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11564)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11563);
rxp1_1=(px*r21);
rxp1_2=(r11*x11563);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11564)));
IkReal gconst4=x11562;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11566=((-1.0)*r21);
IkReal x11567=((-1.0)*px);
CheckValue<IkReal> x11569 = IKatan2WithCheck(IkReal(x11566),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11569.valid){
continue;
}
IkReal x11568=((1.0)*(x11569.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11568)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11567);
rxp1_1=(px*r21);
rxp1_2=(r11*x11567);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11568)));
IkReal gconst4=x11566;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11570=((-1.0)*r21);
IkReal x11571=((-1.0)*px);
CheckValue<IkReal> x11573 = IKatan2WithCheck(IkReal(x11570),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11573.valid){
continue;
}
IkReal x11572=((1.0)*(x11573.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11572)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11571);
rxp1_1=(px*r21);
rxp1_2=(r11*x11571);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11572)));
IkReal gconst4=x11570;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11574=((-1.0)*r21);
IkReal x11575=((-1.0)*px);
CheckValue<IkReal> x11577 = IKatan2WithCheck(IkReal(x11574),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11577.valid){
continue;
}
IkReal x11576=((1.0)*(x11577.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11576)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11575);
rxp1_1=(px*r21);
rxp1_2=(r11*x11575);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11576)));
IkReal gconst4=x11574;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11580=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11580.valid){
continue;
}
IkReal x11578=x11580.value;
IkReal x11579=(sj0*x11578);
cj4array[0]=(((cj1*sj2*x11579))+((cj2*sj1*x11579)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11581=IKsin(j4);
IkReal x11582=IKcos(j4);
IkReal x11583=(gconst5*r20);
IkReal x11584=(gconst4*x11581);
IkReal x11585=((1.0)*x11582);
IkReal x11586=((1.0)*x11581);
evalcond[0]=((-1.0)*r02*x11581);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11585)));
evalcond[2]=((((-1.0)*x11583*x11586))+((r21*x11584)));
evalcond[3]=((((-1.0)*gconst5*r10*x11586))+((r11*x11584)));
evalcond[4]=(((x11582*x11583))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11588=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11588.valid){
continue;
}
IkReal x11587=x11588.value;
cj4array[0]=(((cj1*cj2*x11587))+(((-1.0)*sj1*sj2*x11587)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11589=IKsin(j4);
IkReal x11590=IKcos(j4);
IkReal x11591=(gconst5*r10);
IkReal x11592=((1.0)*sj0);
IkReal x11593=(gconst4*x11589);
IkReal x11594=((1.0)*x11590);
IkReal x11595=((1.0)*x11589);
evalcond[0]=((-1.0)*r02*x11589);
evalcond[1]=((((-1.0)*x11592))+(((-1.0)*r02*x11594)));
evalcond[2]=((((-1.0)*gconst5*r20*x11595))+((r21*x11593)));
evalcond[3]=(((r11*x11593))+(((-1.0)*x11591*x11595)));
evalcond[4]=(((x11590*x11591))+(((-1.0)*cj2*sj1*x11592))+(((-1.0)*gconst4*r11*x11594))+(((-1.0)*cj1*sj2*x11592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11596=IKPowWithIntegerCheck(r02,-1);
if(!x11596.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11596.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11597=IKsin(j4);
IkReal x11598=IKcos(j4);
IkReal x11599=((1.0)*sj0);
IkReal x11600=(gconst5*x11598);
IkReal x11601=(gconst4*x11597);
IkReal x11602=((1.0)*gconst4*x11598);
IkReal x11603=((1.0)*gconst5*x11597);
evalcond[0]=((-1.0)*r02*x11597);
evalcond[1]=((((-1.0)*r20*x11603))+((r21*x11601)));
evalcond[2]=((((-1.0)*r10*x11603))+((r11*x11601)));
evalcond[3]=((((-1.0)*r21*x11602))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11600)));
evalcond[4]=((((-1.0)*r11*x11602))+(((-1.0)*cj2*sj1*x11599))+((r10*x11600))+(((-1.0)*cj1*sj2*x11599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11604=((-1.0)*r21);
IkReal x11605=((-1.0)*px);
CheckValue<IkReal> x11607 = IKatan2WithCheck(IkReal(x11604),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11607.valid){
continue;
}
IkReal x11606=((1.0)*(x11607.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11606)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11605);
rxp1_1=(px*r21);
rxp1_2=(r11*x11605);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11606)));
IkReal gconst4=x11604;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11608=((-1.0)*r21);
IkReal x11609=((-1.0)*px);
CheckValue<IkReal> x11611 = IKatan2WithCheck(IkReal(x11608),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11611.valid){
continue;
}
IkReal x11610=((1.0)*(x11611.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11610)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11609);
rxp1_1=(px*r21);
rxp1_2=(r11*x11609);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11610)));
IkReal gconst4=x11608;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11612=((-1.0)*r21);
IkReal x11613=((-1.0)*px);
CheckValue<IkReal> x11615 = IKatan2WithCheck(IkReal(x11612),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11615.valid){
continue;
}
IkReal x11614=((1.0)*(x11615.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11614)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11613);
rxp1_1=(px*r21);
rxp1_2=(r11*x11613);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11614)));
IkReal gconst4=x11612;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11618=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11618.valid){
continue;
}
IkReal x11616=x11618.value;
IkReal x11617=(sj0*x11616);
cj4array[0]=(((cj1*sj2*x11617))+((cj2*sj1*x11617)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11619=IKsin(j4);
IkReal x11620=IKcos(j4);
IkReal x11621=(gconst5*r20);
IkReal x11622=(gconst4*x11619);
IkReal x11623=((1.0)*x11620);
IkReal x11624=((1.0)*x11619);
evalcond[0]=(r02*x11619);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11623)));
evalcond[2]=(((r21*x11622))+(((-1.0)*x11621*x11624)));
evalcond[3]=(((r11*x11622))+(((-1.0)*gconst5*r10*x11624)));
evalcond[4]=(((gconst4*r21*x11620))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11621*x11623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11626=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11626.valid){
continue;
}
IkReal x11625=x11626.value;
cj4array[0]=(((cj1*cj2*x11625))+(((-1.0)*sj1*sj2*x11625)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11627=IKsin(j4);
IkReal x11628=IKcos(j4);
IkReal x11629=(gconst4*r11);
IkReal x11630=((1.0)*sj0);
IkReal x11631=(gconst5*r10);
IkReal x11632=((1.0)*x11628);
IkReal x11633=((1.0)*x11627);
evalcond[0]=(r02*x11627);
evalcond[1]=((((-1.0)*x11630))+(((-1.0)*r02*x11632)));
evalcond[2]=(((gconst4*r21*x11627))+(((-1.0)*gconst5*r20*x11633)));
evalcond[3]=((((-1.0)*x11631*x11633))+((x11627*x11629)));
evalcond[4]=((((-1.0)*x11631*x11632))+((x11628*x11629))+(((-1.0)*cj1*sj2*x11630))+(((-1.0)*cj2*sj1*x11630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11634=IKPowWithIntegerCheck(r02,-1);
if(!x11634.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11634.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11635=IKsin(j4);
IkReal x11636=IKcos(j4);
IkReal x11637=(gconst4*r11);
IkReal x11638=((1.0)*cj1);
IkReal x11639=(gconst4*r21);
IkReal x11640=((1.0)*gconst5*x11636);
IkReal x11641=((1.0)*gconst5*x11635);
evalcond[0]=(r02*x11635);
evalcond[1]=(((x11635*x11639))+(((-1.0)*r20*x11641)));
evalcond[2]=(((x11635*x11637))+(((-1.0)*r10*x11641)));
evalcond[3]=(((x11636*x11639))+((sj1*sj2))+(((-1.0)*r20*x11640))+(((-1.0)*cj2*x11638)));
evalcond[4]=(((x11636*x11637))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11640))+(((-1.0)*sj0*sj2*x11638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11643=IKPowWithIntegerCheck(r02,-1);
if(!x11643.valid){
continue;
}
IkReal x11642=x11643.value;
CheckValue<IkReal> x11644=IKPowWithIntegerCheck(cj3,-1);
if(!x11644.valid){
continue;
}
if( IKabs((x11642*(x11644.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11642)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11642*(x11644.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11642))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11642*(x11644.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11642));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11645=IKsin(j4);
IkReal x11646=IKcos(j4);
IkReal x11647=(gconst5*sj3);
IkReal x11648=(gconst4*r11);
IkReal x11649=(sj1*sj2);
IkReal x11650=((1.0)*gconst5);
IkReal x11651=(cj2*sj1);
IkReal x11652=((1.0)*sj0);
IkReal x11653=((1.0)*cj0);
IkReal x11654=(gconst4*r21);
IkReal x11655=(cj1*sj2);
IkReal x11656=(cj3*gconst4);
IkReal x11657=(gconst4*sj3);
IkReal x11658=(cj3*gconst5);
IkReal x11659=(r20*x11646);
IkReal x11660=((1.0)*cj1*cj2);
IkReal x11661=(r10*x11646);
IkReal x11662=(cj3*x11646);
IkReal x11663=(r02*x11645);
IkReal x11664=((1.0)*sj3*x11646);
evalcond[0]=((((-1.0)*x11652))+(((-1.0)*r02*x11646)));
evalcond[1]=((((-1.0)*r20*x11645*x11650))+((x11645*x11654)));
evalcond[2]=(cj0+((x11645*x11648))+(((-1.0)*r10*x11645*x11650)));
evalcond[3]=((((-1.0)*cj1*cj2*x11653))+((cj0*x11649))+((cj3*x11663)));
evalcond[4]=((((-1.0)*sj3*x11663))+(((-1.0)*x11653*x11655))+(((-1.0)*x11651*x11653)));
evalcond[5]=(x11651+x11655+((r21*x11647))+((r20*x11657))+(((-1.0)*cj3*x11650*x11659))+((x11654*x11662)));
evalcond[6]=((((-1.0)*x11654*x11664))+x11649+((r21*x11658))+((x11647*x11659))+((r20*x11656))+(((-1.0)*x11660)));
evalcond[7]=((((-1.0)*cj1*cj2*x11652))+((r11*x11647))+((x11648*x11662))+(((-1.0)*cj3*x11650*x11661))+((r10*x11657))+((sj0*x11649)));
evalcond[8]=(((r11*x11658))+((r10*x11656))+(((-1.0)*x11648*x11664))+((x11647*x11661))+(((-1.0)*x11652*x11655))+(((-1.0)*x11651*x11652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11665=((1.0)*gconst5);
CheckValue<IkReal> x11666=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x11665))),-1);
if(!x11666.valid){
continue;
}
CheckValue<IkReal> x11667=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11665))),-1);
if(!x11667.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11666.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11667.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11665)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11666.value)))+IKsqr(((x11667.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11665))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11666.value)), ((x11667.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11665))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11668=IKsin(j4);
IkReal x11669=IKcos(j4);
IkReal x11670=(gconst5*sj3);
IkReal x11671=(gconst4*r11);
IkReal x11672=(sj1*sj2);
IkReal x11673=((1.0)*gconst5);
IkReal x11674=(cj2*sj1);
IkReal x11675=((1.0)*sj0);
IkReal x11676=((1.0)*cj0);
IkReal x11677=(gconst4*r21);
IkReal x11678=(cj1*sj2);
IkReal x11679=(cj3*gconst4);
IkReal x11680=(gconst4*sj3);
IkReal x11681=(cj3*gconst5);
IkReal x11682=(r20*x11669);
IkReal x11683=((1.0)*cj1*cj2);
IkReal x11684=(r10*x11669);
IkReal x11685=(cj3*x11669);
IkReal x11686=(r02*x11668);
IkReal x11687=((1.0)*sj3*x11669);
evalcond[0]=((((-1.0)*r02*x11669))+(((-1.0)*x11675)));
evalcond[1]=(((x11668*x11677))+(((-1.0)*r20*x11668*x11673)));
evalcond[2]=(cj0+((x11668*x11671))+(((-1.0)*r10*x11668*x11673)));
evalcond[3]=(((cj0*x11672))+((cj3*x11686))+(((-1.0)*cj1*cj2*x11676)));
evalcond[4]=((((-1.0)*x11676*x11678))+(((-1.0)*x11674*x11676))+(((-1.0)*sj3*x11686)));
evalcond[5]=(((x11677*x11685))+x11674+x11678+(((-1.0)*cj3*x11673*x11682))+((r21*x11670))+((r20*x11680)));
evalcond[6]=(x11672+(((-1.0)*x11683))+((r21*x11681))+((r20*x11679))+((x11670*x11682))+(((-1.0)*x11677*x11687)));
evalcond[7]=((((-1.0)*cj3*x11673*x11684))+((r10*x11680))+((r11*x11670))+((sj0*x11672))+(((-1.0)*cj1*cj2*x11675))+((x11671*x11685)));
evalcond[8]=((((-1.0)*x11674*x11675))+((r11*x11681))+(((-1.0)*x11675*x11678))+(((-1.0)*x11671*x11687))+((r10*x11679))+((x11670*x11684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11688=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11688.valid){
continue;
}
CheckValue<IkReal> x11689=IKPowWithIntegerCheck(r02,-1);
if(!x11689.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11688.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11689.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11688.value)))+IKsqr(((-1.0)*sj0*(x11689.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11688.value)), ((-1.0)*sj0*(x11689.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11690=IKsin(j4);
IkReal x11691=IKcos(j4);
IkReal x11692=(gconst5*sj3);
IkReal x11693=(gconst4*r11);
IkReal x11694=(sj1*sj2);
IkReal x11695=((1.0)*gconst5);
IkReal x11696=(cj2*sj1);
IkReal x11697=((1.0)*sj0);
IkReal x11698=((1.0)*cj0);
IkReal x11699=(gconst4*r21);
IkReal x11700=(cj1*sj2);
IkReal x11701=(cj3*gconst4);
IkReal x11702=(gconst4*sj3);
IkReal x11703=(cj3*gconst5);
IkReal x11704=(r20*x11691);
IkReal x11705=((1.0)*cj1*cj2);
IkReal x11706=(r10*x11691);
IkReal x11707=(cj3*x11691);
IkReal x11708=(r02*x11690);
IkReal x11709=((1.0)*sj3*x11691);
evalcond[0]=((((-1.0)*x11697))+(((-1.0)*r02*x11691)));
evalcond[1]=(((x11690*x11699))+(((-1.0)*r20*x11690*x11695)));
evalcond[2]=(cj0+(((-1.0)*r10*x11690*x11695))+((x11690*x11693)));
evalcond[3]=(((cj0*x11694))+((cj3*x11708))+(((-1.0)*cj1*cj2*x11698)));
evalcond[4]=((((-1.0)*x11698*x11700))+(((-1.0)*x11696*x11698))+(((-1.0)*sj3*x11708)));
evalcond[5]=(x11700+x11696+((x11699*x11707))+(((-1.0)*cj3*x11695*x11704))+((r20*x11702))+((r21*x11692)));
evalcond[6]=(x11694+((x11692*x11704))+((r21*x11703))+(((-1.0)*x11705))+((r20*x11701))+(((-1.0)*x11699*x11709)));
evalcond[7]=(((x11693*x11707))+(((-1.0)*cj3*x11695*x11706))+((r11*x11692))+((sj0*x11694))+((r10*x11702))+(((-1.0)*cj1*cj2*x11697)));
evalcond[8]=(((x11692*x11706))+(((-1.0)*x11696*x11697))+(((-1.0)*x11697*x11700))+((r10*x11701))+((r11*x11703))+(((-1.0)*x11693*x11709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11710=((1.0)*sj0);
IkReal x11711=((1.0)*gconst4);
CheckValue<IkReal> x11712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11711))+(((-1.0)*gconst5*r21)))),-1);
if(!x11712.valid){
continue;
}
CheckValue<IkReal> x11713 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11710))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst5*r00))+(((-1.0)*cj0*r01*x11711))+(((-1.0)*gconst4*r11*x11710))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11712.value)))+(x11713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11714=IKsin(j4);
IkReal x11715=IKcos(j4);
IkReal x11716=(gconst5*sj3);
IkReal x11717=(cj3*gconst5);
IkReal x11718=(gconst4*r11);
IkReal x11719=(sj1*sj2);
IkReal x11720=(cj2*sj1);
IkReal x11721=((1.0)*sj0);
IkReal x11722=(gconst4*r01);
IkReal x11723=(gconst4*r21);
IkReal x11724=((1.0)*cj0);
IkReal x11725=(cj1*sj2);
IkReal x11726=(gconst4*sj3);
IkReal x11727=(cj3*gconst4);
IkReal x11728=((1.0)*x11715);
IkReal x11729=((1.0)*cj1*cj2);
IkReal x11730=(cj3*x11714);
IkReal x11731=(cj3*x11715);
IkReal x11732=((1.0)*gconst5*x11714);
IkReal x11733=((1.0)*sj3*x11714);
evalcond[0]=((((-1.0)*r20*x11732))+(((-1.0)*r22*x11728))+((x11714*x11723)));
evalcond[1]=(((x11714*x11718))+cj0+(((-1.0)*r10*x11732))+(((-1.0)*r12*x11728)));
evalcond[2]=((((-1.0)*x11721))+(((-1.0)*r00*x11732))+(((-1.0)*r02*x11728))+((x11714*x11722)));
evalcond[3]=(x11725+x11720+((r20*x11726))+((x11723*x11731))+(((-1.0)*r20*x11717*x11728))+((r21*x11716))+((r22*x11730)));
evalcond[4]=(x11719+(((-1.0)*x11729))+(((-1.0)*sj3*x11723*x11728))+((r20*x11727))+(((-1.0)*r22*x11733))+((r20*x11715*x11716))+((r21*x11717)));
evalcond[5]=((((-1.0)*r00*x11717*x11728))+((r01*x11716))+((r00*x11726))+((cj0*x11719))+((r02*x11730))+(((-1.0)*cj1*cj2*x11724))+((x11722*x11731)));
evalcond[6]=(((sj0*x11719))+(((-1.0)*r10*x11717*x11728))+((r10*x11726))+(((-1.0)*cj1*cj2*x11721))+((x11718*x11731))+((r12*x11730))+((r11*x11716)));
evalcond[7]=((((-1.0)*x11720*x11724))+((r01*x11717))+((r00*x11727))+(((-1.0)*sj3*x11722*x11728))+(((-1.0)*x11724*x11725))+(((-1.0)*r02*x11733))+((r00*x11715*x11716)));
evalcond[8]=((((-1.0)*x11720*x11721))+(((-1.0)*r12*x11733))+(((-1.0)*x11721*x11725))+((r10*x11727))+(((-1.0)*sj3*x11718*x11728))+((r10*x11715*x11716))+((r11*x11717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11734=((1.0)*gconst5);
CheckValue<IkReal> x11735 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11734))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11735.valid){
continue;
}
CheckValue<IkReal> x11736=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11734))+(((-1.0)*gconst4*r10)))),-1);
if(!x11736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11735.value)+(((1.5707963267949)*(x11736.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11737=IKsin(j4);
IkReal x11738=IKcos(j4);
IkReal x11739=(gconst5*sj3);
IkReal x11740=(cj3*gconst5);
IkReal x11741=(gconst4*r11);
IkReal x11742=(sj1*sj2);
IkReal x11743=(cj2*sj1);
IkReal x11744=((1.0)*sj0);
IkReal x11745=(gconst4*r01);
IkReal x11746=(gconst4*r21);
IkReal x11747=((1.0)*cj0);
IkReal x11748=(cj1*sj2);
IkReal x11749=(gconst4*sj3);
IkReal x11750=(cj3*gconst4);
IkReal x11751=((1.0)*x11738);
IkReal x11752=((1.0)*cj1*cj2);
IkReal x11753=(cj3*x11737);
IkReal x11754=(cj3*x11738);
IkReal x11755=((1.0)*gconst5*x11737);
IkReal x11756=((1.0)*sj3*x11737);
evalcond[0]=(((x11737*x11746))+(((-1.0)*r22*x11751))+(((-1.0)*r20*x11755)));
evalcond[1]=((((-1.0)*r12*x11751))+cj0+((x11737*x11741))+(((-1.0)*r10*x11755)));
evalcond[2]=(((x11737*x11745))+(((-1.0)*x11744))+(((-1.0)*r02*x11751))+(((-1.0)*r00*x11755)));
evalcond[3]=(x11743+x11748+(((-1.0)*r20*x11740*x11751))+((x11746*x11754))+((r20*x11749))+((r21*x11739))+((r22*x11753)));
evalcond[4]=(((r20*x11738*x11739))+x11742+(((-1.0)*sj3*x11746*x11751))+(((-1.0)*r22*x11756))+(((-1.0)*x11752))+((r21*x11740))+((r20*x11750)));
evalcond[5]=(((r01*x11739))+((r00*x11749))+(((-1.0)*r00*x11740*x11751))+((cj0*x11742))+((r02*x11753))+(((-1.0)*cj1*cj2*x11747))+((x11745*x11754)));
evalcond[6]=(((r11*x11739))+((sj0*x11742))+((r12*x11753))+((x11741*x11754))+((r10*x11749))+(((-1.0)*r10*x11740*x11751))+(((-1.0)*cj1*cj2*x11744)));
evalcond[7]=(((r01*x11740))+(((-1.0)*sj3*x11745*x11751))+(((-1.0)*x11743*x11747))+(((-1.0)*x11747*x11748))+((r00*x11738*x11739))+(((-1.0)*r02*x11756))+((r00*x11750)));
evalcond[8]=((((-1.0)*sj3*x11741*x11751))+(((-1.0)*r12*x11756))+((r10*x11738*x11739))+((r10*x11750))+(((-1.0)*x11743*x11744))+(((-1.0)*x11744*x11748))+((r11*x11740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11757=((1.0)*gconst5);
CheckValue<IkReal> x11758=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11757)))),-1);
if(!x11758.valid){
continue;
}
CheckValue<IkReal> x11759 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11757))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11758.value)))+(x11759.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11760=IKsin(j4);
IkReal x11761=IKcos(j4);
IkReal x11762=(gconst5*sj3);
IkReal x11763=(cj3*gconst5);
IkReal x11764=(gconst4*r11);
IkReal x11765=(sj1*sj2);
IkReal x11766=(cj2*sj1);
IkReal x11767=((1.0)*sj0);
IkReal x11768=(gconst4*r01);
IkReal x11769=(gconst4*r21);
IkReal x11770=((1.0)*cj0);
IkReal x11771=(cj1*sj2);
IkReal x11772=(gconst4*sj3);
IkReal x11773=(cj3*gconst4);
IkReal x11774=((1.0)*x11761);
IkReal x11775=((1.0)*cj1*cj2);
IkReal x11776=(cj3*x11760);
IkReal x11777=(cj3*x11761);
IkReal x11778=((1.0)*gconst5*x11760);
IkReal x11779=((1.0)*sj3*x11760);
evalcond[0]=((((-1.0)*r22*x11774))+(((-1.0)*r20*x11778))+((x11760*x11769)));
evalcond[1]=(cj0+(((-1.0)*r10*x11778))+(((-1.0)*r12*x11774))+((x11760*x11764)));
evalcond[2]=((((-1.0)*r02*x11774))+(((-1.0)*r00*x11778))+(((-1.0)*x11767))+((x11760*x11768)));
evalcond[3]=(x11771+x11766+((r20*x11772))+((x11769*x11777))+(((-1.0)*r20*x11763*x11774))+((r22*x11776))+((r21*x11762)));
evalcond[4]=((((-1.0)*sj3*x11769*x11774))+x11765+((r20*x11773))+(((-1.0)*r22*x11779))+(((-1.0)*x11775))+((r20*x11761*x11762))+((r21*x11763)));
evalcond[5]=(((x11768*x11777))+((cj0*x11765))+((r02*x11776))+((r00*x11772))+(((-1.0)*r00*x11763*x11774))+((r01*x11762))+(((-1.0)*cj1*cj2*x11770)));
evalcond[6]=((((-1.0)*cj1*cj2*x11767))+((r11*x11762))+((r10*x11772))+((r12*x11776))+(((-1.0)*r10*x11763*x11774))+((sj0*x11765))+((x11764*x11777)));
evalcond[7]=((((-1.0)*sj3*x11768*x11774))+(((-1.0)*x11766*x11770))+(((-1.0)*r02*x11779))+(((-1.0)*x11770*x11771))+((r00*x11773))+((r00*x11761*x11762))+((r01*x11763)));
evalcond[8]=(((r11*x11763))+(((-1.0)*x11767*x11771))+((r10*x11773))+(((-1.0)*r12*x11779))+(((-1.0)*x11766*x11767))+((r10*x11761*x11762))+(((-1.0)*sj3*x11764*x11774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11780=((-1.0)*r10);
IkReal x11782 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11782)==0){
continue;
}
IkReal x11781=pow(x11782,-0.5);
CheckValue<IkReal> x11783 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11780),IKFAST_ATAN2_MAGTHRESH);
if(!x11783.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11783.value));
IkReal gconst7=(r11*x11781);
IkReal gconst8=(x11780*x11781);
CheckValue<IkReal> x11784 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11784.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11784.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11785=((-1.0)*r10);
IkReal x11786=x11781;
CheckValue<IkReal> x11788 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11785),IKFAST_ATAN2_MAGTHRESH);
if(!x11788.valid){
continue;
}
IkReal x11787=((-1.0)*(x11788.value));
sj5=gconst7;
cj5=gconst8;
j5=x11787;
IkReal gconst6=x11787;
IkReal gconst7=(r11*x11786);
IkReal gconst8=(x11785*x11786);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11789=((1.0)*sj0);
IkReal x11790=((1.0)*gconst7);
CheckValue<IkReal> x11791=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11790))+(((-1.0)*gconst8*r21)))),-1);
if(!x11791.valid){
continue;
}
CheckValue<IkReal> x11792 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11789))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11790))+(((-1.0)*gconst7*r11*x11789))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11791.value)))+(x11792.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11793=IKsin(j4);
IkReal x11794=IKcos(j4);
IkReal x11795=(gconst7*sj3);
IkReal x11796=(cj3*gconst8);
IkReal x11797=(cj3*gconst7);
IkReal x11798=(sj1*sj2);
IkReal x11799=(cj2*sj1);
IkReal x11800=((1.0)*sj0);
IkReal x11801=((1.0)*cj0);
IkReal x11802=(gconst8*sj3);
IkReal x11803=(cj1*sj2);
IkReal x11804=((1.0)*x11794);
IkReal x11805=((1.0)*x11793);
IkReal x11806=((1.0)*cj1*cj2);
IkReal x11807=(cj3*x11793);
IkReal x11808=(gconst7*x11793);
IkReal x11809=(x11794*x11802);
evalcond[0]=(((r21*x11808))+(((-1.0)*gconst8*r20*x11805))+(((-1.0)*r22*x11804)));
evalcond[1]=((((-1.0)*gconst8*r10*x11805))+cj0+(((-1.0)*r12*x11804))+((r11*x11808)));
evalcond[2]=((((-1.0)*gconst8*r00*x11805))+(((-1.0)*x11800))+(((-1.0)*r02*x11804))+((r01*x11808)));
evalcond[3]=(x11799+((r21*x11802))+((r20*x11795))+((r22*x11807))+((r21*x11794*x11797))+(((-1.0)*r20*x11796*x11804))+x11803);
evalcond[4]=(x11798+((r20*x11797))+(((-1.0)*r22*sj3*x11805))+(((-1.0)*x11806))+((r20*x11809))+(((-1.0)*r21*x11795*x11804))+((r21*x11796)));
evalcond[5]=(((r02*x11807))+(((-1.0)*r00*x11796*x11804))+(((-1.0)*cj1*cj2*x11801))+((r01*x11802))+((r00*x11795))+((r01*x11794*x11797))+((cj0*x11798)));
evalcond[6]=(((r10*x11795))+((sj0*x11798))+((r11*x11802))+(((-1.0)*r10*x11796*x11804))+((r12*x11807))+((r11*x11794*x11797))+(((-1.0)*cj1*cj2*x11800)));
evalcond[7]=(((r00*x11809))+(((-1.0)*r02*sj3*x11805))+(((-1.0)*r01*x11795*x11804))+((r01*x11796))+(((-1.0)*x11801*x11803))+((r00*x11797))+(((-1.0)*x11799*x11801)));
evalcond[8]=(((r11*x11796))+((r10*x11797))+(((-1.0)*r11*x11795*x11804))+((r10*x11809))+(((-1.0)*x11800*x11803))+(((-1.0)*r12*sj3*x11805))+(((-1.0)*x11799*x11800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11810=((1.0)*gconst8);
CheckValue<IkReal> x11811=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11810))+(((-1.0)*gconst7*r00)))),-1);
if(!x11811.valid){
continue;
}
CheckValue<IkReal> x11812 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11811.value)))+(x11812.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11813=IKsin(j4);
IkReal x11814=IKcos(j4);
IkReal x11815=(gconst7*sj3);
IkReal x11816=(cj3*gconst8);
IkReal x11817=(cj3*gconst7);
IkReal x11818=(sj1*sj2);
IkReal x11819=(cj2*sj1);
IkReal x11820=((1.0)*sj0);
IkReal x11821=((1.0)*cj0);
IkReal x11822=(gconst8*sj3);
IkReal x11823=(cj1*sj2);
IkReal x11824=((1.0)*x11814);
IkReal x11825=((1.0)*x11813);
IkReal x11826=((1.0)*cj1*cj2);
IkReal x11827=(cj3*x11813);
IkReal x11828=(gconst7*x11813);
IkReal x11829=(x11814*x11822);
evalcond[0]=((((-1.0)*gconst8*r20*x11825))+(((-1.0)*r22*x11824))+((r21*x11828)));
evalcond[1]=(cj0+(((-1.0)*r12*x11824))+((r11*x11828))+(((-1.0)*gconst8*r10*x11825)));
evalcond[2]=((((-1.0)*gconst8*r00*x11825))+(((-1.0)*r02*x11824))+(((-1.0)*x11820))+((r01*x11828)));
evalcond[3]=((((-1.0)*r20*x11816*x11824))+((r22*x11827))+((r21*x11814*x11817))+((r20*x11815))+((r21*x11822))+x11819+x11823);
evalcond[4]=((((-1.0)*r21*x11815*x11824))+(((-1.0)*r22*sj3*x11825))+((r21*x11816))+(((-1.0)*x11826))+((r20*x11829))+((r20*x11817))+x11818);
evalcond[5]=(((r00*x11815))+((r02*x11827))+((cj0*x11818))+(((-1.0)*cj1*cj2*x11821))+((r01*x11822))+((r01*x11814*x11817))+(((-1.0)*r00*x11816*x11824)));
evalcond[6]=(((sj0*x11818))+((r12*x11827))+((r10*x11815))+(((-1.0)*r10*x11816*x11824))+(((-1.0)*cj1*cj2*x11820))+((r11*x11822))+((r11*x11814*x11817)));
evalcond[7]=((((-1.0)*x11821*x11823))+(((-1.0)*x11819*x11821))+((r01*x11816))+((r00*x11817))+(((-1.0)*r01*x11815*x11824))+((r00*x11829))+(((-1.0)*r02*sj3*x11825)));
evalcond[8]=((((-1.0)*x11819*x11820))+(((-1.0)*r11*x11815*x11824))+(((-1.0)*x11820*x11823))+((r10*x11829))+((r10*x11817))+(((-1.0)*r12*sj3*x11825))+((r11*x11816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11830=((-1.0)*r11);
IkReal x11832 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11832)==0){
continue;
}
IkReal x11831=pow(x11832,-0.5);
CheckValue<IkReal> x11833 = IKatan2WithCheck(IkReal(x11830),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11833.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11833.value))));
IkReal gconst10=(x11830*x11831);
IkReal gconst11=((1.0)*r10*x11831);
CheckValue<IkReal> x11834 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11834.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11834.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11835=((-1.0)*r11);
CheckValue<IkReal> x11838 = IKatan2WithCheck(IkReal(x11835),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11838.valid){
continue;
}
IkReal x11836=((1.0)*(x11838.value));
IkReal x11837=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11836)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11836)));
IkReal gconst10=(x11835*x11837);
IkReal gconst11=((1.0)*r10*x11837);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11839=((-1.0)*r11);
CheckValue<IkReal> x11842 = IKatan2WithCheck(IkReal(x11839),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11842.valid){
continue;
}
IkReal x11840=((1.0)*(x11842.value));
IkReal x11841=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11840)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11840)));
IkReal gconst10=(x11839*x11841);
IkReal gconst11=((1.0)*r10*x11841);
IkReal x11843=r12*r12;
IkReal x11844=((1.0)*sj0);
IkReal x11845=(cj0*r02);
IkReal x11846=x11831;
j4eval[0]=((IKabs(((((-1.0)*x11845))+(((-1.0)*r12*x11844)))))+(IKabs((((sj0*x11843*x11846))+(((-1.0)*x11844*x11846))+((r12*x11845*x11846))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11847=((-1.0)*r11);
CheckValue<IkReal> x11850 = IKatan2WithCheck(IkReal(x11847),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11850.valid){
continue;
}
IkReal x11848=((1.0)*(x11850.value));
IkReal x11849=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11848)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11848)));
IkReal gconst10=(x11847*x11849);
IkReal gconst11=((1.0)*r10*x11849);
IkReal x11851=((1.0)*cj3);
CheckValue<IkReal> x11856=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11856.valid){
continue;
}
IkReal x11852=x11856.value;
IkReal x11853=(cj3*x11852);
IkReal x11854=(x11851*x11852);
IkReal x11855=((((-1.0)*x11854*(r10*r10)*(r20*r20)))+(((-1.0)*x11851*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x11853))+(((-1.0)*x11854*(r11*r11)*(r21*r21))));
j4eval[0]=x11855;
j4eval[1]=IKsign(x11855);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11857=((-1.0)*r11);
CheckValue<IkReal> x11860 = IKatan2WithCheck(IkReal(x11857),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11860.valid){
continue;
}
IkReal x11858=((1.0)*(x11860.value));
IkReal x11859=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11858)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11858)));
IkReal gconst10=(x11857*x11859);
IkReal gconst11=((1.0)*r10*x11859);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11861=((-1.0)*r11);
CheckValue<IkReal> x11864 = IKatan2WithCheck(IkReal(x11861),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11864.valid){
continue;
}
IkReal x11862=((1.0)*(x11864.value));
IkReal x11863=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11862)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11862)));
IkReal gconst10=(x11861*x11863);
IkReal gconst11=((1.0)*r10*x11863);
IkReal x11865=r12*r12;
IkReal x11866=((1.0)*sj0);
IkReal x11867=(cj0*r02);
IkReal x11868=x11831;
j4eval[0]=((IKabs(((((-1.0)*x11867))+(((-1.0)*r12*x11866)))))+(IKabs(((((-1.0)*x11866*x11868))+((r12*x11867*x11868))+((sj0*x11865*x11868))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11869=((-1.0)*r11);
CheckValue<IkReal> x11872 = IKatan2WithCheck(IkReal(x11869),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11872.valid){
continue;
}
IkReal x11870=((1.0)*(x11872.value));
IkReal x11871=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11870)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11870)));
IkReal gconst10=(x11869*x11871);
IkReal gconst11=((1.0)*r10*x11871);
IkReal x11873=r12*r12;
IkReal x11874=(cj1*cj2*r22);
IkReal x11875=(r22*sj1*sj2);
CheckValue<IkReal> x11879=IKPowWithIntegerCheck(((-1.0)+x11873),-1);
if(!x11879.valid){
continue;
}
IkReal x11876=x11879.value;
if((((1.0)+(((-1.0)*x11873)))) < -0.00001)
continue;
IkReal x11877=IKsqrt(((1.0)+(((-1.0)*x11873))));
IkReal x11878=(r12*x11876*x11877);
j4eval[0]=((IKabs(((((-1.0)*x11874))+x11875)))+(IKabs((((x11874*x11878))+(((-1.0)*x11875*x11878))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11880=((-1.0)*r11);
CheckValue<IkReal> x11883 = IKatan2WithCheck(IkReal(x11880),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11883.valid){
continue;
}
IkReal x11881=((1.0)*(x11883.value));
IkReal x11882=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11881)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11881)));
IkReal gconst10=(x11880*x11882);
IkReal gconst11=((1.0)*r10*x11882);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11884=((-1.0)*r11);
CheckValue<IkReal> x11887 = IKatan2WithCheck(IkReal(x11884),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11887.valid){
continue;
}
IkReal x11885=((1.0)*(x11887.value));
IkReal x11886=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11885)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11885)));
IkReal gconst10=(x11884*x11886);
IkReal gconst11=((1.0)*r10*x11886);
IkReal x11888=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11892=IKPowWithIntegerCheck(x11888,-1);
if(!x11892.valid){
continue;
}
IkReal x11889=x11892.value;
IkReal x11890=((1.0)*x11889);
IkReal x11891=((((-2.0)*r00*r01*r10*r11*x11889))+(((-1.0)*(r02*r02)))+(((-1.0)*x11890*(r01*r01)*(r11*r11)))+(((-1.0)*x11890*(r00*r00)*(r10*r10))));
j4eval[0]=x11891;
j4eval[1]=IKsign(x11891);
j4eval[2]=r02;
j4eval[3]=x11888;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11893=((-1.0)*r11);
CheckValue<IkReal> x11896 = IKatan2WithCheck(IkReal(x11893),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11896.valid){
continue;
}
IkReal x11894=((1.0)*(x11896.value));
IkReal x11895=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11894)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11894)));
IkReal gconst10=(x11893*x11895);
IkReal gconst11=((1.0)*r10*x11895);
IkReal x11897=r12*r12;
IkReal x11898=(cj1*cj2*r22);
IkReal x11899=(r22*sj1*sj2);
CheckValue<IkReal> x11903=IKPowWithIntegerCheck(((-1.0)+x11897),-1);
if(!x11903.valid){
continue;
}
IkReal x11900=x11903.value;
if((((1.0)+(((-1.0)*x11897)))) < -0.00001)
continue;
IkReal x11901=IKsqrt(((1.0)+(((-1.0)*x11897))));
IkReal x11902=(r12*x11900*x11901);
j4eval[0]=((IKabs(((((-1.0)*x11898))+x11899)))+(IKabs(((((-1.0)*x11899*x11902))+((x11898*x11902))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11904=(gconst10*r21);
IkReal x11905=(gconst11*r20);
IkReal x11906=(sj1*sj2);
IkReal x11907=(cj1*cj2);
CheckValue<IkReal> x11908=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11904*x11905))+(r22*r22)+(x11905*x11905)+(x11904*x11904))),-1);
if(!x11908.valid){
continue;
}
CheckValue<IkReal> x11909 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11907))+((r22*x11906)))),IkReal((((x11905*x11907))+(((-1.0)*x11905*x11906))+((x11904*x11906))+(((-1.0)*x11904*x11907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11908.value)))+(x11909.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11910=IKsin(j4);
IkReal x11911=IKcos(j4);
IkReal x11912=((1.0)*cj2);
IkReal x11913=((1.0)*x11911);
IkReal x11914=(gconst10*x11910);
IkReal x11915=((1.0)*x11910);
IkReal x11916=(gconst11*x11911);
IkReal x11917=(gconst11*x11915);
evalcond[0]=((((-1.0)*r22*x11913))+(((-1.0)*r20*x11917))+((r21*x11914)));
evalcond[1]=(((r11*x11914))+(((-1.0)*r12*x11913))+(((-1.0)*r10*x11917)));
evalcond[2]=(((r00*x11916))+(((-1.0)*gconst10*r01*x11913))+(((-1.0)*r02*x11915)));
evalcond[3]=((-1.0)+((r01*x11914))+(((-1.0)*r02*x11913))+(((-1.0)*r00*x11917)));
evalcond[4]=((((-1.0)*gconst10*r21*x11913))+(((-1.0)*cj1*x11912))+(((-1.0)*r22*x11915))+((sj1*sj2))+((r20*x11916)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11913))+(((-1.0)*sj1*x11912))+((r10*x11916))+(((-1.0)*r12*x11915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11918=(gconst11*r00);
IkReal x11919=(gconst10*r01);
CheckValue<IkReal> x11920 = IKatan2WithCheck(IkReal((x11918+(((-1.0)*x11919)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11920.valid){
continue;
}
CheckValue<IkReal> x11921=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11918*x11918)))+(((-1.0)*(x11919*x11919)))+(((-1.0)*(r02*r02)))+(((2.0)*x11918*x11919)))),-1);
if(!x11921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11920.value)+(((1.5707963267949)*(x11921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11922=IKsin(j4);
IkReal x11923=IKcos(j4);
IkReal x11924=((1.0)*cj2);
IkReal x11925=((1.0)*x11923);
IkReal x11926=(gconst10*x11922);
IkReal x11927=((1.0)*x11922);
IkReal x11928=(gconst11*x11923);
IkReal x11929=(gconst11*x11927);
evalcond[0]=((((-1.0)*r20*x11929))+((r21*x11926))+(((-1.0)*r22*x11925)));
evalcond[1]=((((-1.0)*r10*x11929))+((r11*x11926))+(((-1.0)*r12*x11925)));
evalcond[2]=((((-1.0)*r02*x11927))+((r00*x11928))+(((-1.0)*gconst10*r01*x11925)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11925))+(((-1.0)*r00*x11929))+((r01*x11926)));
evalcond[4]=((((-1.0)*cj1*x11924))+((r20*x11928))+((sj1*sj2))+(((-1.0)*r22*x11927))+(((-1.0)*gconst10*r21*x11925)));
evalcond[5]=(((r10*x11928))+(((-1.0)*gconst10*r11*x11925))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11927))+(((-1.0)*sj1*x11924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11930 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11930.valid){
continue;
}
CheckValue<IkReal> x11931=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11930.value)+(((1.5707963267949)*(x11931.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11932=IKsin(j4);
IkReal x11933=IKcos(j4);
IkReal x11934=((1.0)*cj2);
IkReal x11935=((1.0)*x11933);
IkReal x11936=(gconst10*x11932);
IkReal x11937=((1.0)*x11932);
IkReal x11938=(gconst11*x11933);
IkReal x11939=(gconst11*x11937);
evalcond[0]=(((r21*x11936))+(((-1.0)*r22*x11935))+(((-1.0)*r20*x11939)));
evalcond[1]=((((-1.0)*r10*x11939))+((r11*x11936))+(((-1.0)*r12*x11935)));
evalcond[2]=((((-1.0)*gconst10*r01*x11935))+(((-1.0)*r02*x11937))+((r00*x11938)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11935))+(((-1.0)*r00*x11939))+((r01*x11936)));
evalcond[4]=(((r20*x11938))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11935))+(((-1.0)*r22*x11937))+(((-1.0)*cj1*x11934)));
evalcond[5]=((((-1.0)*sj1*x11934))+((r10*x11938))+(((-1.0)*gconst10*r11*x11935))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11940=((-1.0)*r11);
CheckValue<IkReal> x11943 = IKatan2WithCheck(IkReal(x11940),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11943.valid){
continue;
}
IkReal x11941=((1.0)*(x11943.value));
IkReal x11942=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11941)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11941)));
IkReal gconst10=(x11940*x11942);
IkReal gconst11=((1.0)*r10*x11942);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11944=((-1.0)*r11);
CheckValue<IkReal> x11947 = IKatan2WithCheck(IkReal(x11944),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11947.valid){
continue;
}
IkReal x11945=((1.0)*(x11947.value));
IkReal x11946=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11945)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11945)));
IkReal gconst10=(x11944*x11946);
IkReal gconst11=((1.0)*r10*x11946);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11948=((-1.0)*r11);
CheckValue<IkReal> x11951 = IKatan2WithCheck(IkReal(x11948),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11951.valid){
continue;
}
IkReal x11949=((1.0)*(x11951.value));
IkReal x11950=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11949)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11949)));
IkReal gconst10=(x11948*x11950);
IkReal gconst11=((1.0)*r10*x11950);
IkReal x11952=r12*r12;
CheckValue<IkReal> x11955=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11952))),-1);
if(!x11955.valid){
continue;
}
IkReal x11953=x11955.value;
IkReal x11954=((1.0)*x11953);
j4eval[0]=IKsign((x11952+((x11954*(r11*r11*r11*r11)))+(((2.0)*x11953*(r10*r10)*(r11*r11)))+((x11954*(r10*r10*r10*r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11956=(cj2*sj1);
IkReal x11957=(gconst10*r11);
IkReal x11958=(gconst11*r10);
IkReal x11959=(cj1*sj2);
CheckValue<IkReal> x11960 = IKatan2WithCheck(IkReal((((r12*x11959))+((r12*x11956)))),IkReal(((((-1.0)*x11956*x11958))+((x11956*x11957))+((x11957*x11959))+(((-1.0)*x11958*x11959)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11960.valid){
continue;
}
CheckValue<IkReal> x11961=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11957*x11958))+(r12*r12)+(x11958*x11958)+(x11957*x11957))),-1);
if(!x11961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11960.value)+(((1.5707963267949)*(x11961.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11962=IKsin(j4);
IkReal x11963=IKcos(j4);
IkReal x11964=((1.0)*x11963);
IkReal x11965=(gconst10*x11962);
IkReal x11966=((1.0)*x11962);
IkReal x11967=(gconst11*x11963);
IkReal x11968=(gconst11*x11966);
evalcond[0]=((((-1.0)*r20*x11968))+(((-1.0)*r22*x11964))+((r21*x11965)));
evalcond[1]=((((-1.0)*r10*x11968))+(((-1.0)*r12*x11964))+((r11*x11965)));
evalcond[2]=(((r00*x11967))+(((-1.0)*gconst10*r01*x11964))+(((-1.0)*r02*x11966)));
evalcond[3]=((1.0)+((r01*x11965))+(((-1.0)*r00*x11968))+(((-1.0)*r02*x11964)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11966))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11964))+((r10*x11967)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11967))+(((-1.0)*r22*x11966))+(((-1.0)*gconst10*r21*x11964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11969=(gconst11*r00);
IkReal x11970=(gconst10*r01);
CheckValue<IkReal> x11971=IKPowWithIntegerCheck(IKsign(((x11969*x11969)+(x11970*x11970)+(r02*r02)+(((-2.0)*x11969*x11970)))),-1);
if(!x11971.valid){
continue;
}
CheckValue<IkReal> x11972 = IKatan2WithCheck(IkReal((x11969+(((-1.0)*x11970)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11971.value)))+(x11972.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11973=IKsin(j4);
IkReal x11974=IKcos(j4);
IkReal x11975=((1.0)*x11974);
IkReal x11976=(gconst10*x11973);
IkReal x11977=((1.0)*x11973);
IkReal x11978=(gconst11*x11974);
IkReal x11979=(gconst11*x11977);
evalcond[0]=((((-1.0)*r20*x11979))+(((-1.0)*r22*x11975))+((r21*x11976)));
evalcond[1]=((((-1.0)*r10*x11979))+(((-1.0)*r12*x11975))+((r11*x11976)));
evalcond[2]=(((r00*x11978))+(((-1.0)*gconst10*r01*x11975))+(((-1.0)*r02*x11977)));
evalcond[3]=((1.0)+((r01*x11976))+(((-1.0)*r00*x11979))+(((-1.0)*r02*x11975)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11977))+(((-1.0)*gconst10*r11*x11975))+((cj1*sj2))+((r10*x11978)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11978))+(((-1.0)*r22*x11977))+(((-1.0)*gconst10*r21*x11975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11980=((1.0)*gconst11);
CheckValue<IkReal> x11981=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11980)))),-1);
if(!x11981.valid){
continue;
}
CheckValue<IkReal> x11982 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11981.value)))+(x11982.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11983=IKsin(j4);
IkReal x11984=IKcos(j4);
IkReal x11985=((1.0)*x11984);
IkReal x11986=(gconst10*x11983);
IkReal x11987=((1.0)*x11983);
IkReal x11988=(gconst11*x11984);
IkReal x11989=(gconst11*x11987);
evalcond[0]=(((r21*x11986))+(((-1.0)*r22*x11985))+(((-1.0)*r20*x11989)));
evalcond[1]=((((-1.0)*r12*x11985))+(((-1.0)*r10*x11989))+((r11*x11986)));
evalcond[2]=((((-1.0)*gconst10*r01*x11985))+(((-1.0)*r02*x11987))+((r00*x11988)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11985))+(((-1.0)*r00*x11989))+((r01*x11986)));
evalcond[4]=((((-1.0)*r12*x11987))+((cj2*sj1))+((r10*x11988))+(((-1.0)*gconst10*r11*x11985))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11985))+((r20*x11988))+(((-1.0)*r22*x11987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11990=((-1.0)*r11);
IkReal x11991=((-1.0)*r10);
CheckValue<IkReal> x11993 = IKatan2WithCheck(IkReal(x11990),IkReal(x11991),IKFAST_ATAN2_MAGTHRESH);
if(!x11993.valid){
continue;
}
IkReal x11992=((1.0)*(x11993.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11992)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11991);
rxp1_1=(px*r21);
rxp1_2=(px*x11990);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11992)));
IkReal gconst10=x11990;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11994=((-1.0)*r11);
IkReal x11995=((-1.0)*r10);
CheckValue<IkReal> x11997 = IKatan2WithCheck(IkReal(x11994),IkReal(x11995),IKFAST_ATAN2_MAGTHRESH);
if(!x11997.valid){
continue;
}
IkReal x11996=((1.0)*(x11997.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11996)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11995);
rxp1_1=(px*r21);
rxp1_2=(px*x11994);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11996)));
IkReal gconst10=x11994;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11998=((-1.0)*r11);
IkReal x11999=((-1.0)*r10);
CheckValue<IkReal> x12001 = IKatan2WithCheck(IkReal(x11998),IkReal(x11999),IKFAST_ATAN2_MAGTHRESH);
if(!x12001.valid){
continue;
}
IkReal x12000=((1.0)*(x12001.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12000)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11999);
rxp1_1=(px*r21);
rxp1_2=(px*x11998);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12000)));
IkReal gconst10=x11998;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12004=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x12004.valid){
continue;
}
IkReal x12002=x12004.value;
IkReal x12003=(sj0*x12002);
cj4array[0]=(((cj1*sj2*x12003))+((cj2*sj1*x12003)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12005=IKsin(j4);
IkReal x12006=IKcos(j4);
IkReal x12007=(gconst10*r21);
IkReal x12008=(gconst11*r20);
IkReal x12009=((1.0)*x12005);
IkReal x12010=((1.0)*x12006);
evalcond[0]=((-1.0)*r02*x12005);
evalcond[1]=((((-1.0)*r02*x12010))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x12008*x12009))+((x12005*x12007)));
evalcond[3]=(((gconst10*r11*x12005))+(((-1.0)*gconst11*r10*x12009)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x12006*x12008))+(((-1.0)*x12007*x12010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12012=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12012.valid){
continue;
}
IkReal x12011=x12012.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12011))+((cj1*cj2*x12011)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12013=IKsin(j4);
IkReal x12014=IKcos(j4);
IkReal x12015=((1.0)*sj0);
IkReal x12016=(gconst10*x12013);
IkReal x12017=((1.0)*x12014);
IkReal x12018=((1.0)*gconst11*x12013);
evalcond[0]=((-1.0)*r02*x12013);
evalcond[1]=((((-1.0)*r02*x12017))+(((-1.0)*x12015)));
evalcond[2]=(((r21*x12016))+(((-1.0)*r20*x12018)));
evalcond[3]=(((r11*x12016))+(((-1.0)*r10*x12018)));
evalcond[4]=(((gconst11*r10*x12014))+(((-1.0)*cj2*sj1*x12015))+(((-1.0)*cj1*sj2*x12015))+(((-1.0)*gconst10*r11*x12017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12019=IKPowWithIntegerCheck(r02,-1);
if(!x12019.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12019.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12020=IKsin(j4);
IkReal x12021=IKcos(j4);
IkReal x12022=(gconst10*r21);
IkReal x12023=((1.0)*sj0);
IkReal x12024=(gconst10*r11);
IkReal x12025=(gconst11*x12021);
IkReal x12026=((1.0)*x12021);
IkReal x12027=((1.0)*gconst11*x12020);
evalcond[0]=((-1.0)*r02*x12020);
evalcond[1]=(((x12020*x12022))+(((-1.0)*r20*x12027)));
evalcond[2]=(((x12020*x12024))+(((-1.0)*r10*x12027)));
evalcond[3]=(((r20*x12025))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12022*x12026)));
evalcond[4]=((((-1.0)*cj1*sj2*x12023))+(((-1.0)*cj2*sj1*x12023))+(((-1.0)*x12024*x12026))+((r10*x12025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12028=((1.0)*gconst11);
CheckValue<IkReal> x12029 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12028))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12029.valid){
continue;
}
CheckValue<IkReal> x12030=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12029.value)+(((1.5707963267949)*(x12030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12031=IKsin(j4);
IkReal x12032=IKcos(j4);
IkReal x12033=((1.0)*cj2);
IkReal x12034=((1.0)*sj0);
IkReal x12035=(cj1*sj2);
IkReal x12036=(gconst10*x12031);
IkReal x12037=((1.0)*x12032);
IkReal x12038=(gconst11*x12032);
IkReal x12039=((1.0)*x12031);
IkReal x12040=(gconst11*x12039);
evalcond[0]=((((-1.0)*r20*x12040))+((r21*x12036)));
evalcond[1]=(cj0+(((-1.0)*r10*x12040))+(((-1.0)*r12*x12037))+((r11*x12036)));
evalcond[2]=((((-1.0)*cj1*x12033))+((r20*x12038))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12037)));
evalcond[3]=((((-1.0)*r00*x12040))+(((-1.0)*x12034))+((r01*x12036))+(((-1.0)*r02*x12037)));
evalcond[4]=((((-1.0)*gconst10*r01*x12037))+((r00*x12038))+(((-1.0)*r02*x12039))+(((-1.0)*cj0*sj1*x12033))+(((-1.0)*cj0*x12035)));
evalcond[5]=((((-1.0)*x12034*x12035))+(((-1.0)*gconst10*r11*x12037))+(((-1.0)*r12*x12039))+((r10*x12038))+(((-1.0)*sj0*sj1*x12033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12041=(gconst10*r21);
IkReal x12042=(gconst11*r20);
IkReal x12043=(sj1*sj2);
IkReal x12044=(cj1*cj2);
CheckValue<IkReal> x12045=IKPowWithIntegerCheck(IKsign(((x12042*x12042)+(r22*r22)+(x12041*x12041)+(((-2.0)*x12041*x12042)))),-1);
if(!x12045.valid){
continue;
}
CheckValue<IkReal> x12046 = IKatan2WithCheck(IkReal((((r22*x12043))+(((-1.0)*r22*x12044)))),IkReal(((((-1.0)*x12041*x12044))+(((-1.0)*x12042*x12043))+((x12041*x12043))+((x12042*x12044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12045.value)))+(x12046.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12047=IKsin(j4);
IkReal x12048=IKcos(j4);
IkReal x12049=((1.0)*cj2);
IkReal x12050=((1.0)*sj0);
IkReal x12051=(cj1*sj2);
IkReal x12052=((1.0)*x12048);
IkReal x12053=(gconst10*x12047);
IkReal x12054=((1.0)*x12047);
IkReal x12055=(gconst11*x12048);
IkReal x12056=(gconst11*x12054);
evalcond[0]=((((-1.0)*r20*x12056))+(((-1.0)*r22*x12052))+((r21*x12053)));
evalcond[1]=((((-1.0)*r10*x12056))+cj0+(((-1.0)*r12*x12052))+((r11*x12053)));
evalcond[2]=((((-1.0)*x12050))+((r01*x12053))+(((-1.0)*r02*x12052))+(((-1.0)*r00*x12056)));
evalcond[3]=(((r20*x12055))+(((-1.0)*cj1*x12049))+((sj1*sj2))+(((-1.0)*r22*x12054))+(((-1.0)*gconst10*r21*x12052)));
evalcond[4]=(((r00*x12055))+(((-1.0)*r02*x12054))+(((-1.0)*cj0*sj1*x12049))+(((-1.0)*gconst10*r01*x12052))+(((-1.0)*cj0*x12051)));
evalcond[5]=(((r10*x12055))+(((-1.0)*sj0*sj1*x12049))+(((-1.0)*gconst10*r11*x12052))+(((-1.0)*r12*x12054))+(((-1.0)*x12050*x12051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12057=((1.0)*sj0);
IkReal x12058=((1.0)*gconst10);
CheckValue<IkReal> x12059=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12058))+(((-1.0)*gconst11*r21)))),-1);
if(!x12059.valid){
continue;
}
CheckValue<IkReal> x12060 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12057)))),IkReal(((((-1.0)*gconst10*r11*x12057))+((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12058))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12059.value)))+(x12060.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12061=IKsin(j4);
IkReal x12062=IKcos(j4);
IkReal x12063=((1.0)*cj2);
IkReal x12064=((1.0)*sj0);
IkReal x12065=(cj1*sj2);
IkReal x12066=((1.0)*x12062);
IkReal x12067=(gconst10*x12061);
IkReal x12068=((1.0)*x12061);
IkReal x12069=(gconst11*x12062);
IkReal x12070=(gconst11*x12068);
evalcond[0]=(((r21*x12067))+(((-1.0)*r20*x12070))+(((-1.0)*r22*x12066)));
evalcond[1]=(cj0+(((-1.0)*r10*x12070))+(((-1.0)*r12*x12066))+((r11*x12067)));
evalcond[2]=(((r01*x12067))+(((-1.0)*r02*x12066))+(((-1.0)*x12064))+(((-1.0)*r00*x12070)));
evalcond[3]=((((-1.0)*gconst10*r21*x12066))+((sj1*sj2))+((r20*x12069))+(((-1.0)*r22*x12068))+(((-1.0)*cj1*x12063)));
evalcond[4]=(((r00*x12069))+(((-1.0)*cj0*x12065))+(((-1.0)*cj0*sj1*x12063))+(((-1.0)*r02*x12068))+(((-1.0)*gconst10*r01*x12066)));
evalcond[5]=((((-1.0)*sj0*sj1*x12063))+(((-1.0)*x12064*x12065))+((r10*x12069))+(((-1.0)*gconst10*r11*x12066))+(((-1.0)*r12*x12068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12071=((1.0)*gconst11);
CheckValue<IkReal> x12072=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12071)))),-1);
if(!x12072.valid){
continue;
}
CheckValue<IkReal> x12073 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12072.value)))+(x12073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12074=IKsin(j4);
IkReal x12075=IKcos(j4);
IkReal x12076=((1.0)*cj2);
IkReal x12077=((1.0)*sj0);
IkReal x12078=(cj1*sj2);
IkReal x12079=((1.0)*x12075);
IkReal x12080=(gconst10*x12074);
IkReal x12081=((1.0)*x12074);
IkReal x12082=(gconst11*x12075);
IkReal x12083=(gconst11*x12081);
evalcond[0]=(((r21*x12080))+(((-1.0)*r20*x12083))+(((-1.0)*r22*x12079)));
evalcond[1]=(cj0+(((-1.0)*r12*x12079))+((r11*x12080))+(((-1.0)*r10*x12083)));
evalcond[2]=(((r01*x12080))+(((-1.0)*r02*x12079))+(((-1.0)*r00*x12083))+(((-1.0)*x12077)));
evalcond[3]=(((r20*x12082))+(((-1.0)*gconst10*r21*x12079))+((sj1*sj2))+(((-1.0)*r22*x12081))+(((-1.0)*cj1*x12076)));
evalcond[4]=((((-1.0)*gconst10*r01*x12079))+((r00*x12082))+(((-1.0)*cj0*sj1*x12076))+(((-1.0)*r02*x12081))+(((-1.0)*cj0*x12078)));
evalcond[5]=((((-1.0)*r12*x12081))+(((-1.0)*sj0*sj1*x12076))+(((-1.0)*gconst10*r11*x12079))+((r10*x12082))+(((-1.0)*x12077*x12078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12084=((-1.0)*r11);
CheckValue<IkReal> x12087 = IKatan2WithCheck(IkReal(x12084),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12087.valid){
continue;
}
IkReal x12085=((1.0)*(x12087.value));
IkReal x12086=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12085)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12085)));
IkReal gconst10=(x12084*x12086);
IkReal gconst11=((1.0)*r10*x12086);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12088=((-1.0)*r11);
CheckValue<IkReal> x12091 = IKatan2WithCheck(IkReal(x12088),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12091.valid){
continue;
}
IkReal x12089=((1.0)*(x12091.value));
IkReal x12090=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12089)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12089)));
IkReal gconst10=(x12088*x12090);
IkReal gconst11=((1.0)*r10*x12090);
IkReal x12092=r12*r12;
IkReal x12093=((1.0)*sj0);
IkReal x12094=(cj0*r02);
IkReal x12095=x11831;
j4eval[0]=((IKabs(((((-1.0)*x12094))+(((-1.0)*r12*x12093)))))+(IKabs(((((-1.0)*x12093*x12095))+((sj0*x12092*x12095))+((r12*x12094*x12095))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12096=((-1.0)*r11);
CheckValue<IkReal> x12099 = IKatan2WithCheck(IkReal(x12096),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12099.valid){
continue;
}
IkReal x12097=((1.0)*(x12099.value));
IkReal x12098=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12097)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12097)));
IkReal gconst10=(x12096*x12098);
IkReal gconst11=((1.0)*r10*x12098);
IkReal x12100=r12*r12;
IkReal x12101=((1.0)+(((-1.0)*x12100)));
IkReal x12102=(r22*sj1*sj2);
IkReal x12103=(cj1*cj2*r22);
CheckValue<IkReal> x12110=IKPowWithIntegerCheck(x12101,-1);
if(!x12110.valid){
continue;
}
IkReal x12104=x12110.value;
CheckValue<IkReal> x12111=IKPowWithIntegerCheck(((-1.0)+x12100),-1);
if(!x12111.valid){
continue;
}
IkReal x12105=x12111.value;
IkReal x12106=((1.0)*x12104);
if((x12101) < -0.00001)
continue;
IkReal x12107=IKsqrt(x12101);
IkReal x12108=(r12*x12105*x12107);
IkReal x12109=((((-1.0)*x12106*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x12106*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x12104)));
j4eval[0]=x12109;
j4eval[1]=((IKabs((x12102+(((-1.0)*x12103)))))+(IKabs((((x12103*x12108))+(((-1.0)*x12102*x12108))))));
j4eval[2]=IKsign(x12109);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12112=((-1.0)*r11);
CheckValue<IkReal> x12115 = IKatan2WithCheck(IkReal(x12112),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12115.valid){
continue;
}
IkReal x12113=((1.0)*(x12115.value));
IkReal x12114=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12113)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12113)));
IkReal gconst10=(x12112*x12114);
IkReal gconst11=((1.0)*r10*x12114);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12116=((-1.0)*r11);
CheckValue<IkReal> x12119 = IKatan2WithCheck(IkReal(x12116),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12119.valid){
continue;
}
IkReal x12117=((1.0)*(x12119.value));
IkReal x12118=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12117)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12117)));
IkReal gconst10=(x12116*x12118);
IkReal gconst11=((1.0)*r10*x12118);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12120=((-1.0)*r11);
CheckValue<IkReal> x12123 = IKatan2WithCheck(IkReal(x12120),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12123.valid){
continue;
}
IkReal x12121=((1.0)*(x12123.value));
IkReal x12122=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12121)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12121)));
IkReal gconst10=(x12120*x12122);
IkReal gconst11=((1.0)*r10*x12122);
IkReal x12124=(cj1*r02*sj2);
IkReal x12125=(cj2*r02*sj1);
IkReal x12126=x11831;
IkReal x12127=(r12*x12126);
j4eval[0]=((IKabs((x12125+x12124)))+(IKabs((((x12125*x12127))+((x12124*x12127))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12128=(cj1*sj2);
IkReal x12129=(cj2*sj1);
IkReal x12130=(gconst11*r00);
IkReal x12131=((1.0)*gconst10*r01);
CheckValue<IkReal> x12132=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12132.valid){
continue;
}
CheckValue<IkReal> x12133 = IKatan2WithCheck(IkReal(((((-1.0)*x12129*x12131))+((x12129*x12130))+(((-1.0)*x12128*x12131))+((x12128*x12130)))),IkReal((((r02*x12128))+((r02*x12129)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12132.value)))+(x12133.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12134=IKcos(j4);
IkReal x12135=IKsin(j4);
IkReal x12136=((1.0)*cj2);
IkReal x12137=((1.0)*x12134);
IkReal x12138=(gconst10*x12134);
IkReal x12139=(gconst10*x12135);
IkReal x12140=((1.0)*gconst11*x12135);
evalcond[0]=((((-1.0)*gconst11*r00*x12137))+((r01*x12138))+((r02*x12135)));
evalcond[1]=(((r21*x12139))+(((-1.0)*r22*x12137))+(((-1.0)*r20*x12140)));
evalcond[2]=((((-1.0)*r12*x12137))+((r11*x12139))+(((-1.0)*r10*x12140)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12140))+((r01*x12139))+(((-1.0)*r02*x12137)));
evalcond[4]=((((-1.0)*cj1*x12136))+((sj1*sj2))+((r21*x12138))+((r22*x12135))+(((-1.0)*gconst11*r20*x12137)));
evalcond[5]=(((r12*x12135))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12137))+((r11*x12138))+(((-1.0)*sj1*x12136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12141=(gconst10*r01);
IkReal x12142=(gconst11*r00);
CheckValue<IkReal> x12143=IKPowWithIntegerCheck(IKsign(((x12142*x12142)+(x12141*x12141)+(((-2.0)*x12141*x12142))+(r02*r02))),-1);
if(!x12143.valid){
continue;
}
CheckValue<IkReal> x12144 = IKatan2WithCheck(IkReal(((((-1.0)*x12142))+x12141)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12143.value)))+(x12144.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12145=IKcos(j4);
IkReal x12146=IKsin(j4);
IkReal x12147=((1.0)*cj2);
IkReal x12148=((1.0)*x12145);
IkReal x12149=(gconst10*x12145);
IkReal x12150=(gconst10*x12146);
IkReal x12151=((1.0)*gconst11*x12146);
evalcond[0]=(((r02*x12146))+((r01*x12149))+(((-1.0)*gconst11*r00*x12148)));
evalcond[1]=((((-1.0)*r22*x12148))+((r21*x12150))+(((-1.0)*r20*x12151)));
evalcond[2]=((((-1.0)*r12*x12148))+((r11*x12150))+(((-1.0)*r10*x12151)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12148))+(((-1.0)*r00*x12151))+((r01*x12150)));
evalcond[4]=(((r22*x12146))+(((-1.0)*gconst11*r20*x12148))+((sj1*sj2))+(((-1.0)*cj1*x12147))+((r21*x12149)));
evalcond[5]=((((-1.0)*gconst11*r10*x12148))+(((-1.0)*cj1*sj2))+((r12*x12146))+((r11*x12149))+(((-1.0)*sj1*x12147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12152 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12152.valid){
continue;
}
CheckValue<IkReal> x12153=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12152.value)+(((1.5707963267949)*(x12153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12154=IKcos(j4);
IkReal x12155=IKsin(j4);
IkReal x12156=((1.0)*cj2);
IkReal x12157=((1.0)*x12154);
IkReal x12158=(gconst10*x12154);
IkReal x12159=(gconst10*x12155);
IkReal x12160=((1.0)*gconst11*x12155);
evalcond[0]=(((r02*x12155))+((r01*x12158))+(((-1.0)*gconst11*r00*x12157)));
evalcond[1]=((((-1.0)*r22*x12157))+(((-1.0)*r20*x12160))+((r21*x12159)));
evalcond[2]=((((-1.0)*r10*x12160))+(((-1.0)*r12*x12157))+((r11*x12159)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12157))+(((-1.0)*r00*x12160))+((r01*x12159)));
evalcond[4]=((((-1.0)*gconst11*r20*x12157))+((r22*x12155))+((sj1*sj2))+((r21*x12158))+(((-1.0)*cj1*x12156)));
evalcond[5]=((((-1.0)*gconst11*r10*x12157))+((r12*x12155))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12156))+((r11*x12158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12161=((-1.0)*r11);
CheckValue<IkReal> x12164 = IKatan2WithCheck(IkReal(x12161),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12164.valid){
continue;
}
IkReal x12162=((1.0)*(x12164.value));
IkReal x12163=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12162)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12162)));
IkReal gconst10=(x12161*x12163);
IkReal gconst11=((1.0)*r10*x12163);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12165=((-1.0)*r11);
CheckValue<IkReal> x12168 = IKatan2WithCheck(IkReal(x12165),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12168.valid){
continue;
}
IkReal x12166=((1.0)*(x12168.value));
IkReal x12167=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12166)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12166)));
IkReal gconst10=(x12165*x12167);
IkReal gconst11=((1.0)*r10*x12167);
IkReal x12169=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12173=IKPowWithIntegerCheck(x12169,-1);
if(!x12173.valid){
continue;
}
IkReal x12170=x12173.value;
IkReal x12171=((1.0)*x12170);
IkReal x12172=((((-1.0)*x12171*(r01*r01)*(r11*r11)))+(((-1.0)*x12171*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x12170))+(((-1.0)*(r02*r02))));
j4eval[0]=x12172;
j4eval[1]=r02;
j4eval[2]=x12169;
j4eval[3]=IKsign(x12172);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12174=((-1.0)*r11);
CheckValue<IkReal> x12177 = IKatan2WithCheck(IkReal(x12174),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12177.valid){
continue;
}
IkReal x12175=((1.0)*(x12177.value));
IkReal x12176=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12175)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12175)));
IkReal gconst10=(x12174*x12176);
IkReal gconst11=((1.0)*r10*x12176);
IkReal x12178=r12*r12;
IkReal x12179=((1.0)*r02);
IkReal x12180=(cj1*sj2);
IkReal x12181=(cj2*sj1);
CheckValue<IkReal> x12185=IKPowWithIntegerCheck(((-1.0)+x12178),-1);
if(!x12185.valid){
continue;
}
IkReal x12182=x12185.value;
if((((1.0)+(((-1.0)*x12178)))) < -0.00001)
continue;
IkReal x12183=IKsqrt(((1.0)+(((-1.0)*x12178))));
IkReal x12184=(r12*x12182*x12183);
j4eval[0]=((IKabs(((((-1.0)*x12179*x12180*x12184))+(((-1.0)*x12179*x12181*x12184)))))+(IKabs(((((-1.0)*x12179*x12180))+(((-1.0)*x12179*x12181))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12186=(cj1*sj2);
IkReal x12187=(gconst10*r01);
IkReal x12188=(cj2*sj1);
IkReal x12189=((1.0)*r02);
IkReal x12190=((1.0)*gconst11*r00);
CheckValue<IkReal> x12191=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12191.valid){
continue;
}
CheckValue<IkReal> x12192 = IKatan2WithCheck(IkReal((((x12187*x12188))+((x12186*x12187))+(((-1.0)*x12186*x12190))+(((-1.0)*x12188*x12190)))),IkReal(((((-1.0)*x12186*x12189))+(((-1.0)*x12188*x12189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12191.value)))+(x12192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12193=IKcos(j4);
IkReal x12194=IKsin(j4);
IkReal x12195=((1.0)*x12193);
IkReal x12196=(gconst10*x12193);
IkReal x12197=(gconst10*x12194);
IkReal x12198=((1.0)*gconst11*x12194);
evalcond[0]=((((-1.0)*gconst11*r00*x12195))+((r02*x12194))+((r01*x12196)));
evalcond[1]=((((-1.0)*r20*x12198))+((r21*x12197))+(((-1.0)*r22*x12195)));
evalcond[2]=(((r11*x12197))+(((-1.0)*r10*x12198))+(((-1.0)*r12*x12195)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12195))+((r01*x12197))+(((-1.0)*r00*x12198)));
evalcond[4]=(((cj2*sj1))+((r12*x12194))+((cj1*sj2))+((r11*x12196))+(((-1.0)*gconst11*r10*x12195)));
evalcond[5]=(((r21*x12196))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12194))+(((-1.0)*gconst11*r20*x12195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12199=(gconst10*r01);
IkReal x12200=(gconst11*r00);
CheckValue<IkReal> x12201=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x12199*x12199)))+(((-1.0)*(x12200*x12200)))+(((2.0)*x12199*x12200)))),-1);
if(!x12201.valid){
continue;
}
CheckValue<IkReal> x12202 = IKatan2WithCheck(IkReal(((((-1.0)*x12200))+x12199)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12201.value)))+(x12202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12203=IKcos(j4);
IkReal x12204=IKsin(j4);
IkReal x12205=((1.0)*x12203);
IkReal x12206=(gconst10*x12203);
IkReal x12207=(gconst10*x12204);
IkReal x12208=((1.0)*gconst11*x12204);
evalcond[0]=(((r02*x12204))+(((-1.0)*gconst11*r00*x12205))+((r01*x12206)));
evalcond[1]=((((-1.0)*r22*x12205))+((r21*x12207))+(((-1.0)*r20*x12208)));
evalcond[2]=((((-1.0)*r12*x12205))+(((-1.0)*r10*x12208))+((r11*x12207)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12205))+(((-1.0)*r00*x12208))+((r01*x12207)));
evalcond[4]=(((cj2*sj1))+((r12*x12204))+(((-1.0)*gconst11*r10*x12205))+((cj1*sj2))+((r11*x12206)));
evalcond[5]=(((r22*x12204))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12205))+((r21*x12206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12209=((1.0)*gconst11);
CheckValue<IkReal> x12210=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12209)))),-1);
if(!x12210.valid){
continue;
}
CheckValue<IkReal> x12211 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12210.value)))+(x12211.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12212=IKcos(j4);
IkReal x12213=IKsin(j4);
IkReal x12214=((1.0)*x12212);
IkReal x12215=(gconst10*x12212);
IkReal x12216=(gconst10*x12213);
IkReal x12217=((1.0)*gconst11*x12213);
evalcond[0]=((((-1.0)*gconst11*r00*x12214))+((r02*x12213))+((r01*x12215)));
evalcond[1]=((((-1.0)*r22*x12214))+((r21*x12216))+(((-1.0)*r20*x12217)));
evalcond[2]=((((-1.0)*r12*x12214))+(((-1.0)*r10*x12217))+((r11*x12216)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12214))+(((-1.0)*r00*x12217))+((r01*x12216)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12214))+((r12*x12213))+((cj1*sj2))+((r11*x12215)));
evalcond[5]=(((r22*x12213))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12214))+((r21*x12215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12218=((-1.0)*r11);
IkReal x12219=((-1.0)*r10);
CheckValue<IkReal> x12221 = IKatan2WithCheck(IkReal(x12218),IkReal(x12219),IKFAST_ATAN2_MAGTHRESH);
if(!x12221.valid){
continue;
}
IkReal x12220=((1.0)*(x12221.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12220)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12219);
rxp1_1=(px*r21);
rxp1_2=(px*x12218);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12220)));
IkReal gconst10=x12218;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12222=((-1.0)*r11);
IkReal x12223=((-1.0)*r10);
CheckValue<IkReal> x12225 = IKatan2WithCheck(IkReal(x12222),IkReal(x12223),IKFAST_ATAN2_MAGTHRESH);
if(!x12225.valid){
continue;
}
IkReal x12224=((1.0)*(x12225.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12224)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12223);
rxp1_1=(px*r21);
rxp1_2=(px*x12222);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12224)));
IkReal gconst10=x12222;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12226=((-1.0)*r11);
IkReal x12227=((-1.0)*r10);
CheckValue<IkReal> x12229 = IKatan2WithCheck(IkReal(x12226),IkReal(x12227),IKFAST_ATAN2_MAGTHRESH);
if(!x12229.valid){
continue;
}
IkReal x12228=((1.0)*(x12229.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12228)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12227);
rxp1_1=(px*r21);
rxp1_2=(px*x12226);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12228)));
IkReal gconst10=x12226;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12232=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12232.valid){
continue;
}
IkReal x12230=x12232.value;
IkReal x12231=(sj0*x12230);
cj4array[0]=(((cj2*sj1*x12231))+((cj1*sj2*x12231)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12233=IKsin(j4);
IkReal x12234=IKcos(j4);
IkReal x12235=(gconst10*r21);
IkReal x12236=((1.0)*x12234);
IkReal x12237=((1.0)*gconst11*x12233);
evalcond[0]=(r02*x12233);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12236)));
evalcond[2]=((((-1.0)*r20*x12237))+((x12233*x12235)));
evalcond[3]=(((gconst10*r11*x12233))+(((-1.0)*r10*x12237)));
evalcond[4]=((((-1.0)*gconst11*r20*x12236))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12234*x12235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12239=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12239.valid){
continue;
}
IkReal x12238=x12239.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12238))+((cj1*cj2*x12238)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12240=IKsin(j4);
IkReal x12241=IKcos(j4);
IkReal x12242=((1.0)*sj0);
IkReal x12243=(gconst10*x12240);
IkReal x12244=((1.0)*x12241);
IkReal x12245=((1.0)*gconst11*x12240);
evalcond[0]=(r02*x12240);
evalcond[1]=((((-1.0)*x12242))+(((-1.0)*r02*x12244)));
evalcond[2]=((((-1.0)*r20*x12245))+((r21*x12243)));
evalcond[3]=((((-1.0)*r10*x12245))+((r11*x12243)));
evalcond[4]=(((gconst10*r11*x12241))+(((-1.0)*cj2*sj1*x12242))+(((-1.0)*gconst11*r10*x12244))+(((-1.0)*cj1*sj2*x12242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12246=IKPowWithIntegerCheck(r02,-1);
if(!x12246.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12246.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12247=IKsin(j4);
IkReal x12248=IKcos(j4);
IkReal x12249=(gconst10*r21);
IkReal x12250=((1.0)*cj1);
IkReal x12251=(gconst10*r11);
IkReal x12252=((1.0)*gconst11*x12247);
IkReal x12253=((1.0)*gconst11*x12248);
evalcond[0]=(r02*x12247);
evalcond[1]=(((x12247*x12249))+(((-1.0)*r20*x12252)));
evalcond[2]=(((x12247*x12251))+(((-1.0)*r10*x12252)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x12253))+(((-1.0)*cj2*x12250))+((x12248*x12249)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x12248*x12251))+(((-1.0)*sj0*sj2*x12250))+(((-1.0)*r10*x12253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12254=((1.0)*gconst11);
CheckValue<IkReal> x12255 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12254))+(((-1.0)*cj0*r00*x12254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12255.valid){
continue;
}
CheckValue<IkReal> x12256=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12255.value)+(((1.5707963267949)*(x12256.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12257=IKsin(j4);
IkReal x12258=IKcos(j4);
IkReal x12259=((1.0)*gconst11);
IkReal x12260=((1.0)*cj2);
IkReal x12261=((1.0)*sj0);
IkReal x12262=(cj1*sj2);
IkReal x12263=(gconst10*x12258);
IkReal x12264=(gconst10*x12257);
IkReal x12265=((1.0)*x12258);
evalcond[0]=((((-1.0)*r20*x12257*x12259))+((r21*x12264)));
evalcond[1]=((((-1.0)*r10*x12257*x12259))+(((-1.0)*r12*x12265))+cj0+((r11*x12264)));
evalcond[2]=((((-1.0)*r20*x12258*x12259))+((sj1*sj2))+((r21*x12263))+(((-1.0)*cj1*x12260)));
evalcond[3]=(((r01*x12264))+(((-1.0)*r00*x12257*x12259))+(((-1.0)*r02*x12265))+(((-1.0)*x12261)));
evalcond[4]=((((-1.0)*cj0*sj1*x12260))+((r01*x12263))+(((-1.0)*r00*x12258*x12259))+(((-1.0)*cj0*x12262))+((r02*x12257)));
evalcond[5]=(((r12*x12257))+((r11*x12263))+(((-1.0)*r10*x12258*x12259))+(((-1.0)*x12261*x12262))+(((-1.0)*sj0*sj1*x12260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12266=(gconst10*r21);
IkReal x12267=(gconst11*r20);
IkReal x12268=(sj1*sj2);
IkReal x12269=(cj1*cj2);
CheckValue<IkReal> x12270=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12267*x12267)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12266*x12266)))+(((2.0)*x12266*x12267)))),-1);
if(!x12270.valid){
continue;
}
CheckValue<IkReal> x12271 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12269))+((r22*x12268)))),IkReal(((((-1.0)*x12267*x12268))+(((-1.0)*x12266*x12269))+((x12266*x12268))+((x12267*x12269)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12270.value)))+(x12271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12272=IKsin(j4);
IkReal x12273=IKcos(j4);
IkReal x12274=((1.0)*cj2);
IkReal x12275=((1.0)*sj0);
IkReal x12276=(cj1*sj2);
IkReal x12277=((1.0)*x12273);
IkReal x12278=(gconst10*x12273);
IkReal x12279=(gconst10*x12272);
IkReal x12280=((1.0)*gconst11*x12272);
evalcond[0]=(((r21*x12279))+(((-1.0)*r22*x12277))+(((-1.0)*r20*x12280)));
evalcond[1]=((((-1.0)*r10*x12280))+cj0+(((-1.0)*r12*x12277))+((r11*x12279)));
evalcond[2]=((((-1.0)*r02*x12277))+(((-1.0)*x12275))+(((-1.0)*r00*x12280))+((r01*x12279)));
evalcond[3]=(((r21*x12278))+(((-1.0)*cj1*x12274))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12277))+((r22*x12272)));
evalcond[4]=((((-1.0)*cj0*x12276))+((r02*x12272))+(((-1.0)*gconst11*r00*x12277))+(((-1.0)*cj0*sj1*x12274))+((r01*x12278)));
evalcond[5]=((((-1.0)*sj0*sj1*x12274))+((r12*x12272))+((r11*x12278))+(((-1.0)*x12275*x12276))+(((-1.0)*gconst11*r10*x12277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12281=((1.0)*sj0);
IkReal x12282=((1.0)*gconst10);
CheckValue<IkReal> x12283 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12281))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12282))+(((-1.0)*gconst10*r11*x12281))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12283.valid){
continue;
}
CheckValue<IkReal> x12284=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12282)))),-1);
if(!x12284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12283.value)+(((1.5707963267949)*(x12284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12285=IKsin(j4);
IkReal x12286=IKcos(j4);
IkReal x12287=((1.0)*cj2);
IkReal x12288=((1.0)*sj0);
IkReal x12289=(cj1*sj2);
IkReal x12290=((1.0)*x12286);
IkReal x12291=(gconst10*x12286);
IkReal x12292=(gconst10*x12285);
IkReal x12293=((1.0)*gconst11*x12285);
evalcond[0]=(((r21*x12292))+(((-1.0)*r20*x12293))+(((-1.0)*r22*x12290)));
evalcond[1]=((((-1.0)*r10*x12293))+cj0+((r11*x12292))+(((-1.0)*r12*x12290)));
evalcond[2]=(((r01*x12292))+(((-1.0)*r00*x12293))+(((-1.0)*r02*x12290))+(((-1.0)*x12288)));
evalcond[3]=(((r21*x12291))+((r22*x12285))+(((-1.0)*cj1*x12287))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12290)));
evalcond[4]=(((r01*x12291))+((r02*x12285))+(((-1.0)*cj0*sj1*x12287))+(((-1.0)*gconst11*r00*x12290))+(((-1.0)*cj0*x12289)));
evalcond[5]=((((-1.0)*sj0*sj1*x12287))+((r11*x12291))+(((-1.0)*gconst11*r10*x12290))+((r12*x12285))+(((-1.0)*x12288*x12289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12294=((1.0)*gconst11);
CheckValue<IkReal> x12295 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12294))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12295.valid){
continue;
}
CheckValue<IkReal> x12296=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12294)))),-1);
if(!x12296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12295.value)+(((1.5707963267949)*(x12296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12297=IKsin(j4);
IkReal x12298=IKcos(j4);
IkReal x12299=((1.0)*cj2);
IkReal x12300=((1.0)*sj0);
IkReal x12301=(cj1*sj2);
IkReal x12302=((1.0)*x12298);
IkReal x12303=(gconst10*x12298);
IkReal x12304=(gconst10*x12297);
IkReal x12305=((1.0)*gconst11*x12297);
evalcond[0]=((((-1.0)*r20*x12305))+((r21*x12304))+(((-1.0)*r22*x12302)));
evalcond[1]=(cj0+((r11*x12304))+(((-1.0)*r10*x12305))+(((-1.0)*r12*x12302)));
evalcond[2]=((((-1.0)*r02*x12302))+(((-1.0)*r00*x12305))+(((-1.0)*x12300))+((r01*x12304)));
evalcond[3]=(((r21*x12303))+(((-1.0)*gconst11*r20*x12302))+((sj1*sj2))+((r22*x12297))+(((-1.0)*cj1*x12299)));
evalcond[4]=((((-1.0)*cj0*x12301))+(((-1.0)*gconst11*r00*x12302))+(((-1.0)*cj0*sj1*x12299))+((r02*x12297))+((r01*x12303)));
evalcond[5]=((((-1.0)*gconst11*r10*x12302))+((r11*x12303))+((r12*x12297))+(((-1.0)*sj0*sj1*x12299))+(((-1.0)*x12300*x12301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12306=((-1.0)*r11);
CheckValue<IkReal> x12309 = IKatan2WithCheck(IkReal(x12306),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12309.valid){
continue;
}
IkReal x12307=((1.0)*(x12309.value));
IkReal x12308=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12307)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12307)));
IkReal gconst10=(x12306*x12308);
IkReal gconst11=((1.0)*r10*x12308);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12310=gconst10*gconst10;
IkReal x12311=gconst11*gconst11;
IkReal x12312=(gconst10*r21);
IkReal x12313=(cj3*r00);
IkReal x12314=(r00*sj3);
IkReal x12315=((1.0)*gconst11);
IkReal x12316=(gconst10*r20);
IkReal x12317=(r01*sj3);
IkReal x12318=(cj3*gconst11*r01);
IkReal x12319=(r21*x12310);
IkReal x12320=(r20*x12311);
CheckValue<IkReal> x12321 = IKatan2WithCheck(IkReal((((gconst10*r22*x12313))+((r22*x12318)))),IkReal(((((-1.0)*cj3*r01*x12320))+((x12312*x12318))+((x12313*x12319))+(((-1.0)*x12313*x12315*x12316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12321.valid){
continue;
}
CheckValue<IkReal> x12322=IKPowWithIntegerCheck(IKsign((((x12314*x12320))+(((-1.0)*x12312*x12314*x12315))+((r02*r22*sj3))+(((-1.0)*x12315*x12316*x12317))+((x12317*x12319)))),-1);
if(!x12322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12321.value)+(((1.5707963267949)*(x12322.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12323=IKsin(j4);
IkReal x12324=IKcos(j4);
IkReal x12325=(sj1*sj2);
IkReal x12326=(gconst10*sj3);
IkReal x12327=(cj3*gconst10);
IkReal x12328=(gconst11*r20);
IkReal x12329=(gconst11*r21);
IkReal x12330=(gconst11*r00);
IkReal x12331=(cj3*gconst11);
IkReal x12332=(gconst11*r10);
IkReal x12333=((1.0)*cj1);
IkReal x12334=(cj2*sj1);
IkReal x12335=(gconst11*sj3);
IkReal x12336=(cj2*x12333);
IkReal x12337=((1.0)*x12324);
IkReal x12338=((1.0)*x12323);
IkReal x12339=(gconst10*x12323);
IkReal x12340=(cj3*x12323);
IkReal x12341=(sj3*x12324);
evalcond[0]=((((-1.0)*r22*x12337))+((r21*x12339))+(((-1.0)*x12328*x12338)));
evalcond[1]=((((-1.0)*x12332*x12338))+((r11*x12339))+(((-1.0)*r12*x12337)));
evalcond[2]=((-1.0)+((r01*x12339))+(((-1.0)*x12330*x12338))+(((-1.0)*r02*x12337)));
evalcond[3]=((((-1.0)*cj3*x12330*x12337))+((r00*x12326))+((r01*x12335))+((r02*x12340))+((r01*x12324*x12327)));
evalcond[4]=(((x12330*x12341))+((r00*x12327))+((r01*x12331))+(((-1.0)*r01*x12326*x12337))+(((-1.0)*r02*sj3*x12338)));
evalcond[5]=(((cj1*sj2))+x12334+((r20*x12326))+(((-1.0)*cj3*x12328*x12337))+((r22*x12340))+((sj3*x12329))+((r21*x12324*x12327)));
evalcond[6]=(x12325+(((-1.0)*x12336))+(((-1.0)*r10*x12331*x12337))+((r10*x12326))+((r11*x12335))+((r12*x12340))+((r11*x12324*x12327)));
evalcond[7]=(((x12328*x12341))+x12325+((r20*x12327))+(((-1.0)*x12336))+((cj3*x12329))+(((-1.0)*r22*sj3*x12338))+(((-1.0)*r21*x12326*x12337)));
evalcond[8]=(((x12332*x12341))+(((-1.0)*r12*sj3*x12338))+((r10*x12327))+(((-1.0)*sj2*x12333))+(((-1.0)*r11*x12326*x12337))+((r11*x12331))+(((-1.0)*x12334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12342 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12342.valid){
continue;
}
CheckValue<IkReal> x12343=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12342.value)+(((1.5707963267949)*(x12343.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12344=IKsin(j4);
IkReal x12345=IKcos(j4);
IkReal x12346=(sj1*sj2);
IkReal x12347=(gconst10*sj3);
IkReal x12348=(cj3*gconst10);
IkReal x12349=(gconst11*r20);
IkReal x12350=(gconst11*r21);
IkReal x12351=(gconst11*r00);
IkReal x12352=(cj3*gconst11);
IkReal x12353=(gconst11*r10);
IkReal x12354=((1.0)*cj1);
IkReal x12355=(cj2*sj1);
IkReal x12356=(gconst11*sj3);
IkReal x12357=(cj2*x12354);
IkReal x12358=((1.0)*x12345);
IkReal x12359=((1.0)*x12344);
IkReal x12360=(gconst10*x12344);
IkReal x12361=(cj3*x12344);
IkReal x12362=(sj3*x12345);
evalcond[0]=((((-1.0)*x12349*x12359))+((r21*x12360))+(((-1.0)*r22*x12358)));
evalcond[1]=(((r11*x12360))+(((-1.0)*x12353*x12359))+(((-1.0)*r12*x12358)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12358))+(((-1.0)*x12351*x12359))+((r01*x12360)));
evalcond[3]=(((r00*x12347))+((r01*x12356))+(((-1.0)*cj3*x12351*x12358))+((r01*x12345*x12348))+((r02*x12361)));
evalcond[4]=(((r00*x12348))+((r01*x12352))+(((-1.0)*r01*x12347*x12358))+((x12351*x12362))+(((-1.0)*r02*sj3*x12359)));
evalcond[5]=((((-1.0)*cj3*x12349*x12358))+((r20*x12347))+((cj1*sj2))+x12355+((sj3*x12350))+((r22*x12361))+((r21*x12345*x12348)));
evalcond[6]=((((-1.0)*x12357))+x12346+(((-1.0)*r10*x12352*x12358))+((r11*x12356))+((r11*x12345*x12348))+((r10*x12347))+((r12*x12361)));
evalcond[7]=(((r20*x12348))+(((-1.0)*r21*x12347*x12358))+(((-1.0)*x12357))+x12346+((cj3*x12350))+(((-1.0)*r22*sj3*x12359))+((x12349*x12362)));
evalcond[8]=(((x12353*x12362))+(((-1.0)*x12355))+(((-1.0)*sj2*x12354))+(((-1.0)*r11*x12347*x12358))+((r11*x12352))+((r10*x12348))+(((-1.0)*r12*sj3*x12359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12363=((-1.0)*r11);
CheckValue<IkReal> x12366 = IKatan2WithCheck(IkReal(x12363),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12366.valid){
continue;
}
IkReal x12364=((1.0)*(x12366.value));
IkReal x12365=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12364)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12364)));
IkReal gconst10=(x12363*x12365);
IkReal gconst11=((1.0)*r10*x12365);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12367=gconst10*gconst10;
IkReal x12368=gconst11*gconst11;
IkReal x12369=(gconst10*r21);
IkReal x12370=(cj3*r00);
IkReal x12371=(r00*sj3);
IkReal x12372=((1.0)*gconst11);
IkReal x12373=(gconst10*r20);
IkReal x12374=(r01*sj3);
IkReal x12375=(cj3*gconst11*r01);
IkReal x12376=(r21*x12367);
IkReal x12377=(r20*x12368);
CheckValue<IkReal> x12378 = IKatan2WithCheck(IkReal((((r22*x12375))+((gconst10*r22*x12370)))),IkReal(((((-1.0)*cj3*r01*x12377))+(((-1.0)*x12370*x12372*x12373))+((x12370*x12376))+((x12369*x12375)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12378.valid){
continue;
}
CheckValue<IkReal> x12379=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12372*x12373*x12374))+(((-1.0)*x12369*x12371*x12372))+((x12371*x12377))+((r02*r22*sj3))+((x12374*x12376)))),-1);
if(!x12379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12378.value)+(((1.5707963267949)*(x12379.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12380=IKsin(j4);
IkReal x12381=IKcos(j4);
IkReal x12382=(cj2*sj1);
IkReal x12383=(cj1*sj2);
IkReal x12384=(gconst10*sj3);
IkReal x12385=(cj3*gconst10);
IkReal x12386=(gconst11*r20);
IkReal x12387=(gconst11*r21);
IkReal x12388=(gconst11*r00);
IkReal x12389=(sj1*sj2);
IkReal x12390=(cj3*gconst11);
IkReal x12391=(gconst11*r10);
IkReal x12392=(cj1*cj2);
IkReal x12393=(gconst11*sj3);
IkReal x12394=((1.0)*x12381);
IkReal x12395=((1.0)*x12380);
IkReal x12396=(gconst10*x12380);
IkReal x12397=(cj3*x12380);
IkReal x12398=(sj3*x12381);
IkReal x12399=(x12383+x12382);
evalcond[0]=((((-1.0)*r22*x12394))+((r21*x12396))+(((-1.0)*x12386*x12395)));
evalcond[1]=((((-1.0)*r12*x12394))+((r11*x12396))+(((-1.0)*x12391*x12395)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12394))+((r01*x12396))+(((-1.0)*x12388*x12395)));
evalcond[3]=(((r02*x12397))+(((-1.0)*cj3*x12388*x12394))+((r00*x12384))+((r01*x12393))+((r01*x12381*x12385)));
evalcond[4]=(((r00*x12385))+(((-1.0)*r01*x12384*x12394))+((r01*x12390))+((x12388*x12398))+(((-1.0)*r02*sj3*x12395)));
evalcond[5]=(((r22*x12397))+x12399+((r20*x12384))+((sj3*x12387))+(((-1.0)*cj3*x12386*x12394))+((r21*x12381*x12385)));
evalcond[6]=(((r11*x12393))+((r10*x12384))+((r11*x12381*x12385))+x12392+(((-1.0)*r10*x12390*x12394))+(((-1.0)*x12389))+((r12*x12397)));
evalcond[7]=((((-1.0)*r11*x12384*x12394))+((r11*x12390))+((r10*x12385))+x12399+((x12391*x12398))+(((-1.0)*r12*sj3*x12395)));
evalcond[8]=((((-1.0)*r21*x12384*x12394))+((cj3*x12387))+(((-1.0)*r22*sj3*x12395))+x12389+((r20*x12385))+((x12386*x12398))+(((-1.0)*x12392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12400=((1.0)*gconst11);
CheckValue<IkReal> x12401=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12400)))),-1);
if(!x12401.valid){
continue;
}
CheckValue<IkReal> x12402 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12401.value)))+(x12402.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12403=IKsin(j4);
IkReal x12404=IKcos(j4);
IkReal x12405=(cj2*sj1);
IkReal x12406=(cj1*sj2);
IkReal x12407=(gconst10*sj3);
IkReal x12408=(cj3*gconst10);
IkReal x12409=(gconst11*r20);
IkReal x12410=(gconst11*r21);
IkReal x12411=(gconst11*r00);
IkReal x12412=(sj1*sj2);
IkReal x12413=(cj3*gconst11);
IkReal x12414=(gconst11*r10);
IkReal x12415=(cj1*cj2);
IkReal x12416=(gconst11*sj3);
IkReal x12417=((1.0)*x12404);
IkReal x12418=((1.0)*x12403);
IkReal x12419=(gconst10*x12403);
IkReal x12420=(cj3*x12403);
IkReal x12421=(sj3*x12404);
IkReal x12422=(x12405+x12406);
evalcond[0]=((((-1.0)*r22*x12417))+((r21*x12419))+(((-1.0)*x12409*x12418)));
evalcond[1]=(((r11*x12419))+(((-1.0)*r12*x12417))+(((-1.0)*x12414*x12418)));
evalcond[2]=((1.0)+(((-1.0)*x12411*x12418))+((r01*x12419))+(((-1.0)*r02*x12417)));
evalcond[3]=(((r01*x12404*x12408))+(((-1.0)*cj3*x12411*x12417))+((r01*x12416))+((r02*x12420))+((r00*x12407)));
evalcond[4]=((((-1.0)*r02*sj3*x12418))+((r01*x12413))+((x12411*x12421))+(((-1.0)*r01*x12407*x12417))+((r00*x12408)));
evalcond[5]=(((sj3*x12410))+((r21*x12404*x12408))+((r22*x12420))+(((-1.0)*cj3*x12409*x12417))+((r20*x12407))+x12422);
evalcond[6]=(((r11*x12416))+(((-1.0)*x12412))+(((-1.0)*r10*x12413*x12417))+((r12*x12420))+((r10*x12407))+x12415+((r11*x12404*x12408)));
evalcond[7]=((((-1.0)*r11*x12407*x12417))+((r11*x12413))+((r10*x12408))+(((-1.0)*r12*sj3*x12418))+x12422+((x12414*x12421)));
evalcond[8]=(((cj3*x12410))+(((-1.0)*x12415))+(((-1.0)*r22*sj3*x12418))+((r20*x12408))+x12412+((x12409*x12421))+(((-1.0)*r21*x12407*x12417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12423=((-1.0)*r11);
IkReal x12424=((-1.0)*r10);
CheckValue<IkReal> x12426 = IKatan2WithCheck(IkReal(x12423),IkReal(x12424),IKFAST_ATAN2_MAGTHRESH);
if(!x12426.valid){
continue;
}
IkReal x12425=((1.0)*(x12426.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12425)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12424);
rxp1_1=(px*r21);
rxp1_2=(px*x12423);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12425)));
IkReal gconst10=x12423;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12427=((-1.0)*r11);
IkReal x12428=((-1.0)*r10);
CheckValue<IkReal> x12430 = IKatan2WithCheck(IkReal(x12427),IkReal(x12428),IKFAST_ATAN2_MAGTHRESH);
if(!x12430.valid){
continue;
}
IkReal x12429=((1.0)*(x12430.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12429)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12428);
rxp1_1=(px*r21);
rxp1_2=(px*x12427);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12429)));
IkReal gconst10=x12427;
IkReal gconst11=((1.0)*r10);
IkReal x12431=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x12431))+(((-1.0)*r10*r20*x12431)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12432=((-1.0)*r11);
IkReal x12433=((-1.0)*r10);
CheckValue<IkReal> x12435 = IKatan2WithCheck(IkReal(x12432),IkReal(x12433),IKFAST_ATAN2_MAGTHRESH);
if(!x12435.valid){
continue;
}
IkReal x12434=((1.0)*(x12435.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12434)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12433);
rxp1_1=(px*r21);
rxp1_2=(px*x12432);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12434)));
IkReal gconst10=x12432;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12437=IKPowWithIntegerCheck(r02,-1);
if(!x12437.valid){
continue;
}
IkReal x12436=x12437.value;
CheckValue<IkReal> x12438=IKPowWithIntegerCheck(cj3,-1);
if(!x12438.valid){
continue;
}
if( IKabs((x12436*(x12438.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12436)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12436*(x12438.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12436))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12436*(x12438.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12436));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12439=IKsin(j4);
IkReal x12440=IKcos(j4);
IkReal x12441=(cj3*r10);
IkReal x12442=((1.0)*gconst11);
IkReal x12443=(sj1*sj2);
IkReal x12444=(gconst11*sj3);
IkReal x12445=(cj3*r11);
IkReal x12446=(cj2*sj1);
IkReal x12447=(gconst10*r20);
IkReal x12448=(gconst10*sj3);
IkReal x12449=((1.0)*cj0);
IkReal x12450=((1.0)*sj0);
IkReal x12451=(cj1*sj2);
IkReal x12452=(cj3*r21);
IkReal x12453=((1.0)*cj1*cj2);
IkReal x12454=(r20*x12440);
IkReal x12455=(gconst10*x12439);
IkReal x12456=(gconst10*x12440);
IkReal x12457=(r02*x12439);
IkReal x12458=((1.0)*x12440);
evalcond[0]=((((-1.0)*r02*x12458))+(((-1.0)*x12450)));
evalcond[1]=((((-1.0)*r20*x12439*x12442))+((r21*x12455)));
evalcond[2]=(cj0+((r11*x12455))+(((-1.0)*r10*x12439*x12442)));
evalcond[3]=(((cj0*x12443))+((cj3*x12457))+(((-1.0)*cj1*cj2*x12449)));
evalcond[4]=((((-1.0)*sj3*x12457))+(((-1.0)*x12446*x12449))+(((-1.0)*x12449*x12451)));
evalcond[5]=((((-1.0)*cj3*x12442*x12454))+((r21*x12444))+((sj3*x12447))+x12446+x12451+((x12452*x12456)));
evalcond[6]=(((x12444*x12454))+((cj3*x12447))+(((-1.0)*r21*x12448*x12458))+(((-1.0)*x12453))+x12443+((gconst11*x12452)));
evalcond[7]=((((-1.0)*x12440*x12441*x12442))+((sj0*x12443))+((r11*x12444))+(((-1.0)*cj1*cj2*x12450))+((r10*x12448))+((x12445*x12456)));
evalcond[8]=(((gconst10*x12441))+(((-1.0)*r11*x12448*x12458))+(((-1.0)*x12446*x12450))+((r10*x12440*x12444))+(((-1.0)*x12450*x12451))+((gconst11*x12445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12459=((1.0)*r20);
IkReal x12460=((1.0)*gconst11);
CheckValue<IkReal> x12461=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12460))),-1);
if(!x12461.valid){
continue;
}
CheckValue<IkReal> x12462=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12459))+((cj3*gconst10*r21))),-1);
if(!x12462.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12461.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12462.value)*(((((-1.0)*gconst10*sj3*x12459))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12460)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12461.value)))+IKsqr(((x12462.value)*(((((-1.0)*gconst10*sj3*x12459))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12460))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12461.value)), ((x12462.value)*(((((-1.0)*gconst10*sj3*x12459))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12460))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12463=IKsin(j4);
IkReal x12464=IKcos(j4);
IkReal x12465=(cj3*r10);
IkReal x12466=((1.0)*gconst11);
IkReal x12467=(sj1*sj2);
IkReal x12468=(gconst11*sj3);
IkReal x12469=(cj3*r11);
IkReal x12470=(cj2*sj1);
IkReal x12471=(gconst10*r20);
IkReal x12472=(gconst10*sj3);
IkReal x12473=((1.0)*cj0);
IkReal x12474=((1.0)*sj0);
IkReal x12475=(cj1*sj2);
IkReal x12476=(cj3*r21);
IkReal x12477=((1.0)*cj1*cj2);
IkReal x12478=(r20*x12464);
IkReal x12479=(gconst10*x12463);
IkReal x12480=(gconst10*x12464);
IkReal x12481=(r02*x12463);
IkReal x12482=((1.0)*x12464);
evalcond[0]=((((-1.0)*r02*x12482))+(((-1.0)*x12474)));
evalcond[1]=((((-1.0)*r20*x12463*x12466))+((r21*x12479)));
evalcond[2]=((((-1.0)*r10*x12463*x12466))+cj0+((r11*x12479)));
evalcond[3]=(((cj0*x12467))+((cj3*x12481))+(((-1.0)*cj1*cj2*x12473)));
evalcond[4]=((((-1.0)*sj3*x12481))+(((-1.0)*x12470*x12473))+(((-1.0)*x12473*x12475)));
evalcond[5]=(((sj3*x12471))+((x12476*x12480))+(((-1.0)*cj3*x12466*x12478))+x12470+x12475+((r21*x12468)));
evalcond[6]=(((cj3*x12471))+(((-1.0)*x12477))+(((-1.0)*r21*x12472*x12482))+((x12468*x12478))+x12467+((gconst11*x12476)));
evalcond[7]=(((r11*x12468))+((sj0*x12467))+((x12469*x12480))+((r10*x12472))+(((-1.0)*x12464*x12465*x12466))+(((-1.0)*cj1*cj2*x12474)));
evalcond[8]=(((gconst11*x12469))+(((-1.0)*r11*x12472*x12482))+(((-1.0)*x12470*x12474))+((r10*x12464*x12468))+((gconst10*x12465))+(((-1.0)*x12474*x12475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12483=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12483.valid){
continue;
}
CheckValue<IkReal> x12484=IKPowWithIntegerCheck(r02,-1);
if(!x12484.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12483.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12484.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12483.value)))+IKsqr(((-1.0)*sj0*(x12484.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12483.value)), ((-1.0)*sj0*(x12484.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12485=IKsin(j4);
IkReal x12486=IKcos(j4);
IkReal x12487=(cj3*r10);
IkReal x12488=((1.0)*gconst11);
IkReal x12489=(sj1*sj2);
IkReal x12490=(gconst11*sj3);
IkReal x12491=(cj3*r11);
IkReal x12492=(cj2*sj1);
IkReal x12493=(gconst10*r20);
IkReal x12494=(gconst10*sj3);
IkReal x12495=((1.0)*cj0);
IkReal x12496=((1.0)*sj0);
IkReal x12497=(cj1*sj2);
IkReal x12498=(cj3*r21);
IkReal x12499=((1.0)*cj1*cj2);
IkReal x12500=(r20*x12486);
IkReal x12501=(gconst10*x12485);
IkReal x12502=(gconst10*x12486);
IkReal x12503=(r02*x12485);
IkReal x12504=((1.0)*x12486);
evalcond[0]=((((-1.0)*r02*x12504))+(((-1.0)*x12496)));
evalcond[1]=((((-1.0)*r20*x12485*x12488))+((r21*x12501)));
evalcond[2]=(((r11*x12501))+cj0+(((-1.0)*r10*x12485*x12488)));
evalcond[3]=(((cj3*x12503))+((cj0*x12489))+(((-1.0)*cj1*cj2*x12495)));
evalcond[4]=((((-1.0)*sj3*x12503))+(((-1.0)*x12495*x12497))+(((-1.0)*x12492*x12495)));
evalcond[5]=(((r21*x12490))+((x12498*x12502))+(((-1.0)*cj3*x12488*x12500))+x12492+x12497+((sj3*x12493)));
evalcond[6]=(((cj3*x12493))+(((-1.0)*r21*x12494*x12504))+((gconst11*x12498))+(((-1.0)*x12499))+((x12490*x12500))+x12489);
evalcond[7]=(((r10*x12494))+(((-1.0)*x12486*x12487*x12488))+((sj0*x12489))+((x12491*x12502))+(((-1.0)*cj1*cj2*x12496))+((r11*x12490)));
evalcond[8]=((((-1.0)*r11*x12494*x12504))+((gconst10*x12487))+((gconst11*x12491))+((r10*x12486*x12490))+(((-1.0)*x12496*x12497))+(((-1.0)*x12492*x12496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12505=((-1.0)*r11);
CheckValue<IkReal> x12508 = IKatan2WithCheck(IkReal(x12505),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12508.valid){
continue;
}
IkReal x12506=((1.0)*(x12508.value));
IkReal x12507=x11831;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12506)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12506)));
IkReal gconst10=(x12505*x12507);
IkReal gconst11=((1.0)*r10*x12507);
IkReal x12509=r12*r12;
IkReal x12510=((1.0)*sj0);
IkReal x12511=(cj0*r02);
IkReal x12512=x11831;
j4eval[0]=((IKabs((((sj0*x12509*x12512))+((r12*x12511*x12512))+(((-1.0)*x12510*x12512)))))+(IKabs(((((-1.0)*r12*x12510))+(((-1.0)*x12511))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12513=((1.0)*r12);
IkReal x12514=(sj1*sj2);
IkReal x12515=((1.0)*r21);
IkReal x12516=(cj3*gconst11);
IkReal x12517=(r11*sj3);
IkReal x12518=(gconst11*r20);
IkReal x12519=((1.0)*sj3);
IkReal x12520=(cj1*cj2);
IkReal x12521=(gconst10*r21*sj3);
IkReal x12522=(cj3*gconst10*r20);
CheckValue<IkReal> x12523=IKPowWithIntegerCheck(((((-1.0)*x12515*x12517*(gconst10*gconst10)))+((gconst11*r10*x12521))+(((-1.0)*gconst11*r10*x12518*x12519))+((gconst10*x12517*x12518))),-1);
if(!x12523.valid){
continue;
}
CheckValue<IkReal> x12524=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12515))+((sj3*x12518))),-1);
if(!x12524.valid){
continue;
}
if( IKabs(((x12523.value)*(((((-1.0)*r21*x12513*x12516))+((cj0*x12521))+(((-1.0)*x12513*x12514))+(((-1.0)*cj0*x12518*x12519))+(((-1.0)*x12513*x12522))+((r12*x12520)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12524.value)*(((((-1.0)*x12514))+x12520+(((-1.0)*x12522))+(((-1.0)*x12515*x12516)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12523.value)*(((((-1.0)*r21*x12513*x12516))+((cj0*x12521))+(((-1.0)*x12513*x12514))+(((-1.0)*cj0*x12518*x12519))+(((-1.0)*x12513*x12522))+((r12*x12520))))))+IKsqr(((x12524.value)*(((((-1.0)*x12514))+x12520+(((-1.0)*x12522))+(((-1.0)*x12515*x12516))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12523.value)*(((((-1.0)*r21*x12513*x12516))+((cj0*x12521))+(((-1.0)*x12513*x12514))+(((-1.0)*cj0*x12518*x12519))+(((-1.0)*x12513*x12522))+((r12*x12520))))), ((x12524.value)*(((((-1.0)*x12514))+x12520+(((-1.0)*x12522))+(((-1.0)*x12515*x12516))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12525=IKsin(j4);
IkReal x12526=IKcos(j4);
IkReal x12527=(cj3*r10);
IkReal x12528=(gconst11*r20);
IkReal x12529=(gconst11*sj3);
IkReal x12530=(sj1*sj2);
IkReal x12531=(cj3*r11);
IkReal x12532=(r10*sj3);
IkReal x12533=(gconst10*r01);
IkReal x12534=(gconst10*sj3);
IkReal x12535=(cj2*sj1);
IkReal x12536=((1.0)*sj0);
IkReal x12537=(cj1*sj2);
IkReal x12538=(gconst10*r21);
IkReal x12539=(cj3*gconst10);
IkReal x12540=(cj3*gconst11);
IkReal x12541=((1.0)*cj0);
IkReal x12542=((1.0)*x12525);
IkReal x12543=((1.0)*cj1*cj2);
IkReal x12544=(gconst11*x12526);
IkReal x12545=(sj3*x12526);
IkReal x12546=(gconst10*x12525);
IkReal x12547=((1.0)*x12526);
IkReal x12548=(cj3*x12526);
IkReal x12549=(cj3*x12525);
evalcond[0]=(((x12525*x12538))+(((-1.0)*x12528*x12542)));
evalcond[1]=(cj0+((r11*x12546))+(((-1.0)*gconst11*r10*x12542))+(((-1.0)*r12*x12547)));
evalcond[2]=(((x12525*x12533))+(((-1.0)*x12536))+(((-1.0)*gconst11*r00*x12542))+(((-1.0)*r02*x12547)));
evalcond[3]=(((r20*x12534))+(((-1.0)*cj3*x12528*x12547))+((r21*x12529))+((x12538*x12548))+x12535+x12537);
evalcond[4]=((((-1.0)*r21*x12534*x12547))+((r20*x12539))+x12530+((r21*x12540))+((x12528*x12545))+(((-1.0)*x12543)));
evalcond[5]=(((r00*x12534))+((x12533*x12548))+(((-1.0)*cj1*cj2*x12541))+((r02*x12549))+((r01*x12529))+(((-1.0)*r00*x12540*x12547))+((cj0*x12530)));
evalcond[6]=(((r12*x12549))+((gconst10*x12526*x12531))+(((-1.0)*cj1*cj2*x12536))+(((-1.0)*x12527*x12544))+((r11*x12529))+((gconst10*x12532))+((sj0*x12530)));
evalcond[7]=(((r00*x12539))+((r01*x12540))+(((-1.0)*x12535*x12541))+(((-1.0)*x12537*x12541))+(((-1.0)*r02*sj3*x12542))+(((-1.0)*x12533*x12545))+((r00*x12526*x12529)));
evalcond[8]=((((-1.0)*x12535*x12536))+((r10*x12526*x12529))+(((-1.0)*r11*x12534*x12547))+(((-1.0)*r12*sj3*x12542))+((gconst10*x12527))+(((-1.0)*x12536*x12537))+((gconst11*x12531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12550=((1.0)*sj0);
IkReal x12551=((1.0)*gconst10);
CheckValue<IkReal> x12552 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12550))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12550))+(((-1.0)*cj0*r01*x12551))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12552.valid){
continue;
}
CheckValue<IkReal> x12553=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12551))+(((-1.0)*gconst11*r21)))),-1);
if(!x12553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12552.value)+(((1.5707963267949)*(x12553.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12554=IKsin(j4);
IkReal x12555=IKcos(j4);
IkReal x12556=(cj3*r10);
IkReal x12557=(gconst11*r20);
IkReal x12558=(gconst11*sj3);
IkReal x12559=(sj1*sj2);
IkReal x12560=(cj3*r11);
IkReal x12561=(r10*sj3);
IkReal x12562=(gconst10*r01);
IkReal x12563=(gconst10*sj3);
IkReal x12564=(cj2*sj1);
IkReal x12565=((1.0)*sj0);
IkReal x12566=(cj1*sj2);
IkReal x12567=(gconst10*r21);
IkReal x12568=(cj3*gconst10);
IkReal x12569=(cj3*gconst11);
IkReal x12570=((1.0)*cj0);
IkReal x12571=((1.0)*x12554);
IkReal x12572=((1.0)*cj1*cj2);
IkReal x12573=(gconst11*x12555);
IkReal x12574=(sj3*x12555);
IkReal x12575=(gconst10*x12554);
IkReal x12576=((1.0)*x12555);
IkReal x12577=(cj3*x12555);
IkReal x12578=(cj3*x12554);
evalcond[0]=((((-1.0)*x12557*x12571))+((x12554*x12567)));
evalcond[1]=((((-1.0)*gconst11*r10*x12571))+cj0+(((-1.0)*r12*x12576))+((r11*x12575)));
evalcond[2]=((((-1.0)*r02*x12576))+((x12554*x12562))+(((-1.0)*gconst11*r00*x12571))+(((-1.0)*x12565)));
evalcond[3]=(((r20*x12563))+((x12567*x12577))+((r21*x12558))+x12566+x12564+(((-1.0)*cj3*x12557*x12576)));
evalcond[4]=((((-1.0)*r21*x12563*x12576))+((r20*x12568))+(((-1.0)*x12572))+((r21*x12569))+x12559+((x12557*x12574)));
evalcond[5]=(((r01*x12558))+((r02*x12578))+(((-1.0)*r00*x12569*x12576))+((r00*x12563))+((cj0*x12559))+((x12562*x12577))+(((-1.0)*cj1*cj2*x12570)));
evalcond[6]=((((-1.0)*x12556*x12573))+((sj0*x12559))+((r11*x12558))+((gconst10*x12555*x12560))+((r12*x12578))+(((-1.0)*cj1*cj2*x12565))+((gconst10*x12561)));
evalcond[7]=((((-1.0)*x12564*x12570))+((r00*x12555*x12558))+((r01*x12569))+((r00*x12568))+(((-1.0)*x12562*x12574))+(((-1.0)*x12566*x12570))+(((-1.0)*r02*sj3*x12571)));
evalcond[8]=((((-1.0)*x12564*x12565))+(((-1.0)*x12565*x12566))+((gconst11*x12560))+((gconst10*x12556))+(((-1.0)*r11*x12563*x12576))+(((-1.0)*r12*sj3*x12571))+((r10*x12555*x12558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12579=gconst10*gconst10;
IkReal x12580=r21*r21;
IkReal x12581=gconst11*gconst11;
IkReal x12582=r20*r20;
IkReal x12583=((1.0)*cj3);
IkReal x12584=(r20*sj3);
IkReal x12585=(gconst10*gconst11);
IkReal x12586=(cj2*sj1);
IkReal x12587=(gconst10*r21);
IkReal x12588=(cj1*sj2);
IkReal x12589=((1.0)*gconst11*r20);
CheckValue<IkReal> x12590=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12581*x12582*x12583))+(((-1.0)*x12579*x12580*x12583))+(((-1.0)*x12583*(r22*r22)))+(((2.0)*cj3*r20*r21*x12585)))),-1);
if(!x12590.valid){
continue;
}
CheckValue<IkReal> x12591 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((r22*x12588))+((r22*x12586))+((gconst10*r22*x12584)))),IkReal(((((-1.0)*x12588*x12589))+((sj3*x12580*x12585))+((x12587*x12588))+((r21*x12579*x12584))+(((-1.0)*x12586*x12589))+(((-1.0)*sj3*x12582*x12585))+(((-1.0)*r21*x12581*x12584))+((x12586*x12587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12590.value)))+(x12591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12592=IKsin(j4);
IkReal x12593=IKcos(j4);
IkReal x12594=(cj3*r10);
IkReal x12595=(gconst11*r20);
IkReal x12596=(gconst11*sj3);
IkReal x12597=(sj1*sj2);
IkReal x12598=(gconst11*r00);
IkReal x12599=(cj3*r11);
IkReal x12600=(gconst10*sj3);
IkReal x12601=(cj2*sj1);
IkReal x12602=(cj3*r01);
IkReal x12603=((1.0)*sj0);
IkReal x12604=(cj1*sj2);
IkReal x12605=(cj3*r21);
IkReal x12606=(cj3*gconst10);
IkReal x12607=((1.0)*cj0);
IkReal x12608=((1.0)*x12593);
IkReal x12609=((1.0)*x12592);
IkReal x12610=((1.0)*cj1*cj2);
IkReal x12611=(cj3*x12592);
IkReal x12612=(gconst10*x12592);
IkReal x12613=(gconst10*x12593);
evalcond[0]=((((-1.0)*x12595*x12609))+(((-1.0)*r22*x12608))+((r21*x12612)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x12609))+(((-1.0)*r12*x12608))+((r11*x12612)));
evalcond[2]=((((-1.0)*x12603))+(((-1.0)*x12598*x12609))+(((-1.0)*r02*x12608))+((r01*x12612)));
evalcond[3]=(((r20*x12600))+((r21*x12596))+(((-1.0)*cj3*x12595*x12608))+x12601+x12604+((x12605*x12613))+((r22*x12611)));
evalcond[4]=(((r20*x12606))+((sj3*x12593*x12595))+(((-1.0)*r22*sj3*x12609))+(((-1.0)*r21*x12600*x12608))+((gconst11*x12605))+x12597+(((-1.0)*x12610)));
evalcond[5]=(((r02*x12611))+((r01*x12596))+((r00*x12600))+((cj0*x12597))+(((-1.0)*cj3*x12598*x12608))+((x12602*x12613))+(((-1.0)*cj1*cj2*x12607)));
evalcond[6]=(((r10*x12600))+((x12599*x12613))+((r12*x12611))+(((-1.0)*gconst11*x12594*x12608))+(((-1.0)*cj1*cj2*x12603))+((sj0*x12597))+((r11*x12596)));
evalcond[7]=(((r00*x12606))+((r00*x12593*x12596))+(((-1.0)*r01*x12600*x12608))+(((-1.0)*r02*sj3*x12609))+(((-1.0)*x12601*x12607))+((gconst11*x12602))+(((-1.0)*x12604*x12607)));
evalcond[8]=(((gconst11*x12599))+((r10*x12593*x12596))+(((-1.0)*r11*x12600*x12608))+(((-1.0)*x12601*x12603))+((gconst10*x12594))+(((-1.0)*x12603*x12604))+(((-1.0)*r12*sj3*x12609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12614=((1.0)*sj0);
IkReal x12615=((1.0)*gconst10);
CheckValue<IkReal> x12616 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12614))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12615))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x12614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12616.valid){
continue;
}
CheckValue<IkReal> x12617=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12615))+(((-1.0)*gconst11*r21)))),-1);
if(!x12617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12616.value)+(((1.5707963267949)*(x12617.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12618=IKsin(j4);
IkReal x12619=IKcos(j4);
IkReal x12620=(cj3*r10);
IkReal x12621=(gconst11*r20);
IkReal x12622=(gconst11*sj3);
IkReal x12623=(sj1*sj2);
IkReal x12624=(gconst11*r00);
IkReal x12625=(cj3*r11);
IkReal x12626=(gconst10*sj3);
IkReal x12627=(cj2*sj1);
IkReal x12628=(cj3*r01);
IkReal x12629=((1.0)*sj0);
IkReal x12630=(cj1*sj2);
IkReal x12631=(cj3*r21);
IkReal x12632=(cj3*gconst10);
IkReal x12633=((1.0)*cj0);
IkReal x12634=((1.0)*x12619);
IkReal x12635=((1.0)*x12618);
IkReal x12636=((1.0)*cj1*cj2);
IkReal x12637=(cj3*x12618);
IkReal x12638=(gconst10*x12618);
IkReal x12639=(gconst10*x12619);
evalcond[0]=((((-1.0)*r22*x12634))+((r21*x12638))+(((-1.0)*x12621*x12635)));
evalcond[1]=(((r11*x12638))+cj0+(((-1.0)*gconst11*r10*x12635))+(((-1.0)*r12*x12634)));
evalcond[2]=((((-1.0)*x12629))+((r01*x12638))+(((-1.0)*x12624*x12635))+(((-1.0)*r02*x12634)));
evalcond[3]=((((-1.0)*cj3*x12621*x12634))+((r21*x12622))+x12630+x12627+((r22*x12637))+((r20*x12626))+((x12631*x12639)));
evalcond[4]=(((sj3*x12619*x12621))+((r20*x12632))+(((-1.0)*r21*x12626*x12634))+(((-1.0)*x12636))+x12623+(((-1.0)*r22*sj3*x12635))+((gconst11*x12631)));
evalcond[5]=(((x12628*x12639))+(((-1.0)*cj3*x12624*x12634))+(((-1.0)*cj1*cj2*x12633))+((r01*x12622))+((r02*x12637))+((r00*x12626))+((cj0*x12623)));
evalcond[6]=(((r12*x12637))+(((-1.0)*gconst11*x12620*x12634))+((sj0*x12623))+((x12625*x12639))+(((-1.0)*cj1*cj2*x12629))+((r10*x12626))+((r11*x12622)));
evalcond[7]=((((-1.0)*r02*sj3*x12635))+((gconst11*x12628))+(((-1.0)*x12627*x12633))+((r00*x12632))+(((-1.0)*r01*x12626*x12634))+(((-1.0)*x12630*x12633))+((r00*x12619*x12622)));
evalcond[8]=(((gconst11*x12625))+((r10*x12619*x12622))+((gconst10*x12620))+(((-1.0)*r12*sj3*x12635))+(((-1.0)*x12627*x12629))+(((-1.0)*r11*x12626*x12634))+(((-1.0)*x12629*x12630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12640=((1.0)*gconst11);
CheckValue<IkReal> x12641=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12640)))),-1);
if(!x12641.valid){
continue;
}
CheckValue<IkReal> x12642 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12640))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12641.value)))+(x12642.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12643=IKsin(j4);
IkReal x12644=IKcos(j4);
IkReal x12645=(cj3*r10);
IkReal x12646=(gconst11*r20);
IkReal x12647=(gconst11*sj3);
IkReal x12648=(sj1*sj2);
IkReal x12649=(gconst11*r00);
IkReal x12650=(cj3*r11);
IkReal x12651=(gconst10*sj3);
IkReal x12652=(cj2*sj1);
IkReal x12653=(cj3*r01);
IkReal x12654=((1.0)*sj0);
IkReal x12655=(cj1*sj2);
IkReal x12656=(cj3*r21);
IkReal x12657=(cj3*gconst10);
IkReal x12658=((1.0)*cj0);
IkReal x12659=((1.0)*x12644);
IkReal x12660=((1.0)*x12643);
IkReal x12661=((1.0)*cj1*cj2);
IkReal x12662=(cj3*x12643);
IkReal x12663=(gconst10*x12643);
IkReal x12664=(gconst10*x12644);
evalcond[0]=(((r21*x12663))+(((-1.0)*x12646*x12660))+(((-1.0)*r22*x12659)));
evalcond[1]=(cj0+(((-1.0)*r12*x12659))+((r11*x12663))+(((-1.0)*gconst11*r10*x12660)));
evalcond[2]=((((-1.0)*x12654))+(((-1.0)*x12649*x12660))+(((-1.0)*r02*x12659))+((r01*x12663)));
evalcond[3]=((((-1.0)*cj3*x12646*x12659))+((r22*x12662))+((x12656*x12664))+x12652+x12655+((r21*x12647))+((r20*x12651)));
evalcond[4]=((((-1.0)*r21*x12651*x12659))+(((-1.0)*x12661))+(((-1.0)*r22*sj3*x12660))+((sj3*x12644*x12646))+((gconst11*x12656))+x12648+((r20*x12657)));
evalcond[5]=(((r02*x12662))+(((-1.0)*cj3*x12649*x12659))+((r01*x12647))+((cj0*x12648))+((x12653*x12664))+(((-1.0)*cj1*cj2*x12658))+((r00*x12651)));
evalcond[6]=(((r10*x12651))+((r12*x12662))+(((-1.0)*gconst11*x12645*x12659))+((sj0*x12648))+((x12650*x12664))+(((-1.0)*cj1*cj2*x12654))+((r11*x12647)));
evalcond[7]=((((-1.0)*x12652*x12658))+(((-1.0)*r01*x12651*x12659))+(((-1.0)*r02*sj3*x12660))+((gconst11*x12653))+((r00*x12644*x12647))+(((-1.0)*x12655*x12658))+((r00*x12657)));
evalcond[8]=((((-1.0)*x12652*x12654))+((r10*x12644*x12647))+((gconst11*x12650))+(((-1.0)*r11*x12651*x12659))+(((-1.0)*r12*sj3*x12660))+((gconst10*x12645))+(((-1.0)*x12654*x12655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12665=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12665;
j4eval[1]=IKsign(x12665);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12666=((1.0)*cj5);
IkReal x12667=((((-1.0)*r01*x12666))+(((-1.0)*r00*sj5)));
j4eval[0]=x12667;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12666)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12667);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12668=cj5*cj5;
IkReal x12669=(cj3*r21);
IkReal x12670=(cj5*sj5);
IkReal x12671=((1.0)*cj3);
IkReal x12672=(((cj3*r11*r20*x12670))+(((-1.0)*r12*r22*x12671))+(((-1.0)*r10*r20*x12668*x12671))+((r11*x12668*x12669))+(((-1.0)*r11*x12669))+((r10*x12669*x12670)));
j4eval[0]=x12672;
j4eval[1]=IKsign(x12672);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12673=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12673;
j4eval[1]=IKsign(x12673);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12674=((1.0)*cj5);
IkReal x12675=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12674)));
j4eval[0]=x12675;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12674)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12675);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12676=cj5*cj5;
IkReal x12677=r11*r11;
IkReal x12678=(r11*sj5);
IkReal x12679=(cj5*r10);
IkReal x12680=((r12*r12)+((x12676*(r10*r10)))+(((-2.0)*x12678*x12679))+(((-1.0)*x12676*x12677))+x12677);
j4eval[0]=x12680;
j4eval[1]=IKsign(x12680);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12678))+x12679))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12681=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12681);
rxp1_1=(px*r21);
rxp1_2=(r11*x12681);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12682=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12682);
rxp1_1=(px*r21);
rxp1_2=(r11*x12682);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12683=((1.0)*sj1);
CheckValue<IkReal> x12684=IKPowWithIntegerCheck(r02,-1);
if(!x12684.valid){
continue;
}
CheckValue<IkReal> x12685=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12685.valid){
continue;
}
if( IKabs(((x12684.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12683)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12685.value)*((((cj1*cj2))+(((-1.0)*sj2*x12683)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12684.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12683))))))+IKsqr(((x12685.value)*((((cj1*cj2))+(((-1.0)*sj2*x12683))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12684.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12683))))), ((x12685.value)*((((cj1*cj2))+(((-1.0)*sj2*x12683))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12686=IKsin(j4);
IkReal x12687=IKcos(j4);
IkReal x12688=(cj5*r20);
IkReal x12689=((1.0)*cj2);
IkReal x12690=(cj5*r10);
IkReal x12691=((1.0)*x12686);
IkReal x12692=(sj5*x12686);
IkReal x12693=((1.0)*sj5*x12687);
evalcond[0]=((-1.0)*r02*x12687);
evalcond[1]=(((r21*x12692))+(((-1.0)*x12688*x12691)));
evalcond[2]=((((-1.0)*r11*x12693))+((x12687*x12690)));
evalcond[3]=((1.0)+((r11*x12692))+(((-1.0)*x12690*x12691)));
evalcond[4]=((((-1.0)*sj1*x12689))+(((-1.0)*r02*x12691))+(((-1.0)*cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*x12689))+((x12687*x12688))+((sj1*sj2))+(((-1.0)*r21*x12693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12694=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12694.valid){
continue;
}
CheckValue<IkReal> x12695=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12695.valid){
continue;
}
if( IKabs(((-1.0)*(x12694.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12695.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12694.value)))+IKsqr(((x12695.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12694.value)), ((x12695.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12696=IKsin(j4);
IkReal x12697=IKcos(j4);
IkReal x12698=(cj5*r20);
IkReal x12699=((1.0)*cj2);
IkReal x12700=(cj5*r10);
IkReal x12701=((1.0)*x12696);
IkReal x12702=(sj5*x12696);
IkReal x12703=((1.0)*sj5*x12697);
evalcond[0]=((-1.0)*r02*x12697);
evalcond[1]=(((r21*x12702))+(((-1.0)*x12698*x12701)));
evalcond[2]=((((-1.0)*r11*x12703))+((x12697*x12700)));
evalcond[3]=((1.0)+((r11*x12702))+(((-1.0)*x12700*x12701)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12699))+(((-1.0)*r02*x12701)));
evalcond[5]=((((-1.0)*cj1*x12699))+((x12697*x12698))+((sj1*sj2))+(((-1.0)*r21*x12703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12704=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12704);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12704);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12705=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12705);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12705);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12706=IKPowWithIntegerCheck(r22,-1);
if(!x12706.valid){
continue;
}
CheckValue<IkReal> x12707=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12707.valid){
continue;
}
if( IKabs(((x12706.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12707.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12706.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12707.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12706.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12707.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12708=IKsin(j4);
IkReal x12709=IKcos(j4);
IkReal x12710=((1.0)*cj2);
IkReal x12711=(cj5*x12709);
IkReal x12712=(sj5*x12708);
IkReal x12713=((1.0)*sj5*x12709);
IkReal x12714=((1.0)*cj5*x12708);
evalcond[0]=((-1.0)*r22*x12709);
evalcond[1]=((((-1.0)*r00*x12714))+((r01*x12712)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12710))+(((-1.0)*r22*x12708)));
evalcond[3]=(((r10*x12711))+(((-1.0)*r11*x12713)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12714))+((r11*x12712)));
evalcond[5]=((((-1.0)*sj1*x12710))+(((-1.0)*cj1*sj2))+((r00*x12711))+(((-1.0)*r01*x12713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12715=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12715.valid){
continue;
}
CheckValue<IkReal> x12716=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12716.valid){
continue;
}
if( IKabs(((-1.0)*(x12715.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12716.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12715.value)))+IKsqr(((x12716.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12715.value)), ((x12716.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12717=IKsin(j4);
IkReal x12718=IKcos(j4);
IkReal x12719=((1.0)*cj2);
IkReal x12720=(cj5*x12718);
IkReal x12721=(sj5*x12717);
IkReal x12722=((1.0)*sj5*x12718);
IkReal x12723=((1.0)*cj5*x12717);
evalcond[0]=((-1.0)*r22*x12718);
evalcond[1]=((((-1.0)*r00*x12723))+((r01*x12721)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12717))+(((-1.0)*cj1*x12719)));
evalcond[3]=(((r10*x12720))+(((-1.0)*r11*x12722)));
evalcond[4]=((1.0)+((r11*x12721))+(((-1.0)*r10*x12723)));
evalcond[5]=((((-1.0)*r01*x12722))+(((-1.0)*sj1*x12719))+(((-1.0)*cj1*sj2))+((r00*x12720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12724=cj5*cj5;
IkReal x12725=r11*r11;
IkReal x12726=(cj5*r10);
IkReal x12727=(r11*sj5);
CheckValue<IkReal> x12728 = IKatan2WithCheck(IkReal(((((-1.0)*x12727))+x12726)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12728.valid){
continue;
}
CheckValue<IkReal> x12729=IKPowWithIntegerCheck(IKsign((((x12724*(r10*r10)))+(r12*r12)+x12725+(((-1.0)*x12724*x12725))+(((-2.0)*x12726*x12727)))),-1);
if(!x12729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12728.value)+(((1.5707963267949)*(x12729.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12730=IKsin(j4);
IkReal x12731=IKcos(j4);
IkReal x12732=(cj5*r10);
IkReal x12733=(r01*sj5);
IkReal x12734=((1.0)*cj2);
IkReal x12735=(cj5*r00);
IkReal x12736=(cj5*r20);
IkReal x12737=((1.0)*x12731);
IkReal x12738=((1.0)*x12730);
IkReal x12739=(sj5*x12730);
evalcond[0]=(((r21*x12739))+(((-1.0)*r22*x12737))+(((-1.0)*x12736*x12738)));
evalcond[1]=((((-1.0)*r02*x12737))+((x12730*x12733))+(((-1.0)*x12735*x12738)));
evalcond[2]=(((x12731*x12732))+(((-1.0)*r11*sj5*x12737))+(((-1.0)*r12*x12738)));
evalcond[3]=((1.0)+((r11*x12739))+(((-1.0)*x12732*x12738))+(((-1.0)*r12*x12737)));
evalcond[4]=((((-1.0)*r22*x12738))+((sj1*sj2))+((x12731*x12736))+(((-1.0)*r21*sj5*x12737))+(((-1.0)*cj1*x12734)));
evalcond[5]=((((-1.0)*sj1*x12734))+(((-1.0)*r02*x12738))+(((-1.0)*cj1*sj2))+((x12731*x12735))+(((-1.0)*x12733*x12737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12740=((1.0)*cj5);
CheckValue<IkReal> x12741=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12740)))),-1);
if(!x12741.valid){
continue;
}
CheckValue<IkReal> x12742 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12740)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12741.value)))+(x12742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12743=IKsin(j4);
IkReal x12744=IKcos(j4);
IkReal x12745=(cj5*r10);
IkReal x12746=(r01*sj5);
IkReal x12747=((1.0)*cj2);
IkReal x12748=(cj5*r00);
IkReal x12749=(cj5*r20);
IkReal x12750=((1.0)*x12744);
IkReal x12751=((1.0)*x12743);
IkReal x12752=(sj5*x12743);
evalcond[0]=((((-1.0)*r22*x12750))+(((-1.0)*x12749*x12751))+((r21*x12752)));
evalcond[1]=((((-1.0)*r02*x12750))+((x12743*x12746))+(((-1.0)*x12748*x12751)));
evalcond[2]=(((x12744*x12745))+(((-1.0)*r12*x12751))+(((-1.0)*r11*sj5*x12750)));
evalcond[3]=((1.0)+((r11*x12752))+(((-1.0)*x12745*x12751))+(((-1.0)*r12*x12750)));
evalcond[4]=(((x12744*x12749))+(((-1.0)*r21*sj5*x12750))+(((-1.0)*r22*x12751))+((sj1*sj2))+(((-1.0)*cj1*x12747)));
evalcond[5]=(((x12744*x12748))+(((-1.0)*r02*x12751))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12747))+(((-1.0)*x12746*x12750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12753=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12753.valid){
continue;
}
CheckValue<IkReal> x12754 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12753.value)))+(x12754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12755=IKsin(j4);
IkReal x12756=IKcos(j4);
IkReal x12757=(cj5*r10);
IkReal x12758=(r01*sj5);
IkReal x12759=((1.0)*cj2);
IkReal x12760=(cj5*r00);
IkReal x12761=(cj5*r20);
IkReal x12762=((1.0)*x12756);
IkReal x12763=((1.0)*x12755);
IkReal x12764=(sj5*x12755);
evalcond[0]=(((r21*x12764))+(((-1.0)*r22*x12762))+(((-1.0)*x12761*x12763)));
evalcond[1]=(((x12755*x12758))+(((-1.0)*r02*x12762))+(((-1.0)*x12760*x12763)));
evalcond[2]=((((-1.0)*r12*x12763))+((x12756*x12757))+(((-1.0)*r11*sj5*x12762)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12762))+(((-1.0)*x12757*x12763))+((r11*x12764)));
evalcond[4]=(((x12756*x12761))+(((-1.0)*r21*sj5*x12762))+(((-1.0)*r22*x12763))+((sj1*sj2))+(((-1.0)*cj1*x12759)));
evalcond[5]=(((x12756*x12760))+(((-1.0)*sj1*x12759))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12763))+(((-1.0)*x12758*x12762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12765=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12765;
j4eval[1]=IKsign(x12765);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12766=((1.0)*cj5);
IkReal x12767=((((-1.0)*r01*x12766))+(((-1.0)*r00*sj5)));
j4eval[0]=x12767;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12766))+((r21*sj5))))));
j4eval[2]=IKsign(x12767);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12768=(sj1*sj2);
IkReal x12769=(cj5*r10);
IkReal x12770=(r11*sj5);
IkReal x12771=(cj1*cj2);
IkReal x12772=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12772;
j4eval[1]=((IKabs(((((-1.0)*r12*x12768))+((r12*x12771)))))+(IKabs(((((-1.0)*x12768*x12769))+((x12768*x12770))+(((-1.0)*x12770*x12771))+((x12769*x12771))))));
j4eval[2]=IKsign(x12772);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12773=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12773);
rxp1_1=(px*r21);
rxp1_2=(r11*x12773);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12774=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12774);
rxp1_1=(px*r21);
rxp1_2=(r11*x12774);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12775=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12775)));
j4eval[1]=((((-1.0)*r20*x12775))+((r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12776=((1.0)*cj5);
CheckValue<IkReal> x12777=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12776))),-1);
if(!x12777.valid){
continue;
}
CheckValue<IkReal> x12778=IKPowWithIntegerCheck(((((-1.0)*r20*x12776))+((r21*sj5))),-1);
if(!x12778.valid){
continue;
}
if( IKabs(((-1.0)*(x12777.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12778.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12777.value)))+IKsqr(((x12778.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12777.value)), ((x12778.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12779=IKsin(j4);
IkReal x12780=IKcos(j4);
IkReal x12781=((1.0)*cj2);
IkReal x12782=(r21*sj5);
IkReal x12783=(r11*sj5);
IkReal x12784=((1.0)*cj5*x12779);
IkReal x12785=((1.0)*cj5*x12780);
evalcond[0]=((-1.0)*r02*x12780);
evalcond[1]=((((-1.0)*r20*x12784))+((x12779*x12782)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12781))+((r02*x12779)));
evalcond[3]=((((-1.0)*r10*x12785))+((x12780*x12783)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12784))+((x12779*x12783)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r20*x12785))+(((-1.0)*cj1*x12781))+((x12780*x12782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12786=IKPowWithIntegerCheck(r02,-1);
if(!x12786.valid){
continue;
}
CheckValue<IkReal> x12787=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12787.valid){
continue;
}
if( IKabs(((x12786.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12787.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12786.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12787.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12786.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12787.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12788=IKsin(j4);
IkReal x12789=IKcos(j4);
IkReal x12790=((1.0)*cj2);
IkReal x12791=(r21*sj5);
IkReal x12792=(r11*sj5);
IkReal x12793=((1.0)*cj5*x12788);
IkReal x12794=((1.0)*cj5*x12789);
evalcond[0]=((-1.0)*r02*x12789);
evalcond[1]=((((-1.0)*r20*x12793))+((x12788*x12791)));
evalcond[2]=((((-1.0)*sj1*x12790))+(((-1.0)*cj1*sj2))+((r02*x12788)));
evalcond[3]=((((-1.0)*r10*x12794))+((x12789*x12792)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12793))+((x12788*x12792)));
evalcond[5]=((((-1.0)*r20*x12794))+((x12789*x12791))+((sj1*sj2))+(((-1.0)*cj1*x12790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12795=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12795;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12795);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12796=((1.0)*cj5);
IkReal x12797=((((-1.0)*r21*x12796))+(((-1.0)*r20*sj5)));
j4eval[0]=x12797;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12796))+((r11*sj5))))));
j4eval[2]=IKsign(x12797);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12798=cj5*cj5;
IkReal x12799=(r11*r21);
IkReal x12800=((1.0)*r20);
IkReal x12801=(cj5*sj5);
IkReal x12802=(((r11*r20*x12801))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12798*x12800))+(((-1.0)*x12799))+((r10*r21*x12801))+((x12798*x12799)));
j4eval[0]=x12802;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12800))))));
j4eval[2]=IKsign(x12802);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12803=cj5*cj5;
IkReal x12804=(r21*sj5);
IkReal x12805=(r11*r21);
IkReal x12806=((1.0)*r20);
CheckValue<IkReal> x12807=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12803*x12805))+(((-1.0)*x12805))+((cj5*r10*x12804))+(((-1.0)*r10*x12803*x12806))+((cj5*r11*r20*sj5)))),-1);
if(!x12807.valid){
continue;
}
CheckValue<IkReal> x12808 = IKatan2WithCheck(IkReal((x12804+(((-1.0)*cj5*x12806)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12807.value)))+(x12808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12809=IKcos(j4);
IkReal x12810=IKsin(j4);
IkReal x12811=(cj5*r00);
IkReal x12812=(cj5*r20);
IkReal x12813=(cj5*r10);
IkReal x12814=((1.0)*x12809);
IkReal x12815=((1.0)*x12810);
IkReal x12816=(sj5*x12809);
IkReal x12817=(sj5*x12810);
evalcond[0]=((((-1.0)*x12812*x12814))+((r21*x12816))+((r22*x12810)));
evalcond[1]=((((-1.0)*x12813*x12814))+((r12*x12810))+((r11*x12816)));
evalcond[2]=((((-1.0)*x12812*x12815))+((r21*x12817))+(((-1.0)*r22*x12814)));
evalcond[3]=((((-1.0)*r02*x12814))+((r01*x12817))+(((-1.0)*x12811*x12815)));
evalcond[4]=((-1.0)+((r02*x12810))+((r01*x12816))+(((-1.0)*x12811*x12814)));
evalcond[5]=((1.0)+(((-1.0)*x12813*x12815))+(((-1.0)*r12*x12814))+((r11*x12817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12818=((1.0)*cj5);
CheckValue<IkReal> x12819 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12818))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12819.valid){
continue;
}
CheckValue<IkReal> x12820=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12818))+(((-1.0)*r20*sj5)))),-1);
if(!x12820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12819.value)+(((1.5707963267949)*(x12820.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12821=IKcos(j4);
IkReal x12822=IKsin(j4);
IkReal x12823=(cj5*r00);
IkReal x12824=(cj5*r20);
IkReal x12825=(cj5*r10);
IkReal x12826=((1.0)*x12821);
IkReal x12827=((1.0)*x12822);
IkReal x12828=(sj5*x12821);
IkReal x12829=(sj5*x12822);
evalcond[0]=((((-1.0)*x12824*x12826))+((r22*x12822))+((r21*x12828)));
evalcond[1]=((((-1.0)*x12825*x12826))+((r12*x12822))+((r11*x12828)));
evalcond[2]=((((-1.0)*x12824*x12827))+(((-1.0)*r22*x12826))+((r21*x12829)));
evalcond[3]=((((-1.0)*r02*x12826))+((r01*x12829))+(((-1.0)*x12823*x12827)));
evalcond[4]=((-1.0)+((r01*x12828))+((r02*x12822))+(((-1.0)*x12823*x12826)));
evalcond[5]=((1.0)+(((-1.0)*x12825*x12827))+(((-1.0)*r12*x12826))+((r11*x12829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12830 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12830.valid){
continue;
}
CheckValue<IkReal> x12831=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12830.value)+(((1.5707963267949)*(x12831.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12832=IKcos(j4);
IkReal x12833=IKsin(j4);
IkReal x12834=(cj5*r00);
IkReal x12835=(cj5*r20);
IkReal x12836=(cj5*r10);
IkReal x12837=((1.0)*x12832);
IkReal x12838=((1.0)*x12833);
IkReal x12839=(sj5*x12832);
IkReal x12840=(sj5*x12833);
evalcond[0]=(((r21*x12839))+((r22*x12833))+(((-1.0)*x12835*x12837)));
evalcond[1]=(((r12*x12833))+((r11*x12839))+(((-1.0)*x12836*x12837)));
evalcond[2]=((((-1.0)*r22*x12837))+((r21*x12840))+(((-1.0)*x12835*x12838)));
evalcond[3]=(((r01*x12840))+(((-1.0)*r02*x12837))+(((-1.0)*x12834*x12838)));
evalcond[4]=((-1.0)+((r02*x12833))+((r01*x12839))+(((-1.0)*x12834*x12837)));
evalcond[5]=((1.0)+(((-1.0)*x12836*x12838))+((r11*x12840))+(((-1.0)*r12*x12837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12841=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12841;
j4eval[1]=IKsign(x12841);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12842=((1.0)*cj5);
IkReal x12843=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12842)));
j4eval[0]=x12843;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12842)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12843);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12844=cj5*cj5;
IkReal x12845=(r11*r21);
IkReal x12846=((1.0)*r20);
IkReal x12847=(cj5*sj5);
IkReal x12848=(((r11*r20*x12847))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12844*x12846))+(((-1.0)*x12845))+((r10*r21*x12847))+((x12844*x12845)));
j4eval[0]=x12848;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12846)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12848);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12849=cj5*cj5;
IkReal x12850=(r21*sj5);
IkReal x12851=(r11*r21);
IkReal x12852=((1.0)*r20);
CheckValue<IkReal> x12853=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12849*x12852))+(((-1.0)*r12*r22))+(((-1.0)*x12851))+((x12849*x12851))+((cj5*r10*x12850))+((cj5*r11*r20*sj5)))),-1);
if(!x12853.valid){
continue;
}
CheckValue<IkReal> x12854 = IKatan2WithCheck(IkReal((x12850+(((-1.0)*cj5*x12852)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12853.value)))+(x12854.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12855=IKcos(j4);
IkReal x12856=IKsin(j4);
IkReal x12857=(cj5*r00);
IkReal x12858=(cj5*r20);
IkReal x12859=(cj5*r10);
IkReal x12860=((1.0)*x12855);
IkReal x12861=((1.0)*x12856);
IkReal x12862=(sj5*x12855);
IkReal x12863=(sj5*x12856);
evalcond[0]=(((r21*x12862))+((r22*x12856))+(((-1.0)*x12858*x12860)));
evalcond[1]=(((r11*x12862))+(((-1.0)*x12859*x12860))+((r12*x12856)));
evalcond[2]=(((r21*x12863))+(((-1.0)*x12858*x12861))+(((-1.0)*r22*x12860)));
evalcond[3]=((((-1.0)*r02*x12860))+((r01*x12863))+(((-1.0)*x12857*x12861)));
evalcond[4]=((1.0)+((r02*x12856))+((r01*x12862))+(((-1.0)*x12857*x12860)));
evalcond[5]=((1.0)+((r11*x12863))+(((-1.0)*x12859*x12861))+(((-1.0)*r12*x12860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12864=((1.0)*cj5);
CheckValue<IkReal> x12865 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12864)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12865.valid){
continue;
}
CheckValue<IkReal> x12866=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12864)))),-1);
if(!x12866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12865.value)+(((1.5707963267949)*(x12866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12867=IKcos(j4);
IkReal x12868=IKsin(j4);
IkReal x12869=(cj5*r00);
IkReal x12870=(cj5*r20);
IkReal x12871=(cj5*r10);
IkReal x12872=((1.0)*x12867);
IkReal x12873=((1.0)*x12868);
IkReal x12874=(sj5*x12867);
IkReal x12875=(sj5*x12868);
evalcond[0]=(((r21*x12874))+((r22*x12868))+(((-1.0)*x12870*x12872)));
evalcond[1]=(((r12*x12868))+(((-1.0)*x12871*x12872))+((r11*x12874)));
evalcond[2]=((((-1.0)*r22*x12872))+((r21*x12875))+(((-1.0)*x12870*x12873)));
evalcond[3]=(((r01*x12875))+(((-1.0)*r02*x12872))+(((-1.0)*x12869*x12873)));
evalcond[4]=((1.0)+((r01*x12874))+(((-1.0)*x12869*x12872))+((r02*x12868)));
evalcond[5]=((1.0)+(((-1.0)*x12871*x12873))+(((-1.0)*r12*x12872))+((r11*x12875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12876=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12876.valid){
continue;
}
CheckValue<IkReal> x12877 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12876.value)))+(x12877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12878=IKcos(j4);
IkReal x12879=IKsin(j4);
IkReal x12880=(cj5*r00);
IkReal x12881=(cj5*r20);
IkReal x12882=(cj5*r10);
IkReal x12883=((1.0)*x12878);
IkReal x12884=((1.0)*x12879);
IkReal x12885=(sj5*x12878);
IkReal x12886=(sj5*x12879);
evalcond[0]=(((r22*x12879))+(((-1.0)*x12881*x12883))+((r21*x12885)));
evalcond[1]=((((-1.0)*x12882*x12883))+((r12*x12879))+((r11*x12885)));
evalcond[2]=((((-1.0)*r22*x12883))+(((-1.0)*x12881*x12884))+((r21*x12886)));
evalcond[3]=((((-1.0)*r02*x12883))+((r01*x12886))+(((-1.0)*x12880*x12884)));
evalcond[4]=((1.0)+((r01*x12885))+((r02*x12879))+(((-1.0)*x12880*x12883)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12883))+(((-1.0)*x12882*x12884))+((r11*x12886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12887=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12887;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12887);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12888=((1.0)*cj5);
IkReal x12889=((((-1.0)*r21*x12888))+(((-1.0)*r20*sj5)));
j4eval[0]=x12889;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12888))))));
j4eval[2]=IKsign(x12889);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12890=cj5*cj5;
IkReal x12891=(r11*r21);
IkReal x12892=((1.0)*r20);
IkReal x12893=(cj5*sj5);
IkReal x12894=((((-1.0)*x12891))+(((-1.0)*r10*x12890*x12892))+(((-1.0)*r12*r22))+((r11*r20*x12893))+((x12890*x12891))+((r10*r21*x12893)));
j4eval[0]=x12894;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12892)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12894);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12895=cj5*cj5;
IkReal x12896=(r21*sj5);
IkReal x12897=(r11*r21);
IkReal x12898=((1.0)*r20);
CheckValue<IkReal> x12899=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12897))+((cj5*r10*x12896))+(((-1.0)*r12*r22))+((x12895*x12897))+(((-1.0)*r10*x12895*x12898))+((cj5*r11*r20*sj5)))),-1);
if(!x12899.valid){
continue;
}
CheckValue<IkReal> x12900 = IKatan2WithCheck(IkReal((x12896+(((-1.0)*cj5*x12898)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12899.value)))+(x12900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12901=IKcos(j4);
IkReal x12902=IKsin(j4);
IkReal x12903=(cj5*r00);
IkReal x12904=(cj5*r20);
IkReal x12905=(cj5*r10);
IkReal x12906=((1.0)*x12901);
IkReal x12907=((1.0)*x12902);
IkReal x12908=(sj5*x12901);
IkReal x12909=(sj5*x12902);
evalcond[0]=(((r21*x12908))+((r22*x12902))+(((-1.0)*x12904*x12906)));
evalcond[1]=(((r12*x12902))+(((-1.0)*x12905*x12906))+((r11*x12908)));
evalcond[2]=(((r21*x12909))+(((-1.0)*r22*x12906))+(((-1.0)*x12904*x12907)));
evalcond[3]=(((r01*x12909))+(((-1.0)*x12903*x12907))+(((-1.0)*r02*x12906)));
evalcond[4]=((-1.0)+((r01*x12908))+(((-1.0)*x12903*x12906))+((r02*x12902)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12906))+(((-1.0)*x12905*x12907))+((r11*x12909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12910=((1.0)*cj5);
CheckValue<IkReal> x12911=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12910))+(((-1.0)*r20*sj5)))),-1);
if(!x12911.valid){
continue;
}
CheckValue<IkReal> x12912 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12910))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12911.value)))+(x12912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12913=IKcos(j4);
IkReal x12914=IKsin(j4);
IkReal x12915=(cj5*r00);
IkReal x12916=(cj5*r20);
IkReal x12917=(cj5*r10);
IkReal x12918=((1.0)*x12913);
IkReal x12919=((1.0)*x12914);
IkReal x12920=(sj5*x12913);
IkReal x12921=(sj5*x12914);
evalcond[0]=((((-1.0)*x12916*x12918))+((r21*x12920))+((r22*x12914)));
evalcond[1]=(((r11*x12920))+((r12*x12914))+(((-1.0)*x12917*x12918)));
evalcond[2]=((((-1.0)*x12916*x12919))+(((-1.0)*r22*x12918))+((r21*x12921)));
evalcond[3]=((((-1.0)*r02*x12918))+(((-1.0)*x12915*x12919))+((r01*x12921)));
evalcond[4]=((-1.0)+(((-1.0)*x12915*x12918))+((r02*x12914))+((r01*x12920)));
evalcond[5]=((1.0)+((r11*x12921))+(((-1.0)*x12917*x12919))+(((-1.0)*r12*x12918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12922 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12922.valid){
continue;
}
CheckValue<IkReal> x12923=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12922.value)+(((1.5707963267949)*(x12923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12924=IKcos(j4);
IkReal x12925=IKsin(j4);
IkReal x12926=(cj5*r00);
IkReal x12927=(cj5*r20);
IkReal x12928=(cj5*r10);
IkReal x12929=((1.0)*x12924);
IkReal x12930=((1.0)*x12925);
IkReal x12931=(sj5*x12924);
IkReal x12932=(sj5*x12925);
evalcond[0]=((((-1.0)*x12927*x12929))+((r22*x12925))+((r21*x12931)));
evalcond[1]=(((r11*x12931))+((r12*x12925))+(((-1.0)*x12928*x12929)));
evalcond[2]=((((-1.0)*x12927*x12930))+((r21*x12932))+(((-1.0)*r22*x12929)));
evalcond[3]=((((-1.0)*r02*x12929))+(((-1.0)*x12926*x12930))+((r01*x12932)));
evalcond[4]=((-1.0)+(((-1.0)*x12926*x12929))+((r02*x12925))+((r01*x12931)));
evalcond[5]=((1.0)+((r11*x12932))+(((-1.0)*x12928*x12930))+(((-1.0)*r12*x12929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12933=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12933;
j4eval[1]=IKsign(x12933);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12934=((1.0)*cj5);
IkReal x12935=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12934)));
j4eval[0]=x12935;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12934))+((r21*sj5))))));
j4eval[2]=IKsign(x12935);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12936=cj5*cj5;
IkReal x12937=(r11*r21);
IkReal x12938=((1.0)*r20);
IkReal x12939=(cj5*sj5);
IkReal x12940=((((-1.0)*r10*x12936*x12938))+((r11*r20*x12939))+(((-1.0)*r12*r22))+(((-1.0)*x12937))+((r10*r21*x12939))+((x12936*x12937)));
j4eval[0]=x12940;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12938))))));
j4eval[2]=IKsign(x12940);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12941=cj5*cj5;
IkReal x12942=(r21*sj5);
IkReal x12943=(r11*r21);
IkReal x12944=((1.0)*r20);
CheckValue<IkReal> x12945 = IKatan2WithCheck(IkReal((x12942+(((-1.0)*cj5*x12944)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12945.valid){
continue;
}
CheckValue<IkReal> x12946=IKPowWithIntegerCheck(IKsign((((x12941*x12943))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12941*x12944))+(((-1.0)*x12943))+((cj5*r10*x12942))+((cj5*r11*r20*sj5)))),-1);
if(!x12946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12945.value)+(((1.5707963267949)*(x12946.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12947=IKcos(j4);
IkReal x12948=IKsin(j4);
IkReal x12949=(cj5*r00);
IkReal x12950=(cj5*r20);
IkReal x12951=(cj5*r10);
IkReal x12952=((1.0)*x12947);
IkReal x12953=((1.0)*x12948);
IkReal x12954=(sj5*x12947);
IkReal x12955=(sj5*x12948);
evalcond[0]=(((r22*x12948))+((r21*x12954))+(((-1.0)*x12950*x12952)));
evalcond[1]=((((-1.0)*x12951*x12952))+((r12*x12948))+((r11*x12954)));
evalcond[2]=(((r21*x12955))+(((-1.0)*r22*x12952))+(((-1.0)*x12950*x12953)));
evalcond[3]=(((r01*x12955))+(((-1.0)*r02*x12952))+(((-1.0)*x12949*x12953)));
evalcond[4]=((1.0)+((r01*x12954))+((r02*x12948))+(((-1.0)*x12949*x12952)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12952))+(((-1.0)*x12951*x12953))+((r11*x12955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12956=((1.0)*cj5);
CheckValue<IkReal> x12957=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12956)))),-1);
if(!x12957.valid){
continue;
}
CheckValue<IkReal> x12958 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12956)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12957.value)))+(x12958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12959=IKcos(j4);
IkReal x12960=IKsin(j4);
IkReal x12961=(cj5*r00);
IkReal x12962=(cj5*r20);
IkReal x12963=(cj5*r10);
IkReal x12964=((1.0)*x12959);
IkReal x12965=((1.0)*x12960);
IkReal x12966=(sj5*x12959);
IkReal x12967=(sj5*x12960);
evalcond[0]=((((-1.0)*x12962*x12964))+((r22*x12960))+((r21*x12966)));
evalcond[1]=(((r11*x12966))+((r12*x12960))+(((-1.0)*x12963*x12964)));
evalcond[2]=((((-1.0)*x12962*x12965))+(((-1.0)*r22*x12964))+((r21*x12967)));
evalcond[3]=(((r01*x12967))+(((-1.0)*x12961*x12965))+(((-1.0)*r02*x12964)));
evalcond[4]=((1.0)+((r01*x12966))+((r02*x12960))+(((-1.0)*x12961*x12964)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12964))+((r11*x12967))+(((-1.0)*x12963*x12965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12968=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12968.valid){
continue;
}
CheckValue<IkReal> x12969 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12968.value)))+(x12969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12970=IKcos(j4);
IkReal x12971=IKsin(j4);
IkReal x12972=(cj5*r00);
IkReal x12973=(cj5*r20);
IkReal x12974=(cj5*r10);
IkReal x12975=((1.0)*x12970);
IkReal x12976=((1.0)*x12971);
IkReal x12977=(sj5*x12970);
IkReal x12978=(sj5*x12971);
evalcond[0]=((((-1.0)*x12973*x12975))+((r22*x12971))+((r21*x12977)));
evalcond[1]=((((-1.0)*x12974*x12975))+((r11*x12977))+((r12*x12971)));
evalcond[2]=((((-1.0)*x12973*x12976))+(((-1.0)*r22*x12975))+((r21*x12978)));
evalcond[3]=(((r01*x12978))+(((-1.0)*r02*x12975))+(((-1.0)*x12972*x12976)));
evalcond[4]=((1.0)+((r01*x12977))+((r02*x12971))+(((-1.0)*x12972*x12975)));
evalcond[5]=((1.0)+(((-1.0)*x12974*x12976))+(((-1.0)*r12*x12975))+((r11*x12978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12979=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12979;
j4eval[1]=IKsign(x12979);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12980=((1.0)*cj5);
IkReal x12981=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12980)));
j4eval[0]=x12981;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12980)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12981);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12982=cj5*cj5;
IkReal x12983=(r11*r21);
IkReal x12984=((1.0)*r20);
IkReal x12985=(cj5*sj5);
IkReal x12986=(((r10*r21*x12985))+((x12982*x12983))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12982*x12984))+((r11*r20*x12985))+(((-1.0)*x12983)));
j4eval[0]=x12986;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12984)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12987=cj5*cj5;
IkReal x12988=(r21*sj5);
IkReal x12989=(r11*r21);
IkReal x12990=((1.0)*r20);
CheckValue<IkReal> x12991=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12987*x12989))+(((-1.0)*r10*x12987*x12990))+((cj5*r10*x12988))+(((-1.0)*x12989))+((cj5*r11*r20*sj5)))),-1);
if(!x12991.valid){
continue;
}
CheckValue<IkReal> x12992 = IKatan2WithCheck(IkReal((x12988+(((-1.0)*cj5*x12990)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12991.value)))+(x12992.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12993=IKcos(j4);
IkReal x12994=IKsin(j4);
IkReal x12995=(cj5*r00);
IkReal x12996=(cj5*r20);
IkReal x12997=(cj5*r10);
IkReal x12998=((1.0)*x12993);
IkReal x12999=((1.0)*x12994);
IkReal x13000=(sj5*x12993);
IkReal x13001=(sj5*x12994);
evalcond[0]=(((r22*x12994))+(((-1.0)*x12996*x12998))+((r21*x13000)));
evalcond[1]=((((-1.0)*x12997*x12998))+((r12*x12994))+((r11*x13000)));
evalcond[2]=((((-1.0)*r22*x12998))+(((-1.0)*x12996*x12999))+((r21*x13001)));
evalcond[3]=((((-1.0)*r02*x12998))+((r01*x13001))+(((-1.0)*x12995*x12999)));
evalcond[4]=((1.0)+((r02*x12994))+((r01*x13000))+(((-1.0)*x12995*x12998)));
evalcond[5]=((1.0)+(((-1.0)*x12997*x12999))+(((-1.0)*r12*x12998))+((r11*x13001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13002=((1.0)*cj5);
CheckValue<IkReal> x13003=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13002))+(((-1.0)*r10*sj5)))),-1);
if(!x13003.valid){
continue;
}
CheckValue<IkReal> x13004 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13002)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13003.value)))+(x13004.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13005=IKcos(j4);
IkReal x13006=IKsin(j4);
IkReal x13007=(cj5*r00);
IkReal x13008=(cj5*r20);
IkReal x13009=(cj5*r10);
IkReal x13010=((1.0)*x13005);
IkReal x13011=((1.0)*x13006);
IkReal x13012=(sj5*x13005);
IkReal x13013=(sj5*x13006);
evalcond[0]=(((r21*x13012))+(((-1.0)*x13008*x13010))+((r22*x13006)));
evalcond[1]=((((-1.0)*x13009*x13010))+((r12*x13006))+((r11*x13012)));
evalcond[2]=((((-1.0)*r22*x13010))+((r21*x13013))+(((-1.0)*x13008*x13011)));
evalcond[3]=(((r01*x13013))+(((-1.0)*x13007*x13011))+(((-1.0)*r02*x13010)));
evalcond[4]=((1.0)+((r01*x13012))+((r02*x13006))+(((-1.0)*x13007*x13010)));
evalcond[5]=((1.0)+(((-1.0)*x13009*x13011))+((r11*x13013))+(((-1.0)*r12*x13010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13014=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13014.valid){
continue;
}
CheckValue<IkReal> x13015 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13014.value)))+(x13015.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13016=IKcos(j4);
IkReal x13017=IKsin(j4);
IkReal x13018=(cj5*r00);
IkReal x13019=(cj5*r20);
IkReal x13020=(cj5*r10);
IkReal x13021=((1.0)*x13016);
IkReal x13022=((1.0)*x13017);
IkReal x13023=(sj5*x13016);
IkReal x13024=(sj5*x13017);
evalcond[0]=(((r21*x13023))+(((-1.0)*x13019*x13021))+((r22*x13017)));
evalcond[1]=(((r11*x13023))+((r12*x13017))+(((-1.0)*x13020*x13021)));
evalcond[2]=((((-1.0)*r22*x13021))+((r21*x13024))+(((-1.0)*x13019*x13022)));
evalcond[3]=(((r01*x13024))+(((-1.0)*x13018*x13022))+(((-1.0)*r02*x13021)));
evalcond[4]=((1.0)+((r01*x13023))+(((-1.0)*x13018*x13021))+((r02*x13017)));
evalcond[5]=((1.0)+((r11*x13024))+(((-1.0)*x13020*x13022))+(((-1.0)*r12*x13021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13025=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13025;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13025);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13026=((1.0)*cj5);
IkReal x13027=((((-1.0)*r21*x13026))+(((-1.0)*r20*sj5)));
j4eval[0]=x13027;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13026))+((r11*sj5))))));
j4eval[2]=IKsign(x13027);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13028=cj5*cj5;
IkReal x13029=(r11*r21);
IkReal x13030=((1.0)*r20);
IkReal x13031=(cj5*sj5);
IkReal x13032=((((-1.0)*r10*x13028*x13030))+(((-1.0)*r12*r22))+((r10*r21*x13031))+(((-1.0)*x13029))+((r11*r20*x13031))+((x13028*x13029)));
j4eval[0]=x13032;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13030)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13033=cj5*cj5;
IkReal x13034=(r21*sj5);
IkReal x13035=(r11*r21);
IkReal x13036=((1.0)*r20);
CheckValue<IkReal> x13037 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13036))+x13034)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13037.valid){
continue;
}
CheckValue<IkReal> x13038=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13035))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13033*x13036))+((x13033*x13035))+((cj5*r10*x13034))+((cj5*r11*r20*sj5)))),-1);
if(!x13038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13037.value)+(((1.5707963267949)*(x13038.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13039=IKcos(j4);
IkReal x13040=IKsin(j4);
IkReal x13041=(cj5*r00);
IkReal x13042=(cj5*r20);
IkReal x13043=(cj5*r10);
IkReal x13044=((1.0)*x13039);
IkReal x13045=((1.0)*x13040);
IkReal x13046=(sj5*x13039);
IkReal x13047=(sj5*x13040);
evalcond[0]=(((r21*x13046))+((r22*x13040))+(((-1.0)*x13042*x13044)));
evalcond[1]=(((r11*x13046))+(((-1.0)*x13043*x13044))+((r12*x13040)));
evalcond[2]=(((r21*x13047))+(((-1.0)*r22*x13044))+(((-1.0)*x13042*x13045)));
evalcond[3]=((((-1.0)*r02*x13044))+((r01*x13047))+(((-1.0)*x13041*x13045)));
evalcond[4]=((-1.0)+((r02*x13040))+((r01*x13046))+(((-1.0)*x13041*x13044)));
evalcond[5]=((1.0)+((r11*x13047))+(((-1.0)*x13043*x13045))+(((-1.0)*r12*x13044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13048=((1.0)*cj5);
CheckValue<IkReal> x13049 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13048))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13049.valid){
continue;
}
CheckValue<IkReal> x13050=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13048))+(((-1.0)*r20*sj5)))),-1);
if(!x13050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13049.value)+(((1.5707963267949)*(x13050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13051=IKcos(j4);
IkReal x13052=IKsin(j4);
IkReal x13053=(cj5*r00);
IkReal x13054=(cj5*r20);
IkReal x13055=(cj5*r10);
IkReal x13056=((1.0)*x13051);
IkReal x13057=((1.0)*x13052);
IkReal x13058=(sj5*x13051);
IkReal x13059=(sj5*x13052);
evalcond[0]=((((-1.0)*x13054*x13056))+((r21*x13058))+((r22*x13052)));
evalcond[1]=(((r12*x13052))+(((-1.0)*x13055*x13056))+((r11*x13058)));
evalcond[2]=((((-1.0)*x13054*x13057))+((r21*x13059))+(((-1.0)*r22*x13056)));
evalcond[3]=((((-1.0)*r02*x13056))+((r01*x13059))+(((-1.0)*x13053*x13057)));
evalcond[4]=((-1.0)+((r02*x13052))+((r01*x13058))+(((-1.0)*x13053*x13056)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13056))+(((-1.0)*x13055*x13057))+((r11*x13059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13060 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13060.valid){
continue;
}
CheckValue<IkReal> x13061=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13060.value)+(((1.5707963267949)*(x13061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13062=IKcos(j4);
IkReal x13063=IKsin(j4);
IkReal x13064=(cj5*r00);
IkReal x13065=(cj5*r20);
IkReal x13066=(cj5*r10);
IkReal x13067=((1.0)*x13062);
IkReal x13068=((1.0)*x13063);
IkReal x13069=(sj5*x13062);
IkReal x13070=(sj5*x13063);
evalcond[0]=(((r22*x13063))+((r21*x13069))+(((-1.0)*x13065*x13067)));
evalcond[1]=(((r12*x13063))+(((-1.0)*x13066*x13067))+((r11*x13069)));
evalcond[2]=(((r21*x13070))+(((-1.0)*r22*x13067))+(((-1.0)*x13065*x13068)));
evalcond[3]=(((r01*x13070))+(((-1.0)*x13064*x13068))+(((-1.0)*r02*x13067)));
evalcond[4]=((-1.0)+((r02*x13063))+(((-1.0)*x13064*x13067))+((r01*x13069)));
evalcond[5]=((1.0)+(((-1.0)*x13066*x13068))+((r11*x13070))+(((-1.0)*r12*x13067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13071=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13071;
j4eval[1]=IKsign(x13071);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13072=((1.0)*cj5);
IkReal x13073=((((-1.0)*r11*x13072))+(((-1.0)*r10*sj5)));
j4eval[0]=x13073;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x13072))))));
j4eval[2]=IKsign(x13073);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13074=cj5*cj5;
IkReal x13075=(r11*r21);
IkReal x13076=((1.0)*r20);
IkReal x13077=(cj5*sj5);
IkReal x13078=(((x13074*x13075))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13074*x13076))+((r11*r20*x13077))+(((-1.0)*x13075))+((r10*r21*x13077)));
j4eval[0]=x13078;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13076))))));
j4eval[2]=IKsign(x13078);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13079=cj5*cj5;
IkReal x13080=(r21*sj5);
IkReal x13081=(r11*r21);
IkReal x13082=((1.0)*r20);
CheckValue<IkReal> x13083=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x13079*x13082))+(((-1.0)*r12*r22))+((x13079*x13081))+(((-1.0)*x13081))+((cj5*r11*r20*sj5))+((cj5*r10*x13080)))),-1);
if(!x13083.valid){
continue;
}
CheckValue<IkReal> x13084 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13082))+x13080)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13083.value)))+(x13084.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13085=IKcos(j4);
IkReal x13086=IKsin(j4);
IkReal x13087=(cj5*r00);
IkReal x13088=(cj5*r20);
IkReal x13089=(cj5*r10);
IkReal x13090=((1.0)*x13085);
IkReal x13091=((1.0)*x13086);
IkReal x13092=(sj5*x13085);
IkReal x13093=(sj5*x13086);
evalcond[0]=(((r22*x13086))+(((-1.0)*x13088*x13090))+((r21*x13092)));
evalcond[1]=(((r11*x13092))+((r12*x13086))+(((-1.0)*x13089*x13090)));
evalcond[2]=((((-1.0)*r22*x13090))+(((-1.0)*x13088*x13091))+((r21*x13093)));
evalcond[3]=((((-1.0)*x13087*x13091))+((r01*x13093))+(((-1.0)*r02*x13090)));
evalcond[4]=((1.0)+((r02*x13086))+(((-1.0)*x13087*x13090))+((r01*x13092)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13090))+((r11*x13093))+(((-1.0)*x13089*x13091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13094=((1.0)*cj5);
CheckValue<IkReal> x13095 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13094))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13095.valid){
continue;
}
CheckValue<IkReal> x13096=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13094)))),-1);
if(!x13096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13095.value)+(((1.5707963267949)*(x13096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13097=IKcos(j4);
IkReal x13098=IKsin(j4);
IkReal x13099=(cj5*r00);
IkReal x13100=(cj5*r20);
IkReal x13101=(cj5*r10);
IkReal x13102=((1.0)*x13097);
IkReal x13103=((1.0)*x13098);
IkReal x13104=(sj5*x13097);
IkReal x13105=(sj5*x13098);
evalcond[0]=((((-1.0)*x13100*x13102))+((r22*x13098))+((r21*x13104)));
evalcond[1]=((((-1.0)*x13101*x13102))+((r12*x13098))+((r11*x13104)));
evalcond[2]=((((-1.0)*x13100*x13103))+((r21*x13105))+(((-1.0)*r22*x13102)));
evalcond[3]=(((r01*x13105))+(((-1.0)*x13099*x13103))+(((-1.0)*r02*x13102)));
evalcond[4]=((1.0)+((r02*x13098))+((r01*x13104))+(((-1.0)*x13099*x13102)));
evalcond[5]=((1.0)+(((-1.0)*x13101*x13103))+(((-1.0)*r12*x13102))+((r11*x13105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13106=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13106.valid){
continue;
}
CheckValue<IkReal> x13107 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13106.value)))+(x13107.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13108=IKcos(j4);
IkReal x13109=IKsin(j4);
IkReal x13110=(cj5*r00);
IkReal x13111=(cj5*r20);
IkReal x13112=(cj5*r10);
IkReal x13113=((1.0)*x13108);
IkReal x13114=((1.0)*x13109);
IkReal x13115=(sj5*x13108);
IkReal x13116=(sj5*x13109);
evalcond[0]=(((r21*x13115))+((r22*x13109))+(((-1.0)*x13111*x13113)));
evalcond[1]=((((-1.0)*x13112*x13113))+((r12*x13109))+((r11*x13115)));
evalcond[2]=(((r21*x13116))+(((-1.0)*x13111*x13114))+(((-1.0)*r22*x13113)));
evalcond[3]=((((-1.0)*r02*x13113))+(((-1.0)*x13110*x13114))+((r01*x13116)));
evalcond[4]=((1.0)+((r02*x13109))+(((-1.0)*x13110*x13113))+((r01*x13115)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13113))+(((-1.0)*x13112*x13114))+((r11*x13116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13117=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13117;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13117);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13118=((1.0)*cj5);
IkReal x13119=((((-1.0)*r21*x13118))+(((-1.0)*r20*sj5)));
j4eval[0]=x13119;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13118))+((r11*sj5))))));
j4eval[2]=IKsign(x13119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13120=cj5*cj5;
IkReal x13121=(r11*r21);
IkReal x13122=((1.0)*r20);
IkReal x13123=(cj5*sj5);
IkReal x13124=((((-1.0)*r12*r22))+((r10*r21*x13123))+((x13120*x13121))+((r11*r20*x13123))+(((-1.0)*r10*x13120*x13122))+(((-1.0)*x13121)));
j4eval[0]=x13124;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13122))))));
j4eval[2]=IKsign(x13124);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13125=cj5*cj5;
IkReal x13126=(r21*sj5);
IkReal x13127=(r11*r21);
IkReal x13128=((1.0)*r20);
CheckValue<IkReal> x13129=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13126))+(((-1.0)*r12*r22))+((x13125*x13127))+(((-1.0)*r10*x13125*x13128))+((cj5*r11*r20*sj5))+(((-1.0)*x13127)))),-1);
if(!x13129.valid){
continue;
}
CheckValue<IkReal> x13130 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13128))+x13126)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13129.value)))+(x13130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13131=IKcos(j4);
IkReal x13132=IKsin(j4);
IkReal x13133=(cj5*r00);
IkReal x13134=(cj5*r20);
IkReal x13135=(cj5*r10);
IkReal x13136=((1.0)*x13131);
IkReal x13137=((1.0)*x13132);
IkReal x13138=(sj5*x13131);
IkReal x13139=(sj5*x13132);
evalcond[0]=((((-1.0)*x13134*x13136))+((r21*x13138))+((r22*x13132)));
evalcond[1]=((((-1.0)*x13135*x13136))+((r12*x13132))+((r11*x13138)));
evalcond[2]=((((-1.0)*x13134*x13137))+((r21*x13139))+(((-1.0)*r22*x13136)));
evalcond[3]=(((r01*x13139))+(((-1.0)*x13133*x13137))+(((-1.0)*r02*x13136)));
evalcond[4]=((-1.0)+((r01*x13138))+(((-1.0)*x13133*x13136))+((r02*x13132)));
evalcond[5]=((1.0)+(((-1.0)*x13135*x13137))+((r11*x13139))+(((-1.0)*r12*x13136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13140=((1.0)*cj5);
CheckValue<IkReal> x13141=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13140))+(((-1.0)*r20*sj5)))),-1);
if(!x13141.valid){
continue;
}
CheckValue<IkReal> x13142 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13140))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13141.value)))+(x13142.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13143=IKcos(j4);
IkReal x13144=IKsin(j4);
IkReal x13145=(cj5*r00);
IkReal x13146=(cj5*r20);
IkReal x13147=(cj5*r10);
IkReal x13148=((1.0)*x13143);
IkReal x13149=((1.0)*x13144);
IkReal x13150=(sj5*x13143);
IkReal x13151=(sj5*x13144);
evalcond[0]=(((r21*x13150))+((r22*x13144))+(((-1.0)*x13146*x13148)));
evalcond[1]=((((-1.0)*x13147*x13148))+((r12*x13144))+((r11*x13150)));
evalcond[2]=(((r21*x13151))+(((-1.0)*x13146*x13149))+(((-1.0)*r22*x13148)));
evalcond[3]=((((-1.0)*x13145*x13149))+(((-1.0)*r02*x13148))+((r01*x13151)));
evalcond[4]=((-1.0)+((r02*x13144))+(((-1.0)*x13145*x13148))+((r01*x13150)));
evalcond[5]=((1.0)+(((-1.0)*x13147*x13149))+(((-1.0)*r12*x13148))+((r11*x13151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13152 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13152.valid){
continue;
}
CheckValue<IkReal> x13153=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13152.value)+(((1.5707963267949)*(x13153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13154=IKcos(j4);
IkReal x13155=IKsin(j4);
IkReal x13156=(cj5*r00);
IkReal x13157=(cj5*r20);
IkReal x13158=(cj5*r10);
IkReal x13159=((1.0)*x13154);
IkReal x13160=((1.0)*x13155);
IkReal x13161=(sj5*x13154);
IkReal x13162=(sj5*x13155);
evalcond[0]=((((-1.0)*x13157*x13159))+((r22*x13155))+((r21*x13161)));
evalcond[1]=((((-1.0)*x13158*x13159))+((r11*x13161))+((r12*x13155)));
evalcond[2]=((((-1.0)*x13157*x13160))+(((-1.0)*r22*x13159))+((r21*x13162)));
evalcond[3]=(((r01*x13162))+(((-1.0)*x13156*x13160))+(((-1.0)*r02*x13159)));
evalcond[4]=((-1.0)+((r02*x13155))+(((-1.0)*x13156*x13159))+((r01*x13161)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13159))+(((-1.0)*x13158*x13160))+((r11*x13162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13163=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13163);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13163);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13164=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13164);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13164);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13165=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13165)));
j4eval[1]=((((-1.0)*r00*x13165))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13166=((1.0)*cj5);
CheckValue<IkReal> x13167=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13166))),-1);
if(!x13167.valid){
continue;
}
CheckValue<IkReal> x13168=IKPowWithIntegerCheck(((((-1.0)*r00*x13166))+((r01*sj5))),-1);
if(!x13168.valid){
continue;
}
if( IKabs(((-1.0)*(x13167.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13168.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13167.value)))+IKsqr(((x13168.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13167.value)), ((x13168.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13169=IKsin(j4);
IkReal x13170=IKcos(j4);
IkReal x13171=((1.0)*cj5);
IkReal x13172=((1.0)*cj2);
IkReal x13173=(sj5*x13170);
IkReal x13174=(sj5*x13169);
evalcond[0]=((-1.0)*r22*x13170);
evalcond[1]=((((-1.0)*cj1*x13172))+((r22*x13169))+((sj1*sj2)));
evalcond[2]=(((r01*x13174))+(((-1.0)*r00*x13169*x13171)));
evalcond[3]=((((-1.0)*r10*x13170*x13171))+((r11*x13173)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13169*x13171))+((r11*x13174)));
evalcond[5]=(((r01*x13173))+(((-1.0)*sj1*x13172))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13170*x13171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13175=IKPowWithIntegerCheck(r22,-1);
if(!x13175.valid){
continue;
}
CheckValue<IkReal> x13176=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13176.valid){
continue;
}
if( IKabs(((x13175.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13176.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13175.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13176.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13175.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13176.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13177=IKsin(j4);
IkReal x13178=IKcos(j4);
IkReal x13179=((1.0)*cj5);
IkReal x13180=((1.0)*cj2);
IkReal x13181=(sj5*x13178);
IkReal x13182=(sj5*x13177);
evalcond[0]=((-1.0)*r22*x13178);
evalcond[1]=(((sj1*sj2))+(((-1.0)*cj1*x13180))+((r22*x13177)));
evalcond[2]=((((-1.0)*r00*x13177*x13179))+((r01*x13182)));
evalcond[3]=(((r11*x13181))+(((-1.0)*r10*x13178*x13179)));
evalcond[4]=((1.0)+((r11*x13182))+(((-1.0)*r10*x13177*x13179)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x13181))+(((-1.0)*r00*x13178*x13179))+(((-1.0)*sj1*x13180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13183=(sj1*sj2);
IkReal x13184=(cj5*r10);
IkReal x13185=(r11*sj5);
IkReal x13186=(cj1*cj2);
CheckValue<IkReal> x13187=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13187.valid){
continue;
}
CheckValue<IkReal> x13188 = IKatan2WithCheck(IkReal((((x13183*x13185))+(((-1.0)*x13185*x13186))+(((-1.0)*x13183*x13184))+((x13184*x13186)))),IkReal((((r12*x13186))+(((-1.0)*r12*x13183)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13187.value)))+(x13188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13189=IKcos(j4);
IkReal x13190=IKsin(j4);
IkReal x13191=(cj5*r00);
IkReal x13192=(cj5*r10);
IkReal x13193=(r21*sj5);
IkReal x13194=((1.0)*cj2);
IkReal x13195=(cj5*r20);
IkReal x13196=((1.0)*x13189);
IkReal x13197=((1.0)*x13190);
IkReal x13198=(sj5*x13190);
IkReal x13199=(sj5*x13189);
evalcond[0]=(((r12*x13190))+((r11*x13199))+(((-1.0)*x13192*x13196)));
evalcond[1]=((((-1.0)*x13195*x13197))+(((-1.0)*r22*x13196))+((x13190*x13193)));
evalcond[2]=((((-1.0)*r02*x13196))+(((-1.0)*x13191*x13197))+((r01*x13198)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13196))+((r11*x13198))+(((-1.0)*x13192*x13197)));
evalcond[4]=((((-1.0)*x13195*x13196))+(((-1.0)*cj1*x13194))+((sj1*sj2))+((x13189*x13193))+((r22*x13190)));
evalcond[5]=(((r02*x13190))+(((-1.0)*cj1*sj2))+(((-1.0)*x13191*x13196))+((r01*x13199))+(((-1.0)*sj1*x13194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13200=((1.0)*cj5);
CheckValue<IkReal> x13201=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13200)))),-1);
if(!x13201.valid){
continue;
}
CheckValue<IkReal> x13202 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13201.value)))+(x13202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13203=IKcos(j4);
IkReal x13204=IKsin(j4);
IkReal x13205=(cj5*r00);
IkReal x13206=(cj5*r10);
IkReal x13207=(r21*sj5);
IkReal x13208=((1.0)*cj2);
IkReal x13209=(cj5*r20);
IkReal x13210=((1.0)*x13203);
IkReal x13211=((1.0)*x13204);
IkReal x13212=(sj5*x13204);
IkReal x13213=(sj5*x13203);
evalcond[0]=(((r11*x13213))+(((-1.0)*x13206*x13210))+((r12*x13204)));
evalcond[1]=(((x13204*x13207))+(((-1.0)*r22*x13210))+(((-1.0)*x13209*x13211)));
evalcond[2]=(((r01*x13212))+(((-1.0)*r02*x13210))+(((-1.0)*x13205*x13211)));
evalcond[3]=((1.0)+((r11*x13212))+(((-1.0)*x13206*x13211))+(((-1.0)*r12*x13210)));
evalcond[4]=((((-1.0)*cj1*x13208))+((x13203*x13207))+((sj1*sj2))+((r22*x13204))+(((-1.0)*x13209*x13210)));
evalcond[5]=(((r01*x13213))+((r02*x13204))+(((-1.0)*cj1*sj2))+(((-1.0)*x13205*x13210))+(((-1.0)*sj1*x13208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13214=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13214.valid){
continue;
}
CheckValue<IkReal> x13215 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13214.value)))+(x13215.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13216=IKcos(j4);
IkReal x13217=IKsin(j4);
IkReal x13218=(cj5*r00);
IkReal x13219=(cj5*r10);
IkReal x13220=(r21*sj5);
IkReal x13221=((1.0)*cj2);
IkReal x13222=(cj5*r20);
IkReal x13223=((1.0)*x13216);
IkReal x13224=((1.0)*x13217);
IkReal x13225=(sj5*x13217);
IkReal x13226=(sj5*x13216);
evalcond[0]=(((r12*x13217))+((r11*x13226))+(((-1.0)*x13219*x13223)));
evalcond[1]=((((-1.0)*r22*x13223))+((x13217*x13220))+(((-1.0)*x13222*x13224)));
evalcond[2]=((((-1.0)*x13218*x13224))+(((-1.0)*r02*x13223))+((r01*x13225)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13223))+((r11*x13225))+(((-1.0)*x13219*x13224)));
evalcond[4]=((((-1.0)*cj1*x13221))+((sj1*sj2))+((r22*x13217))+(((-1.0)*x13222*x13223))+((x13216*x13220)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x13218*x13223))+(((-1.0)*sj1*x13221))+((r01*x13226))+((r02*x13217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13227=((-1.0)*r00);
IkReal x13229 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13229)==0){
continue;
}
IkReal x13228=pow(x13229,-0.5);
CheckValue<IkReal> x13230 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13227),IKFAST_ATAN2_MAGTHRESH);
if(!x13230.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13230.value));
IkReal gconst19=(r01*x13228);
IkReal gconst20=(x13227*x13228);
CheckValue<IkReal> x13231 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13231.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13231.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13232=((-1.0)*r00);
IkReal x13233=x13228;
CheckValue<IkReal> x13235 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13232),IKFAST_ATAN2_MAGTHRESH);
if(!x13235.valid){
continue;
}
IkReal x13234=((-1.0)*(x13235.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13234;
IkReal gconst18=x13234;
IkReal gconst19=(r01*x13233);
IkReal gconst20=(x13232*x13233);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13236=((-1.0)*r00);
IkReal x13237=x13228;
CheckValue<IkReal> x13239 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13236),IKFAST_ATAN2_MAGTHRESH);
if(!x13239.valid){
continue;
}
IkReal x13238=((-1.0)*(x13239.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13238;
IkReal gconst18=x13238;
IkReal gconst19=(r01*x13237);
IkReal gconst20=(x13236*x13237);
CheckValue<IkReal> x13247=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13247.valid){
continue;
}
IkReal x13240=x13247.value;
IkReal x13241=(sj3*x13240);
IkReal x13242=(r11*x13241);
IkReal x13243=(r21*x13241);
IkReal x13244=(r20*x13241);
IkReal x13245=(r10*x13241);
IkReal x13246=(r00*r01*x13241);
j4eval[0]=IKsign((((r10*x13244*(r00*r00)))+((r12*r22*sj3))+((r00*r01*r10*x13243))+((r21*x13242*(r01*r01)))+((r00*r01*r20*x13242))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13248=gconst19*gconst19;
IkReal x13249=gconst20*gconst20;
IkReal x13250=(gconst20*sj3);
IkReal x13251=((1.0)*cj3);
IkReal x13252=(r10*sj3);
IkReal x13253=(gconst19*r21);
IkReal x13254=(r11*r20);
IkReal x13255=(cj3*gconst20);
IkReal x13256=((1.0)*r10*r20);
IkReal x13257=(r21*x13248);
CheckValue<IkReal> x13258=IKPowWithIntegerCheck(IKsign((((r10*x13253*x13255))+(((-1.0)*r12*r22*x13251))+((gconst19*x13254*x13255))+(((-1.0)*r10*r20*x13249*x13251))+(((-1.0)*r11*x13251*x13257)))),-1);
if(!x13258.valid){
continue;
}
CheckValue<IkReal> x13259 = IKatan2WithCheck(IkReal((((gconst19*r22*x13252))+((r11*r22*x13250)))),IkReal(((((-1.0)*gconst19*x13250*x13256))+(((-1.0)*sj3*x13249*x13254))+((x13252*x13257))+((r11*x13250*x13253)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13258.value)))+(x13259.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13260=IKsin(j4);
IkReal x13261=IKcos(j4);
IkReal x13262=(sj1*sj2);
IkReal x13263=(gconst20*sj3);
IkReal x13264=(gconst19*r21);
IkReal x13265=(gconst20*r10);
IkReal x13266=(cj3*gconst19);
IkReal x13267=(gconst19*sj3);
IkReal x13268=((1.0)*cj1);
IkReal x13269=(cj3*gconst20);
IkReal x13270=(cj2*sj1);
IkReal x13271=(cj2*x13268);
IkReal x13272=((1.0)*x13261);
IkReal x13273=((1.0)*x13260);
IkReal x13274=(cj3*x13260);
IkReal x13275=(gconst19*x13260);
evalcond[0]=(((x13260*x13264))+(((-1.0)*r22*x13272))+(((-1.0)*gconst20*r20*x13273)));
evalcond[1]=((((-1.0)*gconst20*r00*x13273))+((r01*x13275))+(((-1.0)*r02*x13272)));
evalcond[2]=((1.0)+(((-1.0)*x13265*x13273))+((r11*x13275))+(((-1.0)*r12*x13272)));
evalcond[3]=(((r11*x13263))+((r12*x13274))+((r10*x13267))+((r11*x13261*x13266))+(((-1.0)*cj3*x13265*x13272)));
evalcond[4]=(((r10*x13261*x13263))+((r11*x13269))+(((-1.0)*r11*x13267*x13272))+((r10*x13266))+(((-1.0)*r12*sj3*x13273)));
evalcond[5]=(((r21*x13263))+((cj3*x13261*x13264))+((cj1*sj2))+((r20*x13267))+(((-1.0)*r20*x13269*x13272))+((r22*x13274))+x13270);
evalcond[6]=((((-1.0)*x13271))+((r01*x13261*x13266))+((r00*x13267))+((r01*x13263))+((r02*x13274))+(((-1.0)*r00*x13269*x13272))+x13262);
evalcond[7]=(((r20*x13261*x13263))+(((-1.0)*x13271))+((r21*x13269))+((r20*x13266))+(((-1.0)*r22*sj3*x13273))+x13262+(((-1.0)*sj3*x13264*x13272)));
evalcond[8]=((((-1.0)*sj2*x13268))+(((-1.0)*r01*x13267*x13272))+(((-1.0)*x13270))+((r00*x13266))+((r01*x13269))+((r00*x13261*x13263))+(((-1.0)*r02*sj3*x13273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13276=gconst19*gconst19;
IkReal x13277=gconst20*gconst20;
IkReal x13278=(r21*sj3);
IkReal x13279=(cj3*r11);
IkReal x13280=(gconst19*gconst20);
IkReal x13281=((1.0)*r10);
IkReal x13282=(cj3*r10);
IkReal x13283=(r20*x13277);
CheckValue<IkReal> x13284 = IKatan2WithCheck(IkReal((((gconst19*r22*x13282))+((gconst20*r22*x13279)))),IkReal(((((-1.0)*x13279*x13283))+((r21*x13279*x13280))+((r21*x13276*x13282))+(((-1.0)*cj3*r20*x13280*x13281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13284.valid){
continue;
}
CheckValue<IkReal> x13285=IKPowWithIntegerCheck(IKsign((((r11*x13276*x13278))+(((-1.0)*x13278*x13280*x13281))+(((-1.0)*r11*r20*sj3*x13280))+((r10*sj3*x13283))+((r12*r22*sj3)))),-1);
if(!x13285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13284.value)+(((1.5707963267949)*(x13285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13286=IKsin(j4);
IkReal x13287=IKcos(j4);
IkReal x13288=(sj1*sj2);
IkReal x13289=(gconst20*sj3);
IkReal x13290=(gconst19*r21);
IkReal x13291=(gconst20*r10);
IkReal x13292=(cj3*gconst19);
IkReal x13293=(gconst19*sj3);
IkReal x13294=((1.0)*cj1);
IkReal x13295=(cj3*gconst20);
IkReal x13296=(cj2*sj1);
IkReal x13297=(cj2*x13294);
IkReal x13298=((1.0)*x13287);
IkReal x13299=((1.0)*x13286);
IkReal x13300=(cj3*x13286);
IkReal x13301=(gconst19*x13286);
evalcond[0]=((((-1.0)*gconst20*r20*x13299))+((x13286*x13290))+(((-1.0)*r22*x13298)));
evalcond[1]=((((-1.0)*gconst20*r00*x13299))+((r01*x13301))+(((-1.0)*r02*x13298)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13298))+(((-1.0)*x13291*x13299))+((r11*x13301)));
evalcond[3]=(((r12*x13300))+((r11*x13289))+((r11*x13287*x13292))+((r10*x13293))+(((-1.0)*cj3*x13291*x13298)));
evalcond[4]=(((r11*x13295))+((r10*x13287*x13289))+((r10*x13292))+(((-1.0)*r11*x13293*x13298))+(((-1.0)*r12*sj3*x13299)));
evalcond[5]=(((r20*x13293))+((cj1*sj2))+((r22*x13300))+(((-1.0)*r20*x13295*x13298))+((cj3*x13287*x13290))+((r21*x13289))+x13296);
evalcond[6]=(((r01*x13287*x13292))+(((-1.0)*r00*x13295*x13298))+x13288+((r01*x13289))+((r02*x13300))+(((-1.0)*x13297))+((r00*x13293)));
evalcond[7]=(((r20*x13287*x13289))+((r20*x13292))+(((-1.0)*sj3*x13290*x13298))+(((-1.0)*r22*sj3*x13299))+x13288+(((-1.0)*x13297))+((r21*x13295)));
evalcond[8]=((((-1.0)*r01*x13293*x13298))+(((-1.0)*x13296))+((r00*x13287*x13289))+(((-1.0)*sj2*x13294))+(((-1.0)*r02*sj3*x13299))+((r00*x13292))+((r01*x13295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13302 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13302.valid){
continue;
}
CheckValue<IkReal> x13303=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13302.value)+(((1.5707963267949)*(x13303.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13304=IKsin(j4);
IkReal x13305=IKcos(j4);
IkReal x13306=(sj1*sj2);
IkReal x13307=(gconst20*sj3);
IkReal x13308=(gconst19*r21);
IkReal x13309=(gconst20*r10);
IkReal x13310=(cj3*gconst19);
IkReal x13311=(gconst19*sj3);
IkReal x13312=((1.0)*cj1);
IkReal x13313=(cj3*gconst20);
IkReal x13314=(cj2*sj1);
IkReal x13315=(cj2*x13312);
IkReal x13316=((1.0)*x13305);
IkReal x13317=((1.0)*x13304);
IkReal x13318=(cj3*x13304);
IkReal x13319=(gconst19*x13304);
evalcond[0]=((((-1.0)*gconst20*r20*x13317))+((x13304*x13308))+(((-1.0)*r22*x13316)));
evalcond[1]=((((-1.0)*gconst20*r00*x13317))+((r01*x13319))+(((-1.0)*r02*x13316)));
evalcond[2]=((1.0)+((r11*x13319))+(((-1.0)*x13309*x13317))+(((-1.0)*r12*x13316)));
evalcond[3]=(((r10*x13311))+(((-1.0)*cj3*x13309*x13316))+((r11*x13305*x13310))+((r11*x13307))+((r12*x13318)));
evalcond[4]=(((r11*x13313))+((r10*x13310))+((r10*x13305*x13307))+(((-1.0)*r11*x13311*x13316))+(((-1.0)*r12*sj3*x13317)));
evalcond[5]=(((r21*x13307))+((cj3*x13305*x13308))+((r20*x13311))+((cj1*sj2))+(((-1.0)*r20*x13313*x13316))+((r22*x13318))+x13314);
evalcond[6]=(((r00*x13311))+((r01*x13307))+(((-1.0)*r00*x13313*x13316))+((r01*x13305*x13310))+(((-1.0)*x13315))+x13306+((r02*x13318)));
evalcond[7]=((((-1.0)*r22*sj3*x13317))+(((-1.0)*sj3*x13308*x13316))+((r20*x13310))+(((-1.0)*x13315))+((r21*x13313))+((r20*x13305*x13307))+x13306);
evalcond[8]=((((-1.0)*r01*x13311*x13316))+(((-1.0)*sj2*x13312))+(((-1.0)*r02*sj3*x13317))+((r01*x13313))+((r00*x13310))+((r00*x13305*x13307))+(((-1.0)*x13314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13320=((-1.0)*r01);
IkReal x13322 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13322)==0){
continue;
}
IkReal x13321=pow(x13322,-0.5);
CheckValue<IkReal> x13323 = IKatan2WithCheck(IkReal(x13320),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13323.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13323.value))));
IkReal gconst22=(x13320*x13321);
IkReal gconst23=((1.0)*r00*x13321);
CheckValue<IkReal> x13324 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13324.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13324.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13325=((-1.0)*r01);
CheckValue<IkReal> x13328 = IKatan2WithCheck(IkReal(x13325),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13328.valid){
continue;
}
IkReal x13326=((1.0)*(x13328.value));
IkReal x13327=x13321;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13326)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13326)));
IkReal gconst22=(x13325*x13327);
IkReal gconst23=((1.0)*r00*x13327);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13329=((-1.0)*r01);
CheckValue<IkReal> x13332 = IKatan2WithCheck(IkReal(x13329),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13332.valid){
continue;
}
IkReal x13330=((1.0)*(x13332.value));
IkReal x13331=x13321;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13330)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13330)));
IkReal gconst22=(x13329*x13331);
IkReal gconst23=((1.0)*r00*x13331);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13333=gconst22*gconst22;
IkReal x13334=gconst23*gconst23;
IkReal x13335=(r21*sj3);
IkReal x13336=((1.0)*cj3);
IkReal x13337=(gconst23*r11);
IkReal x13338=(r22*sj3);
IkReal x13339=(gconst22*r10);
IkReal x13340=((1.0)*r20*sj3);
CheckValue<IkReal> x13341=IKPowWithIntegerCheck(IKsign((((cj3*gconst22*r20*x13337))+(((-1.0)*r12*r22*x13336))+(((-1.0)*r11*r21*x13333*x13336))+((cj3*gconst23*r21*x13339))+(((-1.0)*r10*r20*x13334*x13336)))),-1);
if(!x13341.valid){
continue;
}
CheckValue<IkReal> x13342 = IKatan2WithCheck(IkReal((((x13337*x13338))+((x13338*x13339)))),IkReal((((gconst22*x13335*x13337))+(((-1.0)*r11*x13334*x13340))+(((-1.0)*gconst23*x13339*x13340))+((r10*x13333*x13335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13341.value)))+(x13342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13343=IKsin(j4);
IkReal x13344=IKcos(j4);
IkReal x13345=(sj1*sj2);
IkReal x13346=(gconst23*sj3);
IkReal x13347=(gconst22*sj3);
IkReal x13348=(cj2*sj1);
IkReal x13349=((1.0)*cj1);
IkReal x13350=(cj3*gconst23);
IkReal x13351=(cj3*gconst22);
IkReal x13352=(cj2*x13349);
IkReal x13353=((1.0)*x13344);
IkReal x13354=(cj3*x13343);
IkReal x13355=(gconst22*x13343);
IkReal x13356=((1.0)*sj3*x13343);
IkReal x13357=(x13344*x13351);
IkReal x13358=((1.0)*gconst23*x13343);
evalcond[0]=((((-1.0)*r22*x13353))+((r21*x13355))+(((-1.0)*r20*x13358)));
evalcond[1]=((((-1.0)*r02*x13353))+(((-1.0)*r00*x13358))+((r01*x13355)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13353))+((r11*x13355))+(((-1.0)*r10*x13358)));
evalcond[3]=(((r10*x13347))+((r11*x13346))+(((-1.0)*r10*x13350*x13353))+((r11*x13357))+((r12*x13354)));
evalcond[4]=((((-1.0)*r11*x13347*x13353))+(((-1.0)*r12*x13356))+((r10*x13351))+((r10*x13344*x13346))+((r11*x13350)));
evalcond[5]=(((r22*x13354))+((cj1*sj2))+((r21*x13346))+((r21*x13357))+((r20*x13347))+(((-1.0)*r20*x13350*x13353))+x13348);
evalcond[6]=((((-1.0)*r00*x13350*x13353))+((r02*x13354))+((r01*x13357))+((r00*x13347))+((r01*x13346))+(((-1.0)*x13352))+x13345);
evalcond[7]=((((-1.0)*r22*x13356))+(((-1.0)*r21*x13347*x13353))+((r20*x13344*x13346))+((r20*x13351))+((r21*x13350))+(((-1.0)*x13352))+x13345);
evalcond[8]=((((-1.0)*r02*x13356))+(((-1.0)*sj2*x13349))+((r00*x13344*x13346))+(((-1.0)*x13348))+((r01*x13350))+((r00*x13351))+(((-1.0)*r01*x13347*x13353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13359=((1.0)*gconst23);
CheckValue<IkReal> x13360=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13359)))),-1);
if(!x13360.valid){
continue;
}
CheckValue<IkReal> x13361 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13359)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13360.value)))+(x13361.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13362=IKsin(j4);
IkReal x13363=IKcos(j4);
IkReal x13364=(sj1*sj2);
IkReal x13365=(gconst23*sj3);
IkReal x13366=(gconst22*sj3);
IkReal x13367=(cj2*sj1);
IkReal x13368=((1.0)*cj1);
IkReal x13369=(cj3*gconst23);
IkReal x13370=(cj3*gconst22);
IkReal x13371=(cj2*x13368);
IkReal x13372=((1.0)*x13363);
IkReal x13373=(cj3*x13362);
IkReal x13374=(gconst22*x13362);
IkReal x13375=((1.0)*sj3*x13362);
IkReal x13376=(x13363*x13370);
IkReal x13377=((1.0)*gconst23*x13362);
evalcond[0]=((((-1.0)*r22*x13372))+(((-1.0)*r20*x13377))+((r21*x13374)));
evalcond[1]=((((-1.0)*r00*x13377))+((r01*x13374))+(((-1.0)*r02*x13372)));
evalcond[2]=((1.0)+((r11*x13374))+(((-1.0)*r10*x13377))+(((-1.0)*r12*x13372)));
evalcond[3]=(((r10*x13366))+((r12*x13373))+((r11*x13376))+((r11*x13365))+(((-1.0)*r10*x13369*x13372)));
evalcond[4]=(((r10*x13370))+((r10*x13363*x13365))+((r11*x13369))+(((-1.0)*r11*x13366*x13372))+(((-1.0)*r12*x13375)));
evalcond[5]=(((r20*x13366))+((cj1*sj2))+(((-1.0)*r20*x13369*x13372))+((r22*x13373))+((r21*x13365))+((r21*x13376))+x13367);
evalcond[6]=(((r02*x13373))+((r01*x13365))+((r01*x13376))+((r00*x13366))+(((-1.0)*r00*x13369*x13372))+(((-1.0)*x13371))+x13364);
evalcond[7]=((((-1.0)*r22*x13375))+((r20*x13370))+((r20*x13363*x13365))+(((-1.0)*r21*x13366*x13372))+(((-1.0)*x13371))+((r21*x13369))+x13364);
evalcond[8]=((((-1.0)*x13367))+(((-1.0)*sj2*x13368))+((r01*x13369))+((r00*x13370))+((r00*x13363*x13365))+(((-1.0)*r02*x13375))+(((-1.0)*r01*x13366*x13372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13378=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13378.valid){
continue;
}
CheckValue<IkReal> x13379 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13378.value)))+(x13379.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13380=IKsin(j4);
IkReal x13381=IKcos(j4);
IkReal x13382=(sj1*sj2);
IkReal x13383=(gconst23*sj3);
IkReal x13384=(gconst22*sj3);
IkReal x13385=(cj2*sj1);
IkReal x13386=((1.0)*cj1);
IkReal x13387=(cj3*gconst23);
IkReal x13388=(cj3*gconst22);
IkReal x13389=(cj2*x13386);
IkReal x13390=((1.0)*x13381);
IkReal x13391=(cj3*x13380);
IkReal x13392=(gconst22*x13380);
IkReal x13393=((1.0)*sj3*x13380);
IkReal x13394=(x13381*x13388);
IkReal x13395=((1.0)*gconst23*x13380);
evalcond[0]=(((r21*x13392))+(((-1.0)*r22*x13390))+(((-1.0)*r20*x13395)));
evalcond[1]=(((r01*x13392))+(((-1.0)*r00*x13395))+(((-1.0)*r02*x13390)));
evalcond[2]=((1.0)+((r11*x13392))+(((-1.0)*r10*x13395))+(((-1.0)*r12*x13390)));
evalcond[3]=(((r11*x13394))+((r11*x13383))+((r10*x13384))+((r12*x13391))+(((-1.0)*r10*x13387*x13390)));
evalcond[4]=(((r11*x13387))+(((-1.0)*r11*x13384*x13390))+((r10*x13388))+((r10*x13381*x13383))+(((-1.0)*r12*x13393)));
evalcond[5]=(((r21*x13394))+((r20*x13384))+((cj1*sj2))+((r22*x13391))+(((-1.0)*r20*x13387*x13390))+x13385+((r21*x13383)));
evalcond[6]=((((-1.0)*r00*x13387*x13390))+((r01*x13383))+((r01*x13394))+((r00*x13384))+(((-1.0)*x13389))+((r02*x13391))+x13382);
evalcond[7]=((((-1.0)*r22*x13393))+((r20*x13388))+((r20*x13381*x13383))+(((-1.0)*x13389))+(((-1.0)*r21*x13384*x13390))+x13382+((r21*x13387)));
evalcond[8]=((((-1.0)*x13385))+((r01*x13387))+((r00*x13388))+(((-1.0)*r01*x13384*x13390))+(((-1.0)*r02*x13393))+(((-1.0)*sj2*x13386))+((r00*x13381*x13383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13397 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13397)==0){
continue;
}
IkReal x13396=pow(x13397,-0.5);
CheckValue<IkReal> x13398 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13398.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13398.value));
IkReal gconst25=((-1.0)*r21*x13396);
IkReal gconst26=(r20*x13396);
CheckValue<IkReal> x13399 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13399.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13399.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13402 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13402.valid){
continue;
}
IkReal x13400=((-1.0)*(x13402.value));
IkReal x13401=x13396;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13400;
IkReal gconst24=x13400;
IkReal gconst25=((-1.0)*r21*x13401);
IkReal gconst26=(r20*x13401);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13405 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13405.valid){
continue;
}
IkReal x13403=((-1.0)*(x13405.value));
IkReal x13404=x13396;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13403;
IkReal gconst24=x13403;
IkReal gconst25=((-1.0)*r21*x13404);
IkReal gconst26=(r20*x13404);
CheckValue<IkReal> x13413=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13413.valid){
continue;
}
IkReal x13406=x13413.value;
IkReal x13407=(sj3*x13406);
IkReal x13408=(r11*x13407);
IkReal x13409=(r00*x13407);
IkReal x13410=(r01*x13407);
IkReal x13411=(r10*x13407);
IkReal x13412=(r20*r21*x13407);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x13408*(r21*r21)))+((r00*r20*r21*x13408))+((r10*r20*r21*x13410))+((r10*x13409*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13414=gconst25*gconst25;
IkReal x13415=gconst26*gconst26;
IkReal x13416=(r00*r11);
IkReal x13417=(r01*r10);
IkReal x13418=(r02*sj3);
IkReal x13419=(gconst25*r10);
IkReal x13420=(gconst26*r11);
IkReal x13421=((1.0)*sj3);
IkReal x13422=((1.0)*cj3);
IkReal x13423=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13424 = IKatan2WithCheck(IkReal((((x13418*x13419))+((x13418*x13420)))),IkReal(((((-1.0)*gconst26*r00*x13419*x13421))+((gconst25*r01*sj3*x13420))+((sj3*x13414*x13417))+(((-1.0)*x13415*x13416*x13421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13424.valid){
continue;
}
CheckValue<IkReal> x13425=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x13422))+((x13417*x13423))+(((-1.0)*r00*r10*x13415*x13422))+(((-1.0)*r01*r11*x13414*x13422))+((x13416*x13423)))),-1);
if(!x13425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13424.value)+(((1.5707963267949)*(x13425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13426=IKsin(j4);
IkReal x13427=IKcos(j4);
IkReal x13428=(sj1*sj2);
IkReal x13429=(gconst26*sj3);
IkReal x13430=(gconst25*sj3);
IkReal x13431=(gconst26*r10);
IkReal x13432=(gconst25*r11);
IkReal x13433=(cj3*gconst25);
IkReal x13434=((1.0)*cj2);
IkReal x13435=(cj1*sj2);
IkReal x13436=(gconst26*r00);
IkReal x13437=(gconst26*r20);
IkReal x13438=(cj3*gconst26);
IkReal x13439=(cj1*x13434);
IkReal x13440=((1.0)*x13427);
IkReal x13441=((1.0)*x13426);
IkReal x13442=(cj3*x13426);
IkReal x13443=(gconst25*x13426);
evalcond[0]=((((-1.0)*x13437*x13441))+(((-1.0)*r22*x13440))+((r21*x13443)));
evalcond[1]=((((-1.0)*x13436*x13441))+(((-1.0)*r02*x13440))+((r01*x13443)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13440))+(((-1.0)*x13431*x13441))+((x13426*x13432)));
evalcond[3]=(((cj3*x13427*x13432))+((r11*x13429))+(((-1.0)*cj3*x13431*x13440))+((r12*x13442))+((r10*x13430)));
evalcond[4]=((((-1.0)*r11*x13430*x13440))+(((-1.0)*r12*sj3*x13441))+((r11*x13438))+((r10*x13427*x13429))+((r10*x13433)));
evalcond[5]=(((r22*x13442))+x13435+((cj2*sj1))+((r21*x13427*x13433))+((r21*x13429))+((r20*x13430))+(((-1.0)*cj3*x13437*x13440)));
evalcond[6]=(x13428+((r01*x13427*x13433))+((r02*x13442))+(((-1.0)*x13439))+(((-1.0)*cj3*x13436*x13440))+((r01*x13429))+((r00*x13430)));
evalcond[7]=(x13428+(((-1.0)*r22*sj3*x13441))+((r20*x13427*x13429))+(((-1.0)*x13439))+((r21*x13438))+((r20*x13433))+(((-1.0)*r21*x13430*x13440)));
evalcond[8]=(((r01*x13438))+(((-1.0)*x13435))+(((-1.0)*sj1*x13434))+((r00*x13427*x13429))+(((-1.0)*r02*sj3*x13441))+((r00*x13433))+(((-1.0)*r01*x13430*x13440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13444=gconst26*gconst26;
IkReal x13445=gconst25*gconst25;
IkReal x13446=(r01*r10);
IkReal x13447=(cj3*r11);
IkReal x13448=(gconst25*gconst26);
IkReal x13449=(cj3*r10);
IkReal x13450=(r00*x13444);
IkReal x13451=((1.0)*sj3*x13448);
CheckValue<IkReal> x13452 = IKatan2WithCheck(IkReal((((gconst26*r02*x13447))+((gconst25*r02*x13449)))),IkReal((((cj3*x13445*x13446))+(((-1.0)*r00*x13448*x13449))+((r01*x13447*x13448))+(((-1.0)*x13447*x13450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13452.valid){
continue;
}
CheckValue<IkReal> x13453=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*r00*r11*x13451))+((r01*r11*sj3*x13445))+(((-1.0)*x13446*x13451))+((r10*sj3*x13450)))),-1);
if(!x13453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13452.value)+(((1.5707963267949)*(x13453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13454=IKsin(j4);
IkReal x13455=IKcos(j4);
IkReal x13456=(sj1*sj2);
IkReal x13457=(gconst26*sj3);
IkReal x13458=(gconst25*sj3);
IkReal x13459=(gconst26*r10);
IkReal x13460=(gconst25*r11);
IkReal x13461=(cj3*gconst25);
IkReal x13462=((1.0)*cj2);
IkReal x13463=(cj1*sj2);
IkReal x13464=(gconst26*r00);
IkReal x13465=(gconst26*r20);
IkReal x13466=(cj3*gconst26);
IkReal x13467=(cj1*x13462);
IkReal x13468=((1.0)*x13455);
IkReal x13469=((1.0)*x13454);
IkReal x13470=(cj3*x13454);
IkReal x13471=(gconst25*x13454);
evalcond[0]=((((-1.0)*r22*x13468))+(((-1.0)*x13465*x13469))+((r21*x13471)));
evalcond[1]=(((r01*x13471))+(((-1.0)*x13464*x13469))+(((-1.0)*r02*x13468)));
evalcond[2]=((1.0)+(((-1.0)*x13459*x13469))+((x13454*x13460))+(((-1.0)*r12*x13468)));
evalcond[3]=(((r10*x13458))+(((-1.0)*cj3*x13459*x13468))+((cj3*x13455*x13460))+((r12*x13470))+((r11*x13457)));
evalcond[4]=(((r10*x13455*x13457))+((r10*x13461))+(((-1.0)*r11*x13458*x13468))+((r11*x13466))+(((-1.0)*r12*sj3*x13469)));
evalcond[5]=(x13463+((cj2*sj1))+((r20*x13458))+((r21*x13457))+((r22*x13470))+(((-1.0)*cj3*x13465*x13468))+((r21*x13455*x13461)));
evalcond[6]=(x13456+(((-1.0)*cj3*x13464*x13468))+((r01*x13455*x13461))+(((-1.0)*x13467))+((r02*x13470))+((r01*x13457))+((r00*x13458)));
evalcond[7]=(x13456+((r20*x13461))+((r21*x13466))+(((-1.0)*x13467))+((r20*x13455*x13457))+(((-1.0)*r21*x13458*x13468))+(((-1.0)*r22*sj3*x13469)));
evalcond[8]=((((-1.0)*r02*sj3*x13469))+(((-1.0)*r01*x13458*x13468))+((r00*x13455*x13457))+(((-1.0)*sj1*x13462))+(((-1.0)*x13463))+((r01*x13466))+((r00*x13461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13472=((1.0)*gconst26);
CheckValue<IkReal> x13473=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13472))+(((-1.0)*gconst25*r00)))),-1);
if(!x13473.valid){
continue;
}
CheckValue<IkReal> x13474 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst25*r21))+(((-1.0)*r20*x13472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13473.value)))+(x13474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13475=IKsin(j4);
IkReal x13476=IKcos(j4);
IkReal x13477=(sj1*sj2);
IkReal x13478=(gconst26*sj3);
IkReal x13479=(gconst25*sj3);
IkReal x13480=(gconst26*r10);
IkReal x13481=(gconst25*r11);
IkReal x13482=(cj3*gconst25);
IkReal x13483=((1.0)*cj2);
IkReal x13484=(cj1*sj2);
IkReal x13485=(gconst26*r00);
IkReal x13486=(gconst26*r20);
IkReal x13487=(cj3*gconst26);
IkReal x13488=(cj1*x13483);
IkReal x13489=((1.0)*x13476);
IkReal x13490=((1.0)*x13475);
IkReal x13491=(cj3*x13475);
IkReal x13492=(gconst25*x13475);
evalcond[0]=((((-1.0)*r22*x13489))+(((-1.0)*x13486*x13490))+((r21*x13492)));
evalcond[1]=((((-1.0)*x13485*x13490))+(((-1.0)*r02*x13489))+((r01*x13492)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13489))+((x13475*x13481))+(((-1.0)*x13480*x13490)));
evalcond[3]=(((r11*x13478))+((r10*x13479))+(((-1.0)*cj3*x13480*x13489))+((cj3*x13476*x13481))+((r12*x13491)));
evalcond[4]=(((r10*x13476*x13478))+(((-1.0)*r12*sj3*x13490))+((r11*x13487))+((r10*x13482))+(((-1.0)*r11*x13479*x13489)));
evalcond[5]=(x13484+((cj2*sj1))+((r22*x13491))+((r21*x13476*x13482))+(((-1.0)*cj3*x13486*x13489))+((r21*x13478))+((r20*x13479)));
evalcond[6]=(x13477+((r02*x13491))+(((-1.0)*x13488))+((r00*x13479))+((r01*x13478))+(((-1.0)*cj3*x13485*x13489))+((r01*x13476*x13482)));
evalcond[7]=(x13477+(((-1.0)*x13488))+(((-1.0)*r22*sj3*x13490))+((r20*x13482))+(((-1.0)*r21*x13479*x13489))+((r20*x13476*x13478))+((r21*x13487)));
evalcond[8]=((((-1.0)*sj1*x13483))+(((-1.0)*r02*sj3*x13490))+(((-1.0)*x13484))+((r00*x13476*x13478))+((r00*x13482))+((r01*x13487))+(((-1.0)*r01*x13479*x13489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13494 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13494)==0){
continue;
}
IkReal x13493=pow(x13494,-0.5);
CheckValue<IkReal> x13495 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13495.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13495.value))));
IkReal gconst28=((1.0)*r21*x13493);
IkReal gconst29=((-1.0)*r20*x13493);
CheckValue<IkReal> x13496 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13496.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13496.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13499 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13499.valid){
continue;
}
IkReal x13497=((1.0)*(x13499.value));
IkReal x13498=x13493;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13497)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13497)));
IkReal gconst28=((1.0)*r21*x13498);
IkReal gconst29=((-1.0)*r20*x13498);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13502 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13502.valid){
continue;
}
IkReal x13500=((1.0)*(x13502.value));
IkReal x13501=x13493;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13500)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13500)));
IkReal gconst28=((1.0)*r21*x13501);
IkReal gconst29=((-1.0)*r20*x13501);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13505 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13505.valid){
continue;
}
IkReal x13503=((1.0)*(x13505.value));
IkReal x13504=x13493;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13503)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13503)));
IkReal gconst28=((1.0)*r21*x13504);
IkReal gconst29=((-1.0)*r20*x13504);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13508 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13508.valid){
continue;
}
IkReal x13506=((1.0)*(x13508.value));
IkReal x13507=x13493;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13506)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13506)));
IkReal gconst28=((1.0)*r21*x13507);
IkReal gconst29=((-1.0)*r20*x13507);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13511 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13511.valid){
continue;
}
IkReal x13509=((1.0)*(x13511.value));
IkReal x13510=x13493;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13509)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13509)));
IkReal gconst28=((1.0)*r21*x13510);
IkReal gconst29=((-1.0)*r20*x13510);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13514 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13514.valid){
continue;
}
IkReal x13512=((1.0)*(x13514.value));
IkReal x13513=x13493;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13512)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13512)));
IkReal gconst28=((1.0)*r21*x13513);
IkReal gconst29=((-1.0)*r20*x13513);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13515=(gconst29*r10);
IkReal x13516=(gconst28*r11);
CheckValue<IkReal> x13517=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13515*x13516))+(x13515*x13515)+(x13516*x13516))),-1);
if(!x13517.valid){
continue;
}
CheckValue<IkReal> x13518 = IKatan2WithCheck(IkReal((x13515+(((-1.0)*x13516)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13517.value)))+(x13518.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13519=IKsin(j4);
IkReal x13520=IKcos(j4);
IkReal x13521=(gconst28*r11);
IkReal x13522=((1.0)*cj2);
IkReal x13523=((1.0)*x13520);
IkReal x13524=(gconst29*x13520);
IkReal x13525=(gconst28*x13519);
IkReal x13526=((1.0)*x13519);
IkReal x13527=(gconst29*x13526);
evalcond[0]=(((r21*x13525))+(((-1.0)*r22*x13523))+(((-1.0)*r20*x13527)));
evalcond[1]=(((r01*x13525))+(((-1.0)*r00*x13527))+(((-1.0)*r02*x13523)));
evalcond[2]=((((-1.0)*r12*x13526))+(((-1.0)*x13521*x13523))+((r10*x13524)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13523))+((x13519*x13521))+(((-1.0)*r10*x13527)));
evalcond[4]=((((-1.0)*r22*x13526))+((r20*x13524))+((sj1*sj2))+(((-1.0)*cj1*x13522))+(((-1.0)*gconst28*r21*x13523)));
evalcond[5]=((((-1.0)*sj1*x13522))+(((-1.0)*gconst28*r01*x13523))+(((-1.0)*cj1*sj2))+((r00*x13524))+(((-1.0)*r02*x13526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13528=((1.0)*gconst29);
CheckValue<IkReal> x13529 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13528))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13529.valid){
continue;
}
CheckValue<IkReal> x13530=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13528)))),-1);
if(!x13530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13529.value)+(((1.5707963267949)*(x13530.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13531=IKsin(j4);
IkReal x13532=IKcos(j4);
IkReal x13533=(gconst28*r11);
IkReal x13534=((1.0)*cj2);
IkReal x13535=((1.0)*x13532);
IkReal x13536=(gconst29*x13532);
IkReal x13537=(gconst28*x13531);
IkReal x13538=((1.0)*x13531);
IkReal x13539=(gconst29*x13538);
evalcond[0]=((((-1.0)*r22*x13535))+(((-1.0)*r20*x13539))+((r21*x13537)));
evalcond[1]=((((-1.0)*r02*x13535))+(((-1.0)*r00*x13539))+((r01*x13537)));
evalcond[2]=((((-1.0)*r12*x13538))+(((-1.0)*x13533*x13535))+((r10*x13536)));
evalcond[3]=((1.0)+((x13531*x13533))+(((-1.0)*r12*x13535))+(((-1.0)*r10*x13539)));
evalcond[4]=((((-1.0)*r22*x13538))+((r20*x13536))+(((-1.0)*cj1*x13534))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13535)));
evalcond[5]=((((-1.0)*sj1*x13534))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r01*x13535))+(((-1.0)*r02*x13538))+((r00*x13536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13540=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13540.valid){
continue;
}
CheckValue<IkReal> x13541 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13540.value)))+(x13541.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13542=IKsin(j4);
IkReal x13543=IKcos(j4);
IkReal x13544=(gconst28*r11);
IkReal x13545=((1.0)*cj2);
IkReal x13546=((1.0)*x13543);
IkReal x13547=(gconst29*x13543);
IkReal x13548=(gconst28*x13542);
IkReal x13549=((1.0)*x13542);
IkReal x13550=(gconst29*x13549);
evalcond[0]=(((r21*x13548))+(((-1.0)*r22*x13546))+(((-1.0)*r20*x13550)));
evalcond[1]=(((r01*x13548))+(((-1.0)*r00*x13550))+(((-1.0)*r02*x13546)));
evalcond[2]=((((-1.0)*x13544*x13546))+((r10*x13547))+(((-1.0)*r12*x13549)));
evalcond[3]=((1.0)+((x13542*x13544))+(((-1.0)*r10*x13550))+(((-1.0)*r12*x13546)));
evalcond[4]=((((-1.0)*gconst28*r21*x13546))+((sj1*sj2))+((r20*x13547))+(((-1.0)*cj1*x13545))+(((-1.0)*r22*x13549)));
evalcond[5]=((((-1.0)*gconst28*r01*x13546))+((r00*x13547))+(((-1.0)*r02*x13549))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13553 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13553.valid){
continue;
}
IkReal x13551=((1.0)*(x13553.value));
IkReal x13552=x13493;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13551)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13551)));
IkReal gconst28=((1.0)*r21*x13552);
IkReal gconst29=((-1.0)*r20*x13552);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13556 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13556.valid){
continue;
}
IkReal x13554=((1.0)*(x13556.value));
IkReal x13555=x13493;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13554)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13554)));
IkReal gconst28=((1.0)*r21*x13555);
IkReal gconst29=((-1.0)*r20*x13555);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13559 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13559.valid){
continue;
}
IkReal x13557=((1.0)*(x13559.value));
IkReal x13558=x13493;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13557)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13557)));
IkReal gconst28=((1.0)*r21*x13558);
IkReal gconst29=((-1.0)*r20*x13558);
IkReal x13560=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13564=IKPowWithIntegerCheck(x13560,-1);
if(!x13564.valid){
continue;
}
IkReal x13561=x13564.value;
IkReal x13562=((1.0)*x13561);
IkReal x13563=((((-1.0)*x13562*(r11*r11)*(r21*r21)))+(((-1.0)*x13562*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x13561)));
j4eval[0]=x13563;
j4eval[1]=r12;
j4eval[2]=x13560;
j4eval[3]=IKsign(x13563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13565=(gconst28*r11);
IkReal x13566=(gconst29*r10);
CheckValue<IkReal> x13567 = IKatan2WithCheck(IkReal((x13565+(((-1.0)*x13566)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13567.valid){
continue;
}
CheckValue<IkReal> x13568=IKPowWithIntegerCheck(IKsign(((((2.0)*x13565*x13566))+(((-1.0)*(x13565*x13565)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13566*x13566))))),-1);
if(!x13568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13567.value)+(((1.5707963267949)*(x13568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13569=IKcos(j4);
IkReal x13570=IKsin(j4);
IkReal x13571=(gconst29*r10);
IkReal x13572=(gconst29*r20);
IkReal x13573=(gconst28*r21);
IkReal x13574=((1.0)*cj2);
IkReal x13575=(gconst29*r00);
IkReal x13576=((1.0)*x13569);
IkReal x13577=((1.0)*x13570);
IkReal x13578=(gconst28*x13569);
IkReal x13579=(gconst28*x13570);
evalcond[0]=(((r12*x13570))+(((-1.0)*x13571*x13576))+((r11*x13578)));
evalcond[1]=((((-1.0)*r22*x13576))+(((-1.0)*x13572*x13577))+((x13570*x13573)));
evalcond[2]=((((-1.0)*r02*x13576))+(((-1.0)*x13575*x13577))+((r01*x13579)));
evalcond[3]=((1.0)+(((-1.0)*x13571*x13577))+((r11*x13579))+(((-1.0)*r12*x13576)));
evalcond[4]=(((x13569*x13573))+(((-1.0)*x13572*x13576))+((sj1*sj2))+(((-1.0)*cj1*x13574))+((r22*x13570)));
evalcond[5]=((((-1.0)*sj1*x13574))+(((-1.0)*cj1*sj2))+((r02*x13570))+(((-1.0)*x13575*x13576))+((r01*x13578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13580=((1.0)*gconst29);
CheckValue<IkReal> x13581=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13580))+(((-1.0)*gconst28*r00)))),-1);
if(!x13581.valid){
continue;
}
CheckValue<IkReal> x13582 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13580))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13581.value)))+(x13582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13583=IKcos(j4);
IkReal x13584=IKsin(j4);
IkReal x13585=(gconst29*r10);
IkReal x13586=(gconst29*r20);
IkReal x13587=(gconst28*r21);
IkReal x13588=((1.0)*cj2);
IkReal x13589=(gconst29*r00);
IkReal x13590=((1.0)*x13583);
IkReal x13591=((1.0)*x13584);
IkReal x13592=(gconst28*x13583);
IkReal x13593=(gconst28*x13584);
evalcond[0]=(((r11*x13592))+((r12*x13584))+(((-1.0)*x13585*x13590)));
evalcond[1]=((((-1.0)*x13586*x13591))+((x13584*x13587))+(((-1.0)*r22*x13590)));
evalcond[2]=(((r01*x13593))+(((-1.0)*x13589*x13591))+(((-1.0)*r02*x13590)));
evalcond[3]=((1.0)+((r11*x13593))+(((-1.0)*x13585*x13591))+(((-1.0)*r12*x13590)));
evalcond[4]=(((x13583*x13587))+((sj1*sj2))+(((-1.0)*x13586*x13590))+(((-1.0)*cj1*x13588))+((r22*x13584)));
evalcond[5]=(((r01*x13592))+(((-1.0)*x13589*x13590))+(((-1.0)*sj1*x13588))+(((-1.0)*cj1*sj2))+((r02*x13584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13594=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13594.valid){
continue;
}
CheckValue<IkReal> x13595 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13594.value)))+(x13595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13596=IKcos(j4);
IkReal x13597=IKsin(j4);
IkReal x13598=(gconst29*r10);
IkReal x13599=(gconst29*r20);
IkReal x13600=(gconst28*r21);
IkReal x13601=((1.0)*cj2);
IkReal x13602=(gconst29*r00);
IkReal x13603=((1.0)*x13596);
IkReal x13604=((1.0)*x13597);
IkReal x13605=(gconst28*x13596);
IkReal x13606=(gconst28*x13597);
evalcond[0]=(((r11*x13605))+(((-1.0)*x13598*x13603))+((r12*x13597)));
evalcond[1]=((((-1.0)*x13599*x13604))+(((-1.0)*r22*x13603))+((x13597*x13600)));
evalcond[2]=((((-1.0)*r02*x13603))+((r01*x13606))+(((-1.0)*x13602*x13604)));
evalcond[3]=((1.0)+((r11*x13606))+(((-1.0)*r12*x13603))+(((-1.0)*x13598*x13604)));
evalcond[4]=((((-1.0)*x13599*x13603))+((r22*x13597))+(((-1.0)*cj1*x13601))+((sj1*sj2))+((x13596*x13600)));
evalcond[5]=((((-1.0)*sj1*x13601))+(((-1.0)*cj1*sj2))+((r02*x13597))+((r01*x13605))+(((-1.0)*x13602*x13603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13609 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13609.valid){
continue;
}
IkReal x13607=((1.0)*(x13609.value));
IkReal x13608=x13493;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13607)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13607)));
IkReal gconst28=((1.0)*r21*x13608);
IkReal gconst29=((-1.0)*r20*x13608);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13612 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13612.valid){
continue;
}
IkReal x13610=((1.0)*(x13612.value));
IkReal x13611=x13493;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13610)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13610)));
IkReal gconst28=((1.0)*r21*x13611);
IkReal gconst29=((-1.0)*r20*x13611);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13615 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13615.valid){
continue;
}
IkReal x13613=((1.0)*(x13615.value));
IkReal x13614=x13493;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13613)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13613)));
IkReal gconst28=((1.0)*r21*x13614);
IkReal gconst29=((-1.0)*r20*x13614);
IkReal x13616=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13620=IKPowWithIntegerCheck(x13616,-1);
if(!x13620.valid){
continue;
}
IkReal x13617=x13620.value;
IkReal x13618=((1.0)*x13617);
IkReal x13619=((((-2.0)*r10*r11*r20*r21*x13617))+(((-1.0)*x13618*(r11*r11)*(r21*r21)))+(((-1.0)*x13618*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12))));
j4eval[0]=x13619;
j4eval[1]=r12;
j4eval[2]=x13616;
j4eval[3]=IKsign(x13619);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13621=(gconst28*r11);
IkReal x13622=(gconst29*r10);
CheckValue<IkReal> x13623=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13622*x13622)))+(((2.0)*x13621*x13622))+(((-1.0)*(x13621*x13621)))+(((-1.0)*(r12*r12))))),-1);
if(!x13623.valid){
continue;
}
CheckValue<IkReal> x13624 = IKatan2WithCheck(IkReal((x13621+(((-1.0)*x13622)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13623.value)))+(x13624.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13625=IKcos(j4);
IkReal x13626=IKsin(j4);
IkReal x13627=(gconst29*r10);
IkReal x13628=(gconst29*r20);
IkReal x13629=(gconst28*r21);
IkReal x13630=(gconst29*r00);
IkReal x13631=((1.0)*x13625);
IkReal x13632=((1.0)*x13626);
IkReal x13633=(gconst28*x13625);
IkReal x13634=(gconst28*x13626);
evalcond[0]=(((r11*x13633))+((r12*x13626))+(((-1.0)*x13627*x13631)));
evalcond[1]=(((x13626*x13629))+(((-1.0)*r22*x13631))+(((-1.0)*x13628*x13632)));
evalcond[2]=((((-1.0)*r02*x13631))+(((-1.0)*x13630*x13632))+((r01*x13634)));
evalcond[3]=((1.0)+((r11*x13634))+(((-1.0)*x13627*x13632))+(((-1.0)*r12*x13631)));
evalcond[4]=(((cj2*sj1))+((x13625*x13629))+((cj1*sj2))+((r22*x13626))+(((-1.0)*x13628*x13631)));
evalcond[5]=((((-1.0)*x13630*x13631))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13626))+((r01*x13633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13635=((1.0)*gconst29);
CheckValue<IkReal> x13636 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13636.valid){
continue;
}
CheckValue<IkReal> x13637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13635))+(((-1.0)*gconst28*r00)))),-1);
if(!x13637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13636.value)+(((1.5707963267949)*(x13637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13638=IKcos(j4);
IkReal x13639=IKsin(j4);
IkReal x13640=(gconst29*r10);
IkReal x13641=(gconst29*r20);
IkReal x13642=(gconst28*r21);
IkReal x13643=(gconst29*r00);
IkReal x13644=((1.0)*x13638);
IkReal x13645=((1.0)*x13639);
IkReal x13646=(gconst28*x13638);
IkReal x13647=(gconst28*x13639);
evalcond[0]=(((r12*x13639))+((r11*x13646))+(((-1.0)*x13640*x13644)));
evalcond[1]=(((x13639*x13642))+(((-1.0)*x13641*x13645))+(((-1.0)*r22*x13644)));
evalcond[2]=((((-1.0)*x13643*x13645))+((r01*x13647))+(((-1.0)*r02*x13644)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13644))+((r11*x13647))+(((-1.0)*x13640*x13645)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13641*x13644))+((cj1*sj2))+((r22*x13639))+((x13638*x13642)));
evalcond[5]=((((-1.0)*x13643*x13644))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13639))+((r01*x13646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13648=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13648.valid){
continue;
}
CheckValue<IkReal> x13649 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13648.value)))+(x13649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13650=IKcos(j4);
IkReal x13651=IKsin(j4);
IkReal x13652=(gconst29*r10);
IkReal x13653=(gconst29*r20);
IkReal x13654=(gconst28*r21);
IkReal x13655=(gconst29*r00);
IkReal x13656=((1.0)*x13650);
IkReal x13657=((1.0)*x13651);
IkReal x13658=(gconst28*x13650);
IkReal x13659=(gconst28*x13651);
evalcond[0]=(((r12*x13651))+(((-1.0)*x13652*x13656))+((r11*x13658)));
evalcond[1]=(((x13651*x13654))+(((-1.0)*r22*x13656))+(((-1.0)*x13653*x13657)));
evalcond[2]=(((r01*x13659))+(((-1.0)*r02*x13656))+(((-1.0)*x13655*x13657)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13656))+(((-1.0)*x13652*x13657))+((r11*x13659)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x13651))+(((-1.0)*x13653*x13656))+((x13650*x13654)));
evalcond[5]=(((r01*x13658))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13655*x13656))+((r02*x13651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13662 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13662.valid){
continue;
}
IkReal x13660=((1.0)*(x13662.value));
IkReal x13661=x13493;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13660)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13660)));
IkReal gconst28=((1.0)*r21*x13661);
IkReal gconst29=((-1.0)*r20*x13661);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13665 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13665.valid){
continue;
}
IkReal x13663=((1.0)*(x13665.value));
IkReal x13664=x13493;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13663)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13663)));
IkReal gconst28=((1.0)*r21*x13664);
IkReal gconst29=((-1.0)*r20*x13664);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13668 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13668.valid){
continue;
}
IkReal x13666=((1.0)*(x13668.value));
IkReal x13667=x13493;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13666)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13666)));
IkReal gconst28=((1.0)*r21*x13667);
IkReal gconst29=((-1.0)*r20*x13667);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13669=(gconst29*r10);
IkReal x13670=(gconst28*r11);
CheckValue<IkReal> x13671=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13669*x13669)+(x13670*x13670)+(((-2.0)*x13669*x13670)))),-1);
if(!x13671.valid){
continue;
}
CheckValue<IkReal> x13672 = IKatan2WithCheck(IkReal((x13669+(((-1.0)*x13670)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13671.value)))+(x13672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13673=IKsin(j4);
IkReal x13674=IKcos(j4);
IkReal x13675=(gconst28*r11);
IkReal x13676=((1.0)*x13674);
IkReal x13677=(gconst29*x13674);
IkReal x13678=(gconst28*x13673);
IkReal x13679=((1.0)*x13673);
IkReal x13680=(gconst29*x13679);
evalcond[0]=((((-1.0)*r20*x13680))+((r21*x13678))+(((-1.0)*r22*x13676)));
evalcond[1]=((((-1.0)*r00*x13680))+((r01*x13678))+(((-1.0)*r02*x13676)));
evalcond[2]=((((-1.0)*r12*x13679))+(((-1.0)*x13675*x13676))+((r10*x13677)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13680))+(((-1.0)*r12*x13676))+((x13673*x13675)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13676))+((cj1*sj2))+((r20*x13677))+(((-1.0)*r22*x13679)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13677))+(((-1.0)*r02*x13679))+(((-1.0)*gconst28*r01*x13676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13681=((1.0)*gconst29);
CheckValue<IkReal> x13682 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13681))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13682.valid){
continue;
}
CheckValue<IkReal> x13683=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13681))+(((-1.0)*gconst28*r00)))),-1);
if(!x13683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13682.value)+(((1.5707963267949)*(x13683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13684=IKsin(j4);
IkReal x13685=IKcos(j4);
IkReal x13686=(gconst28*r11);
IkReal x13687=((1.0)*x13685);
IkReal x13688=(gconst29*x13685);
IkReal x13689=(gconst28*x13684);
IkReal x13690=((1.0)*x13684);
IkReal x13691=(gconst29*x13690);
evalcond[0]=((((-1.0)*r20*x13691))+(((-1.0)*r22*x13687))+((r21*x13689)));
evalcond[1]=(((r01*x13689))+(((-1.0)*r00*x13691))+(((-1.0)*r02*x13687)));
evalcond[2]=((((-1.0)*x13686*x13687))+((r10*x13688))+(((-1.0)*r12*x13690)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13687))+((x13684*x13686))+(((-1.0)*r10*x13691)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13687))+(((-1.0)*r22*x13690))+((r20*x13688)));
evalcond[5]=((((-1.0)*gconst28*r01*x13687))+(((-1.0)*r02*x13690))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13692=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13692.valid){
continue;
}
CheckValue<IkReal> x13693 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13692.value)))+(x13693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13694=IKsin(j4);
IkReal x13695=IKcos(j4);
IkReal x13696=(gconst28*r11);
IkReal x13697=((1.0)*x13695);
IkReal x13698=(gconst29*x13695);
IkReal x13699=(gconst28*x13694);
IkReal x13700=((1.0)*x13694);
IkReal x13701=(gconst29*x13700);
evalcond[0]=((((-1.0)*r20*x13701))+((r21*x13699))+(((-1.0)*r22*x13697)));
evalcond[1]=((((-1.0)*r00*x13701))+((r01*x13699))+(((-1.0)*r02*x13697)));
evalcond[2]=(((r10*x13698))+(((-1.0)*r12*x13700))+(((-1.0)*x13696*x13697)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13701))+(((-1.0)*r12*x13697))+((x13694*x13696)));
evalcond[4]=((((-1.0)*r22*x13700))+((cj2*sj1))+(((-1.0)*gconst28*r21*x13697))+((cj1*sj2))+((r20*x13698)));
evalcond[5]=(((r00*x13698))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13697))+(((-1.0)*r02*x13700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13702=gconst28*gconst28;
IkReal x13703=gconst29*gconst29;
IkReal x13704=(r11*r21);
IkReal x13705=(gconst29*sj3);
IkReal x13706=((1.0)*cj3);
IkReal x13707=(r10*r20);
IkReal x13708=(r10*r21);
IkReal x13709=(r11*r20);
IkReal x13710=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13711=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13703*x13706*x13707))+((x13708*x13710))+((x13709*x13710))+(((-1.0)*r12*r22*x13706))+(((-1.0)*x13702*x13704*x13706)))),-1);
if(!x13711.valid){
continue;
}
CheckValue<IkReal> x13712 = IKatan2WithCheck(IkReal((((r11*r22*x13705))+((gconst28*r10*r22*sj3)))),IkReal((((sj3*x13702*x13708))+(((-1.0)*gconst28*x13705*x13707))+(((-1.0)*sj3*x13703*x13709))+((gconst28*x13704*x13705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13711.value)))+(x13712.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13713=IKsin(j4);
IkReal x13714=IKcos(j4);
IkReal x13715=(sj1*sj2);
IkReal x13716=(gconst29*r20);
IkReal x13717=(gconst28*r20);
IkReal x13718=((1.0)*cj2);
IkReal x13719=(r11*sj3);
IkReal x13720=(cj1*sj2);
IkReal x13721=(gconst29*r01);
IkReal x13722=(gconst29*r10);
IkReal x13723=(cj3*gconst28);
IkReal x13724=(cj3*gconst29);
IkReal x13725=(gconst28*sj3);
IkReal x13726=(gconst29*r00);
IkReal x13727=(cj1*x13718);
IkReal x13728=((1.0)*x13714);
IkReal x13729=((1.0)*x13713);
IkReal x13730=(gconst28*x13713);
IkReal x13731=(cj3*x13713);
IkReal x13732=(sj3*x13714);
evalcond[0]=((((-1.0)*r22*x13728))+((r21*x13730))+(((-1.0)*x13716*x13729)));
evalcond[1]=((((-1.0)*r02*x13728))+(((-1.0)*x13726*x13729))+((r01*x13730)));
evalcond[2]=((1.0)+(((-1.0)*x13722*x13729))+(((-1.0)*r12*x13728))+((r11*x13730)));
evalcond[3]=(((r11*x13714*x13723))+((r10*x13725))+((gconst29*x13719))+((r12*x13731))+(((-1.0)*cj3*x13722*x13728)));
evalcond[4]=((((-1.0)*r12*sj3*x13729))+((r10*x13723))+((r11*x13724))+((x13722*x13732))+(((-1.0)*gconst28*x13719*x13728)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((sj3*x13717))+((r22*x13731))+x13720+(((-1.0)*cj3*x13716*x13728))+((r21*x13714*x13723)));
evalcond[6]=(((r00*x13725))+x13715+((r02*x13731))+((r01*x13714*x13723))+(((-1.0)*r00*x13724*x13728))+(((-1.0)*x13727))+((sj3*x13721)));
evalcond[7]=((((-1.0)*r21*x13725*x13728))+x13715+((r21*x13724))+((cj3*x13717))+(((-1.0)*r22*sj3*x13729))+((x13716*x13732))+(((-1.0)*x13727)));
evalcond[8]=(((r00*x13723))+(((-1.0)*sj1*x13718))+(((-1.0)*r01*x13725*x13728))+(((-1.0)*r02*sj3*x13729))+((x13726*x13732))+(((-1.0)*x13720))+((cj3*x13721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13733=((1.0)*gconst29);
CheckValue<IkReal> x13734 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13733))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13734.valid){
continue;
}
CheckValue<IkReal> x13735=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13733)))),-1);
if(!x13735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13734.value)+(((1.5707963267949)*(x13735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13736=IKsin(j4);
IkReal x13737=IKcos(j4);
IkReal x13738=(sj1*sj2);
IkReal x13739=(gconst29*r20);
IkReal x13740=(gconst28*r20);
IkReal x13741=((1.0)*cj2);
IkReal x13742=(r11*sj3);
IkReal x13743=(cj1*sj2);
IkReal x13744=(gconst29*r01);
IkReal x13745=(gconst29*r10);
IkReal x13746=(cj3*gconst28);
IkReal x13747=(cj3*gconst29);
IkReal x13748=(gconst28*sj3);
IkReal x13749=(gconst29*r00);
IkReal x13750=(cj1*x13741);
IkReal x13751=((1.0)*x13737);
IkReal x13752=((1.0)*x13736);
IkReal x13753=(gconst28*x13736);
IkReal x13754=(cj3*x13736);
IkReal x13755=(sj3*x13737);
evalcond[0]=(((r21*x13753))+(((-1.0)*r22*x13751))+(((-1.0)*x13739*x13752)));
evalcond[1]=((((-1.0)*x13749*x13752))+((r01*x13753))+(((-1.0)*r02*x13751)));
evalcond[2]=((1.0)+((r11*x13753))+(((-1.0)*r12*x13751))+(((-1.0)*x13745*x13752)));
evalcond[3]=(((gconst29*x13742))+(((-1.0)*cj3*x13745*x13751))+((r12*x13754))+((r10*x13748))+((r11*x13737*x13746)));
evalcond[4]=((((-1.0)*gconst28*x13742*x13751))+(((-1.0)*r12*sj3*x13752))+((r10*x13746))+((r11*x13747))+((x13745*x13755)));
evalcond[5]=(((cj2*sj1))+((r22*x13754))+(((-1.0)*cj3*x13739*x13751))+((gconst29*r21*sj3))+x13743+((r21*x13737*x13746))+((sj3*x13740)));
evalcond[6]=(((r01*x13737*x13746))+x13738+((r02*x13754))+(((-1.0)*x13750))+((sj3*x13744))+((r00*x13748))+(((-1.0)*r00*x13747*x13751)));
evalcond[7]=(x13738+(((-1.0)*r21*x13748*x13751))+(((-1.0)*x13750))+(((-1.0)*r22*sj3*x13752))+((r21*x13747))+((cj3*x13740))+((x13739*x13755)));
evalcond[8]=((((-1.0)*r01*x13748*x13751))+(((-1.0)*x13743))+((x13749*x13755))+(((-1.0)*sj1*x13741))+(((-1.0)*r02*sj3*x13752))+((cj3*x13744))+((r00*x13746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13756=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13756.valid){
continue;
}
CheckValue<IkReal> x13757 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13756.value)))+(x13757.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13758=IKsin(j4);
IkReal x13759=IKcos(j4);
IkReal x13760=(sj1*sj2);
IkReal x13761=(gconst29*r20);
IkReal x13762=(gconst28*r20);
IkReal x13763=((1.0)*cj2);
IkReal x13764=(r11*sj3);
IkReal x13765=(cj1*sj2);
IkReal x13766=(gconst29*r01);
IkReal x13767=(gconst29*r10);
IkReal x13768=(cj3*gconst28);
IkReal x13769=(cj3*gconst29);
IkReal x13770=(gconst28*sj3);
IkReal x13771=(gconst29*r00);
IkReal x13772=(cj1*x13763);
IkReal x13773=((1.0)*x13759);
IkReal x13774=((1.0)*x13758);
IkReal x13775=(gconst28*x13758);
IkReal x13776=(cj3*x13758);
IkReal x13777=(sj3*x13759);
evalcond[0]=((((-1.0)*r22*x13773))+((r21*x13775))+(((-1.0)*x13761*x13774)));
evalcond[1]=((((-1.0)*x13771*x13774))+((r01*x13775))+(((-1.0)*r02*x13773)));
evalcond[2]=((1.0)+((r11*x13775))+(((-1.0)*r12*x13773))+(((-1.0)*x13767*x13774)));
evalcond[3]=((((-1.0)*cj3*x13767*x13773))+((gconst29*x13764))+((r11*x13759*x13768))+((r10*x13770))+((r12*x13776)));
evalcond[4]=(((r11*x13769))+(((-1.0)*gconst28*x13764*x13773))+((r10*x13768))+((x13767*x13777))+(((-1.0)*r12*sj3*x13774)));
evalcond[5]=(((cj2*sj1))+((r21*x13759*x13768))+((gconst29*r21*sj3))+x13765+((sj3*x13762))+(((-1.0)*cj3*x13761*x13773))+((r22*x13776)));
evalcond[6]=((((-1.0)*r00*x13769*x13773))+(((-1.0)*x13772))+((r01*x13759*x13768))+x13760+((r00*x13770))+((sj3*x13766))+((r02*x13776)));
evalcond[7]=((((-1.0)*x13772))+x13760+(((-1.0)*r22*sj3*x13774))+((cj3*x13762))+((x13761*x13777))+(((-1.0)*r21*x13770*x13773))+((r21*x13769)));
evalcond[8]=((((-1.0)*x13765))+(((-1.0)*r01*x13770*x13773))+(((-1.0)*sj1*x13763))+((r00*x13768))+((cj3*x13766))+(((-1.0)*r02*sj3*x13774))+((x13771*x13777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13778=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13778);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13778);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13779=(r11*sj5);
IkReal x13780=((1.0)*cj5*r10);
j4eval[0]=(x13779+(((-1.0)*x13780)));
j4eval[1]=((((-1.0)*cj3*x13780))+((cj3*x13779)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13781=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13781);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13781);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13782=(cj5*r10);
IkReal x13783=(r11*sj5);
j4eval[0]=(x13783+(((-1.0)*x13782)));
j4eval[1]=((((-1.0)*sj3*x13783))+((sj3*x13782)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13784=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13784);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13784);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13785=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13785);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13785);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13786=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13786))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13786)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13787=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13787);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13787);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13788=((1.0)*sj1);
CheckValue<IkReal> x13789=IKPowWithIntegerCheck(r22,-1);
if(!x13789.valid){
continue;
}
CheckValue<IkReal> x13790=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13790.valid){
continue;
}
if( IKabs(((x13789.value)*(((((-1.0)*cj2*x13788))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13790.value)*(((((-1.0)*sj2*x13788))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13789.value)*(((((-1.0)*cj2*x13788))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13790.value)*(((((-1.0)*sj2*x13788))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13789.value)*(((((-1.0)*cj2*x13788))+(((-1.0)*cj1*sj2))))), ((x13790.value)*(((((-1.0)*sj2*x13788))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13791=IKsin(j4);
IkReal x13792=IKcos(j4);
IkReal x13793=((1.0)*cj5);
IkReal x13794=(sj5*x13792);
IkReal x13795=(sj5*x13791);
evalcond[0]=((-1.0)*r22*x13792);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13791)));
evalcond[2]=(((r01*x13795))+(((-1.0)*r00*x13791*x13793)));
evalcond[3]=((((-1.0)*r10*x13792*x13793))+((r11*x13794)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13791*x13793))+((r11*x13795)));
evalcond[5]=(((r01*x13794))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13792*x13793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13796=((1.0)*cj5);
CheckValue<IkReal> x13797=IKPowWithIntegerCheck(((((-1.0)*r10*x13796))+((r11*sj5))),-1);
if(!x13797.valid){
continue;
}
CheckValue<IkReal> x13798=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13796))),-1);
if(!x13798.valid){
continue;
}
if( IKabs(((-1.0)*(x13797.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13798.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13797.value)))+IKsqr(((x13798.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13797.value)), ((x13798.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13799=IKsin(j4);
IkReal x13800=IKcos(j4);
IkReal x13801=((1.0)*cj5);
IkReal x13802=(sj5*x13800);
IkReal x13803=(sj5*x13799);
evalcond[0]=((-1.0)*r22*x13800);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13799)));
evalcond[2]=(((r01*x13803))+(((-1.0)*r00*x13799*x13801)));
evalcond[3]=(((r11*x13802))+(((-1.0)*r10*x13800*x13801)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13799*x13801))+((r11*x13803)));
evalcond[5]=(((r01*x13802))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13800*x13801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13804=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13804);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13804);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13805=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13805);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13805);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13806=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13806.valid){
continue;
}
CheckValue<IkReal> x13807=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13807.valid){
continue;
}
if( IKabs(((-1.0)*(x13806.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13807.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13806.value)))+IKsqr(((x13807.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13806.value)), ((x13807.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13808=IKsin(j4);
IkReal x13809=IKcos(j4);
IkReal x13810=(cj5*x13809);
IkReal x13811=(sj5*x13808);
IkReal x13812=((1.0)*cj5*x13808);
IkReal x13813=((1.0)*sj5*x13809);
evalcond[0]=((-1.0)*r22*x13809);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13808)));
evalcond[2]=(((r01*x13811))+(((-1.0)*r00*x13812)));
evalcond[3]=(((r10*x13810))+(((-1.0)*r11*x13813)));
evalcond[4]=((1.0)+((r11*x13811))+(((-1.0)*r10*x13812)));
evalcond[5]=(((r00*x13810))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13814=IKPowWithIntegerCheck(r22,-1);
if(!x13814.valid){
continue;
}
CheckValue<IkReal> x13815=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13815.valid){
continue;
}
if( IKabs(((x13814.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13815.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13814.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13815.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13814.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13815.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13816=IKsin(j4);
IkReal x13817=IKcos(j4);
IkReal x13818=(cj5*x13817);
IkReal x13819=(sj5*x13816);
IkReal x13820=((1.0)*cj5*x13816);
IkReal x13821=((1.0)*sj5*x13817);
evalcond[0]=((-1.0)*r22*x13817);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13816)));
evalcond[2]=(((r01*x13819))+(((-1.0)*r00*x13820)));
evalcond[3]=(((r10*x13818))+(((-1.0)*r11*x13821)));
evalcond[4]=((1.0)+((r11*x13819))+(((-1.0)*r10*x13820)));
evalcond[5]=(((r00*x13818))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13822=((1.0)*r10);
CheckValue<IkReal> x13823=IKPowWithIntegerCheck(cj3,-1);
if(!x13823.valid){
continue;
}
CheckValue<IkReal> x13824=IKPowWithIntegerCheck(r22,-1);
if(!x13824.valid){
continue;
}
CheckValue<IkReal> x13825=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13822))+((cj3*r11*sj5))),-1);
if(!x13825.valid){
continue;
}
if( IKabs(((x13823.value)*(x13824.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13825.value)*(((((-1.0)*sj3*sj5*x13822))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13823.value)*(x13824.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13825.value)*(((((-1.0)*sj3*sj5*x13822))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13823.value)*(x13824.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13825.value)*(((((-1.0)*sj3*sj5*x13822))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13826=IKsin(j4);
IkReal x13827=IKcos(j4);
IkReal x13828=(sj1*sj2);
IkReal x13829=(r11*sj5);
IkReal x13830=(r00*sj3);
IkReal x13831=(cj5*r01);
IkReal x13832=((1.0)*cj1);
IkReal x13833=(cj3*sj5);
IkReal x13834=(cj5*r11);
IkReal x13835=(r10*sj3);
IkReal x13836=(cj2*sj1);
IkReal x13837=((1.0)*cj5);
IkReal x13838=((1.0)*sj3);
IkReal x13839=(r01*sj5);
IkReal x13840=(cj2*x13832);
IkReal x13841=(cj3*x13827);
IkReal x13842=(r22*x13826);
IkReal x13843=(cj5*x13827);
IkReal x13844=(x13826*x13837);
evalcond[0]=((-1.0)*r22*x13827);
evalcond[1]=(x13836+((cj1*sj2))+((cj3*x13842)));
evalcond[2]=(((x13826*x13839))+(((-1.0)*r00*x13844)));
evalcond[3]=((1.0)+((x13826*x13829))+(((-1.0)*r10*x13844)));
evalcond[4]=((((-1.0)*x13840))+(((-1.0)*x13838*x13842))+x13828);
evalcond[5]=((((-1.0)*r10*x13837*x13841))+((sj5*x13835))+((sj3*x13834))+((x13829*x13841)));
evalcond[6]=((((-1.0)*x13827*x13829*x13838))+((r10*x13833))+((x13835*x13843))+((cj3*x13834)));
evalcond[7]=((((-1.0)*x13840))+x13828+((sj5*x13830))+((r01*x13827*x13833))+((sj3*x13831))+(((-1.0)*r00*x13837*x13841)));
evalcond[8]=((((-1.0)*sj2*x13832))+((x13830*x13843))+(((-1.0)*x13827*x13838*x13839))+(((-1.0)*x13836))+((r00*x13833))+((cj3*x13831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13845=(cj5*r10);
IkReal x13846=((1.0)*r11);
CheckValue<IkReal> x13847=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x13845))),-1);
if(!x13847.valid){
continue;
}
CheckValue<IkReal> x13848=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13846))+((sj3*x13845))),-1);
if(!x13848.valid){
continue;
}
if( IKabs(((-1.0)*(x13847.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13848.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13846)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13847.value)))+IKsqr(((x13848.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13846))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13847.value)), ((x13848.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13846))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13849=IKsin(j4);
IkReal x13850=IKcos(j4);
IkReal x13851=(sj1*sj2);
IkReal x13852=(r11*sj5);
IkReal x13853=(r00*sj3);
IkReal x13854=(cj5*r01);
IkReal x13855=((1.0)*cj1);
IkReal x13856=(cj3*sj5);
IkReal x13857=(cj5*r11);
IkReal x13858=(r10*sj3);
IkReal x13859=(cj2*sj1);
IkReal x13860=((1.0)*cj5);
IkReal x13861=((1.0)*sj3);
IkReal x13862=(r01*sj5);
IkReal x13863=(cj2*x13855);
IkReal x13864=(cj3*x13850);
IkReal x13865=(r22*x13849);
IkReal x13866=(cj5*x13850);
IkReal x13867=(x13849*x13860);
evalcond[0]=((-1.0)*r22*x13850);
evalcond[1]=(x13859+((cj1*sj2))+((cj3*x13865)));
evalcond[2]=((((-1.0)*r00*x13867))+((x13849*x13862)));
evalcond[3]=((1.0)+((x13849*x13852))+(((-1.0)*r10*x13867)));
evalcond[4]=(x13851+(((-1.0)*x13861*x13865))+(((-1.0)*x13863)));
evalcond[5]=(((sj3*x13857))+(((-1.0)*r10*x13860*x13864))+((x13852*x13864))+((sj5*x13858)));
evalcond[6]=(((x13858*x13866))+(((-1.0)*x13850*x13852*x13861))+((cj3*x13857))+((r10*x13856)));
evalcond[7]=((((-1.0)*r00*x13860*x13864))+x13851+((sj3*x13854))+((r01*x13850*x13856))+((sj5*x13853))+(((-1.0)*x13863)));
evalcond[8]=((((-1.0)*x13859))+((r00*x13856))+(((-1.0)*sj2*x13855))+((x13853*x13866))+(((-1.0)*x13850*x13861*x13862))+((cj3*x13854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13868=((1.0)*sj3);
IkReal x13869=(r11*sj5);
IkReal x13870=((1.0)*cj5*r10);
CheckValue<IkReal> x13871=IKPowWithIntegerCheck((x13869+(((-1.0)*x13870))),-1);
if(!x13871.valid){
continue;
}
CheckValue<IkReal> x13872=IKPowWithIntegerCheck(((((-1.0)*cj3*x13870))+((cj3*x13869))),-1);
if(!x13872.valid){
continue;
}
if( IKabs(((-1.0)*(x13871.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13872.value)*(((((-1.0)*r10*sj5*x13868))+(((-1.0)*cj5*r11*x13868)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13871.value)))+IKsqr(((x13872.value)*(((((-1.0)*r10*sj5*x13868))+(((-1.0)*cj5*r11*x13868))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13871.value)), ((x13872.value)*(((((-1.0)*r10*sj5*x13868))+(((-1.0)*cj5*r11*x13868))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13873=IKsin(j4);
IkReal x13874=IKcos(j4);
IkReal x13875=(sj1*sj2);
IkReal x13876=(r11*sj5);
IkReal x13877=(r00*sj3);
IkReal x13878=(cj5*r01);
IkReal x13879=((1.0)*cj1);
IkReal x13880=(cj3*sj5);
IkReal x13881=(cj5*r11);
IkReal x13882=(r10*sj3);
IkReal x13883=(cj2*sj1);
IkReal x13884=((1.0)*cj5);
IkReal x13885=((1.0)*sj3);
IkReal x13886=(r01*sj5);
IkReal x13887=(cj2*x13879);
IkReal x13888=(cj3*x13874);
IkReal x13889=(r22*x13873);
IkReal x13890=(cj5*x13874);
IkReal x13891=(x13873*x13884);
evalcond[0]=((-1.0)*r22*x13874);
evalcond[1]=(((cj3*x13889))+x13883+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13891))+((x13873*x13886)));
evalcond[3]=((1.0)+((x13873*x13876))+(((-1.0)*r10*x13891)));
evalcond[4]=((((-1.0)*x13885*x13889))+x13875+(((-1.0)*x13887)));
evalcond[5]=(((sj5*x13882))+((sj3*x13881))+(((-1.0)*r10*x13884*x13888))+((x13876*x13888)));
evalcond[6]=(((x13882*x13890))+(((-1.0)*x13874*x13876*x13885))+((cj3*x13881))+((r10*x13880)));
evalcond[7]=(((sj3*x13878))+((sj5*x13877))+x13875+(((-1.0)*x13887))+((r01*x13874*x13880))+(((-1.0)*r00*x13884*x13888)));
evalcond[8]=(((cj3*x13878))+(((-1.0)*sj2*x13879))+(((-1.0)*x13883))+((r00*x13880))+(((-1.0)*x13874*x13885*x13886))+((x13877*x13890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13892=cj5*cj5;
IkReal x13893=((1.0)*cj3);
IkReal x13894=(r10*r21);
IkReal x13895=(cj5*sj5);
IkReal x13896=(r11*r21);
IkReal x13897=(r11*r20);
IkReal x13898=(r22*sj3);
IkReal x13899=(r10*r20);
IkReal x13900=((1.0)*sj3*x13892);
CheckValue<IkReal> x13901 = IKatan2WithCheck(IkReal((((r10*sj5*x13898))+((cj5*r11*x13898)))),IkReal((((sj3*x13895*x13896))+(((-1.0)*x13894*x13900))+((sj3*x13894))+(((-1.0)*sj3*x13895*x13899))+(((-1.0)*x13897*x13900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13901.valid){
continue;
}
CheckValue<IkReal> x13902=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13892*x13893*x13899))+((cj3*x13895*x13897))+((cj3*x13894*x13895))+((cj3*x13892*x13896))+(((-1.0)*x13893*x13896))+(((-1.0)*r12*r22*x13893)))),-1);
if(!x13902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13901.value)+(((1.5707963267949)*(x13902.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13903=IKsin(j4);
IkReal x13904=IKcos(j4);
IkReal x13905=(sj1*sj2);
IkReal x13906=(cj5*sj3);
IkReal x13907=(cj5*r10);
IkReal x13908=(r00*sj5);
IkReal x13909=(r11*sj5);
IkReal x13910=(cj3*cj5);
IkReal x13911=((1.0)*cj1);
IkReal x13912=(cj3*sj5);
IkReal x13913=(r21*sj5);
IkReal x13914=(cj2*sj1);
IkReal x13915=(sj3*sj5);
IkReal x13916=(r01*sj5);
IkReal x13917=(cj2*x13911);
IkReal x13918=((1.0)*x13904);
IkReal x13919=((1.0)*x13903);
IkReal x13920=(cj3*x13903);
IkReal x13921=(cj3*x13904);
evalcond[0]=(((x13903*x13913))+(((-1.0)*r22*x13918))+(((-1.0)*cj5*r20*x13919)));
evalcond[1]=((((-1.0)*cj5*r00*x13919))+((x13903*x13916))+(((-1.0)*r02*x13918)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13918))+(((-1.0)*x13907*x13919))+((x13903*x13909)));
evalcond[3]=(((r10*x13915))+((x13909*x13921))+(((-1.0)*cj3*x13907*x13918))+((r11*x13906))+((r12*x13920)));
evalcond[4]=(((r10*x13904*x13906))+((r10*x13912))+(((-1.0)*r12*sj3*x13919))+(((-1.0)*sj3*x13909*x13918))+((r11*x13910)));
evalcond[5]=(((cj1*sj2))+x13914+(((-1.0)*r20*x13910*x13918))+((r22*x13920))+((r20*x13915))+((r21*x13906))+((r21*x13904*x13912)));
evalcond[6]=(x13905+((r01*x13904*x13912))+((r01*x13906))+((sj3*x13908))+((r02*x13920))+(((-1.0)*x13917))+(((-1.0)*r00*x13910*x13918)));
evalcond[7]=((((-1.0)*r22*sj3*x13919))+x13905+((r20*x13904*x13906))+(((-1.0)*sj3*x13913*x13918))+((r20*x13912))+((r21*x13910))+(((-1.0)*x13917)));
evalcond[8]=((((-1.0)*r02*sj3*x13919))+(((-1.0)*x13914))+(((-1.0)*sj2*x13911))+((r01*x13910))+((r00*x13904*x13906))+((cj3*x13908))+(((-1.0)*r01*x13915*x13918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13922=((1.0)*cj5);
CheckValue<IkReal> x13923 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13923.valid){
continue;
}
CheckValue<IkReal> x13924=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13922)))),-1);
if(!x13924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13923.value)+(((1.5707963267949)*(x13924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13925=IKsin(j4);
IkReal x13926=IKcos(j4);
IkReal x13927=(sj1*sj2);
IkReal x13928=(cj5*sj3);
IkReal x13929=(cj5*r10);
IkReal x13930=(r00*sj5);
IkReal x13931=(r11*sj5);
IkReal x13932=(cj3*cj5);
IkReal x13933=((1.0)*cj1);
IkReal x13934=(cj3*sj5);
IkReal x13935=(r21*sj5);
IkReal x13936=(cj2*sj1);
IkReal x13937=(sj3*sj5);
IkReal x13938=(r01*sj5);
IkReal x13939=(cj2*x13933);
IkReal x13940=((1.0)*x13926);
IkReal x13941=((1.0)*x13925);
IkReal x13942=(cj3*x13925);
IkReal x13943=(cj3*x13926);
evalcond[0]=(((x13925*x13935))+(((-1.0)*cj5*r20*x13941))+(((-1.0)*r22*x13940)));
evalcond[1]=(((x13925*x13938))+(((-1.0)*cj5*r00*x13941))+(((-1.0)*r02*x13940)));
evalcond[2]=((1.0)+((x13925*x13931))+(((-1.0)*r12*x13940))+(((-1.0)*x13929*x13941)));
evalcond[3]=((((-1.0)*cj3*x13929*x13940))+((x13931*x13943))+((r10*x13937))+((r12*x13942))+((r11*x13928)));
evalcond[4]=(((r11*x13932))+(((-1.0)*r12*sj3*x13941))+((r10*x13934))+(((-1.0)*sj3*x13931*x13940))+((r10*x13926*x13928)));
evalcond[5]=(((r20*x13937))+((r21*x13928))+((cj1*sj2))+x13936+((r21*x13926*x13934))+((r22*x13942))+(((-1.0)*r20*x13932*x13940)));
evalcond[6]=(((sj3*x13930))+(((-1.0)*r00*x13932*x13940))+x13927+(((-1.0)*x13939))+((r01*x13926*x13934))+((r01*x13928))+((r02*x13942)));
evalcond[7]=(((r20*x13934))+(((-1.0)*sj3*x13935*x13940))+((r21*x13932))+x13927+(((-1.0)*x13939))+(((-1.0)*r22*sj3*x13941))+((r20*x13926*x13928)));
evalcond[8]=((((-1.0)*sj2*x13933))+((cj3*x13930))+((r01*x13932))+((r00*x13926*x13928))+(((-1.0)*r01*x13937*x13940))+(((-1.0)*r02*sj3*x13941))+(((-1.0)*x13936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13944=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13944.valid){
continue;
}
CheckValue<IkReal> x13945 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13944.value)))+(x13945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13946=IKsin(j4);
IkReal x13947=IKcos(j4);
IkReal x13948=(sj1*sj2);
IkReal x13949=(cj5*sj3);
IkReal x13950=(cj5*r10);
IkReal x13951=(r00*sj5);
IkReal x13952=(r11*sj5);
IkReal x13953=(cj3*cj5);
IkReal x13954=((1.0)*cj1);
IkReal x13955=(cj3*sj5);
IkReal x13956=(r21*sj5);
IkReal x13957=(cj2*sj1);
IkReal x13958=(sj3*sj5);
IkReal x13959=(r01*sj5);
IkReal x13960=(cj2*x13954);
IkReal x13961=((1.0)*x13947);
IkReal x13962=((1.0)*x13946);
IkReal x13963=(cj3*x13946);
IkReal x13964=(cj3*x13947);
evalcond[0]=((((-1.0)*r22*x13961))+(((-1.0)*cj5*r20*x13962))+((x13946*x13956)));
evalcond[1]=((((-1.0)*r02*x13961))+(((-1.0)*cj5*r00*x13962))+((x13946*x13959)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13961))+(((-1.0)*x13950*x13962))+((x13946*x13952)));
evalcond[3]=(((x13952*x13964))+((r12*x13963))+((r10*x13958))+(((-1.0)*cj3*x13950*x13961))+((r11*x13949)));
evalcond[4]=(((r11*x13953))+((r10*x13947*x13949))+(((-1.0)*sj3*x13952*x13961))+(((-1.0)*r12*sj3*x13962))+((r10*x13955)));
evalcond[5]=(((cj1*sj2))+x13957+((r21*x13947*x13955))+(((-1.0)*r20*x13953*x13961))+((r22*x13963))+((r20*x13958))+((r21*x13949)));
evalcond[6]=(((r02*x13963))+((r01*x13947*x13955))+x13948+((r01*x13949))+(((-1.0)*x13960))+(((-1.0)*r00*x13953*x13961))+((sj3*x13951)));
evalcond[7]=((((-1.0)*r22*sj3*x13962))+x13948+((r21*x13953))+((r20*x13947*x13949))+(((-1.0)*sj3*x13956*x13961))+(((-1.0)*x13960))+((r20*x13955)));
evalcond[8]=((((-1.0)*r01*x13958*x13961))+((cj3*x13951))+((r01*x13953))+((r00*x13947*x13949))+(((-1.0)*r02*sj3*x13962))+(((-1.0)*sj2*x13954))+(((-1.0)*x13957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13965=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13965;
j4eval[1]=IKsign(x13965);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13966=((1.0)*cj5);
IkReal x13967=((((-1.0)*r21*x13966))+(((-1.0)*r20*sj5)));
j4eval[0]=x13967;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13966))))));
j4eval[2]=IKsign(x13967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13968=cj5*cj5;
IkReal x13969=(cj3*r21);
IkReal x13970=(cj5*sj5);
IkReal x13971=((1.0)*cj3);
IkReal x13972=(((r10*x13969*x13970))+(((-1.0)*r12*r22*x13971))+(((-1.0)*r10*r20*x13968*x13971))+((cj3*r11*r20*x13970))+(((-1.0)*r11*x13969))+((r11*x13968*x13969)));
j4eval[0]=x13972;
j4eval[1]=IKsign(x13972);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13973=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13973;
j4eval[1]=IKsign(x13973);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13974=((1.0)*cj5);
IkReal x13975=((((-1.0)*r21*x13974))+(((-1.0)*r20*sj5)));
j4eval[0]=x13975;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13974))))));
j4eval[2]=IKsign(x13975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13976=cj5*cj5;
IkReal x13977=r11*r11;
IkReal x13978=(cj5*r10);
IkReal x13979=(r11*sj5);
IkReal x13980=((((-1.0)*x13976*(r10*r10)))+(((-1.0)*x13977))+((x13976*x13977))+(((-1.0)*(r12*r12)))+(((2.0)*x13978*x13979)));
j4eval[0]=x13980;
j4eval[1]=((IKabs(r12))+(IKabs((x13978+(((-1.0)*x13979))))));
j4eval[2]=IKsign(x13980);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13981=cj5*cj5;
IkReal x13982=r11*r11;
IkReal x13983=(cj5*r10);
IkReal x13984=(r11*sj5);
CheckValue<IkReal> x13985=IKPowWithIntegerCheck(IKsign(((((2.0)*x13983*x13984))+(((-1.0)*x13981*(r10*r10)))+((x13981*x13982))+(((-1.0)*(r12*r12)))+(((-1.0)*x13982)))),-1);
if(!x13985.valid){
continue;
}
CheckValue<IkReal> x13986 = IKatan2WithCheck(IkReal((x13983+(((-1.0)*x13984)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13985.value)))+(x13986.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13987=IKsin(j4);
IkReal x13988=IKcos(j4);
IkReal x13989=(cj5*r10);
IkReal x13990=(r01*sj5);
IkReal x13991=(cj5*r00);
IkReal x13992=(cj5*r20);
IkReal x13993=((1.0)*x13988);
IkReal x13994=((1.0)*x13987);
IkReal x13995=(sj5*x13987);
evalcond[0]=((((-1.0)*x13992*x13994))+((r21*x13995))+(((-1.0)*r22*x13993)));
evalcond[1]=((((-1.0)*r02*x13993))+(((-1.0)*x13991*x13994))+((x13987*x13990)));
evalcond[2]=((((-1.0)*r11*sj5*x13993))+(((-1.0)*r12*x13994))+((x13988*x13989)));
evalcond[3]=((-1.0)+((r11*x13995))+(((-1.0)*r12*x13993))+(((-1.0)*x13989*x13994)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x13994))+((cj1*sj2))+(((-1.0)*x13990*x13993))+((x13988*x13991)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13994))+(((-1.0)*r21*sj5*x13993))+((x13988*x13992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13996=((1.0)*cj5);
CheckValue<IkReal> x13997=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13996))+(((-1.0)*r20*sj5)))),-1);
if(!x13997.valid){
continue;
}
CheckValue<IkReal> x13998 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13997.value)))+(x13998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13999=IKsin(j4);
IkReal x14000=IKcos(j4);
IkReal x14001=(cj5*r10);
IkReal x14002=(r01*sj5);
IkReal x14003=(cj5*r00);
IkReal x14004=(cj5*r20);
IkReal x14005=((1.0)*x14000);
IkReal x14006=((1.0)*x13999);
IkReal x14007=(sj5*x13999);
evalcond[0]=(((r21*x14007))+(((-1.0)*x14004*x14006))+(((-1.0)*r22*x14005)));
evalcond[1]=((((-1.0)*r02*x14005))+(((-1.0)*x14003*x14006))+((x13999*x14002)));
evalcond[2]=(((x14000*x14001))+(((-1.0)*r11*sj5*x14005))+(((-1.0)*r12*x14006)));
evalcond[3]=((-1.0)+((r11*x14007))+(((-1.0)*r12*x14005))+(((-1.0)*x14001*x14006)));
evalcond[4]=((((-1.0)*r02*x14006))+((cj2*sj1))+((cj1*sj2))+((x14000*x14003))+(((-1.0)*x14002*x14005)));
evalcond[5]=(((x14000*x14004))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14005))+(((-1.0)*r22*x14006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14008 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14008.valid){
continue;
}
CheckValue<IkReal> x14009=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14008.value)+(((1.5707963267949)*(x14009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14010=IKsin(j4);
IkReal x14011=IKcos(j4);
IkReal x14012=(cj5*r10);
IkReal x14013=(r01*sj5);
IkReal x14014=(cj5*r00);
IkReal x14015=(cj5*r20);
IkReal x14016=((1.0)*x14011);
IkReal x14017=((1.0)*x14010);
IkReal x14018=(sj5*x14010);
evalcond[0]=((((-1.0)*x14015*x14017))+((r21*x14018))+(((-1.0)*r22*x14016)));
evalcond[1]=((((-1.0)*r02*x14016))+(((-1.0)*x14014*x14017))+((x14010*x14013)));
evalcond[2]=(((x14011*x14012))+(((-1.0)*r11*sj5*x14016))+(((-1.0)*r12*x14017)));
evalcond[3]=((-1.0)+(((-1.0)*x14012*x14017))+((r11*x14018))+(((-1.0)*r12*x14016)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x14017))+((x14011*x14014))+((cj1*sj2))+(((-1.0)*x14013*x14016)));
evalcond[5]=(((x14011*x14015))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14016))+(((-1.0)*r22*x14017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14019=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14019;
j4eval[1]=IKsign(x14019);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14020=((1.0)*cj5);
IkReal x14021=((((-1.0)*r21*x14020))+(((-1.0)*r20*sj5)));
j4eval[0]=x14021;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x14020))))));
j4eval[2]=IKsign(x14021);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14022=cj5*cj5;
IkReal x14023=r11*r11;
IkReal x14024=(r11*sj5);
IkReal x14025=(cj5*r10);
IkReal x14026=(((x14022*(r10*r10)))+(((-2.0)*x14024*x14025))+(r12*r12)+(((-1.0)*x14022*x14023))+x14023);
j4eval[0]=x14026;
j4eval[1]=IKsign(x14026);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x14025))+x14024))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14027=cj5*cj5;
IkReal x14028=r11*r11;
IkReal x14029=(cj5*r10);
IkReal x14030=(r11*sj5);
CheckValue<IkReal> x14031 = IKatan2WithCheck(IkReal(((((-1.0)*x14029))+x14030)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14031.valid){
continue;
}
CheckValue<IkReal> x14032=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14027*x14028))+(r12*r12)+(((-2.0)*x14029*x14030))+((x14027*(r10*r10)))+x14028)),-1);
if(!x14032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14031.value)+(((1.5707963267949)*(x14032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14033=IKcos(j4);
IkReal x14034=IKsin(j4);
IkReal x14035=(cj5*r00);
IkReal x14036=(cj5*r10);
IkReal x14037=(r21*sj5);
IkReal x14038=(cj5*r20);
IkReal x14039=((1.0)*x14033);
IkReal x14040=((1.0)*x14034);
IkReal x14041=(sj5*x14034);
IkReal x14042=(sj5*x14033);
evalcond[0]=(((r11*x14042))+(((-1.0)*x14036*x14039))+((r12*x14034)));
evalcond[1]=(((x14034*x14037))+(((-1.0)*x14038*x14040))+(((-1.0)*r22*x14039)));
evalcond[2]=(((r01*x14041))+(((-1.0)*x14035*x14040))+(((-1.0)*r02*x14039)));
evalcond[3]=((-1.0)+((r11*x14041))+(((-1.0)*x14036*x14040))+(((-1.0)*r12*x14039)));
evalcond[4]=(((cj2*sj1))+((r01*x14042))+(((-1.0)*x14035*x14039))+((cj1*sj2))+((r02*x14034)));
evalcond[5]=((((-1.0)*x14038*x14039))+((r22*x14034))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14033*x14037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14043=((1.0)*cj5);
CheckValue<IkReal> x14044=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14043))+(((-1.0)*r20*sj5)))),-1);
if(!x14044.valid){
continue;
}
CheckValue<IkReal> x14045 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14043)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14044.value)))+(x14045.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14046=IKcos(j4);
IkReal x14047=IKsin(j4);
IkReal x14048=(cj5*r00);
IkReal x14049=(cj5*r10);
IkReal x14050=(r21*sj5);
IkReal x14051=(cj5*r20);
IkReal x14052=((1.0)*x14046);
IkReal x14053=((1.0)*x14047);
IkReal x14054=(sj5*x14047);
IkReal x14055=(sj5*x14046);
evalcond[0]=(((r11*x14055))+(((-1.0)*x14049*x14052))+((r12*x14047)));
evalcond[1]=((((-1.0)*x14051*x14053))+(((-1.0)*r22*x14052))+((x14047*x14050)));
evalcond[2]=((((-1.0)*x14048*x14053))+(((-1.0)*r02*x14052))+((r01*x14054)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14052))+((r11*x14054))+(((-1.0)*x14049*x14053)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14048*x14052))+((cj1*sj2))+((r02*x14047))+((r01*x14055)));
evalcond[5]=(((r22*x14047))+(((-1.0)*x14051*x14052))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14046*x14050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14056 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14056.valid){
continue;
}
CheckValue<IkReal> x14057=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14056.value)+(((1.5707963267949)*(x14057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14058=IKcos(j4);
IkReal x14059=IKsin(j4);
IkReal x14060=(cj5*r00);
IkReal x14061=(cj5*r10);
IkReal x14062=(r21*sj5);
IkReal x14063=(cj5*r20);
IkReal x14064=((1.0)*x14058);
IkReal x14065=((1.0)*x14059);
IkReal x14066=(sj5*x14059);
IkReal x14067=(sj5*x14058);
evalcond[0]=(((r12*x14059))+(((-1.0)*x14061*x14064))+((r11*x14067)));
evalcond[1]=((((-1.0)*r22*x14064))+((x14059*x14062))+(((-1.0)*x14063*x14065)));
evalcond[2]=(((r01*x14066))+(((-1.0)*x14060*x14065))+(((-1.0)*r02*x14064)));
evalcond[3]=((-1.0)+(((-1.0)*x14061*x14065))+(((-1.0)*r12*x14064))+((r11*x14066)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x14059))+((r01*x14067))+(((-1.0)*x14060*x14064)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x14058*x14062))+((r22*x14059))+(((-1.0)*x14063*x14064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14069 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14069)==0){
continue;
}
IkReal x14068=pow(x14069,-0.5);
CheckValue<IkReal> x14070 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14070.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14070.value));
IkReal gconst37=((-1.0)*r01*x14068);
IkReal gconst38=(r00*x14068);
CheckValue<IkReal> x14071 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14071.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14071.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14074 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14074.valid){
continue;
}
IkReal x14072=((-1.0)*(x14074.value));
IkReal x14073=x14068;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14072;
IkReal gconst36=x14072;
IkReal gconst37=((-1.0)*r01*x14073);
IkReal gconst38=(r00*x14073);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14077 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14077.valid){
continue;
}
IkReal x14075=((-1.0)*(x14077.value));
IkReal x14076=x14068;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14075;
IkReal gconst36=x14075;
IkReal gconst37=((-1.0)*r01*x14076);
IkReal gconst38=(r00*x14076);
CheckValue<IkReal> x14085=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14085.valid){
continue;
}
IkReal x14078=x14085.value;
IkReal x14079=(sj3*x14078);
IkReal x14080=(r11*x14079);
IkReal x14081=(r21*x14079);
IkReal x14082=(r20*x14079);
IkReal x14083=(r10*x14079);
IkReal x14084=(r00*r01*x14079);
j4eval[0]=IKsign((((r00*r01*r10*x14081))+((r10*x14082*(r00*r00)))+((r12*r22*sj3))+((r21*x14080*(r01*r01)))+((r00*r01*r20*x14080))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14086=gconst38*gconst38;
IkReal x14087=gconst37*gconst37;
IkReal x14088=((1.0)*cj3);
IkReal x14089=(r11*r20);
IkReal x14090=(r10*sj3);
IkReal x14091=(gconst37*gconst38);
IkReal x14092=(r11*sj3);
IkReal x14093=(r21*x14087);
IkReal x14094=(cj3*x14091);
CheckValue<IkReal> x14095=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14088*x14093))+(((-1.0)*r12*r22*x14088))+((x14089*x14094))+((r10*r21*x14094))+(((-1.0)*r10*r20*x14086*x14088)))),-1);
if(!x14095.valid){
continue;
}
CheckValue<IkReal> x14096 = IKatan2WithCheck(IkReal((((gconst37*r22*x14090))+((gconst38*r22*x14092)))),IkReal(((((-1.0)*r20*x14090*x14091))+(((-1.0)*sj3*x14086*x14089))+((r21*x14091*x14092))+((x14090*x14093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14095.value)))+(x14096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14097=IKsin(j4);
IkReal x14098=IKcos(j4);
IkReal x14099=(cj2*sj1);
IkReal x14100=(cj1*sj2);
IkReal x14101=(gconst38*r21);
IkReal x14102=(cj3*r20);
IkReal x14103=(gconst38*r10);
IkReal x14104=(cj3*gconst37);
IkReal x14105=(sj1*sj2);
IkReal x14106=(gconst38*r00);
IkReal x14107=(cj1*cj2);
IkReal x14108=(gconst37*sj3);
IkReal x14109=(gconst38*r20);
IkReal x14110=(gconst38*r01);
IkReal x14111=(gconst38*r11);
IkReal x14112=((1.0)*x14098);
IkReal x14113=((1.0)*x14097);
IkReal x14114=(cj3*x14097);
IkReal x14115=(sj3*x14098);
IkReal x14116=(gconst37*x14097);
IkReal x14117=(x14100+x14099);
evalcond[0]=((((-1.0)*r22*x14112))+((r21*x14116))+(((-1.0)*x14109*x14113)));
evalcond[1]=(((r01*x14116))+(((-1.0)*r02*x14112))+(((-1.0)*x14106*x14113)));
evalcond[2]=((-1.0)+((r11*x14116))+(((-1.0)*r12*x14112))+(((-1.0)*x14103*x14113)));
evalcond[3]=(((sj3*x14111))+((r11*x14098*x14104))+((r10*x14108))+(((-1.0)*cj3*x14103*x14112))+((r12*x14114)));
evalcond[4]=(((x14103*x14115))+((cj3*x14111))+((r10*x14104))+(((-1.0)*r11*x14108*x14112))+(((-1.0)*r12*sj3*x14113)));
evalcond[5]=(((sj3*x14101))+(((-1.0)*gconst38*x14102*x14112))+((r22*x14114))+((r21*x14098*x14104))+x14117+((r20*x14108)));
evalcond[6]=(((r02*x14114))+((sj3*x14110))+((r00*x14108))+(((-1.0)*x14105))+((r01*x14098*x14104))+x14107+(((-1.0)*cj3*x14106*x14112)));
evalcond[7]=(((r00*x14104))+(((-1.0)*r01*x14108*x14112))+(((-1.0)*r02*sj3*x14113))+((cj3*x14110))+x14117+((x14106*x14115)));
evalcond[8]=(((cj3*x14101))+((x14109*x14115))+(((-1.0)*x14107))+x14105+(((-1.0)*r21*x14108*x14112))+((gconst37*x14102))+(((-1.0)*r22*sj3*x14113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14118=gconst38*gconst38;
IkReal x14119=gconst37*gconst37;
IkReal x14120=(gconst37*r10);
IkReal x14121=(cj3*r22);
IkReal x14122=((1.0)*gconst38);
IkReal x14123=(r21*sj3);
IkReal x14124=(gconst38*r11);
IkReal x14125=(cj3*r20);
IkReal x14126=(cj3*r21);
IkReal x14127=(r20*sj3);
CheckValue<IkReal> x14128 = IKatan2WithCheck(IkReal((((x14120*x14121))+((x14121*x14124)))),IkReal((((r10*x14119*x14126))+(((-1.0)*x14120*x14122*x14125))+(((-1.0)*r11*x14118*x14125))+((gconst37*x14124*x14126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14128.valid){
continue;
}
CheckValue<IkReal> x14129=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r11*x14122*x14127))+((r11*x14119*x14123))+((r10*x14118*x14127))+(((-1.0)*x14120*x14122*x14123))+((r12*r22*sj3)))),-1);
if(!x14129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14128.value)+(((1.5707963267949)*(x14129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14130=IKsin(j4);
IkReal x14131=IKcos(j4);
IkReal x14132=(cj2*sj1);
IkReal x14133=(cj1*sj2);
IkReal x14134=(gconst38*r21);
IkReal x14135=(cj3*r20);
IkReal x14136=(gconst38*r10);
IkReal x14137=(cj3*gconst37);
IkReal x14138=(sj1*sj2);
IkReal x14139=(gconst38*r00);
IkReal x14140=(cj1*cj2);
IkReal x14141=(gconst37*sj3);
IkReal x14142=(gconst38*r20);
IkReal x14143=(gconst38*r01);
IkReal x14144=(gconst38*r11);
IkReal x14145=((1.0)*x14131);
IkReal x14146=((1.0)*x14130);
IkReal x14147=(cj3*x14130);
IkReal x14148=(sj3*x14131);
IkReal x14149=(gconst37*x14130);
IkReal x14150=(x14132+x14133);
evalcond[0]=((((-1.0)*r22*x14145))+((r21*x14149))+(((-1.0)*x14142*x14146)));
evalcond[1]=((((-1.0)*x14139*x14146))+((r01*x14149))+(((-1.0)*r02*x14145)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14145))+((r11*x14149))+(((-1.0)*x14136*x14146)));
evalcond[3]=(((r10*x14141))+((r11*x14131*x14137))+(((-1.0)*cj3*x14136*x14145))+((sj3*x14144))+((r12*x14147)));
evalcond[4]=(((cj3*x14144))+(((-1.0)*r12*sj3*x14146))+((r10*x14137))+((x14136*x14148))+(((-1.0)*r11*x14141*x14145)));
evalcond[5]=(((sj3*x14134))+((r22*x14147))+x14150+(((-1.0)*gconst38*x14135*x14145))+((r20*x14141))+((r21*x14131*x14137)));
evalcond[6]=((((-1.0)*x14138))+((r02*x14147))+((sj3*x14143))+(((-1.0)*cj3*x14139*x14145))+((r00*x14141))+((r01*x14131*x14137))+x14140);
evalcond[7]=((((-1.0)*r01*x14141*x14145))+(((-1.0)*r02*sj3*x14146))+((cj3*x14143))+((x14139*x14148))+x14150+((r00*x14137)));
evalcond[8]=((((-1.0)*r21*x14141*x14145))+(((-1.0)*r22*sj3*x14146))+((gconst37*x14135))+((x14142*x14148))+x14138+(((-1.0)*x14140))+((cj3*x14134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14151=((1.0)*gconst38);
CheckValue<IkReal> x14152 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst37*r01))+(((-1.0)*r00*x14151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14152.valid){
continue;
}
CheckValue<IkReal> x14153=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14151)))),-1);
if(!x14153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14152.value)+(((1.5707963267949)*(x14153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14154=IKsin(j4);
IkReal x14155=IKcos(j4);
IkReal x14156=(cj2*sj1);
IkReal x14157=(cj1*sj2);
IkReal x14158=(gconst38*r21);
IkReal x14159=(cj3*r20);
IkReal x14160=(gconst38*r10);
IkReal x14161=(cj3*gconst37);
IkReal x14162=(sj1*sj2);
IkReal x14163=(gconst38*r00);
IkReal x14164=(cj1*cj2);
IkReal x14165=(gconst37*sj3);
IkReal x14166=(gconst38*r20);
IkReal x14167=(gconst38*r01);
IkReal x14168=(gconst38*r11);
IkReal x14169=((1.0)*x14155);
IkReal x14170=((1.0)*x14154);
IkReal x14171=(cj3*x14154);
IkReal x14172=(sj3*x14155);
IkReal x14173=(gconst37*x14154);
IkReal x14174=(x14156+x14157);
evalcond[0]=((((-1.0)*x14166*x14170))+(((-1.0)*r22*x14169))+((r21*x14173)));
evalcond[1]=((((-1.0)*r02*x14169))+((r01*x14173))+(((-1.0)*x14163*x14170)));
evalcond[2]=((-1.0)+((r11*x14173))+(((-1.0)*r12*x14169))+(((-1.0)*x14160*x14170)));
evalcond[3]=(((r10*x14165))+((sj3*x14168))+((r12*x14171))+(((-1.0)*cj3*x14160*x14169))+((r11*x14155*x14161)));
evalcond[4]=(((cj3*x14168))+(((-1.0)*r12*sj3*x14170))+((r10*x14161))+((x14160*x14172))+(((-1.0)*r11*x14165*x14169)));
evalcond[5]=(((r22*x14171))+((sj3*x14158))+((r21*x14155*x14161))+(((-1.0)*gconst38*x14159*x14169))+x14174+((r20*x14165)));
evalcond[6]=(((sj3*x14167))+((r01*x14155*x14161))+((r02*x14171))+((r00*x14165))+x14164+(((-1.0)*cj3*x14163*x14169))+(((-1.0)*x14162)));
evalcond[7]=(((cj3*x14167))+(((-1.0)*r01*x14165*x14169))+((x14163*x14172))+((r00*x14161))+x14174+(((-1.0)*r02*sj3*x14170)));
evalcond[8]=(((x14166*x14172))+((cj3*x14158))+(((-1.0)*r21*x14165*x14169))+((gconst37*x14159))+x14162+(((-1.0)*r22*sj3*x14170))+(((-1.0)*x14164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14176 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14176)==0){
continue;
}
IkReal x14175=pow(x14176,-0.5);
CheckValue<IkReal> x14177 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14177.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14177.value))));
IkReal gconst40=((1.0)*r01*x14175);
IkReal gconst41=((-1.0)*r00*x14175);
CheckValue<IkReal> x14178 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14178.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14178.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14181 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14181.valid){
continue;
}
IkReal x14179=((1.0)*(x14181.value));
IkReal x14180=x14175;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14179)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14179)));
IkReal gconst40=((1.0)*r01*x14180);
IkReal gconst41=((-1.0)*r00*x14180);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14184 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14184.valid){
continue;
}
IkReal x14182=((1.0)*(x14184.value));
IkReal x14183=x14175;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14182)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14182)));
IkReal gconst40=((1.0)*r01*x14183);
IkReal gconst41=((-1.0)*r00*x14183);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14185=gconst41*gconst41;
IkReal x14186=gconst40*gconst40;
IkReal x14187=(gconst40*r10);
IkReal x14188=(r22*sj3);
IkReal x14189=(r11*sj3);
IkReal x14190=((1.0)*cj3);
IkReal x14191=(gconst41*r21);
IkReal x14192=(gconst41*r20);
IkReal x14193=(r21*x14186);
IkReal x14194=((1.0)*r20*x14185);
CheckValue<IkReal> x14195=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14190*x14193))+(((-1.0)*r12*r22*x14190))+(((-1.0)*r10*r20*x14185*x14190))+((cj3*gconst40*r11*x14192))+((cj3*x14187*x14191)))),-1);
if(!x14195.valid){
continue;
}
CheckValue<IkReal> x14196 = IKatan2WithCheck(IkReal((((gconst41*r11*x14188))+((x14187*x14188)))),IkReal(((((-1.0)*sj3*x14187*x14192))+((r10*sj3*x14193))+((gconst40*x14189*x14191))+(((-1.0)*x14189*x14194)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14195.value)))+(x14196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14197=IKsin(j4);
IkReal x14198=IKcos(j4);
IkReal x14199=(cj2*sj1);
IkReal x14200=(cj1*sj2);
IkReal x14201=(gconst40*sj3);
IkReal x14202=(gconst41*sj3);
IkReal x14203=(gconst41*r20);
IkReal x14204=(cj3*gconst41);
IkReal x14205=(sj1*sj2);
IkReal x14206=(cj1*cj2);
IkReal x14207=(cj3*gconst40);
IkReal x14208=((1.0)*x14198);
IkReal x14209=((1.0)*x14197);
IkReal x14210=(cj3*x14197);
IkReal x14211=(gconst40*x14197);
IkReal x14212=(x14199+x14200);
IkReal x14213=(x14198*x14207);
evalcond[0]=((((-1.0)*x14203*x14209))+((r21*x14211))+(((-1.0)*r22*x14208)));
evalcond[1]=((((-1.0)*gconst41*r00*x14209))+((r01*x14211))+(((-1.0)*r02*x14208)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14209))+((r11*x14211))+(((-1.0)*r12*x14208)));
evalcond[3]=((((-1.0)*r10*x14204*x14208))+((r11*x14213))+((r12*x14210))+((r10*x14201))+((r11*x14202)));
evalcond[4]=((((-1.0)*r11*x14201*x14208))+((r10*x14207))+((r10*x14198*x14202))+(((-1.0)*r12*sj3*x14209))+((r11*x14204)));
evalcond[5]=(((r22*x14210))+((r20*x14201))+((r21*x14202))+(((-1.0)*cj3*x14203*x14208))+((r21*x14213))+x14212);
evalcond[6]=((((-1.0)*r00*x14204*x14208))+((r01*x14213))+((r00*x14201))+((r01*x14202))+(((-1.0)*x14205))+((r02*x14210))+x14206);
evalcond[7]=(((r00*x14198*x14202))+(((-1.0)*r02*sj3*x14209))+((r00*x14207))+((r01*x14204))+(((-1.0)*r01*x14201*x14208))+x14212);
evalcond[8]=((((-1.0)*r21*x14201*x14208))+((r20*x14207))+((r21*x14204))+((r20*x14198*x14202))+(((-1.0)*x14206))+(((-1.0)*r22*sj3*x14209))+x14205);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14214=((1.0)*gconst41);
CheckValue<IkReal> x14215=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14214))+(((-1.0)*gconst40*r20)))),-1);
if(!x14215.valid){
continue;
}
CheckValue<IkReal> x14216 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14214))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14215.value)))+(x14216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14217=IKsin(j4);
IkReal x14218=IKcos(j4);
IkReal x14219=(cj2*sj1);
IkReal x14220=(cj1*sj2);
IkReal x14221=(gconst40*sj3);
IkReal x14222=(gconst41*sj3);
IkReal x14223=(gconst41*r20);
IkReal x14224=(cj3*gconst41);
IkReal x14225=(sj1*sj2);
IkReal x14226=(cj1*cj2);
IkReal x14227=(cj3*gconst40);
IkReal x14228=((1.0)*x14218);
IkReal x14229=((1.0)*x14217);
IkReal x14230=(cj3*x14217);
IkReal x14231=(gconst40*x14217);
IkReal x14232=(x14219+x14220);
IkReal x14233=(x14218*x14227);
evalcond[0]=(((r21*x14231))+(((-1.0)*x14223*x14229))+(((-1.0)*r22*x14228)));
evalcond[1]=((((-1.0)*gconst41*r00*x14229))+((r01*x14231))+(((-1.0)*r02*x14228)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14228))+(((-1.0)*gconst41*r10*x14229))+((r11*x14231)));
evalcond[3]=((((-1.0)*r10*x14224*x14228))+((r10*x14221))+((r11*x14222))+((r12*x14230))+((r11*x14233)));
evalcond[4]=(((r10*x14218*x14222))+(((-1.0)*r11*x14221*x14228))+((r10*x14227))+(((-1.0)*r12*sj3*x14229))+((r11*x14224)));
evalcond[5]=(((r20*x14221))+((r21*x14233))+((r21*x14222))+(((-1.0)*cj3*x14223*x14228))+((r22*x14230))+x14232);
evalcond[6]=(((r02*x14230))+(((-1.0)*r00*x14224*x14228))+((r01*x14233))+((r00*x14221))+(((-1.0)*x14225))+((r01*x14222))+x14226);
evalcond[7]=((((-1.0)*r01*x14221*x14228))+((r00*x14218*x14222))+((r00*x14227))+(((-1.0)*r02*sj3*x14229))+((r01*x14224))+x14232);
evalcond[8]=(((r20*x14218*x14222))+((r20*x14227))+((r21*x14224))+(((-1.0)*r21*x14221*x14228))+(((-1.0)*x14226))+x14225+(((-1.0)*r22*sj3*x14229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14234 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14234.valid){
continue;
}
CheckValue<IkReal> x14235=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14234.value)+(((1.5707963267949)*(x14235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14236=IKsin(j4);
IkReal x14237=IKcos(j4);
IkReal x14238=(cj2*sj1);
IkReal x14239=(cj1*sj2);
IkReal x14240=(gconst40*sj3);
IkReal x14241=(gconst41*sj3);
IkReal x14242=(gconst41*r20);
IkReal x14243=(cj3*gconst41);
IkReal x14244=(sj1*sj2);
IkReal x14245=(cj1*cj2);
IkReal x14246=(cj3*gconst40);
IkReal x14247=((1.0)*x14237);
IkReal x14248=((1.0)*x14236);
IkReal x14249=(cj3*x14236);
IkReal x14250=(gconst40*x14236);
IkReal x14251=(x14239+x14238);
IkReal x14252=(x14237*x14246);
evalcond[0]=(((r21*x14250))+(((-1.0)*r22*x14247))+(((-1.0)*x14242*x14248)));
evalcond[1]=((((-1.0)*gconst41*r00*x14248))+(((-1.0)*r02*x14247))+((r01*x14250)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14248))+((r11*x14250))+(((-1.0)*r12*x14247)));
evalcond[3]=((((-1.0)*r10*x14243*x14247))+((r12*x14249))+((r11*x14252))+((r11*x14241))+((r10*x14240)));
evalcond[4]=(((r10*x14237*x14241))+(((-1.0)*r11*x14240*x14247))+((r11*x14243))+((r10*x14246))+(((-1.0)*r12*sj3*x14248)));
evalcond[5]=(((r21*x14241))+((r21*x14252))+(((-1.0)*cj3*x14242*x14247))+((r20*x14240))+x14251+((r22*x14249)));
evalcond[6]=((((-1.0)*x14244))+((r02*x14249))+((r01*x14241))+x14245+((r00*x14240))+((r01*x14252))+(((-1.0)*r00*x14243*x14247)));
evalcond[7]=((((-1.0)*r02*sj3*x14248))+((r00*x14237*x14241))+(((-1.0)*r01*x14240*x14247))+((r01*x14243))+x14251+((r00*x14246)));
evalcond[8]=(((r20*x14237*x14241))+((r21*x14243))+(((-1.0)*r22*sj3*x14248))+(((-1.0)*x14245))+(((-1.0)*r21*x14240*x14247))+((r20*x14246))+x14244);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14253=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14253);
rxp1_1=(px*r21);
rxp1_2=(r11*x14253);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14254=(r11*sj5);
IkReal x14255=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14255))+x14254);
j4eval[1]=(((cj3*x14254))+(((-1.0)*cj3*x14255)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14256=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14256);
rxp1_1=(px*r21);
rxp1_2=(r11*x14256);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14257=(cj5*r10);
IkReal x14258=(r11*sj5);
j4eval[0]=(x14258+(((-1.0)*x14257)));
j4eval[1]=((((-1.0)*sj3*x14258))+((sj3*x14257)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14259=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14259);
rxp1_1=(px*r21);
rxp1_2=(r11*x14259);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14260=((1.0)*r10);
CheckValue<IkReal> x14261=IKPowWithIntegerCheck(cj3,-1);
if(!x14261.valid){
continue;
}
CheckValue<IkReal> x14262=IKPowWithIntegerCheck(r02,-1);
if(!x14262.valid){
continue;
}
CheckValue<IkReal> x14263=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14260))),-1);
if(!x14263.valid){
continue;
}
if( IKabs(((x14261.value)*(x14262.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14263.value)*(((((-1.0)*sj3*sj5*x14260))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14261.value)*(x14262.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14263.value)*(((((-1.0)*sj3*sj5*x14260))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14261.value)*(x14262.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14263.value)*(((((-1.0)*sj3*sj5*x14260))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14264=IKsin(j4);
IkReal x14265=IKcos(j4);
IkReal x14266=(cj2*sj1);
IkReal x14267=(cj1*sj2);
IkReal x14268=(cj5*r10);
IkReal x14269=(sj1*sj2);
IkReal x14270=(cj5*sj3);
IkReal x14271=(r11*sj5);
IkReal x14272=(cj3*sj5);
IkReal x14273=(r21*sj5);
IkReal x14274=(cj1*cj2);
IkReal x14275=(cj3*cj5);
IkReal x14276=(sj3*sj5);
IkReal x14277=((1.0)*x14264);
IkReal x14278=(r20*x14265);
IkReal x14279=(cj3*x14265);
IkReal x14280=(sj3*x14265);
IkReal x14281=(x14266+x14267);
evalcond[0]=((-1.0)*r02*x14265);
evalcond[1]=((((-1.0)*cj5*r20*x14277))+((x14264*x14273)));
evalcond[2]=((((-1.0)*x14269))+((cj3*r02*x14264))+x14274);
evalcond[3]=((((-1.0)*r02*sj3*x14277))+x14281);
evalcond[4]=((-1.0)+(((-1.0)*x14268*x14277))+((x14264*x14271)));
evalcond[5]=((((-1.0)*x14268*x14279))+((r11*x14270))+((x14271*x14279))+((r10*x14276)));
evalcond[6]=(((r11*x14275))+((x14268*x14280))+(((-1.0)*x14271*x14280))+((r10*x14272)));
evalcond[7]=(((r21*x14265*x14272))+((r21*x14270))+((r20*x14276))+(((-1.0)*x14275*x14278))+x14281);
evalcond[8]=((((-1.0)*x14274))+((r21*x14275))+(((-1.0)*x14273*x14280))+((r20*x14272))+((x14270*x14278))+x14269);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14282=(cj5*r10);
IkReal x14283=((1.0)*r11);
CheckValue<IkReal> x14284=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x14282))),-1);
if(!x14284.valid){
continue;
}
CheckValue<IkReal> x14285=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14283))+((sj3*x14282))),-1);
if(!x14285.valid){
continue;
}
if( IKabs(x14284.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14285.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14283)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14284.value)+IKsqr(((x14285.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14283))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14284.value, ((x14285.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14283))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14286=IKsin(j4);
IkReal x14287=IKcos(j4);
IkReal x14288=(cj2*sj1);
IkReal x14289=(cj1*sj2);
IkReal x14290=(cj5*r10);
IkReal x14291=(sj1*sj2);
IkReal x14292=(cj5*sj3);
IkReal x14293=(r11*sj5);
IkReal x14294=(cj3*sj5);
IkReal x14295=(r21*sj5);
IkReal x14296=(cj1*cj2);
IkReal x14297=(cj3*cj5);
IkReal x14298=(sj3*sj5);
IkReal x14299=((1.0)*x14286);
IkReal x14300=(r20*x14287);
IkReal x14301=(cj3*x14287);
IkReal x14302=(sj3*x14287);
IkReal x14303=(x14288+x14289);
evalcond[0]=((-1.0)*r02*x14287);
evalcond[1]=(((x14286*x14295))+(((-1.0)*cj5*r20*x14299)));
evalcond[2]=(((cj3*r02*x14286))+(((-1.0)*x14291))+x14296);
evalcond[3]=((((-1.0)*r02*sj3*x14299))+x14303);
evalcond[4]=((-1.0)+(((-1.0)*x14290*x14299))+((x14286*x14293)));
evalcond[5]=(((x14293*x14301))+((r10*x14298))+(((-1.0)*x14290*x14301))+((r11*x14292)));
evalcond[6]=(((r10*x14294))+((x14290*x14302))+(((-1.0)*x14293*x14302))+((r11*x14297)));
evalcond[7]=(((r21*x14287*x14294))+((r20*x14298))+((r21*x14292))+(((-1.0)*x14297*x14300))+x14303);
evalcond[8]=(((r20*x14294))+((r21*x14297))+(((-1.0)*x14296))+((x14292*x14300))+(((-1.0)*x14295*x14302))+x14291);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14304=((1.0)*r10);
IkReal x14305=(r11*sj5);
CheckValue<IkReal> x14306=IKPowWithIntegerCheck(((((-1.0)*cj5*x14304))+x14305),-1);
if(!x14306.valid){
continue;
}
CheckValue<IkReal> x14307=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x14304))+((cj3*x14305))),-1);
if(!x14307.valid){
continue;
}
if( IKabs(x14306.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14307.value)*(((((-1.0)*sj3*sj5*x14304))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14306.value)+IKsqr(((x14307.value)*(((((-1.0)*sj3*sj5*x14304))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14306.value, ((x14307.value)*(((((-1.0)*sj3*sj5*x14304))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14308=IKsin(j4);
IkReal x14309=IKcos(j4);
IkReal x14310=(cj2*sj1);
IkReal x14311=(cj1*sj2);
IkReal x14312=(cj5*r10);
IkReal x14313=(sj1*sj2);
IkReal x14314=(cj5*sj3);
IkReal x14315=(r11*sj5);
IkReal x14316=(cj3*sj5);
IkReal x14317=(r21*sj5);
IkReal x14318=(cj1*cj2);
IkReal x14319=(cj3*cj5);
IkReal x14320=(sj3*sj5);
IkReal x14321=((1.0)*x14308);
IkReal x14322=(r20*x14309);
IkReal x14323=(cj3*x14309);
IkReal x14324=(sj3*x14309);
IkReal x14325=(x14310+x14311);
evalcond[0]=((-1.0)*r02*x14309);
evalcond[1]=(((x14308*x14317))+(((-1.0)*cj5*r20*x14321)));
evalcond[2]=(((cj3*r02*x14308))+(((-1.0)*x14313))+x14318);
evalcond[3]=((((-1.0)*r02*sj3*x14321))+x14325);
evalcond[4]=((-1.0)+((x14308*x14315))+(((-1.0)*x14312*x14321)));
evalcond[5]=(((r11*x14314))+((x14315*x14323))+((r10*x14320))+(((-1.0)*x14312*x14323)));
evalcond[6]=(((r11*x14319))+(((-1.0)*x14315*x14324))+((x14312*x14324))+((r10*x14316)));
evalcond[7]=((((-1.0)*x14319*x14322))+((r20*x14320))+((r21*x14309*x14316))+((r21*x14314))+x14325);
evalcond[8]=((((-1.0)*x14318))+((r20*x14316))+((x14314*x14322))+((r21*x14319))+(((-1.0)*x14317*x14324))+x14313);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14326=cj5*cj5;
IkReal x14327=((1.0)*cj3);
IkReal x14328=(r10*r21);
IkReal x14329=(cj5*sj5);
IkReal x14330=(r11*r21);
IkReal x14331=(r11*r20);
IkReal x14332=(r22*sj3);
IkReal x14333=(r10*r20);
IkReal x14334=((1.0)*sj3*x14326);
CheckValue<IkReal> x14335 = IKatan2WithCheck(IkReal((((r10*sj5*x14332))+((cj5*r11*x14332)))),IkReal((((sj3*x14329*x14330))+((sj3*x14328))+(((-1.0)*x14331*x14334))+(((-1.0)*sj3*x14329*x14333))+(((-1.0)*x14328*x14334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14335.valid){
continue;
}
CheckValue<IkReal> x14336=IKPowWithIntegerCheck(IKsign((((cj3*x14326*x14330))+(((-1.0)*x14327*x14330))+((cj3*x14329*x14331))+(((-1.0)*x14326*x14327*x14333))+(((-1.0)*r12*r22*x14327))+((cj3*x14328*x14329)))),-1);
if(!x14336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14335.value)+(((1.5707963267949)*(x14336.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14337=IKsin(j4);
IkReal x14338=IKcos(j4);
IkReal x14339=(cj2*sj1);
IkReal x14340=(cj1*sj2);
IkReal x14341=(cj5*sj3);
IkReal x14342=(cj5*r10);
IkReal x14343=(r00*sj5);
IkReal x14344=(sj1*sj2);
IkReal x14345=(r11*sj5);
IkReal x14346=(cj3*cj5);
IkReal x14347=(cj3*sj5);
IkReal x14348=(r21*sj5);
IkReal x14349=(cj1*cj2);
IkReal x14350=(sj3*sj5);
IkReal x14351=(r01*sj5);
IkReal x14352=((1.0)*x14338);
IkReal x14353=((1.0)*x14337);
IkReal x14354=(cj3*x14337);
IkReal x14355=(cj3*x14338);
IkReal x14356=(x14340+x14339);
evalcond[0]=((((-1.0)*cj5*r20*x14353))+((x14337*x14348))+(((-1.0)*r22*x14352)));
evalcond[1]=((((-1.0)*cj5*r00*x14353))+(((-1.0)*r02*x14352))+((x14337*x14351)));
evalcond[2]=((-1.0)+((x14337*x14345))+(((-1.0)*r12*x14352))+(((-1.0)*x14342*x14353)));
evalcond[3]=(((r12*x14354))+((x14345*x14355))+((r11*x14341))+((r10*x14350))+(((-1.0)*cj3*x14342*x14352)));
evalcond[4]=(((r10*x14338*x14341))+(((-1.0)*sj3*x14345*x14352))+((r11*x14346))+((r10*x14347))+(((-1.0)*r12*sj3*x14353)));
evalcond[5]=(((r20*x14350))+((r21*x14341))+((r21*x14338*x14347))+(((-1.0)*r20*x14346*x14352))+((r22*x14354))+x14356);
evalcond[6]=(((r02*x14354))+((r01*x14338*x14347))+((r01*x14341))+(((-1.0)*x14344))+((sj3*x14343))+(((-1.0)*r00*x14346*x14352))+x14349);
evalcond[7]=(((cj3*x14343))+((r01*x14346))+((r00*x14338*x14341))+(((-1.0)*r01*x14350*x14352))+x14356+(((-1.0)*r02*sj3*x14353)));
evalcond[8]=((((-1.0)*r22*sj3*x14353))+((r20*x14338*x14341))+(((-1.0)*sj3*x14348*x14352))+((r21*x14346))+(((-1.0)*x14349))+((r20*x14347))+x14344);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14357=((1.0)*cj5);
CheckValue<IkReal> x14358 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14358.valid){
continue;
}
CheckValue<IkReal> x14359=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14357))+(((-1.0)*r20*sj5)))),-1);
if(!x14359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14358.value)+(((1.5707963267949)*(x14359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14360=IKsin(j4);
IkReal x14361=IKcos(j4);
IkReal x14362=(cj2*sj1);
IkReal x14363=(cj1*sj2);
IkReal x14364=(cj5*sj3);
IkReal x14365=(cj5*r10);
IkReal x14366=(r00*sj5);
IkReal x14367=(sj1*sj2);
IkReal x14368=(r11*sj5);
IkReal x14369=(cj3*cj5);
IkReal x14370=(cj3*sj5);
IkReal x14371=(r21*sj5);
IkReal x14372=(cj1*cj2);
IkReal x14373=(sj3*sj5);
IkReal x14374=(r01*sj5);
IkReal x14375=((1.0)*x14361);
IkReal x14376=((1.0)*x14360);
IkReal x14377=(cj3*x14360);
IkReal x14378=(cj3*x14361);
IkReal x14379=(x14363+x14362);
evalcond[0]=((((-1.0)*r22*x14375))+(((-1.0)*cj5*r20*x14376))+((x14360*x14371)));
evalcond[1]=((((-1.0)*cj5*r00*x14376))+(((-1.0)*r02*x14375))+((x14360*x14374)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14375))+((x14360*x14368))+(((-1.0)*x14365*x14376)));
evalcond[3]=(((r11*x14364))+(((-1.0)*cj3*x14365*x14375))+((r10*x14373))+((x14368*x14378))+((r12*x14377)));
evalcond[4]=(((r11*x14369))+((r10*x14370))+(((-1.0)*r12*sj3*x14376))+(((-1.0)*sj3*x14368*x14375))+((r10*x14361*x14364)));
evalcond[5]=((((-1.0)*r20*x14369*x14375))+((r21*x14361*x14370))+((r22*x14377))+((r21*x14364))+((r20*x14373))+x14379);
evalcond[6]=(((sj3*x14366))+(((-1.0)*x14367))+((r01*x14361*x14370))+((r01*x14364))+x14372+((r02*x14377))+(((-1.0)*r00*x14369*x14375)));
evalcond[7]=(((cj3*x14366))+((r00*x14361*x14364))+(((-1.0)*r02*sj3*x14376))+(((-1.0)*r01*x14373*x14375))+((r01*x14369))+x14379);
evalcond[8]=((((-1.0)*x14372))+((r20*x14361*x14364))+(((-1.0)*sj3*x14371*x14375))+((r21*x14369))+(((-1.0)*r22*sj3*x14376))+((r20*x14370))+x14367);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14380 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14380.valid){
continue;
}
CheckValue<IkReal> x14381=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14380.value)+(((1.5707963267949)*(x14381.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14382=IKsin(j4);
IkReal x14383=IKcos(j4);
IkReal x14384=(cj2*sj1);
IkReal x14385=(cj1*sj2);
IkReal x14386=(cj5*sj3);
IkReal x14387=(cj5*r10);
IkReal x14388=(r00*sj5);
IkReal x14389=(sj1*sj2);
IkReal x14390=(r11*sj5);
IkReal x14391=(cj3*cj5);
IkReal x14392=(cj3*sj5);
IkReal x14393=(r21*sj5);
IkReal x14394=(cj1*cj2);
IkReal x14395=(sj3*sj5);
IkReal x14396=(r01*sj5);
IkReal x14397=((1.0)*x14383);
IkReal x14398=((1.0)*x14382);
IkReal x14399=(cj3*x14382);
IkReal x14400=(cj3*x14383);
IkReal x14401=(x14385+x14384);
evalcond[0]=((((-1.0)*cj5*r20*x14398))+((x14382*x14393))+(((-1.0)*r22*x14397)));
evalcond[1]=(((x14382*x14396))+(((-1.0)*cj5*r00*x14398))+(((-1.0)*r02*x14397)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14397))+((x14382*x14390))+(((-1.0)*x14387*x14398)));
evalcond[3]=(((r12*x14399))+((r11*x14386))+(((-1.0)*cj3*x14387*x14397))+((r10*x14395))+((x14390*x14400)));
evalcond[4]=((((-1.0)*sj3*x14390*x14397))+((r10*x14383*x14386))+((r10*x14392))+((r11*x14391))+(((-1.0)*r12*sj3*x14398)));
evalcond[5]=((((-1.0)*r20*x14391*x14397))+((r21*x14386))+((r21*x14383*x14392))+((r22*x14399))+x14401+((r20*x14395)));
evalcond[6]=(((r01*x14383*x14392))+(((-1.0)*x14389))+((r01*x14386))+(((-1.0)*r00*x14391*x14397))+((r02*x14399))+x14394+((sj3*x14388)));
evalcond[7]=((((-1.0)*r02*sj3*x14398))+((r01*x14391))+(((-1.0)*r01*x14395*x14397))+((cj3*x14388))+x14401+((r00*x14383*x14386)));
evalcond[8]=((((-1.0)*sj3*x14393*x14397))+((r21*x14391))+(((-1.0)*x14394))+(((-1.0)*r22*sj3*x14398))+((r20*x14383*x14386))+x14389+((r20*x14392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14402=((-1.0)*r00);
IkReal x14404 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14404)==0){
continue;
}
IkReal x14403=pow(x14404,-0.5);
CheckValue<IkReal> x14405 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14402),IKFAST_ATAN2_MAGTHRESH);
if(!x14405.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14405.value));
IkReal gconst13=(r01*x14403);
IkReal gconst14=(x14402*x14403);
CheckValue<IkReal> x14406 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14406.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14406.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14407=((-1.0)*r00);
IkReal x14408=x14403;
CheckValue<IkReal> x14410 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14407),IKFAST_ATAN2_MAGTHRESH);
if(!x14410.valid){
continue;
}
IkReal x14409=((-1.0)*(x14410.value));
sj5=gconst13;
cj5=gconst14;
j5=x14409;
IkReal gconst12=x14409;
IkReal gconst13=(r01*x14408);
IkReal gconst14=(x14407*x14408);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14411=((1.0)*sj0);
IkReal x14412=((1.0)*cj0);
CheckValue<IkReal> x14413 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14412))+(((-1.0)*r12*x14411)))),IkReal(((((-1.0)*gconst13*r11*x14411))+((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r01*x14412)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14413.valid){
continue;
}
CheckValue<IkReal> x14414=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14413.value)+(((1.5707963267949)*(x14414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14415=IKsin(j4);
IkReal x14416=IKcos(j4);
IkReal x14417=((1.0)*r22);
IkReal x14418=((1.0)*r12);
IkReal x14419=(gconst13*sj3);
IkReal x14420=(gconst13*r01);
IkReal x14421=(sj1*sj2);
IkReal x14422=(gconst14*sj3);
IkReal x14423=(cj2*sj1);
IkReal x14424=((1.0)*sj0);
IkReal x14425=(cj3*gconst13);
IkReal x14426=(cj3*gconst14);
IkReal x14427=((1.0)*cj0);
IkReal x14428=((1.0)*gconst14);
IkReal x14429=(cj1*sj2);
IkReal x14430=(sj3*x14415);
IkReal x14431=((1.0)*cj1*cj2);
IkReal x14432=(cj3*x14416);
IkReal x14433=(cj3*x14415);
IkReal x14434=(gconst13*x14415);
IkReal x14435=((1.0)*x14416);
IkReal x14436=(x14415*x14428);
evalcond[0]=(((r21*x14434))+(((-1.0)*x14416*x14417))+(((-1.0)*r20*x14436)));
evalcond[1]=((((-1.0)*r10*x14436))+cj0+((r11*x14434))+(((-1.0)*x14416*x14418)));
evalcond[2]=(((x14415*x14420))+(((-1.0)*r00*x14436))+(((-1.0)*r02*x14435))+(((-1.0)*x14424)));
evalcond[3]=((((-1.0)*r20*x14426*x14435))+x14423+x14429+((r22*x14433))+((r21*x14416*x14425))+((r20*x14419))+((r21*x14422)));
evalcond[4]=((((-1.0)*x14431))+((r20*x14416*x14422))+((r20*x14425))+(((-1.0)*x14417*x14430))+x14421+(((-1.0)*r21*x14419*x14435))+((r21*x14426)));
evalcond[5]=(((cj0*x14421))+((r01*x14422))+((x14420*x14432))+((r00*x14419))+(((-1.0)*r00*x14426*x14435))+((r02*x14433))+(((-1.0)*cj1*cj2*x14427)));
evalcond[6]=(((r11*x14422))+((sj0*x14421))+((r12*x14433))+((r11*x14416*x14425))+(((-1.0)*r10*x14426*x14435))+((r10*x14419))+(((-1.0)*cj1*cj2*x14424)));
evalcond[7]=((((-1.0)*x14423*x14427))+(((-1.0)*x14427*x14429))+((r00*x14416*x14422))+(((-1.0)*r01*x14419*x14435))+((r01*x14426))+((r00*x14425))+(((-1.0)*r02*x14430)));
evalcond[8]=((((-1.0)*x14423*x14424))+(((-1.0)*x14418*x14430))+((r11*x14426))+((r10*x14416*x14422))+((r10*x14425))+(((-1.0)*r11*x14419*x14435))+(((-1.0)*x14424*x14429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14437=((1.0)*gconst14);
CheckValue<IkReal> x14438 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14437))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14438.valid){
continue;
}
CheckValue<IkReal> x14439=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14437)))),-1);
if(!x14439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14438.value)+(((1.5707963267949)*(x14439.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14440=IKsin(j4);
IkReal x14441=IKcos(j4);
IkReal x14442=((1.0)*r22);
IkReal x14443=((1.0)*r12);
IkReal x14444=(gconst13*sj3);
IkReal x14445=(gconst13*r01);
IkReal x14446=(sj1*sj2);
IkReal x14447=(gconst14*sj3);
IkReal x14448=(cj2*sj1);
IkReal x14449=((1.0)*sj0);
IkReal x14450=(cj3*gconst13);
IkReal x14451=(cj3*gconst14);
IkReal x14452=((1.0)*cj0);
IkReal x14453=((1.0)*gconst14);
IkReal x14454=(cj1*sj2);
IkReal x14455=(sj3*x14440);
IkReal x14456=((1.0)*cj1*cj2);
IkReal x14457=(cj3*x14441);
IkReal x14458=(cj3*x14440);
IkReal x14459=(gconst13*x14440);
IkReal x14460=((1.0)*x14441);
IkReal x14461=(x14440*x14453);
evalcond[0]=((((-1.0)*r20*x14461))+(((-1.0)*x14441*x14442))+((r21*x14459)));
evalcond[1]=(cj0+((r11*x14459))+(((-1.0)*r10*x14461))+(((-1.0)*x14441*x14443)));
evalcond[2]=((((-1.0)*x14449))+(((-1.0)*r00*x14461))+((x14440*x14445))+(((-1.0)*r02*x14460)));
evalcond[3]=(((r20*x14444))+x14454+x14448+(((-1.0)*r20*x14451*x14460))+((r22*x14458))+((r21*x14447))+((r21*x14441*x14450)));
evalcond[4]=((((-1.0)*x14456))+(((-1.0)*r21*x14444*x14460))+((r20*x14450))+(((-1.0)*x14442*x14455))+x14446+((r20*x14441*x14447))+((r21*x14451)));
evalcond[5]=(((r01*x14447))+((r00*x14444))+(((-1.0)*r00*x14451*x14460))+((x14445*x14457))+(((-1.0)*cj1*cj2*x14452))+((r02*x14458))+((cj0*x14446)));
evalcond[6]=(((sj0*x14446))+((r12*x14458))+(((-1.0)*r10*x14451*x14460))+((r10*x14444))+((r11*x14447))+((r11*x14441*x14450))+(((-1.0)*cj1*cj2*x14449)));
evalcond[7]=((((-1.0)*r02*x14455))+(((-1.0)*x14448*x14452))+((r00*x14450))+((r00*x14441*x14447))+((r01*x14451))+(((-1.0)*r01*x14444*x14460))+(((-1.0)*x14452*x14454)));
evalcond[8]=((((-1.0)*x14443*x14455))+((r10*x14441*x14447))+(((-1.0)*r11*x14444*x14460))+(((-1.0)*x14449*x14454))+(((-1.0)*x14448*x14449))+((r10*x14450))+((r11*x14451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14462=((-1.0)*r01);
IkReal x14464 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14464)==0){
continue;
}
IkReal x14463=pow(x14464,-0.5);
CheckValue<IkReal> x14465 = IKatan2WithCheck(IkReal(x14462),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14465.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14465.value))));
IkReal gconst16=(x14462*x14463);
IkReal gconst17=((1.0)*r00*x14463);
CheckValue<IkReal> x14466 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14466.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14466.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14467=((-1.0)*r01);
CheckValue<IkReal> x14470 = IKatan2WithCheck(IkReal(x14467),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14470.valid){
continue;
}
IkReal x14468=((1.0)*(x14470.value));
IkReal x14469=x14463;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14468)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14468)));
IkReal gconst16=(x14467*x14469);
IkReal gconst17=((1.0)*r00*x14469);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14471=((-1.0)*r01);
CheckValue<IkReal> x14474 = IKatan2WithCheck(IkReal(x14471),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14474.valid){
continue;
}
IkReal x14472=((1.0)*(x14474.value));
IkReal x14473=x14463;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14472)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14472)));
IkReal gconst16=(x14471*x14473);
IkReal gconst17=((1.0)*r00*x14473);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14475=((-1.0)*r01);
CheckValue<IkReal> x14478 = IKatan2WithCheck(IkReal(x14475),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14478.valid){
continue;
}
IkReal x14476=((1.0)*(x14478.value));
IkReal x14477=x14463;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14476)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14476)));
IkReal gconst16=(x14475*x14477);
IkReal gconst17=((1.0)*r00*x14477);
IkReal x14479=r02*r02;
IkReal x14480=(r12*sj0);
IkReal x14481=((1.0)*cj0);
IkReal x14482=x14463;
j4eval[0]=((IKabs(((((-1.0)*x14480))+(((-1.0)*r02*x14481)))))+(IKabs((((r02*x14480*x14482))+(((-1.0)*x14481*x14482))+((cj0*x14479*x14482))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14483=((-1.0)*r01);
CheckValue<IkReal> x14486 = IKatan2WithCheck(IkReal(x14483),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14486.valid){
continue;
}
IkReal x14484=((1.0)*(x14486.value));
IkReal x14485=x14463;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14484)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14484)));
IkReal gconst16=(x14483*x14485);
IkReal gconst17=((1.0)*r00*x14485);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14487=((-1.0)*r01);
CheckValue<IkReal> x14490 = IKatan2WithCheck(IkReal(x14487),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14490.valid){
continue;
}
IkReal x14488=((1.0)*(x14490.value));
IkReal x14489=x14463;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14488)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14488)));
IkReal gconst16=(x14487*x14489);
IkReal gconst17=((1.0)*r00*x14489);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14491=gconst16*gconst16;
IkReal x14492=gconst17*gconst17;
IkReal x14493=(r11*sj3);
IkReal x14494=(cj3*r10);
IkReal x14495=((1.0)*cj3);
IkReal x14496=(r10*sj3);
IkReal x14497=(gconst16*gconst17);
IkReal x14498=(r21*x14491);
IkReal x14499=((1.0)*r20*x14492);
CheckValue<IkReal> x14500=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x14495))+((cj3*r11*r20*x14497))+(((-1.0)*r11*x14495*x14498))+(((-1.0)*x14494*x14499))+((r21*x14494*x14497)))),-1);
if(!x14500.valid){
continue;
}
CheckValue<IkReal> x14501 = IKatan2WithCheck(IkReal((((gconst17*r22*x14493))+((gconst16*r22*x14496)))),IkReal((((x14496*x14498))+((r21*x14493*x14497))+(((-1.0)*x14493*x14499))+(((-1.0)*r20*x14496*x14497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14500.value)))+(x14501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14502=IKsin(j4);
IkReal x14503=IKcos(j4);
IkReal x14504=(cj2*sj1);
IkReal x14505=(cj1*sj2);
IkReal x14506=(gconst16*r21);
IkReal x14507=(cj3*gconst17);
IkReal x14508=(gconst16*r20);
IkReal x14509=(sj1*sj2);
IkReal x14510=(gconst17*r20);
IkReal x14511=(gconst17*sj3);
IkReal x14512=(gconst16*r10);
IkReal x14513=(cj1*cj2);
IkReal x14514=(gconst16*sj3);
IkReal x14515=((1.0)*x14503);
IkReal x14516=((1.0)*x14502);
IkReal x14517=(gconst16*x14502);
IkReal x14518=(cj3*x14503);
IkReal x14519=(cj3*x14502);
IkReal x14520=(x14505+x14504);
evalcond[0]=((((-1.0)*r22*x14515))+(((-1.0)*x14510*x14516))+((x14502*x14506)));
evalcond[1]=((((-1.0)*gconst17*r00*x14516))+((r01*x14517))+(((-1.0)*r02*x14515)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14516))+((r11*x14517))+(((-1.0)*r12*x14515)));
evalcond[3]=((((-1.0)*r10*x14507*x14515))+((sj3*x14512))+((r11*x14511))+((r12*x14519))+((gconst16*r11*x14518)));
evalcond[4]=(((cj3*x14512))+((r10*x14503*x14511))+((r11*x14507))+(((-1.0)*r11*x14514*x14515))+(((-1.0)*r12*sj3*x14516)));
evalcond[5]=(((r22*x14519))+x14520+(((-1.0)*r20*x14507*x14515))+((x14506*x14518))+((sj3*x14508))+((r21*x14511)));
evalcond[6]=(((r00*x14514))+((gconst16*r01*x14518))+((r01*x14511))+(((-1.0)*r00*x14507*x14515))+(((-1.0)*x14509))+x14513+((r02*x14519)));
evalcond[7]=(((r00*x14503*x14511))+(((-1.0)*r01*x14514*x14515))+(((-1.0)*r02*sj3*x14516))+x14520+((r01*x14507))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*sj3*x14506*x14515))+((cj3*x14508))+((sj3*x14503*x14510))+((r21*x14507))+x14509+(((-1.0)*r22*sj3*x14516))+(((-1.0)*x14513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14521=((1.0)*gconst17);
CheckValue<IkReal> x14522 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14521))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14522.valid){
continue;
}
CheckValue<IkReal> x14523=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14521)))),-1);
if(!x14523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14522.value)+(((1.5707963267949)*(x14523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14524=IKsin(j4);
IkReal x14525=IKcos(j4);
IkReal x14526=(cj2*sj1);
IkReal x14527=(cj1*sj2);
IkReal x14528=(gconst16*r21);
IkReal x14529=(cj3*gconst17);
IkReal x14530=(gconst16*r20);
IkReal x14531=(sj1*sj2);
IkReal x14532=(gconst17*r20);
IkReal x14533=(gconst17*sj3);
IkReal x14534=(gconst16*r10);
IkReal x14535=(cj1*cj2);
IkReal x14536=(gconst16*sj3);
IkReal x14537=((1.0)*x14525);
IkReal x14538=((1.0)*x14524);
IkReal x14539=(gconst16*x14524);
IkReal x14540=(cj3*x14525);
IkReal x14541=(cj3*x14524);
IkReal x14542=(x14527+x14526);
evalcond[0]=((((-1.0)*r22*x14537))+(((-1.0)*x14532*x14538))+((x14524*x14528)));
evalcond[1]=(((r01*x14539))+(((-1.0)*gconst17*r00*x14538))+(((-1.0)*r02*x14537)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14538))+(((-1.0)*r12*x14537))+((r11*x14539)));
evalcond[3]=(((r12*x14541))+((gconst16*r11*x14540))+((r11*x14533))+(((-1.0)*r10*x14529*x14537))+((sj3*x14534)));
evalcond[4]=((((-1.0)*r12*sj3*x14538))+((cj3*x14534))+((r11*x14529))+(((-1.0)*r11*x14536*x14537))+((r10*x14525*x14533)));
evalcond[5]=((((-1.0)*r20*x14529*x14537))+((r21*x14533))+((r22*x14541))+x14542+((sj3*x14530))+((x14528*x14540)));
evalcond[6]=(((r02*x14541))+(((-1.0)*x14531))+(((-1.0)*r00*x14529*x14537))+((r00*x14536))+((r01*x14533))+x14535+((gconst16*r01*x14540)));
evalcond[7]=((((-1.0)*r02*sj3*x14538))+((r00*x14525*x14533))+(((-1.0)*r01*x14536*x14537))+((r01*x14529))+x14542+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14535))+((cj3*x14530))+((sj3*x14525*x14532))+(((-1.0)*sj3*x14528*x14537))+x14531+((r21*x14529))+(((-1.0)*r22*sj3*x14538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14543=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14543.valid){
continue;
}
CheckValue<IkReal> x14544 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14543.value)))+(x14544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14545=IKsin(j4);
IkReal x14546=IKcos(j4);
IkReal x14547=(cj2*sj1);
IkReal x14548=(cj1*sj2);
IkReal x14549=(gconst16*r21);
IkReal x14550=(cj3*gconst17);
IkReal x14551=(gconst16*r20);
IkReal x14552=(sj1*sj2);
IkReal x14553=(gconst17*r20);
IkReal x14554=(gconst17*sj3);
IkReal x14555=(gconst16*r10);
IkReal x14556=(cj1*cj2);
IkReal x14557=(gconst16*sj3);
IkReal x14558=((1.0)*x14546);
IkReal x14559=((1.0)*x14545);
IkReal x14560=(gconst16*x14545);
IkReal x14561=(cj3*x14546);
IkReal x14562=(cj3*x14545);
IkReal x14563=(x14548+x14547);
evalcond[0]=((((-1.0)*x14553*x14559))+(((-1.0)*r22*x14558))+((x14545*x14549)));
evalcond[1]=(((r01*x14560))+(((-1.0)*r02*x14558))+(((-1.0)*gconst17*r00*x14559)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14559))+((r11*x14560))+(((-1.0)*r12*x14558)));
evalcond[3]=(((sj3*x14555))+((gconst16*r11*x14561))+((r11*x14554))+((r12*x14562))+(((-1.0)*r10*x14550*x14558)));
evalcond[4]=(((r10*x14546*x14554))+((r11*x14550))+((cj3*x14555))+(((-1.0)*r12*sj3*x14559))+(((-1.0)*r11*x14557*x14558)));
evalcond[5]=(((sj3*x14551))+(((-1.0)*r20*x14550*x14558))+x14563+((r22*x14562))+((x14549*x14561))+((r21*x14554)));
evalcond[6]=(((gconst16*r01*x14561))+((r02*x14562))+x14556+(((-1.0)*r00*x14550*x14558))+(((-1.0)*x14552))+((r01*x14554))+((r00*x14557)));
evalcond[7]=(((r00*x14546*x14554))+x14563+(((-1.0)*r02*sj3*x14559))+((r01*x14550))+((cj3*gconst16*r00))+(((-1.0)*r01*x14557*x14558)));
evalcond[8]=((((-1.0)*r22*sj3*x14559))+((sj3*x14546*x14553))+x14552+(((-1.0)*sj3*x14549*x14558))+(((-1.0)*x14556))+((cj3*x14551))+((r21*x14550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14564=((-1.0)*r01);
CheckValue<IkReal> x14567 = IKatan2WithCheck(IkReal(x14564),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14567.valid){
continue;
}
IkReal x14565=((1.0)*(x14567.value));
IkReal x14566=x14463;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14565)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14565)));
IkReal gconst16=(x14564*x14566);
IkReal gconst17=((1.0)*r00*x14566);
IkReal x14568=r02*r02;
IkReal x14569=(r12*sj0);
IkReal x14570=((1.0)*cj0);
IkReal x14571=x14463;
j4eval[0]=((IKabs(((((-1.0)*r02*x14570))+(((-1.0)*x14569)))))+(IKabs(((((-1.0)*x14570*x14571))+((r02*x14569*x14571))+((cj0*x14568*x14571))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14572=((1.0)*r12);
IkReal x14573=(sj1*sj2);
IkReal x14574=(cj1*cj2);
IkReal x14575=((1.0)*sj3);
IkReal x14576=(gconst16*r21);
IkReal x14577=(cj3*gconst16*r20);
IkReal x14578=(gconst17*r20*sj3);
IkReal x14579=(cj3*gconst17*r21);
CheckValue<IkReal> x14580=IKPowWithIntegerCheck((((gconst17*r10*sj3*x14576))+(((-1.0)*r10*r20*x14575*(gconst17*gconst17)))+(((-1.0)*gconst16*r11*x14575*x14576))+((gconst16*r11*x14578))),-1);
if(!x14580.valid){
continue;
}
CheckValue<IkReal> x14581=IKPowWithIntegerCheck((x14578+(((-1.0)*x14575*x14576))),-1);
if(!x14581.valid){
continue;
}
if( IKabs(((x14580.value)*(((((-1.0)*x14572*x14579))+(((-1.0)*x14572*x14577))+(((-1.0)*x14572*x14573))+((cj0*sj3*x14576))+((r12*x14574))+(((-1.0)*cj0*gconst17*r20*x14575)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14581.value)*((x14574+(((-1.0)*x14577))+(((-1.0)*x14573))+(((-1.0)*x14579)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14580.value)*(((((-1.0)*x14572*x14579))+(((-1.0)*x14572*x14577))+(((-1.0)*x14572*x14573))+((cj0*sj3*x14576))+((r12*x14574))+(((-1.0)*cj0*gconst17*r20*x14575))))))+IKsqr(((x14581.value)*((x14574+(((-1.0)*x14577))+(((-1.0)*x14573))+(((-1.0)*x14579))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14580.value)*(((((-1.0)*x14572*x14579))+(((-1.0)*x14572*x14577))+(((-1.0)*x14572*x14573))+((cj0*sj3*x14576))+((r12*x14574))+(((-1.0)*cj0*gconst17*r20*x14575))))), ((x14581.value)*((x14574+(((-1.0)*x14577))+(((-1.0)*x14573))+(((-1.0)*x14579))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14582=IKsin(j4);
IkReal x14583=IKcos(j4);
IkReal x14584=((1.0)*gconst17);
IkReal x14585=(gconst17*sj3);
IkReal x14586=(gconst16*r21);
IkReal x14587=(cj3*gconst17);
IkReal x14588=(sj1*sj2);
IkReal x14589=((1.0)*sj0);
IkReal x14590=(gconst16*sj3);
IkReal x14591=(cj3*gconst16);
IkReal x14592=(cj2*sj1);
IkReal x14593=((1.0)*cj0);
IkReal x14594=((1.0)*sj3);
IkReal x14595=(cj1*sj2);
IkReal x14596=(cj3*x14583);
IkReal x14597=(gconst16*x14582);
IkReal x14598=((1.0)*x14583);
IkReal x14599=((1.0)*cj1*cj2);
IkReal x14600=(r02*x14582);
IkReal x14601=(r12*x14582);
evalcond[0]=((((-1.0)*r20*x14582*x14584))+((x14582*x14586)));
evalcond[1]=(cj0+(((-1.0)*r12*x14598))+(((-1.0)*r10*x14582*x14584))+((r11*x14597)));
evalcond[2]=((((-1.0)*r02*x14598))+(((-1.0)*x14589))+(((-1.0)*r00*x14582*x14584))+((r01*x14597)));
evalcond[3]=(((r20*x14590))+((r21*x14585))+x14595+x14592+((x14586*x14596))+(((-1.0)*r20*x14584*x14596)));
evalcond[4]=(((r20*x14591))+(((-1.0)*x14599))+((r20*x14583*x14585))+((r21*x14587))+x14588+(((-1.0)*x14583*x14586*x14594)));
evalcond[5]=((((-1.0)*cj1*cj2*x14593))+((r01*x14583*x14591))+(((-1.0)*r00*x14584*x14596))+((cj3*x14600))+((r01*x14585))+((r00*x14590))+((cj0*x14588)));
evalcond[6]=(((r11*x14583*x14591))+((sj0*x14588))+(((-1.0)*cj1*cj2*x14589))+((r10*x14590))+((cj3*x14601))+((r11*x14585))+(((-1.0)*r10*x14584*x14596)));
evalcond[7]=((((-1.0)*x14592*x14593))+(((-1.0)*x14593*x14595))+(((-1.0)*x14594*x14600))+((r00*x14583*x14585))+((r01*x14587))+((r00*x14591))+(((-1.0)*r01*x14590*x14598)));
evalcond[8]=(((r10*x14583*x14585))+(((-1.0)*x14594*x14601))+((r10*x14591))+((r11*x14587))+(((-1.0)*x14589*x14592))+(((-1.0)*x14589*x14595))+(((-1.0)*r11*x14590*x14598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14602=((1.0)*sj0);
IkReal x14603=((1.0)*cj0);
CheckValue<IkReal> x14604=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14604.valid){
continue;
}
CheckValue<IkReal> x14605 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14602))+(((-1.0)*r02*x14603)))),IkReal(((((-1.0)*gconst16*r01*x14603))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14602)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14604.value)))+(x14605.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14606=IKsin(j4);
IkReal x14607=IKcos(j4);
IkReal x14608=((1.0)*gconst17);
IkReal x14609=(gconst17*sj3);
IkReal x14610=(gconst16*r21);
IkReal x14611=(cj3*gconst17);
IkReal x14612=(sj1*sj2);
IkReal x14613=((1.0)*sj0);
IkReal x14614=(gconst16*sj3);
IkReal x14615=(cj3*gconst16);
IkReal x14616=(cj2*sj1);
IkReal x14617=((1.0)*cj0);
IkReal x14618=((1.0)*sj3);
IkReal x14619=(cj1*sj2);
IkReal x14620=(cj3*x14607);
IkReal x14621=(gconst16*x14606);
IkReal x14622=((1.0)*x14607);
IkReal x14623=((1.0)*cj1*cj2);
IkReal x14624=(r02*x14606);
IkReal x14625=(r12*x14606);
evalcond[0]=((((-1.0)*r20*x14606*x14608))+((x14606*x14610)));
evalcond[1]=(cj0+((r11*x14621))+(((-1.0)*r10*x14606*x14608))+(((-1.0)*r12*x14622)));
evalcond[2]=((((-1.0)*r02*x14622))+(((-1.0)*r00*x14606*x14608))+((r01*x14621))+(((-1.0)*x14613)));
evalcond[3]=(((r21*x14609))+((x14610*x14620))+x14619+x14616+(((-1.0)*r20*x14608*x14620))+((r20*x14614)));
evalcond[4]=((((-1.0)*x14607*x14610*x14618))+(((-1.0)*x14623))+((r21*x14611))+x14612+((r20*x14615))+((r20*x14607*x14609)));
evalcond[5]=(((r01*x14607*x14615))+((cj3*x14624))+((cj0*x14612))+((r01*x14609))+(((-1.0)*cj1*cj2*x14617))+((r00*x14614))+(((-1.0)*r00*x14608*x14620)));
evalcond[6]=(((sj0*x14612))+((r10*x14614))+((cj3*x14625))+(((-1.0)*r10*x14608*x14620))+(((-1.0)*cj1*cj2*x14613))+((r11*x14609))+((r11*x14607*x14615)));
evalcond[7]=((((-1.0)*x14618*x14624))+(((-1.0)*r01*x14614*x14622))+(((-1.0)*x14616*x14617))+(((-1.0)*x14617*x14619))+((r00*x14607*x14609))+((r01*x14611))+((r00*x14615)));
evalcond[8]=((((-1.0)*x14613*x14616))+(((-1.0)*x14613*x14619))+(((-1.0)*x14618*x14625))+((r10*x14615))+((r10*x14607*x14609))+((r11*x14611))+(((-1.0)*r11*x14614*x14622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14626=((1.0)*sj0);
IkReal x14627=((1.0)*cj0);
CheckValue<IkReal> x14628=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14628.valid){
continue;
}
CheckValue<IkReal> x14629 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14627))+(((-1.0)*r12*x14626)))),IkReal(((((-1.0)*gconst16*r01*x14627))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14626)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14628.value)))+(x14629.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14630=IKsin(j4);
IkReal x14631=IKcos(j4);
IkReal x14632=(cj3*gconst17);
IkReal x14633=(gconst16*r21);
IkReal x14634=(gconst17*sj3);
IkReal x14635=(gconst16*r20);
IkReal x14636=(sj1*sj2);
IkReal x14637=(gconst16*r10);
IkReal x14638=(cj2*sj1);
IkReal x14639=(gconst16*sj3);
IkReal x14640=((1.0)*cj0);
IkReal x14641=((1.0)*sj0);
IkReal x14642=(cj1*sj2);
IkReal x14643=((1.0)*x14631);
IkReal x14644=(gconst16*x14630);
IkReal x14645=(cj3*x14631);
IkReal x14646=(cj3*x14630);
IkReal x14647=((1.0)*cj1*cj2);
IkReal x14648=((1.0)*gconst17*x14630);
IkReal x14649=((1.0)*sj3*x14630);
evalcond[0]=((((-1.0)*r22*x14643))+((x14630*x14633))+(((-1.0)*r20*x14648)));
evalcond[1]=(((r11*x14644))+cj0+(((-1.0)*r12*x14643))+(((-1.0)*r10*x14648)));
evalcond[2]=(((r01*x14644))+(((-1.0)*r02*x14643))+(((-1.0)*x14641))+(((-1.0)*r00*x14648)));
evalcond[3]=(((sj3*x14635))+((r22*x14646))+((x14633*x14645))+x14642+x14638+(((-1.0)*r20*x14632*x14643))+((r21*x14634)));
evalcond[4]=(((r20*x14631*x14634))+(((-1.0)*r22*x14649))+((cj3*x14635))+x14636+(((-1.0)*x14647))+(((-1.0)*sj3*x14633*x14643))+((r21*x14632)));
evalcond[5]=((((-1.0)*cj1*cj2*x14640))+((cj0*x14636))+((r01*x14634))+((r00*x14639))+((r02*x14646))+(((-1.0)*r00*x14632*x14643))+((gconst16*r01*x14645)));
evalcond[6]=(((gconst16*r11*x14645))+((r12*x14646))+((sj3*x14637))+(((-1.0)*cj1*cj2*x14641))+((r11*x14634))+((sj0*x14636))+(((-1.0)*r10*x14632*x14643)));
evalcond[7]=((((-1.0)*x14640*x14642))+(((-1.0)*r02*x14649))+((r00*x14631*x14634))+(((-1.0)*r01*x14639*x14643))+((r01*x14632))+(((-1.0)*x14638*x14640))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r12*x14649))+(((-1.0)*x14641*x14642))+((cj3*x14637))+((r10*x14631*x14634))+((r11*x14632))+(((-1.0)*x14638*x14641))+(((-1.0)*r11*x14639*x14643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14650=((1.0)*gconst17);
CheckValue<IkReal> x14651 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14650)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14651.valid){
continue;
}
CheckValue<IkReal> x14652=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14650)))),-1);
if(!x14652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14651.value)+(((1.5707963267949)*(x14652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14653=IKsin(j4);
IkReal x14654=IKcos(j4);
IkReal x14655=(cj3*gconst17);
IkReal x14656=(gconst16*r21);
IkReal x14657=(gconst17*sj3);
IkReal x14658=(gconst16*r20);
IkReal x14659=(sj1*sj2);
IkReal x14660=(gconst16*r10);
IkReal x14661=(cj2*sj1);
IkReal x14662=(gconst16*sj3);
IkReal x14663=((1.0)*cj0);
IkReal x14664=((1.0)*sj0);
IkReal x14665=(cj1*sj2);
IkReal x14666=((1.0)*x14654);
IkReal x14667=(gconst16*x14653);
IkReal x14668=(cj3*x14654);
IkReal x14669=(cj3*x14653);
IkReal x14670=((1.0)*cj1*cj2);
IkReal x14671=((1.0)*gconst17*x14653);
IkReal x14672=((1.0)*sj3*x14653);
evalcond[0]=((((-1.0)*r22*x14666))+(((-1.0)*r20*x14671))+((x14653*x14656)));
evalcond[1]=(cj0+(((-1.0)*r10*x14671))+(((-1.0)*r12*x14666))+((r11*x14667)));
evalcond[2]=((((-1.0)*r00*x14671))+((r01*x14667))+(((-1.0)*r02*x14666))+(((-1.0)*x14664)));
evalcond[3]=((((-1.0)*r20*x14655*x14666))+((x14656*x14668))+((sj3*x14658))+((r22*x14669))+x14661+x14665+((r21*x14657)));
evalcond[4]=((((-1.0)*x14670))+(((-1.0)*sj3*x14656*x14666))+(((-1.0)*r22*x14672))+x14659+((r21*x14655))+((cj3*x14658))+((r20*x14654*x14657)));
evalcond[5]=((((-1.0)*r00*x14655*x14666))+((r02*x14669))+((gconst16*r01*x14668))+((cj0*x14659))+((r01*x14657))+((r00*x14662))+(((-1.0)*cj1*cj2*x14663)));
evalcond[6]=(((gconst16*r11*x14668))+(((-1.0)*r10*x14655*x14666))+((sj0*x14659))+(((-1.0)*cj1*cj2*x14664))+((sj3*x14660))+((r12*x14669))+((r11*x14657)));
evalcond[7]=((((-1.0)*r01*x14662*x14666))+(((-1.0)*x14663*x14665))+(((-1.0)*x14661*x14663))+((r01*x14655))+((r00*x14654*x14657))+(((-1.0)*r02*x14672))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14664*x14665))+(((-1.0)*r11*x14662*x14666))+((r10*x14654*x14657))+(((-1.0)*x14661*x14664))+((cj3*x14660))+(((-1.0)*r12*x14672))+((r11*x14655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14673=((1.0)*gconst17);
CheckValue<IkReal> x14674 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14673))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14674.valid){
continue;
}
CheckValue<IkReal> x14675=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14673)))),-1);
if(!x14675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14674.value)+(((1.5707963267949)*(x14675.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14676=IKsin(j4);
IkReal x14677=IKcos(j4);
IkReal x14678=(cj3*gconst17);
IkReal x14679=(gconst16*r21);
IkReal x14680=(gconst17*sj3);
IkReal x14681=(gconst16*r20);
IkReal x14682=(sj1*sj2);
IkReal x14683=(gconst16*r10);
IkReal x14684=(cj2*sj1);
IkReal x14685=(gconst16*sj3);
IkReal x14686=((1.0)*cj0);
IkReal x14687=((1.0)*sj0);
IkReal x14688=(cj1*sj2);
IkReal x14689=((1.0)*x14677);
IkReal x14690=(gconst16*x14676);
IkReal x14691=(cj3*x14677);
IkReal x14692=(cj3*x14676);
IkReal x14693=((1.0)*cj1*cj2);
IkReal x14694=((1.0)*gconst17*x14676);
IkReal x14695=((1.0)*sj3*x14676);
evalcond[0]=((((-1.0)*r20*x14694))+((x14676*x14679))+(((-1.0)*r22*x14689)));
evalcond[1]=(cj0+((r11*x14690))+(((-1.0)*r12*x14689))+(((-1.0)*r10*x14694)));
evalcond[2]=((((-1.0)*r00*x14694))+((r01*x14690))+(((-1.0)*r02*x14689))+(((-1.0)*x14687)));
evalcond[3]=(((r22*x14692))+((x14679*x14691))+(((-1.0)*r20*x14678*x14689))+((sj3*x14681))+x14684+x14688+((r21*x14680)));
evalcond[4]=(((cj3*x14681))+((r20*x14677*x14680))+((r21*x14678))+(((-1.0)*sj3*x14679*x14689))+(((-1.0)*x14693))+(((-1.0)*r22*x14695))+x14682);
evalcond[5]=(((r00*x14685))+((r01*x14680))+(((-1.0)*cj1*cj2*x14686))+((r02*x14692))+(((-1.0)*r00*x14678*x14689))+((gconst16*r01*x14691))+((cj0*x14682)));
evalcond[6]=(((sj3*x14683))+(((-1.0)*cj1*cj2*x14687))+((r11*x14680))+((r12*x14692))+((gconst16*r11*x14691))+((sj0*x14682))+(((-1.0)*r10*x14678*x14689)));
evalcond[7]=((((-1.0)*x14684*x14686))+(((-1.0)*r02*x14695))+(((-1.0)*x14686*x14688))+((r01*x14678))+(((-1.0)*r01*x14685*x14689))+((r00*x14677*x14680))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14687*x14688))+(((-1.0)*x14684*x14687))+((cj3*x14683))+(((-1.0)*r11*x14685*x14689))+((r10*x14677*x14680))+((r11*x14678))+(((-1.0)*r12*x14695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14696=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14696;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14696);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14697=((1.0)*cj5);
IkReal x14698=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14697)));
j4eval[0]=x14698;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14697))))));
j4eval[2]=IKsign(x14698);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14699=cj5*cj5;
IkReal x14700=(cj3*r01);
IkReal x14701=(cj5*sj5);
IkReal x14702=((1.0)*cj3);
IkReal x14703=((((-1.0)*r21*x14700))+(((-1.0)*r02*r22*x14702))+((r21*x14699*x14700))+((cj3*r00*r21*x14701))+(((-1.0)*r00*r20*x14699*x14702))+((r20*x14700*x14701)));
j4eval[0]=x14703;
j4eval[1]=IKsign(x14703);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14704=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14704;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14704);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14705=((1.0)*cj5);
IkReal x14706=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14705)));
j4eval[0]=x14706;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14705))))));
j4eval[2]=IKsign(x14706);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14707=cj5*cj5;
IkReal x14708=r01*r01;
IkReal x14709=(r01*sj5);
IkReal x14710=(cj5*r00);
IkReal x14711=(((x14707*x14708))+(((-1.0)*x14708))+(((-1.0)*(r02*r02)))+(((2.0)*x14709*x14710))+(((-1.0)*x14707*(r00*r00))));
j4eval[0]=x14711;
j4eval[1]=IKsign(x14711);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14709))+x14710))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14712=cj5*cj5;
IkReal x14713=r01*r01;
IkReal x14714=(r01*sj5);
IkReal x14715=(cj5*r00);
CheckValue<IkReal> x14716 = IKatan2WithCheck(IkReal(((((-1.0)*x14714))+x14715)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14716.valid){
continue;
}
CheckValue<IkReal> x14717=IKPowWithIntegerCheck(IKsign(((((2.0)*x14714*x14715))+(((-1.0)*(r02*r02)))+((x14712*x14713))+(((-1.0)*x14712*(r00*r00)))+(((-1.0)*x14713)))),-1);
if(!x14717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14716.value)+(((1.5707963267949)*(x14717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14718=IKsin(j4);
IkReal x14719=IKcos(j4);
IkReal x14720=(cj5*r10);
IkReal x14721=(r01*sj5);
IkReal x14722=((1.0)*cj2);
IkReal x14723=(cj5*r00);
IkReal x14724=(cj5*r20);
IkReal x14725=((1.0)*x14719);
IkReal x14726=((1.0)*x14718);
IkReal x14727=(sj5*x14718);
evalcond[0]=(((r21*x14727))+(((-1.0)*r22*x14725))+(((-1.0)*x14724*x14726)));
evalcond[1]=((((-1.0)*r12*x14725))+((r11*x14727))+(((-1.0)*x14720*x14726)));
evalcond[2]=(((x14719*x14723))+(((-1.0)*x14721*x14725))+(((-1.0)*r02*x14726)));
evalcond[3]=((-1.0)+(((-1.0)*x14723*x14726))+((x14718*x14721))+(((-1.0)*r02*x14725)));
evalcond[4]=((((-1.0)*r21*sj5*x14725))+((x14719*x14724))+((sj1*sj2))+(((-1.0)*cj1*x14722))+(((-1.0)*r22*x14726)));
evalcond[5]=((((-1.0)*r12*x14726))+(((-1.0)*sj1*x14722))+((x14719*x14720))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14728=((1.0)*cj5);
CheckValue<IkReal> x14729 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14728))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14729.valid){
continue;
}
CheckValue<IkReal> x14730=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14728))+(((-1.0)*r10*sj5)))),-1);
if(!x14730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14729.value)+(((1.5707963267949)*(x14730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14731=IKsin(j4);
IkReal x14732=IKcos(j4);
IkReal x14733=(cj5*r10);
IkReal x14734=(r01*sj5);
IkReal x14735=((1.0)*cj2);
IkReal x14736=(cj5*r00);
IkReal x14737=(cj5*r20);
IkReal x14738=((1.0)*x14732);
IkReal x14739=((1.0)*x14731);
IkReal x14740=(sj5*x14731);
evalcond[0]=(((r21*x14740))+(((-1.0)*x14737*x14739))+(((-1.0)*r22*x14738)));
evalcond[1]=((((-1.0)*r12*x14738))+((r11*x14740))+(((-1.0)*x14733*x14739)));
evalcond[2]=(((x14732*x14736))+(((-1.0)*r02*x14739))+(((-1.0)*x14734*x14738)));
evalcond[3]=((-1.0)+((x14731*x14734))+(((-1.0)*x14736*x14739))+(((-1.0)*r02*x14738)));
evalcond[4]=((((-1.0)*r21*sj5*x14738))+((sj1*sj2))+((x14732*x14737))+(((-1.0)*cj1*x14735))+(((-1.0)*r22*x14739)));
evalcond[5]=((((-1.0)*sj1*x14735))+(((-1.0)*r12*x14739))+(((-1.0)*cj1*sj2))+((x14732*x14733))+(((-1.0)*r11*sj5*x14738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14741=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14741.valid){
continue;
}
CheckValue<IkReal> x14742 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14741.value)))+(x14742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14743=IKsin(j4);
IkReal x14744=IKcos(j4);
IkReal x14745=(cj5*r10);
IkReal x14746=(r01*sj5);
IkReal x14747=((1.0)*cj2);
IkReal x14748=(cj5*r00);
IkReal x14749=(cj5*r20);
IkReal x14750=((1.0)*x14744);
IkReal x14751=((1.0)*x14743);
IkReal x14752=(sj5*x14743);
evalcond[0]=(((r21*x14752))+(((-1.0)*x14749*x14751))+(((-1.0)*r22*x14750)));
evalcond[1]=((((-1.0)*r12*x14750))+(((-1.0)*x14745*x14751))+((r11*x14752)));
evalcond[2]=((((-1.0)*r02*x14751))+(((-1.0)*x14746*x14750))+((x14744*x14748)));
evalcond[3]=((-1.0)+((x14743*x14746))+(((-1.0)*r02*x14750))+(((-1.0)*x14748*x14751)));
evalcond[4]=((((-1.0)*r21*sj5*x14750))+((sj1*sj2))+(((-1.0)*cj1*x14747))+(((-1.0)*r22*x14751))+((x14744*x14749)));
evalcond[5]=((((-1.0)*r11*sj5*x14750))+(((-1.0)*r12*x14751))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14747))+((x14744*x14745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14753=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14753;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14753);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14754=((1.0)*cj5);
IkReal x14755=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14754)));
j4eval[0]=x14755;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x14754))+((r21*sj5))))));
j4eval[2]=IKsign(x14755);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14756=cj5*cj5;
IkReal x14757=r01*r01;
IkReal x14758=(cj5*r00);
IkReal x14759=(r01*sj5);
IkReal x14760=((((-2.0)*x14758*x14759))+x14757+((x14756*(r00*r00)))+(r02*r02)+(((-1.0)*x14756*x14757)));
j4eval[0]=x14760;
j4eval[1]=IKsign(x14760);
j4eval[2]=((IKabs(r02))+(IKabs((x14759+(((-1.0)*x14758))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14761=cj5*cj5;
IkReal x14762=r01*r01;
IkReal x14763=(r01*sj5);
IkReal x14764=(cj5*r00);
CheckValue<IkReal> x14765=IKPowWithIntegerCheck(IKsign((((x14761*(r00*r00)))+(((-1.0)*x14761*x14762))+x14762+(r02*r02)+(((-2.0)*x14763*x14764)))),-1);
if(!x14765.valid){
continue;
}
CheckValue<IkReal> x14766 = IKatan2WithCheck(IkReal(((((-1.0)*x14764))+x14763)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14765.value)))+(x14766.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14767=IKcos(j4);
IkReal x14768=IKsin(j4);
IkReal x14769=(cj5*r00);
IkReal x14770=(cj5*r10);
IkReal x14771=(r21*sj5);
IkReal x14772=((1.0)*cj2);
IkReal x14773=(cj5*r20);
IkReal x14774=((1.0)*x14767);
IkReal x14775=((1.0)*x14768);
IkReal x14776=(sj5*x14768);
IkReal x14777=(sj5*x14767);
evalcond[0]=(((r01*x14777))+((r02*x14768))+(((-1.0)*x14769*x14774)));
evalcond[1]=((((-1.0)*x14773*x14775))+(((-1.0)*r22*x14774))+((x14768*x14771)));
evalcond[2]=((((-1.0)*x14770*x14775))+((r11*x14776))+(((-1.0)*r12*x14774)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14774))+((r01*x14776))+(((-1.0)*x14769*x14775)));
evalcond[4]=((((-1.0)*x14773*x14774))+((sj1*sj2))+((x14767*x14771))+(((-1.0)*cj1*x14772))+((r22*x14768)));
evalcond[5]=((((-1.0)*x14770*x14774))+((r11*x14777))+(((-1.0)*cj1*sj2))+((r12*x14768))+(((-1.0)*sj1*x14772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14778=((1.0)*cj5);
CheckValue<IkReal> x14779=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14778)))),-1);
if(!x14779.valid){
continue;
}
CheckValue<IkReal> x14780 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14778)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14779.value)))+(x14780.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14781=IKcos(j4);
IkReal x14782=IKsin(j4);
IkReal x14783=(cj5*r00);
IkReal x14784=(cj5*r10);
IkReal x14785=(r21*sj5);
IkReal x14786=((1.0)*cj2);
IkReal x14787=(cj5*r20);
IkReal x14788=((1.0)*x14781);
IkReal x14789=((1.0)*x14782);
IkReal x14790=(sj5*x14782);
IkReal x14791=(sj5*x14781);
evalcond[0]=((((-1.0)*x14783*x14788))+((r01*x14791))+((r02*x14782)));
evalcond[1]=(((x14782*x14785))+(((-1.0)*x14787*x14789))+(((-1.0)*r22*x14788)));
evalcond[2]=(((r11*x14790))+(((-1.0)*x14784*x14789))+(((-1.0)*r12*x14788)));
evalcond[3]=((-1.0)+(((-1.0)*x14783*x14789))+((r01*x14790))+(((-1.0)*r02*x14788)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x14786))+(((-1.0)*x14787*x14788))+((x14781*x14785))+((r22*x14782)));
evalcond[5]=((((-1.0)*sj1*x14786))+(((-1.0)*cj1*sj2))+((r11*x14791))+((r12*x14782))+(((-1.0)*x14784*x14788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14792=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14792.valid){
continue;
}
CheckValue<IkReal> x14793 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14792.value)))+(x14793.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14794=IKcos(j4);
IkReal x14795=IKsin(j4);
IkReal x14796=(cj5*r00);
IkReal x14797=(cj5*r10);
IkReal x14798=(r21*sj5);
IkReal x14799=((1.0)*cj2);
IkReal x14800=(cj5*r20);
IkReal x14801=((1.0)*x14794);
IkReal x14802=((1.0)*x14795);
IkReal x14803=(sj5*x14795);
IkReal x14804=(sj5*x14794);
evalcond[0]=((((-1.0)*x14796*x14801))+((r01*x14804))+((r02*x14795)));
evalcond[1]=((((-1.0)*r22*x14801))+(((-1.0)*x14800*x14802))+((x14795*x14798)));
evalcond[2]=((((-1.0)*x14797*x14802))+(((-1.0)*r12*x14801))+((r11*x14803)));
evalcond[3]=((-1.0)+(((-1.0)*x14796*x14802))+((r01*x14803))+(((-1.0)*r02*x14801)));
evalcond[4]=((((-1.0)*x14800*x14801))+((sj1*sj2))+((x14794*x14798))+(((-1.0)*cj1*x14799))+((r22*x14795)));
evalcond[5]=((((-1.0)*x14797*x14801))+(((-1.0)*sj1*x14799))+(((-1.0)*cj1*sj2))+((r12*x14795))+((r11*x14804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14806 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14806)==0){
continue;
}
IkReal x14805=pow(x14806,-0.5);
CheckValue<IkReal> x14807 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14807.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14807.value));
IkReal gconst49=((-1.0)*r21*x14805);
IkReal gconst50=(r20*x14805);
CheckValue<IkReal> x14808 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14808.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14808.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14811 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14811.valid){
continue;
}
IkReal x14809=((-1.0)*(x14811.value));
IkReal x14810=x14805;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14809;
IkReal gconst48=x14809;
IkReal gconst49=((-1.0)*r21*x14810);
IkReal gconst50=(r20*x14810);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14814 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14814.valid){
continue;
}
IkReal x14812=((-1.0)*(x14814.value));
IkReal x14813=x14805;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14812;
IkReal gconst48=x14812;
IkReal gconst49=((-1.0)*r21*x14813);
IkReal gconst50=(r20*x14813);
CheckValue<IkReal> x14822=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14822.valid){
continue;
}
IkReal x14815=x14822.value;
IkReal x14816=(sj3*x14815);
IkReal x14817=(r11*x14816);
IkReal x14818=(r00*x14816);
IkReal x14819=(r01*x14816);
IkReal x14820=(r10*x14816);
IkReal x14821=(r20*r21*x14816);
j4eval[0]=IKsign((((r01*x14817*(r21*r21)))+((r02*r12*sj3))+((r00*r20*r21*x14817))+((r10*x14818*(r20*r20)))+((r10*r20*r21*x14819))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14823=gconst49*gconst49;
IkReal x14824=gconst50*gconst50;
IkReal x14825=((1.0)*cj3);
IkReal x14826=(gconst50*r01);
IkReal x14827=(gconst49*r10);
IkReal x14828=(r12*sj3);
IkReal x14829=(gconst49*r00);
IkReal x14830=(r00*sj3);
IkReal x14831=(r11*x14823);
IkReal x14832=(r10*x14824);
CheckValue<IkReal> x14833 = IKatan2WithCheck(IkReal((((x14826*x14828))+((x14828*x14829)))),IkReal((((x14830*x14831))+(((-1.0)*r01*sj3*x14832))+((gconst49*r11*sj3*x14826))+(((-1.0)*gconst50*x14827*x14830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14833.valid){
continue;
}
CheckValue<IkReal> x14834=IKPowWithIntegerCheck(IKsign((((cj3*gconst50*r11*x14829))+(((-1.0)*r01*x14825*x14831))+((cj3*x14826*x14827))+(((-1.0)*r02*r12*x14825))+(((-1.0)*r00*x14825*x14832)))),-1);
if(!x14834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14833.value)+(((1.5707963267949)*(x14834.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14835=IKsin(j4);
IkReal x14836=IKcos(j4);
IkReal x14837=(sj1*sj2);
IkReal x14838=(gconst50*r20);
IkReal x14839=(gconst50*sj3);
IkReal x14840=(cj3*r01);
IkReal x14841=(gconst50*r10);
IkReal x14842=(gconst49*sj3);
IkReal x14843=((1.0)*cj2);
IkReal x14844=(cj1*sj2);
IkReal x14845=(cj3*r11);
IkReal x14846=(gconst50*r00);
IkReal x14847=(cj3*r21);
IkReal x14848=(cj3*gconst49);
IkReal x14849=(cj1*x14843);
IkReal x14850=((1.0)*x14836);
IkReal x14851=((1.0)*x14835);
IkReal x14852=(gconst49*x14835);
IkReal x14853=(gconst49*x14836);
IkReal x14854=(cj3*x14835);
evalcond[0]=(((r21*x14852))+(((-1.0)*x14838*x14851))+(((-1.0)*r22*x14850)));
evalcond[1]=(((r11*x14852))+(((-1.0)*r12*x14850))+(((-1.0)*x14841*x14851)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14850))+(((-1.0)*x14846*x14851))+((r01*x14852)));
evalcond[3]=(((x14840*x14853))+((r02*x14854))+((r01*x14839))+((r00*x14842))+(((-1.0)*cj3*x14846*x14850)));
evalcond[4]=((((-1.0)*r02*sj3*x14851))+(((-1.0)*r01*x14842*x14850))+((r00*x14836*x14839))+((gconst50*x14840))+((r00*x14848)));
evalcond[5]=(((r20*x14842))+((cj2*sj1))+x14844+(((-1.0)*cj3*x14838*x14850))+((r21*x14839))+((x14847*x14853))+((r22*x14854)));
evalcond[6]=(((x14845*x14853))+(((-1.0)*cj3*x14841*x14850))+x14837+((r11*x14839))+(((-1.0)*x14849))+((r10*x14842))+((r12*x14854)));
evalcond[7]=(((r20*x14848))+(((-1.0)*r22*sj3*x14851))+x14837+(((-1.0)*x14849))+((gconst50*x14847))+((sj3*x14836*x14838))+(((-1.0)*r21*x14842*x14850)));
evalcond[8]=((((-1.0)*x14844))+(((-1.0)*sj1*x14843))+((gconst50*x14845))+((r10*x14848))+(((-1.0)*r11*x14842*x14850))+(((-1.0)*r12*sj3*x14851))+((r10*x14836*x14839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14855=gconst49*gconst49;
IkReal x14856=gconst50*gconst50;
IkReal x14857=(cj3*r12);
IkReal x14858=(gconst49*r00);
IkReal x14859=(r01*r11);
IkReal x14860=(r00*r11);
IkReal x14861=(cj3*gconst50);
IkReal x14862=((1.0)*r01*r10);
IkReal x14863=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14864=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst50*r11*sj3*x14858))+((sj3*x14855*x14859))+(((-1.0)*x14862*x14863))+((r00*r10*sj3*x14856)))),-1);
if(!x14864.valid){
continue;
}
CheckValue<IkReal> x14865 = IKatan2WithCheck(IkReal((((x14857*x14858))+((gconst50*r01*x14857)))),IkReal(((((-1.0)*cj3*x14856*x14862))+((gconst49*x14859*x14861))+((cj3*x14855*x14860))+(((-1.0)*r10*x14858*x14861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14864.value)))+(x14865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14866=IKsin(j4);
IkReal x14867=IKcos(j4);
IkReal x14868=(sj1*sj2);
IkReal x14869=(gconst50*r20);
IkReal x14870=(gconst50*sj3);
IkReal x14871=(cj3*r01);
IkReal x14872=(gconst50*r10);
IkReal x14873=(gconst49*sj3);
IkReal x14874=((1.0)*cj2);
IkReal x14875=(cj1*sj2);
IkReal x14876=(cj3*r11);
IkReal x14877=(gconst50*r00);
IkReal x14878=(cj3*r21);
IkReal x14879=(cj3*gconst49);
IkReal x14880=(cj1*x14874);
IkReal x14881=((1.0)*x14867);
IkReal x14882=((1.0)*x14866);
IkReal x14883=(gconst49*x14866);
IkReal x14884=(gconst49*x14867);
IkReal x14885=(cj3*x14866);
evalcond[0]=((((-1.0)*x14869*x14882))+(((-1.0)*r22*x14881))+((r21*x14883)));
evalcond[1]=(((r11*x14883))+(((-1.0)*x14872*x14882))+(((-1.0)*r12*x14881)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14881))+((r01*x14883))+(((-1.0)*x14877*x14882)));
evalcond[3]=(((x14871*x14884))+(((-1.0)*cj3*x14877*x14881))+((r00*x14873))+((r01*x14870))+((r02*x14885)));
evalcond[4]=((((-1.0)*r01*x14873*x14881))+((r00*x14879))+((gconst50*x14871))+((r00*x14867*x14870))+(((-1.0)*r02*sj3*x14882)));
evalcond[5]=(((cj2*sj1))+((r22*x14885))+((x14878*x14884))+x14875+(((-1.0)*cj3*x14869*x14881))+((r21*x14870))+((r20*x14873)));
evalcond[6]=(((r11*x14870))+((r10*x14873))+((r12*x14885))+(((-1.0)*cj3*x14872*x14881))+x14868+((x14876*x14884))+(((-1.0)*x14880)));
evalcond[7]=((((-1.0)*r21*x14873*x14881))+((sj3*x14867*x14869))+(((-1.0)*r22*sj3*x14882))+x14868+((gconst50*x14878))+(((-1.0)*x14880))+((r20*x14879)));
evalcond[8]=(((r10*x14879))+(((-1.0)*r12*sj3*x14882))+((gconst50*x14876))+((r10*x14867*x14870))+(((-1.0)*x14875))+(((-1.0)*sj1*x14874))+(((-1.0)*r11*x14873*x14881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14886=((1.0)*gconst50);
CheckValue<IkReal> x14887 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14886)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14887.valid){
continue;
}
CheckValue<IkReal> x14888=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14886)))),-1);
if(!x14888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14887.value)+(((1.5707963267949)*(x14888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14889=IKsin(j4);
IkReal x14890=IKcos(j4);
IkReal x14891=(sj1*sj2);
IkReal x14892=(gconst50*r20);
IkReal x14893=(gconst50*sj3);
IkReal x14894=(cj3*r01);
IkReal x14895=(gconst50*r10);
IkReal x14896=(gconst49*sj3);
IkReal x14897=((1.0)*cj2);
IkReal x14898=(cj1*sj2);
IkReal x14899=(cj3*r11);
IkReal x14900=(gconst50*r00);
IkReal x14901=(cj3*r21);
IkReal x14902=(cj3*gconst49);
IkReal x14903=(cj1*x14897);
IkReal x14904=((1.0)*x14890);
IkReal x14905=((1.0)*x14889);
IkReal x14906=(gconst49*x14889);
IkReal x14907=(gconst49*x14890);
IkReal x14908=(cj3*x14889);
evalcond[0]=(((r21*x14906))+(((-1.0)*r22*x14904))+(((-1.0)*x14892*x14905)));
evalcond[1]=((((-1.0)*r12*x14904))+((r11*x14906))+(((-1.0)*x14895*x14905)));
evalcond[2]=((-1.0)+((r01*x14906))+(((-1.0)*r02*x14904))+(((-1.0)*x14900*x14905)));
evalcond[3]=(((x14894*x14907))+((r01*x14893))+((r00*x14896))+((r02*x14908))+(((-1.0)*cj3*x14900*x14904)));
evalcond[4]=(((r00*x14902))+((gconst50*x14894))+(((-1.0)*r02*sj3*x14905))+((r00*x14890*x14893))+(((-1.0)*r01*x14896*x14904)));
evalcond[5]=(((r22*x14908))+((cj2*sj1))+(((-1.0)*cj3*x14892*x14904))+x14898+((r21*x14893))+((x14901*x14907))+((r20*x14896)));
evalcond[6]=(((r10*x14896))+(((-1.0)*cj3*x14895*x14904))+((r11*x14893))+(((-1.0)*x14903))+x14891+((r12*x14908))+((x14899*x14907)));
evalcond[7]=((((-1.0)*x14903))+x14891+(((-1.0)*r22*sj3*x14905))+((sj3*x14890*x14892))+(((-1.0)*r21*x14896*x14904))+((r20*x14902))+((gconst50*x14901)));
evalcond[8]=((((-1.0)*sj1*x14897))+((gconst50*x14899))+(((-1.0)*r11*x14896*x14904))+((r10*x14890*x14893))+(((-1.0)*x14898))+(((-1.0)*r12*sj3*x14905))+((r10*x14902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14910 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14910)==0){
continue;
}
IkReal x14909=pow(x14910,-0.5);
CheckValue<IkReal> x14911 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14911.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14911.value))));
IkReal gconst52=((1.0)*r21*x14909);
IkReal gconst53=((-1.0)*r20*x14909);
CheckValue<IkReal> x14912 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14912.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14912.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14915 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14915.valid){
continue;
}
IkReal x14913=((1.0)*(x14915.value));
IkReal x14914=x14909;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14913)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14913)));
IkReal gconst52=((1.0)*r21*x14914);
IkReal gconst53=((-1.0)*r20*x14914);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14918 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14918.valid){
continue;
}
IkReal x14916=((1.0)*(x14918.value));
IkReal x14917=x14909;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14916)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14916)));
IkReal gconst52=((1.0)*r21*x14917);
IkReal gconst53=((-1.0)*r20*x14917);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14921 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14921.valid){
continue;
}
IkReal x14919=((1.0)*(x14921.value));
IkReal x14920=x14909;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14919)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14919)));
IkReal gconst52=((1.0)*r21*x14920);
IkReal gconst53=((-1.0)*r20*x14920);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14922=gconst52*gconst52;
IkReal x14923=gconst53*gconst53;
IkReal x14924=(gconst53*r01);
IkReal x14925=(cj3*r20);
IkReal x14926=(r22*sj3);
IkReal x14927=((1.0)*cj3);
IkReal x14928=(gconst52*sj3);
IkReal x14929=((1.0)*r00);
IkReal x14930=(gconst52*r00);
IkReal x14931=(r21*x14922);
CheckValue<IkReal> x14932=IKPowWithIntegerCheck(IKsign((((cj3*gconst53*r21*x14930))+(((-1.0)*r02*r22*x14927))+((gconst52*x14924*x14925))+(((-1.0)*r01*x14927*x14931))+(((-1.0)*x14923*x14925*x14929)))),-1);
if(!x14932.valid){
continue;
}
CheckValue<IkReal> x14933 = IKatan2WithCheck(IkReal((((x14924*x14926))+((x14926*x14930)))),IkReal((((r00*sj3*x14931))+(((-1.0)*gconst53*r20*x14928*x14929))+(((-1.0)*r01*r20*sj3*x14923))+((r21*x14924*x14928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14932.value)))+(x14933.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14934=IKsin(j4);
IkReal x14935=IKcos(j4);
IkReal x14936=(sj1*sj2);
IkReal x14937=((1.0)*cj1);
IkReal x14938=(cj3*gconst52);
IkReal x14939=(gconst53*sj3);
IkReal x14940=(cj3*gconst53);
IkReal x14941=(cj2*sj1);
IkReal x14942=(gconst52*sj3);
IkReal x14943=(cj2*x14937);
IkReal x14944=((1.0)*x14935);
IkReal x14945=((1.0)*x14934);
IkReal x14946=(gconst52*x14934);
IkReal x14947=(cj3*x14934);
evalcond[0]=((((-1.0)*gconst53*r20*x14945))+((r21*x14946))+(((-1.0)*r22*x14944)));
evalcond[1]=((((-1.0)*r12*x14944))+(((-1.0)*gconst53*r10*x14945))+((r11*x14946)));
evalcond[2]=((-1.0)+((r01*x14946))+(((-1.0)*r02*x14944))+(((-1.0)*gconst53*r00*x14945)));
evalcond[3]=(((r00*x14942))+((r01*x14939))+((r02*x14947))+(((-1.0)*r00*x14940*x14944))+((r01*x14935*x14938)));
evalcond[4]=((((-1.0)*r02*sj3*x14945))+((r01*x14940))+((r00*x14935*x14939))+((r00*x14938))+(((-1.0)*r01*x14942*x14944)));
evalcond[5]=((((-1.0)*r20*x14940*x14944))+x14941+((r22*x14947))+((cj1*sj2))+((r21*x14939))+((r21*x14935*x14938))+((r20*x14942)));
evalcond[6]=(((r12*x14947))+x14936+((r10*x14942))+(((-1.0)*r10*x14940*x14944))+((r11*x14935*x14938))+(((-1.0)*x14943))+((r11*x14939)));
evalcond[7]=((((-1.0)*r21*x14942*x14944))+x14936+((r20*x14935*x14939))+(((-1.0)*x14943))+(((-1.0)*r22*sj3*x14945))+((r21*x14940))+((r20*x14938)));
evalcond[8]=((((-1.0)*r11*x14942*x14944))+((r10*x14935*x14939))+(((-1.0)*r12*sj3*x14945))+((r10*x14938))+(((-1.0)*x14941))+(((-1.0)*sj2*x14937))+((r11*x14940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14948=((1.0)*gconst53);
CheckValue<IkReal> x14949=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14948))+(((-1.0)*gconst52*r10)))),-1);
if(!x14949.valid){
continue;
}
CheckValue<IkReal> x14950 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14948))+((gconst52*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14949.value)))+(x14950.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14951=IKsin(j4);
IkReal x14952=IKcos(j4);
IkReal x14953=(sj1*sj2);
IkReal x14954=((1.0)*cj1);
IkReal x14955=(cj3*gconst52);
IkReal x14956=(gconst53*sj3);
IkReal x14957=(cj3*gconst53);
IkReal x14958=(cj2*sj1);
IkReal x14959=(gconst52*sj3);
IkReal x14960=(cj2*x14954);
IkReal x14961=((1.0)*x14952);
IkReal x14962=((1.0)*x14951);
IkReal x14963=(gconst52*x14951);
IkReal x14964=(cj3*x14951);
evalcond[0]=((((-1.0)*r22*x14961))+((r21*x14963))+(((-1.0)*gconst53*r20*x14962)));
evalcond[1]=((((-1.0)*r12*x14961))+((r11*x14963))+(((-1.0)*gconst53*r10*x14962)));
evalcond[2]=((-1.0)+((r01*x14963))+(((-1.0)*r02*x14961))+(((-1.0)*gconst53*r00*x14962)));
evalcond[3]=(((r01*x14956))+((r00*x14959))+((r02*x14964))+(((-1.0)*r00*x14957*x14961))+((r01*x14952*x14955)));
evalcond[4]=(((r00*x14952*x14956))+((r01*x14957))+(((-1.0)*r02*sj3*x14962))+((r00*x14955))+(((-1.0)*r01*x14959*x14961)));
evalcond[5]=(((r22*x14964))+x14958+((cj1*sj2))+((r21*x14952*x14955))+(((-1.0)*r20*x14957*x14961))+((r21*x14956))+((r20*x14959)));
evalcond[6]=(x14953+((r12*x14964))+(((-1.0)*r10*x14957*x14961))+((r10*x14959))+(((-1.0)*x14960))+((r11*x14952*x14955))+((r11*x14956)));
evalcond[7]=(x14953+(((-1.0)*r22*sj3*x14962))+(((-1.0)*x14960))+((r20*x14952*x14956))+(((-1.0)*r21*x14959*x14961))+((r21*x14957))+((r20*x14955)));
evalcond[8]=((((-1.0)*sj2*x14954))+((r10*x14955))+(((-1.0)*r11*x14959*x14961))+((r10*x14952*x14956))+(((-1.0)*x14958))+(((-1.0)*r12*sj3*x14962))+((r11*x14957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14965 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14965.valid){
continue;
}
CheckValue<IkReal> x14966=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14965.value)+(((1.5707963267949)*(x14966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14967=IKsin(j4);
IkReal x14968=IKcos(j4);
IkReal x14969=(sj1*sj2);
IkReal x14970=((1.0)*cj1);
IkReal x14971=(cj3*gconst52);
IkReal x14972=(gconst53*sj3);
IkReal x14973=(cj3*gconst53);
IkReal x14974=(cj2*sj1);
IkReal x14975=(gconst52*sj3);
IkReal x14976=(cj2*x14970);
IkReal x14977=((1.0)*x14968);
IkReal x14978=((1.0)*x14967);
IkReal x14979=(gconst52*x14967);
IkReal x14980=(cj3*x14967);
evalcond[0]=((((-1.0)*gconst53*r20*x14978))+(((-1.0)*r22*x14977))+((r21*x14979)));
evalcond[1]=((((-1.0)*r12*x14977))+((r11*x14979))+(((-1.0)*gconst53*r10*x14978)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x14978))+((r01*x14979))+(((-1.0)*r02*x14977)));
evalcond[3]=((((-1.0)*r00*x14973*x14977))+((r01*x14968*x14971))+((r02*x14980))+((r01*x14972))+((r00*x14975)));
evalcond[4]=(((r00*x14968*x14972))+(((-1.0)*r02*sj3*x14978))+(((-1.0)*r01*x14975*x14977))+((r01*x14973))+((r00*x14971)));
evalcond[5]=(x14974+((cj1*sj2))+((r22*x14980))+((r20*x14975))+((r21*x14972))+(((-1.0)*r20*x14973*x14977))+((r21*x14968*x14971)));
evalcond[6]=((((-1.0)*r10*x14973*x14977))+x14969+((r11*x14968*x14971))+(((-1.0)*x14976))+((r11*x14972))+((r12*x14980))+((r10*x14975)));
evalcond[7]=((((-1.0)*r22*sj3*x14978))+((r20*x14968*x14972))+x14969+(((-1.0)*x14976))+(((-1.0)*r21*x14975*x14977))+((r20*x14971))+((r21*x14973)));
evalcond[8]=((((-1.0)*sj2*x14970))+(((-1.0)*x14974))+((r10*x14968*x14972))+((r11*x14973))+(((-1.0)*r11*x14975*x14977))+(((-1.0)*r12*sj3*x14978))+((r10*x14971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14981=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14981);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14981);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14982=(r01*sj5);
IkReal x14983=((1.0)*cj5*r00);
j4eval[0]=(x14982+(((-1.0)*x14983)));
j4eval[1]=((((-1.0)*cj3*x14983))+((cj3*x14982)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14984=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14984);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14984);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14985=(cj5*r00);
IkReal x14986=(r01*sj5);
j4eval[0]=(x14986+(((-1.0)*x14985)));
j4eval[1]=(((sj3*x14985))+(((-1.0)*sj3*x14986)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14987=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14987);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14987);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14988=((1.0)*r00);
CheckValue<IkReal> x14989=IKPowWithIntegerCheck(cj3,-1);
if(!x14989.valid){
continue;
}
CheckValue<IkReal> x14990=IKPowWithIntegerCheck(r22,-1);
if(!x14990.valid){
continue;
}
CheckValue<IkReal> x14991=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14988))),-1);
if(!x14991.valid){
continue;
}
if( IKabs(((x14989.value)*(x14990.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14991.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14988)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14989.value)*(x14990.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14991.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14988))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14989.value)*(x14990.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14991.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14988))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14992=IKsin(j4);
IkReal x14993=IKcos(j4);
IkReal x14994=(sj1*sj2);
IkReal x14995=(cj5*sj3);
IkReal x14996=(r11*sj5);
IkReal x14997=(cj3*cj5);
IkReal x14998=((1.0)*cj1);
IkReal x14999=(cj3*sj5);
IkReal x15000=(sj3*sj5);
IkReal x15001=(cj2*sj1);
IkReal x15002=(r01*sj5);
IkReal x15003=((1.0)*sj3);
IkReal x15004=(cj2*x14998);
IkReal x15005=(r10*x14993);
IkReal x15006=(r22*x14992);
IkReal x15007=(cj3*x14993);
IkReal x15008=((1.0)*cj5*x14992);
evalcond[0]=((-1.0)*r22*x14993);
evalcond[1]=(((cj1*sj2))+x15001+((cj3*x15006)));
evalcond[2]=((((-1.0)*r10*x15008))+((x14992*x14996)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15008))+((x14992*x15002)));
evalcond[4]=((((-1.0)*x15003*x15006))+x14994+(((-1.0)*x15004)));
evalcond[5]=(((r00*x15000))+((r01*x14993*x14999))+(((-1.0)*r00*x14993*x14997))+((r01*x14995)));
evalcond[6]=(((r00*x14999))+(((-1.0)*r01*x14993*x15000))+((r01*x14997))+((r00*x14993*x14995)));
evalcond[7]=(((x14996*x15007))+x14994+((r10*x15000))+((r11*x14995))+(((-1.0)*x14997*x15005))+(((-1.0)*x15004)));
evalcond[8]=((((-1.0)*x15001))+((r10*x14999))+((r11*x14997))+(((-1.0)*x14993*x14996*x15003))+(((-1.0)*sj2*x14998))+((x14995*x15005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15009=((1.0)*cj3);
IkReal x15010=(cj5*r00);
IkReal x15011=(r01*sj5);
CheckValue<IkReal> x15012=IKPowWithIntegerCheck(((((-1.0)*x15010))+x15011),-1);
if(!x15012.valid){
continue;
}
CheckValue<IkReal> x15013=IKPowWithIntegerCheck((((sj3*x15010))+(((-1.0)*sj3*x15011))),-1);
if(!x15013.valid){
continue;
}
if( IKabs(x15012.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15013.value)*(((((-1.0)*cj5*r01*x15009))+(((-1.0)*r00*sj5*x15009)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15012.value)+IKsqr(((x15013.value)*(((((-1.0)*cj5*r01*x15009))+(((-1.0)*r00*sj5*x15009))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15012.value, ((x15013.value)*(((((-1.0)*cj5*r01*x15009))+(((-1.0)*r00*sj5*x15009))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15014=IKsin(j4);
IkReal x15015=IKcos(j4);
IkReal x15016=(sj1*sj2);
IkReal x15017=(cj5*sj3);
IkReal x15018=(r11*sj5);
IkReal x15019=(cj3*cj5);
IkReal x15020=((1.0)*cj1);
IkReal x15021=(cj3*sj5);
IkReal x15022=(sj3*sj5);
IkReal x15023=(cj2*sj1);
IkReal x15024=(r01*sj5);
IkReal x15025=((1.0)*sj3);
IkReal x15026=(cj2*x15020);
IkReal x15027=(r10*x15015);
IkReal x15028=(r22*x15014);
IkReal x15029=(cj3*x15015);
IkReal x15030=((1.0)*cj5*x15014);
evalcond[0]=((-1.0)*r22*x15015);
evalcond[1]=(((cj1*sj2))+x15023+((cj3*x15028)));
evalcond[2]=(((x15014*x15018))+(((-1.0)*r10*x15030)));
evalcond[3]=((-1.0)+((x15014*x15024))+(((-1.0)*r00*x15030)));
evalcond[4]=((((-1.0)*x15025*x15028))+x15016+(((-1.0)*x15026)));
evalcond[5]=(((r00*x15022))+(((-1.0)*r00*x15015*x15019))+((r01*x15015*x15021))+((r01*x15017)));
evalcond[6]=(((r00*x15021))+(((-1.0)*r01*x15015*x15022))+((r01*x15019))+((r00*x15015*x15017)));
evalcond[7]=(((r10*x15022))+x15016+(((-1.0)*x15019*x15027))+(((-1.0)*x15026))+((r11*x15017))+((x15018*x15029)));
evalcond[8]=((((-1.0)*x15023))+((r10*x15021))+((r11*x15019))+(((-1.0)*sj2*x15020))+(((-1.0)*x15015*x15018*x15025))+((x15017*x15027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15031=((1.0)*sj3);
IkReal x15032=(r01*sj5);
IkReal x15033=((1.0)*cj5*r00);
CheckValue<IkReal> x15034=IKPowWithIntegerCheck(((((-1.0)*x15033))+x15032),-1);
if(!x15034.valid){
continue;
}
CheckValue<IkReal> x15035=IKPowWithIntegerCheck((((cj3*x15032))+(((-1.0)*cj3*x15033))),-1);
if(!x15035.valid){
continue;
}
if( IKabs(x15034.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15035.value)*(((((-1.0)*r00*sj5*x15031))+(((-1.0)*cj5*r01*x15031)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15034.value)+IKsqr(((x15035.value)*(((((-1.0)*r00*sj5*x15031))+(((-1.0)*cj5*r01*x15031))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15034.value, ((x15035.value)*(((((-1.0)*r00*sj5*x15031))+(((-1.0)*cj5*r01*x15031))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15036=IKsin(j4);
IkReal x15037=IKcos(j4);
IkReal x15038=(sj1*sj2);
IkReal x15039=(cj5*sj3);
IkReal x15040=(r11*sj5);
IkReal x15041=(cj3*cj5);
IkReal x15042=((1.0)*cj1);
IkReal x15043=(cj3*sj5);
IkReal x15044=(sj3*sj5);
IkReal x15045=(cj2*sj1);
IkReal x15046=(r01*sj5);
IkReal x15047=((1.0)*sj3);
IkReal x15048=(cj2*x15042);
IkReal x15049=(r10*x15037);
IkReal x15050=(r22*x15036);
IkReal x15051=(cj3*x15037);
IkReal x15052=((1.0)*cj5*x15036);
evalcond[0]=((-1.0)*r22*x15037);
evalcond[1]=(((cj1*sj2))+x15045+((cj3*x15050)));
evalcond[2]=((((-1.0)*r10*x15052))+((x15036*x15040)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15052))+((x15036*x15046)));
evalcond[4]=((((-1.0)*x15048))+x15038+(((-1.0)*x15047*x15050)));
evalcond[5]=(((r01*x15039))+((r00*x15044))+(((-1.0)*r00*x15037*x15041))+((r01*x15037*x15043)));
evalcond[6]=((((-1.0)*r01*x15037*x15044))+((r00*x15043))+((r01*x15041))+((r00*x15037*x15039)));
evalcond[7]=((((-1.0)*x15048))+x15038+((r11*x15039))+((r10*x15044))+((x15040*x15051))+(((-1.0)*x15041*x15049)));
evalcond[8]=((((-1.0)*sj2*x15042))+((r11*x15041))+((x15039*x15049))+(((-1.0)*x15037*x15040*x15047))+(((-1.0)*x15045))+((r10*x15043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15053=cj5*cj5;
IkReal x15054=(cj3*r20);
IkReal x15055=(r21*sj3);
IkReal x15056=((1.0)*cj3);
IkReal x15057=(r01*r21);
IkReal x15058=(r01*sj3);
IkReal x15059=(r00*sj5);
IkReal x15060=(cj5*r01*sj5);
IkReal x15061=((1.0)*x15053);
CheckValue<IkReal> x15062 = IKatan2WithCheck(IkReal((((r22*sj3*x15059))+((cj5*r22*x15058)))),IkReal(((((-1.0)*r00*x15055*x15061))+(((-1.0)*r20*x15058*x15061))+((x15055*x15060))+(((-1.0)*cj5*r20*sj3*x15059))+((r00*x15055)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15062.valid){
continue;
}
CheckValue<IkReal> x15063=IKPowWithIntegerCheck(IKsign((((cj3*cj5*r21*x15059))+(((-1.0)*r02*r22*x15056))+(((-1.0)*r00*x15054*x15061))+((cj3*x15053*x15057))+((x15054*x15060))+(((-1.0)*x15056*x15057)))),-1);
if(!x15063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15062.value)+(((1.5707963267949)*(x15063.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15064=IKsin(j4);
IkReal x15065=IKcos(j4);
IkReal x15066=(sj1*sj2);
IkReal x15067=(r11*sj5);
IkReal x15068=(cj5*r10);
IkReal x15069=(cj5*r01);
IkReal x15070=(cj5*r00);
IkReal x15071=((1.0)*cj1);
IkReal x15072=(cj3*sj5);
IkReal x15073=(r21*sj5);
IkReal x15074=(cj5*sj3);
IkReal x15075=(sj3*sj5);
IkReal x15076=(cj2*sj1);
IkReal x15077=(r01*sj5);
IkReal x15078=(cj3*cj5);
IkReal x15079=(cj5*r20);
IkReal x15080=(cj2*x15071);
IkReal x15081=((1.0)*x15065);
IkReal x15082=((1.0)*x15064);
IkReal x15083=(cj3*x15065);
IkReal x15084=(sj3*x15065);
IkReal x15085=(cj3*x15064);
evalcond[0]=((((-1.0)*r22*x15081))+((x15064*x15073))+(((-1.0)*x15079*x15082)));
evalcond[1]=((((-1.0)*r12*x15081))+(((-1.0)*x15068*x15082))+((x15064*x15067)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15081))+((x15064*x15077))+(((-1.0)*x15070*x15082)));
evalcond[3]=(((sj3*x15069))+(((-1.0)*cj3*x15070*x15081))+((r02*x15085))+((r00*x15075))+((r01*x15065*x15072)));
evalcond[4]=((((-1.0)*r01*x15075*x15081))+((r00*x15072))+(((-1.0)*r02*sj3*x15082))+((cj3*x15069))+((x15070*x15084)));
evalcond[5]=((((-1.0)*r20*x15078*x15081))+((cj1*sj2))+((r22*x15085))+x15076+((r20*x15075))+((r21*x15074))+((r21*x15065*x15072)));
evalcond[6]=(((r12*x15085))+(((-1.0)*x15080))+((r11*x15074))+x15066+(((-1.0)*cj3*x15068*x15081))+((r10*x15075))+((x15067*x15083)));
evalcond[7]=((((-1.0)*sj3*x15073*x15081))+(((-1.0)*x15080))+x15066+((r20*x15065*x15074))+((r20*x15072))+((r21*x15078))+(((-1.0)*r22*sj3*x15082)));
evalcond[8]=((((-1.0)*sj3*x15067*x15081))+(((-1.0)*sj2*x15071))+((r11*x15078))+(((-1.0)*x15076))+((r10*x15072))+(((-1.0)*r12*sj3*x15082))+((x15068*x15084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15086=((1.0)*cj5);
CheckValue<IkReal> x15087=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15086)))),-1);
if(!x15087.valid){
continue;
}
CheckValue<IkReal> x15088 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15087.value)))+(x15088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15089=IKsin(j4);
IkReal x15090=IKcos(j4);
IkReal x15091=(sj1*sj2);
IkReal x15092=(r11*sj5);
IkReal x15093=(cj5*r10);
IkReal x15094=(cj5*r01);
IkReal x15095=(cj5*r00);
IkReal x15096=((1.0)*cj1);
IkReal x15097=(cj3*sj5);
IkReal x15098=(r21*sj5);
IkReal x15099=(cj5*sj3);
IkReal x15100=(sj3*sj5);
IkReal x15101=(cj2*sj1);
IkReal x15102=(r01*sj5);
IkReal x15103=(cj3*cj5);
IkReal x15104=(cj5*r20);
IkReal x15105=(cj2*x15096);
IkReal x15106=((1.0)*x15090);
IkReal x15107=((1.0)*x15089);
IkReal x15108=(cj3*x15090);
IkReal x15109=(sj3*x15090);
IkReal x15110=(cj3*x15089);
evalcond[0]=((((-1.0)*x15104*x15107))+(((-1.0)*r22*x15106))+((x15089*x15098)));
evalcond[1]=((((-1.0)*r12*x15106))+(((-1.0)*x15093*x15107))+((x15089*x15092)));
evalcond[2]=((-1.0)+((x15089*x15102))+(((-1.0)*x15095*x15107))+(((-1.0)*r02*x15106)));
evalcond[3]=(((sj3*x15094))+((r00*x15100))+(((-1.0)*cj3*x15095*x15106))+((r01*x15090*x15097))+((r02*x15110)));
evalcond[4]=(((x15095*x15109))+((r00*x15097))+((cj3*x15094))+(((-1.0)*r01*x15100*x15106))+(((-1.0)*r02*sj3*x15107)));
evalcond[5]=(((r21*x15099))+((cj1*sj2))+x15101+((r20*x15100))+(((-1.0)*r20*x15103*x15106))+((r22*x15110))+((r21*x15090*x15097)));
evalcond[6]=((((-1.0)*cj3*x15093*x15106))+x15091+((r11*x15099))+((r10*x15100))+((r12*x15110))+(((-1.0)*x15105))+((x15092*x15108)));
evalcond[7]=(((r20*x15090*x15099))+(((-1.0)*sj3*x15098*x15106))+((r20*x15097))+((r21*x15103))+x15091+(((-1.0)*r22*sj3*x15107))+(((-1.0)*x15105)));
evalcond[8]=(((x15093*x15109))+(((-1.0)*sj3*x15092*x15106))+((r10*x15097))+(((-1.0)*r12*sj3*x15107))+(((-1.0)*x15101))+(((-1.0)*sj2*x15096))+((r11*x15103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15111=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15111.valid){
continue;
}
CheckValue<IkReal> x15112 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15111.value)))+(x15112.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15113=IKsin(j4);
IkReal x15114=IKcos(j4);
IkReal x15115=(sj1*sj2);
IkReal x15116=(r11*sj5);
IkReal x15117=(cj5*r10);
IkReal x15118=(cj5*r01);
IkReal x15119=(cj5*r00);
IkReal x15120=((1.0)*cj1);
IkReal x15121=(cj3*sj5);
IkReal x15122=(r21*sj5);
IkReal x15123=(cj5*sj3);
IkReal x15124=(sj3*sj5);
IkReal x15125=(cj2*sj1);
IkReal x15126=(r01*sj5);
IkReal x15127=(cj3*cj5);
IkReal x15128=(cj5*r20);
IkReal x15129=(cj2*x15120);
IkReal x15130=((1.0)*x15114);
IkReal x15131=((1.0)*x15113);
IkReal x15132=(cj3*x15114);
IkReal x15133=(sj3*x15114);
IkReal x15134=(cj3*x15113);
evalcond[0]=((((-1.0)*x15128*x15131))+((x15113*x15122))+(((-1.0)*r22*x15130)));
evalcond[1]=((((-1.0)*r12*x15130))+(((-1.0)*x15117*x15131))+((x15113*x15116)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15130))+((x15113*x15126))+(((-1.0)*x15119*x15131)));
evalcond[3]=((((-1.0)*cj3*x15119*x15130))+((r00*x15124))+((sj3*x15118))+((r01*x15114*x15121))+((r02*x15134)));
evalcond[4]=((((-1.0)*r02*sj3*x15131))+((r00*x15121))+(((-1.0)*r01*x15124*x15130))+((x15119*x15133))+((cj3*x15118)));
evalcond[5]=(((r20*x15124))+((r21*x15123))+((cj1*sj2))+((r22*x15134))+x15125+((r21*x15114*x15121))+(((-1.0)*r20*x15127*x15130)));
evalcond[6]=((((-1.0)*x15129))+x15115+((r12*x15134))+((x15116*x15132))+((r10*x15124))+((r11*x15123))+(((-1.0)*cj3*x15117*x15130)));
evalcond[7]=(((r20*x15121))+((r21*x15127))+(((-1.0)*x15129))+(((-1.0)*sj3*x15122*x15130))+(((-1.0)*r22*sj3*x15131))+x15115+((r20*x15114*x15123)));
evalcond[8]=((((-1.0)*r12*sj3*x15131))+((x15117*x15133))+(((-1.0)*sj3*x15116*x15130))+(((-1.0)*x15125))+((r10*x15121))+(((-1.0)*sj2*x15120))+((r11*x15127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15135=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15135;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15135);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15136=((1.0)*cj5);
IkReal x15137=((((-1.0)*r21*x15136))+(((-1.0)*r20*sj5)));
j4eval[0]=x15137;
j4eval[1]=((IKabs(((((-1.0)*r10*x15136))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15138=cj5*cj5;
IkReal x15139=(cj3*r01);
IkReal x15140=(cj5*sj5);
IkReal x15141=((1.0)*cj3);
IkReal x15142=(((cj3*r00*r21*x15140))+(((-1.0)*r02*r22*x15141))+((r21*x15138*x15139))+(((-1.0)*r00*r20*x15138*x15141))+(((-1.0)*r21*x15139))+((r20*x15139*x15140)));
j4eval[0]=x15142;
j4eval[1]=IKsign(x15142);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15143=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15143;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15143);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15144=((1.0)*cj5);
IkReal x15145=((((-1.0)*r21*x15144))+(((-1.0)*r20*sj5)));
j4eval[0]=x15145;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15144))+((r11*sj5))))));
j4eval[2]=IKsign(x15145);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15146=cj5*cj5;
IkReal x15147=r01*r01;
IkReal x15148=(cj5*r00);
IkReal x15149=(r01*sj5);
IkReal x15150=(((x15146*(r00*r00)))+x15147+(r02*r02)+(((-2.0)*x15148*x15149))+(((-1.0)*x15146*x15147)));
j4eval[0]=x15150;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x15149))+x15148))));
j4eval[2]=IKsign(x15150);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15151=cj5*cj5;
IkReal x15152=r01*r01;
IkReal x15153=(r01*sj5);
IkReal x15154=(cj5*r00);
CheckValue<IkReal> x15155=IKPowWithIntegerCheck(IKsign((((x15151*(r00*r00)))+(((-2.0)*x15153*x15154))+x15152+(((-1.0)*x15151*x15152))+(r02*r02))),-1);
if(!x15155.valid){
continue;
}
CheckValue<IkReal> x15156 = IKatan2WithCheck(IkReal((x15154+(((-1.0)*x15153)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15155.value)))+(x15156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15157=IKsin(j4);
IkReal x15158=IKcos(j4);
IkReal x15159=(cj5*r10);
IkReal x15160=(r01*sj5);
IkReal x15161=(cj5*r00);
IkReal x15162=(cj5*r20);
IkReal x15163=((1.0)*x15158);
IkReal x15164=((1.0)*x15157);
IkReal x15165=(sj5*x15157);
evalcond[0]=((((-1.0)*x15162*x15164))+((r21*x15165))+(((-1.0)*r22*x15163)));
evalcond[1]=((((-1.0)*x15159*x15164))+((r11*x15165))+(((-1.0)*r12*x15163)));
evalcond[2]=((((-1.0)*x15160*x15163))+((x15158*x15161))+(((-1.0)*r02*x15164)));
evalcond[3]=((1.0)+((x15157*x15160))+(((-1.0)*r02*x15163))+(((-1.0)*x15161*x15164)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x15163))+((x15158*x15159))+(((-1.0)*r12*x15164)));
evalcond[5]=((((-1.0)*r21*sj5*x15163))+((x15158*x15162))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15166=((1.0)*cj5);
CheckValue<IkReal> x15167 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15167.valid){
continue;
}
CheckValue<IkReal> x15168=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15166))+(((-1.0)*r20*sj5)))),-1);
if(!x15168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15167.value)+(((1.5707963267949)*(x15168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15169=IKsin(j4);
IkReal x15170=IKcos(j4);
IkReal x15171=(cj5*r10);
IkReal x15172=(r01*sj5);
IkReal x15173=(cj5*r00);
IkReal x15174=(cj5*r20);
IkReal x15175=((1.0)*x15170);
IkReal x15176=((1.0)*x15169);
IkReal x15177=(sj5*x15169);
evalcond[0]=((((-1.0)*x15174*x15176))+((r21*x15177))+(((-1.0)*r22*x15175)));
evalcond[1]=(((r11*x15177))+(((-1.0)*x15171*x15176))+(((-1.0)*r12*x15175)));
evalcond[2]=(((x15170*x15173))+(((-1.0)*r02*x15176))+(((-1.0)*x15172*x15175)));
evalcond[3]=((1.0)+(((-1.0)*x15173*x15176))+((x15169*x15172))+(((-1.0)*r02*x15175)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15170*x15171))+(((-1.0)*r11*sj5*x15175))+(((-1.0)*r12*x15176)));
evalcond[5]=((((-1.0)*r21*sj5*x15175))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15170*x15174))+(((-1.0)*r22*x15176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15178 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15178.valid){
continue;
}
CheckValue<IkReal> x15179=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15178.value)+(((1.5707963267949)*(x15179.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15180=IKsin(j4);
IkReal x15181=IKcos(j4);
IkReal x15182=(cj5*r10);
IkReal x15183=(r01*sj5);
IkReal x15184=(cj5*r00);
IkReal x15185=(cj5*r20);
IkReal x15186=((1.0)*x15181);
IkReal x15187=((1.0)*x15180);
IkReal x15188=(sj5*x15180);
evalcond[0]=((((-1.0)*x15185*x15187))+((r21*x15188))+(((-1.0)*r22*x15186)));
evalcond[1]=(((r11*x15188))+(((-1.0)*x15182*x15187))+(((-1.0)*r12*x15186)));
evalcond[2]=((((-1.0)*r02*x15187))+((x15181*x15184))+(((-1.0)*x15183*x15186)));
evalcond[3]=((1.0)+(((-1.0)*x15184*x15187))+(((-1.0)*r02*x15186))+((x15180*x15183)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x15186))+((cj1*sj2))+((x15181*x15182))+(((-1.0)*r12*x15187)));
evalcond[5]=((((-1.0)*r21*sj5*x15186))+((x15181*x15185))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15189=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15189;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15189);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15190=((1.0)*cj5);
IkReal x15191=((((-1.0)*r21*x15190))+(((-1.0)*r20*sj5)));
j4eval[0]=x15191;
j4eval[1]=((IKabs(((((-1.0)*r10*x15190))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15191);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15192=cj5*cj5;
IkReal x15193=r01*r01;
IkReal x15194=(r01*sj5);
IkReal x15195=(cj5*r00);
IkReal x15196=(((x15192*x15193))+(((-1.0)*x15192*(r00*r00)))+(((2.0)*x15194*x15195))+(((-1.0)*(r02*r02)))+(((-1.0)*x15193)));
j4eval[0]=x15196;
j4eval[1]=IKsign(x15196);
j4eval[2]=((IKabs(r02))+(IKabs((x15194+(((-1.0)*x15195))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15197=cj5*cj5;
IkReal x15198=r01*r01;
IkReal x15199=(r01*sj5);
IkReal x15200=(cj5*r00);
CheckValue<IkReal> x15201 = IKatan2WithCheck(IkReal(((((-1.0)*x15200))+x15199)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15201.valid){
continue;
}
CheckValue<IkReal> x15202=IKPowWithIntegerCheck(IKsign(((((2.0)*x15199*x15200))+(((-1.0)*x15197*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x15198))+((x15197*x15198)))),-1);
if(!x15202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15201.value)+(((1.5707963267949)*(x15202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15203=IKcos(j4);
IkReal x15204=IKsin(j4);
IkReal x15205=(cj5*r00);
IkReal x15206=(cj5*r10);
IkReal x15207=(r21*sj5);
IkReal x15208=(cj5*r20);
IkReal x15209=((1.0)*x15203);
IkReal x15210=((1.0)*x15204);
IkReal x15211=(sj5*x15204);
IkReal x15212=(sj5*x15203);
evalcond[0]=(((r01*x15212))+(((-1.0)*x15205*x15209))+((r02*x15204)));
evalcond[1]=((((-1.0)*x15208*x15210))+((x15204*x15207))+(((-1.0)*r22*x15209)));
evalcond[2]=(((r11*x15211))+(((-1.0)*r12*x15209))+(((-1.0)*x15206*x15210)));
evalcond[3]=((1.0)+((r01*x15211))+(((-1.0)*x15205*x15210))+(((-1.0)*r02*x15209)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x15212))+((r12*x15204))+(((-1.0)*x15206*x15209)));
evalcond[5]=((((-1.0)*x15208*x15209))+((x15203*x15207))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15213=((1.0)*cj5);
CheckValue<IkReal> x15214 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15214.valid){
continue;
}
CheckValue<IkReal> x15215=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15213))+(((-1.0)*r20*sj5)))),-1);
if(!x15215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15214.value)+(((1.5707963267949)*(x15215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15216=IKcos(j4);
IkReal x15217=IKsin(j4);
IkReal x15218=(cj5*r00);
IkReal x15219=(cj5*r10);
IkReal x15220=(r21*sj5);
IkReal x15221=(cj5*r20);
IkReal x15222=((1.0)*x15216);
IkReal x15223=((1.0)*x15217);
IkReal x15224=(sj5*x15217);
IkReal x15225=(sj5*x15216);
evalcond[0]=((((-1.0)*x15218*x15222))+((r02*x15217))+((r01*x15225)));
evalcond[1]=((((-1.0)*x15221*x15223))+(((-1.0)*r22*x15222))+((x15217*x15220)));
evalcond[2]=((((-1.0)*r12*x15222))+(((-1.0)*x15219*x15223))+((r11*x15224)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15222))+(((-1.0)*x15218*x15223))+((r01*x15224)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x15217))+(((-1.0)*x15219*x15222))+((r11*x15225)));
evalcond[5]=((((-1.0)*x15221*x15222))+((x15216*x15220))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15226 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15226.valid){
continue;
}
CheckValue<IkReal> x15227=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15226.value)+(((1.5707963267949)*(x15227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15228=IKcos(j4);
IkReal x15229=IKsin(j4);
IkReal x15230=(cj5*r00);
IkReal x15231=(cj5*r10);
IkReal x15232=(r21*sj5);
IkReal x15233=(cj5*r20);
IkReal x15234=((1.0)*x15228);
IkReal x15235=((1.0)*x15229);
IkReal x15236=(sj5*x15229);
IkReal x15237=(sj5*x15228);
evalcond[0]=((((-1.0)*x15230*x15234))+((r01*x15237))+((r02*x15229)));
evalcond[1]=((((-1.0)*x15233*x15235))+((x15229*x15232))+(((-1.0)*r22*x15234)));
evalcond[2]=((((-1.0)*x15231*x15235))+(((-1.0)*r12*x15234))+((r11*x15236)));
evalcond[3]=((1.0)+(((-1.0)*x15230*x15235))+((r01*x15236))+(((-1.0)*r02*x15234)));
evalcond[4]=(((r12*x15229))+((cj2*sj1))+(((-1.0)*x15231*x15234))+((cj1*sj2))+((r11*x15237)));
evalcond[5]=((((-1.0)*x15233*x15234))+((r22*x15229))+((x15228*x15232))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15239 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15239)==0){
continue;
}
IkReal x15238=pow(x15239,-0.5);
CheckValue<IkReal> x15240 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15240.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15240.value));
IkReal gconst61=((-1.0)*r11*x15238);
IkReal gconst62=(r10*x15238);
CheckValue<IkReal> x15241 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15241.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15241.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15244 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15244.valid){
continue;
}
IkReal x15242=((-1.0)*(x15244.value));
IkReal x15243=x15238;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15242;
IkReal gconst60=x15242;
IkReal gconst61=((-1.0)*r11*x15243);
IkReal gconst62=(r10*x15243);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15247 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15247.valid){
continue;
}
IkReal x15245=((-1.0)*(x15247.value));
IkReal x15246=x15238;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15245;
IkReal gconst60=x15245;
IkReal gconst61=((-1.0)*r11*x15246);
IkReal gconst62=(r10*x15246);
CheckValue<IkReal> x15255=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15255.valid){
continue;
}
IkReal x15248=x15255.value;
IkReal x15249=(sj3*x15248);
IkReal x15250=(r20*x15249);
IkReal x15251=(r00*x15249);
IkReal x15252=(r01*x15249);
IkReal x15253=(r21*x15249);
IkReal x15254=(r10*r11*x15249);
j4eval[0]=IKsign((((r10*r11*r21*x15251))+((r01*r10*r11*x15250))+((r00*x15250*(r10*r10)))+((r21*x15252*(r11*r11)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15256=gconst61*gconst61;
IkReal x15257=gconst62*gconst62;
IkReal x15258=(cj3*r01);
IkReal x15259=(r22*sj3);
IkReal x15260=(gconst61*r00);
IkReal x15261=((1.0)*cj3);
IkReal x15262=(gconst62*r01);
IkReal x15263=((1.0)*sj3);
IkReal x15264=(gconst61*gconst62*r20);
IkReal x15265=(r21*x15256);
IkReal x15266=(r20*x15257);
CheckValue<IkReal> x15267 = IKatan2WithCheck(IkReal((((x15259*x15260))+((x15259*x15262)))),IkReal((((r00*sj3*x15265))+(((-1.0)*gconst62*r20*x15260*x15263))+((gconst61*r21*sj3*x15262))+(((-1.0)*r01*x15263*x15266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15267.valid){
continue;
}
CheckValue<IkReal> x15268=IKPowWithIntegerCheck(IKsign((((cj3*gconst62*r21*x15260))+(((-1.0)*r02*r22*x15261))+(((-1.0)*r00*x15261*x15266))+((x15258*x15264))+(((-1.0)*x15258*x15265)))),-1);
if(!x15268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15267.value)+(((1.5707963267949)*(x15268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15269=IKsin(j4);
IkReal x15270=IKcos(j4);
IkReal x15271=(cj2*sj1);
IkReal x15272=(cj1*sj2);
IkReal x15273=(gconst61*sj3);
IkReal x15274=(cj3*gconst61);
IkReal x15275=(cj3*gconst62);
IkReal x15276=(sj1*sj2);
IkReal x15277=(gconst62*sj3);
IkReal x15278=(cj1*cj2);
IkReal x15279=((1.0)*x15270);
IkReal x15280=((1.0)*x15269);
IkReal x15281=(gconst61*x15269);
IkReal x15282=(cj3*x15269);
IkReal x15283=(x15272+x15271);
evalcond[0]=((((-1.0)*gconst62*r20*x15280))+(((-1.0)*r22*x15279))+((r21*x15281)));
evalcond[1]=((((-1.0)*r12*x15279))+((r11*x15281))+(((-1.0)*gconst62*r10*x15280)));
evalcond[2]=((1.0)+((r01*x15281))+(((-1.0)*r02*x15279))+(((-1.0)*gconst62*r00*x15280)));
evalcond[3]=(((r02*x15282))+((r01*x15270*x15274))+(((-1.0)*r00*x15275*x15279))+((r01*x15277))+((r00*x15273)));
evalcond[4]=((((-1.0)*r01*x15273*x15279))+((r00*x15270*x15277))+(((-1.0)*r02*sj3*x15280))+((r01*x15275))+((r00*x15274)));
evalcond[5]=(((r22*x15282))+(((-1.0)*r20*x15275*x15279))+((r21*x15270*x15274))+x15283+((r20*x15273))+((r21*x15277)));
evalcond[6]=(((r11*x15277))+x15278+((r10*x15273))+(((-1.0)*r10*x15275*x15279))+(((-1.0)*x15276))+((r12*x15282))+((r11*x15270*x15274)));
evalcond[7]=(((r10*x15270*x15277))+((r11*x15275))+(((-1.0)*r12*sj3*x15280))+x15283+((r10*x15274))+(((-1.0)*r11*x15273*x15279)));
evalcond[8]=((((-1.0)*r22*sj3*x15280))+x15276+(((-1.0)*r21*x15273*x15279))+((r20*x15274))+((r21*x15275))+(((-1.0)*x15278))+((r20*x15270*x15277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15284=gconst61*gconst61;
IkReal x15285=gconst62*gconst62;
IkReal x15286=(cj3*r22);
IkReal x15287=(gconst62*r01);
IkReal x15288=(gconst61*r00);
IkReal x15289=((1.0)*r20);
IkReal x15290=(cj3*r21);
IkReal x15291=(r21*sj3);
CheckValue<IkReal> x15292=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst62*x15288*x15291))+(((-1.0)*gconst61*sj3*x15287*x15289))+((r01*x15284*x15291))+((r00*r20*sj3*x15285))+((r02*r22*sj3)))),-1);
if(!x15292.valid){
continue;
}
CheckValue<IkReal> x15293 = IKatan2WithCheck(IkReal((((x15286*x15287))+((x15286*x15288)))),IkReal(((((-1.0)*cj3*r01*x15285*x15289))+((gconst61*x15287*x15290))+(((-1.0)*cj3*gconst62*x15288*x15289))+((r00*x15284*x15290)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15292.value)))+(x15293.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15294=IKsin(j4);
IkReal x15295=IKcos(j4);
IkReal x15296=(cj2*sj1);
IkReal x15297=(cj1*sj2);
IkReal x15298=(gconst61*sj3);
IkReal x15299=(cj3*gconst61);
IkReal x15300=(cj3*gconst62);
IkReal x15301=(sj1*sj2);
IkReal x15302=(gconst62*sj3);
IkReal x15303=(cj1*cj2);
IkReal x15304=((1.0)*x15295);
IkReal x15305=((1.0)*x15294);
IkReal x15306=(gconst61*x15294);
IkReal x15307=(cj3*x15294);
IkReal x15308=(x15296+x15297);
evalcond[0]=((((-1.0)*gconst62*r20*x15305))+((r21*x15306))+(((-1.0)*r22*x15304)));
evalcond[1]=((((-1.0)*gconst62*r10*x15305))+(((-1.0)*r12*x15304))+((r11*x15306)));
evalcond[2]=((1.0)+((r01*x15306))+(((-1.0)*r02*x15304))+(((-1.0)*gconst62*r00*x15305)));
evalcond[3]=(((r02*x15307))+((r01*x15302))+((r01*x15295*x15299))+((r00*x15298))+(((-1.0)*r00*x15300*x15304)));
evalcond[4]=((((-1.0)*r02*sj3*x15305))+((r01*x15300))+(((-1.0)*r01*x15298*x15304))+((r00*x15295*x15302))+((r00*x15299)));
evalcond[5]=(((r20*x15298))+((r21*x15295*x15299))+((r21*x15302))+(((-1.0)*r20*x15300*x15304))+x15308+((r22*x15307)));
evalcond[6]=(((r10*x15298))+((r11*x15295*x15299))+(((-1.0)*r10*x15300*x15304))+(((-1.0)*x15301))+x15303+((r12*x15307))+((r11*x15302)));
evalcond[7]=(((r10*x15299))+(((-1.0)*r12*sj3*x15305))+(((-1.0)*r11*x15298*x15304))+x15308+((r10*x15295*x15302))+((r11*x15300)));
evalcond[8]=(((r20*x15299))+((r20*x15295*x15302))+(((-1.0)*r21*x15298*x15304))+(((-1.0)*x15303))+((r21*x15300))+x15301+(((-1.0)*r22*sj3*x15305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15309=((1.0)*gconst62);
CheckValue<IkReal> x15310 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15309))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15310.valid){
continue;
}
CheckValue<IkReal> x15311=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x15309)))),-1);
if(!x15311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15310.value)+(((1.5707963267949)*(x15311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15312=IKsin(j4);
IkReal x15313=IKcos(j4);
IkReal x15314=(cj2*sj1);
IkReal x15315=(cj1*sj2);
IkReal x15316=(gconst61*sj3);
IkReal x15317=(cj3*gconst61);
IkReal x15318=(cj3*gconst62);
IkReal x15319=(sj1*sj2);
IkReal x15320=(gconst62*sj3);
IkReal x15321=(cj1*cj2);
IkReal x15322=((1.0)*x15313);
IkReal x15323=((1.0)*x15312);
IkReal x15324=(gconst61*x15312);
IkReal x15325=(cj3*x15312);
IkReal x15326=(x15315+x15314);
evalcond[0]=((((-1.0)*gconst62*r20*x15323))+((r21*x15324))+(((-1.0)*r22*x15322)));
evalcond[1]=(((r11*x15324))+(((-1.0)*gconst62*r10*x15323))+(((-1.0)*r12*x15322)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15323))+((r01*x15324))+(((-1.0)*r02*x15322)));
evalcond[3]=((((-1.0)*r00*x15318*x15322))+((r00*x15316))+((r01*x15320))+((r01*x15313*x15317))+((r02*x15325)));
evalcond[4]=(((r01*x15318))+((r00*x15317))+(((-1.0)*r02*sj3*x15323))+(((-1.0)*r01*x15316*x15322))+((r00*x15313*x15320)));
evalcond[5]=(((r21*x15313*x15317))+((r22*x15325))+x15326+(((-1.0)*r20*x15318*x15322))+((r21*x15320))+((r20*x15316)));
evalcond[6]=(((r11*x15320))+(((-1.0)*r10*x15318*x15322))+(((-1.0)*x15319))+((r12*x15325))+x15321+((r10*x15316))+((r11*x15313*x15317)));
evalcond[7]=(((r11*x15318))+((r10*x15313*x15320))+x15326+(((-1.0)*r12*sj3*x15323))+(((-1.0)*r11*x15316*x15322))+((r10*x15317)));
evalcond[8]=((((-1.0)*x15321))+((r20*x15313*x15320))+x15319+((r21*x15318))+(((-1.0)*r22*sj3*x15323))+(((-1.0)*r21*x15316*x15322))+((r20*x15317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15328 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15328)==0){
continue;
}
IkReal x15327=pow(x15328,-0.5);
CheckValue<IkReal> x15329 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15329.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15329.value))));
IkReal gconst64=((1.0)*r11*x15327);
IkReal gconst65=((-1.0)*r10*x15327);
CheckValue<IkReal> x15330 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15330.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15330.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15333 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15333.valid){
continue;
}
IkReal x15331=((1.0)*(x15333.value));
IkReal x15332=x15327;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15331)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15331)));
IkReal gconst64=((1.0)*r11*x15332);
IkReal gconst65=((-1.0)*r10*x15332);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15334=gconst64*gconst64;
IkReal x15335=gconst65*gconst65;
IkReal x15336=(gconst65*r01);
IkReal x15337=(cj3*r22);
IkReal x15338=(gconst64*r00);
IkReal x15339=(cj3*r21);
IkReal x15340=((1.0)*gconst64*sj3);
IkReal x15341=((1.0)*cj3*r20);
CheckValue<IkReal> x15342 = IKatan2WithCheck(IkReal((((x15336*x15337))+((x15337*x15338)))),IkReal((((gconst64*x15336*x15339))+((r00*x15334*x15339))+(((-1.0)*r01*x15335*x15341))+(((-1.0)*gconst65*x15338*x15341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15342.valid){
continue;
}
CheckValue<IkReal> x15343=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15336*x15340))+((r01*r21*sj3*x15334))+((r00*r20*sj3*x15335))+(((-1.0)*gconst65*r21*sj3*x15338))+((r02*r22*sj3)))),-1);
if(!x15343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15342.value)+(((1.5707963267949)*(x15343.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15344=IKsin(j4);
IkReal x15345=IKcos(j4);
IkReal x15346=(cj2*sj1);
IkReal x15347=(cj1*sj2);
IkReal x15348=(cj3*gconst64);
IkReal x15349=(gconst65*r21);
IkReal x15350=(sj1*sj2);
IkReal x15351=(gconst65*sj3);
IkReal x15352=(gconst64*sj3);
IkReal x15353=(cj3*gconst65);
IkReal x15354=(cj1*cj2);
IkReal x15355=((1.0)*x15345);
IkReal x15356=((1.0)*x15344);
IkReal x15357=(cj3*x15344);
IkReal x15358=(gconst64*x15344);
IkReal x15359=(x15346+x15347);
evalcond[0]=((((-1.0)*r22*x15355))+(((-1.0)*gconst65*r20*x15356))+((r21*x15358)));
evalcond[1]=((((-1.0)*r12*x15355))+((r11*x15358))+(((-1.0)*gconst65*r10*x15356)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15356))+(((-1.0)*r02*x15355))+((r01*x15358)));
evalcond[3]=(((r01*x15345*x15348))+((r02*x15357))+(((-1.0)*r00*x15353*x15355))+((r01*x15351))+((r00*x15352)));
evalcond[4]=(((r00*x15348))+((r00*x15345*x15351))+((r01*x15353))+(((-1.0)*r02*sj3*x15356))+(((-1.0)*r01*x15352*x15355)));
evalcond[5]=((((-1.0)*r20*x15353*x15355))+((r22*x15357))+x15359+((sj3*x15349))+((r20*x15352))+((r21*x15345*x15348)));
evalcond[6]=(((r10*x15352))+((r12*x15357))+((r11*x15345*x15348))+x15354+((r11*x15351))+(((-1.0)*x15350))+(((-1.0)*r10*x15353*x15355)));
evalcond[7]=((((-1.0)*r11*x15352*x15355))+(((-1.0)*r12*sj3*x15356))+((r10*x15348))+x15359+((r11*x15353))+((r10*x15345*x15351)));
evalcond[8]=((((-1.0)*r21*x15352*x15355))+((cj3*x15349))+(((-1.0)*r22*sj3*x15356))+((r20*x15345*x15351))+x15350+((r20*x15348))+(((-1.0)*x15354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15360=((1.0)*gconst65);
CheckValue<IkReal> x15361=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r20))+(((-1.0)*r21*x15360)))),-1);
if(!x15361.valid){
continue;
}
CheckValue<IkReal> x15362 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15360))+((gconst64*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15361.value)))+(x15362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15363=IKsin(j4);
IkReal x15364=IKcos(j4);
IkReal x15365=(cj2*sj1);
IkReal x15366=(cj1*sj2);
IkReal x15367=(cj3*gconst64);
IkReal x15368=(gconst65*r21);
IkReal x15369=(sj1*sj2);
IkReal x15370=(gconst65*sj3);
IkReal x15371=(gconst64*sj3);
IkReal x15372=(cj3*gconst65);
IkReal x15373=(cj1*cj2);
IkReal x15374=((1.0)*x15364);
IkReal x15375=((1.0)*x15363);
IkReal x15376=(cj3*x15363);
IkReal x15377=(gconst64*x15363);
IkReal x15378=(x15365+x15366);
evalcond[0]=(((r21*x15377))+(((-1.0)*gconst65*r20*x15375))+(((-1.0)*r22*x15374)));
evalcond[1]=((((-1.0)*gconst65*r10*x15375))+(((-1.0)*r12*x15374))+((r11*x15377)));
evalcond[2]=((1.0)+((r01*x15377))+(((-1.0)*gconst65*r00*x15375))+(((-1.0)*r02*x15374)));
evalcond[3]=(((r02*x15376))+((r00*x15371))+((r01*x15370))+(((-1.0)*r00*x15372*x15374))+((r01*x15364*x15367)));
evalcond[4]=((((-1.0)*r02*sj3*x15375))+((r00*x15364*x15370))+((r01*x15372))+(((-1.0)*r01*x15371*x15374))+((r00*x15367)));
evalcond[5]=(((r20*x15371))+((r21*x15364*x15367))+x15378+(((-1.0)*r20*x15372*x15374))+((sj3*x15368))+((r22*x15376)));
evalcond[6]=(((r11*x15364*x15367))+x15373+(((-1.0)*r10*x15372*x15374))+((r10*x15371))+(((-1.0)*x15369))+((r12*x15376))+((r11*x15370)));
evalcond[7]=(((r10*x15367))+((r10*x15364*x15370))+(((-1.0)*r12*sj3*x15375))+x15378+(((-1.0)*r11*x15371*x15374))+((r11*x15372)));
evalcond[8]=(((cj3*x15368))+(((-1.0)*x15373))+((r20*x15364*x15370))+x15369+(((-1.0)*r21*x15371*x15374))+((r20*x15367))+(((-1.0)*r22*sj3*x15375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15379=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15379);
rxp0_2=(py*r00);
rxp1_0=(r21*x15379);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15380=(r01*sj5);
IkReal x15381=((1.0)*cj5*r00);
j4eval[0]=(x15380+(((-1.0)*x15381)));
j4eval[1]=(((cj3*x15380))+(((-1.0)*cj3*x15381)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15382=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15382);
rxp0_2=(py*r00);
rxp1_0=(r21*x15382);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15383=(cj5*r00);
IkReal x15384=(r01*sj5);
j4eval[0]=(x15384+(((-1.0)*x15383)));
j4eval[1]=((((-1.0)*sj3*x15384))+((sj3*x15383)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15385=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15385);
rxp0_2=(py*r00);
rxp1_0=(r21*x15385);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15386=((1.0)*r00);
CheckValue<IkReal> x15387=IKPowWithIntegerCheck(cj3,-1);
if(!x15387.valid){
continue;
}
CheckValue<IkReal> x15388=IKPowWithIntegerCheck(r12,-1);
if(!x15388.valid){
continue;
}
CheckValue<IkReal> x15389=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15386))),-1);
if(!x15389.valid){
continue;
}
if( IKabs(((x15387.value)*(x15388.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15389.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15386)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15387.value)*(x15388.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15389.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15386))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15387.value)*(x15388.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15389.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15386))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15390=IKsin(j4);
IkReal x15391=IKcos(j4);
IkReal x15392=(cj2*sj1);
IkReal x15393=(cj1*sj2);
IkReal x15394=(sj1*sj2);
IkReal x15395=(cj5*sj3);
IkReal x15396=(cj3*cj5);
IkReal x15397=(r21*sj5);
IkReal x15398=(cj1*cj2);
IkReal x15399=(r00*sj5);
IkReal x15400=(r01*sj5);
IkReal x15401=(r20*sj5);
IkReal x15402=((1.0)*x15390);
IkReal x15403=(r20*x15391);
IkReal x15404=(r00*x15391);
IkReal x15405=(cj3*x15391);
IkReal x15406=(x15393+x15392);
IkReal x15407=((1.0)*sj3*x15391);
evalcond[0]=((-1.0)*r12*x15391);
evalcond[1]=(((x15390*x15397))+(((-1.0)*cj5*r20*x15402)));
evalcond[2]=(x15398+(((-1.0)*x15394))+((cj3*r12*x15390)));
evalcond[3]=(x15406+(((-1.0)*r12*sj3*x15402)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15402))+((x15390*x15400)));
evalcond[5]=(((x15400*x15405))+(((-1.0)*x15396*x15404))+((sj3*x15399))+((r01*x15395)));
evalcond[6]=(((cj3*x15399))+(((-1.0)*x15400*x15407))+((x15395*x15404))+((r01*x15396)));
evalcond[7]=(((x15397*x15405))+((r21*x15395))+(((-1.0)*x15396*x15403))+((sj3*x15401))+x15406);
evalcond[8]=(((r21*x15396))+x15394+(((-1.0)*x15397*x15407))+((x15395*x15403))+(((-1.0)*x15398))+((cj3*x15401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15408=((1.0)*r01);
IkReal x15409=(cj5*r00);
CheckValue<IkReal> x15410=IKPowWithIntegerCheck(((((-1.0)*x15409))+((r01*sj5))),-1);
if(!x15410.valid){
continue;
}
CheckValue<IkReal> x15411=IKPowWithIntegerCheck((((sj3*x15409))+(((-1.0)*sj3*sj5*x15408))),-1);
if(!x15411.valid){
continue;
}
if( IKabs(((-1.0)*(x15410.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15411.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15408)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15410.value)))+IKsqr(((x15411.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15408))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15410.value)), ((x15411.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15408))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15412=IKsin(j4);
IkReal x15413=IKcos(j4);
IkReal x15414=(cj2*sj1);
IkReal x15415=(cj1*sj2);
IkReal x15416=(sj1*sj2);
IkReal x15417=(cj5*sj3);
IkReal x15418=(cj3*cj5);
IkReal x15419=(r21*sj5);
IkReal x15420=(cj1*cj2);
IkReal x15421=(r00*sj5);
IkReal x15422=(r01*sj5);
IkReal x15423=(r20*sj5);
IkReal x15424=((1.0)*x15412);
IkReal x15425=(r20*x15413);
IkReal x15426=(r00*x15413);
IkReal x15427=(cj3*x15413);
IkReal x15428=(x15414+x15415);
IkReal x15429=((1.0)*sj3*x15413);
evalcond[0]=((-1.0)*r12*x15413);
evalcond[1]=(((x15412*x15419))+(((-1.0)*cj5*r20*x15424)));
evalcond[2]=((((-1.0)*x15416))+x15420+((cj3*r12*x15412)));
evalcond[3]=((((-1.0)*r12*sj3*x15424))+x15428);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15424))+((x15412*x15422)));
evalcond[5]=(((sj3*x15421))+(((-1.0)*x15418*x15426))+((r01*x15417))+((x15422*x15427)));
evalcond[6]=((((-1.0)*x15422*x15429))+((x15417*x15426))+((r01*x15418))+((cj3*x15421)));
evalcond[7]=(((sj3*x15423))+(((-1.0)*x15418*x15425))+((x15419*x15427))+x15428+((r21*x15417)));
evalcond[8]=((((-1.0)*x15419*x15429))+((x15417*x15425))+(((-1.0)*x15420))+((cj3*x15423))+x15416+((r21*x15418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15430=((1.0)*r00);
IkReal x15431=(r01*sj5);
CheckValue<IkReal> x15432=IKPowWithIntegerCheck(((((-1.0)*cj5*x15430))+x15431),-1);
if(!x15432.valid){
continue;
}
CheckValue<IkReal> x15433=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x15430))+((cj3*x15431))),-1);
if(!x15433.valid){
continue;
}
if( IKabs(((-1.0)*(x15432.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15433.value)*(((((-1.0)*sj3*sj5*x15430))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15432.value)))+IKsqr(((x15433.value)*(((((-1.0)*sj3*sj5*x15430))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15432.value)), ((x15433.value)*(((((-1.0)*sj3*sj5*x15430))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15434=IKsin(j4);
IkReal x15435=IKcos(j4);
IkReal x15436=(cj2*sj1);
IkReal x15437=(cj1*sj2);
IkReal x15438=(sj1*sj2);
IkReal x15439=(cj5*sj3);
IkReal x15440=(cj3*cj5);
IkReal x15441=(r21*sj5);
IkReal x15442=(cj1*cj2);
IkReal x15443=(r00*sj5);
IkReal x15444=(r01*sj5);
IkReal x15445=(r20*sj5);
IkReal x15446=((1.0)*x15434);
IkReal x15447=(r20*x15435);
IkReal x15448=(r00*x15435);
IkReal x15449=(cj3*x15435);
IkReal x15450=(x15436+x15437);
IkReal x15451=((1.0)*sj3*x15435);
evalcond[0]=((-1.0)*r12*x15435);
evalcond[1]=(((x15434*x15441))+(((-1.0)*cj5*r20*x15446)));
evalcond[2]=(((cj3*r12*x15434))+(((-1.0)*x15438))+x15442);
evalcond[3]=(x15450+(((-1.0)*r12*sj3*x15446)));
evalcond[4]=((1.0)+((x15434*x15444))+(((-1.0)*cj5*r00*x15446)));
evalcond[5]=(((sj3*x15443))+((x15444*x15449))+(((-1.0)*x15440*x15448))+((r01*x15439)));
evalcond[6]=((((-1.0)*x15444*x15451))+((r01*x15440))+((x15439*x15448))+((cj3*x15443)));
evalcond[7]=(((sj3*x15445))+((r21*x15439))+x15450+((x15441*x15449))+(((-1.0)*x15440*x15447)));
evalcond[8]=(((x15439*x15447))+x15438+(((-1.0)*x15442))+(((-1.0)*x15441*x15451))+((r21*x15440))+((cj3*x15445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15452=cj5*cj5;
IkReal x15453=(cj3*r20);
IkReal x15454=(r21*sj3);
IkReal x15455=((1.0)*cj3);
IkReal x15456=(r01*r21);
IkReal x15457=(r01*sj3);
IkReal x15458=(r00*sj5);
IkReal x15459=(cj5*r01*sj5);
IkReal x15460=((1.0)*x15452);
CheckValue<IkReal> x15461=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15455*x15456))+((cj3*x15452*x15456))+(((-1.0)*r00*x15453*x15460))+((x15453*x15459))+((cj3*cj5*r21*x15458))+(((-1.0)*r02*r22*x15455)))),-1);
if(!x15461.valid){
continue;
}
CheckValue<IkReal> x15462 = IKatan2WithCheck(IkReal((((cj5*r22*x15457))+((r22*sj3*x15458)))),IkReal((((r00*x15454))+(((-1.0)*cj5*r20*sj3*x15458))+(((-1.0)*r20*x15457*x15460))+((x15454*x15459))+(((-1.0)*r00*x15454*x15460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15461.value)))+(x15462.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15463=IKsin(j4);
IkReal x15464=IKcos(j4);
IkReal x15465=(cj2*sj1);
IkReal x15466=(cj1*sj2);
IkReal x15467=(r11*sj5);
IkReal x15468=(cj5*r10);
IkReal x15469=(sj1*sj2);
IkReal x15470=(cj5*r01);
IkReal x15471=(cj5*r00);
IkReal x15472=(cj3*sj5);
IkReal x15473=(r21*sj5);
IkReal x15474=(cj1*cj2);
IkReal x15475=(cj5*sj3);
IkReal x15476=(sj3*sj5);
IkReal x15477=(r01*sj5);
IkReal x15478=(cj3*cj5);
IkReal x15479=(cj5*r20);
IkReal x15480=((1.0)*x15464);
IkReal x15481=((1.0)*x15463);
IkReal x15482=(cj3*x15464);
IkReal x15483=(sj3*x15464);
IkReal x15484=(cj3*x15463);
IkReal x15485=(x15466+x15465);
evalcond[0]=((((-1.0)*x15479*x15481))+((x15463*x15473))+(((-1.0)*r22*x15480)));
evalcond[1]=((((-1.0)*r12*x15480))+((x15463*x15467))+(((-1.0)*x15468*x15481)));
evalcond[2]=((1.0)+((x15463*x15477))+(((-1.0)*r02*x15480))+(((-1.0)*x15471*x15481)));
evalcond[3]=((((-1.0)*cj3*x15471*x15480))+((r02*x15484))+((r01*x15464*x15472))+((r00*x15476))+((sj3*x15470)));
evalcond[4]=(((x15471*x15483))+(((-1.0)*r01*x15476*x15480))+((r00*x15472))+(((-1.0)*r02*sj3*x15481))+((cj3*x15470)));
evalcond[5]=((((-1.0)*r20*x15478*x15480))+((r22*x15484))+((r21*x15475))+((r21*x15464*x15472))+x15485+((r20*x15476)));
evalcond[6]=(((x15467*x15482))+(((-1.0)*x15469))+((r12*x15484))+x15474+((r11*x15475))+(((-1.0)*cj3*x15468*x15480))+((r10*x15476)));
evalcond[7]=((((-1.0)*r12*sj3*x15481))+(((-1.0)*sj3*x15467*x15480))+x15485+((x15468*x15483))+((r11*x15478))+((r10*x15472)));
evalcond[8]=(((r20*x15464*x15475))+(((-1.0)*x15474))+(((-1.0)*r22*sj3*x15481))+((r21*x15478))+x15469+(((-1.0)*sj3*x15473*x15480))+((r20*x15472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15486=((1.0)*cj5);
CheckValue<IkReal> x15487 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15487.valid){
continue;
}
CheckValue<IkReal> x15488=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15486))+(((-1.0)*r20*sj5)))),-1);
if(!x15488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15487.value)+(((1.5707963267949)*(x15488.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15489=IKsin(j4);
IkReal x15490=IKcos(j4);
IkReal x15491=(cj2*sj1);
IkReal x15492=(cj1*sj2);
IkReal x15493=(r11*sj5);
IkReal x15494=(cj5*r10);
IkReal x15495=(sj1*sj2);
IkReal x15496=(cj5*r01);
IkReal x15497=(cj5*r00);
IkReal x15498=(cj3*sj5);
IkReal x15499=(r21*sj5);
IkReal x15500=(cj1*cj2);
IkReal x15501=(cj5*sj3);
IkReal x15502=(sj3*sj5);
IkReal x15503=(r01*sj5);
IkReal x15504=(cj3*cj5);
IkReal x15505=(cj5*r20);
IkReal x15506=((1.0)*x15490);
IkReal x15507=((1.0)*x15489);
IkReal x15508=(cj3*x15490);
IkReal x15509=(sj3*x15490);
IkReal x15510=(cj3*x15489);
IkReal x15511=(x15492+x15491);
evalcond[0]=((((-1.0)*r22*x15506))+((x15489*x15499))+(((-1.0)*x15505*x15507)));
evalcond[1]=(((x15489*x15493))+(((-1.0)*r12*x15506))+(((-1.0)*x15494*x15507)));
evalcond[2]=((1.0)+(((-1.0)*x15497*x15507))+((x15489*x15503))+(((-1.0)*r02*x15506)));
evalcond[3]=(((r00*x15502))+(((-1.0)*cj3*x15497*x15506))+((r02*x15510))+((sj3*x15496))+((r01*x15490*x15498)));
evalcond[4]=(((r00*x15498))+(((-1.0)*r02*sj3*x15507))+(((-1.0)*r01*x15502*x15506))+((cj3*x15496))+((x15497*x15509)));
evalcond[5]=(((r21*x15490*x15498))+(((-1.0)*r20*x15504*x15506))+((r21*x15501))+x15511+((r20*x15502))+((r22*x15510)));
evalcond[6]=(((x15493*x15508))+((r10*x15502))+((r11*x15501))+((r12*x15510))+(((-1.0)*cj3*x15494*x15506))+x15500+(((-1.0)*x15495)));
evalcond[7]=(((r10*x15498))+((r11*x15504))+(((-1.0)*r12*sj3*x15507))+(((-1.0)*sj3*x15493*x15506))+x15511+((x15494*x15509)));
evalcond[8]=((((-1.0)*r22*sj3*x15507))+((r20*x15498))+((r20*x15490*x15501))+x15495+(((-1.0)*x15500))+((r21*x15504))+(((-1.0)*sj3*x15499*x15506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15512 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15512.valid){
continue;
}
CheckValue<IkReal> x15513=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15512.value)+(((1.5707963267949)*(x15513.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15514=IKsin(j4);
IkReal x15515=IKcos(j4);
IkReal x15516=(cj2*sj1);
IkReal x15517=(cj1*sj2);
IkReal x15518=(r11*sj5);
IkReal x15519=(cj5*r10);
IkReal x15520=(sj1*sj2);
IkReal x15521=(cj5*r01);
IkReal x15522=(cj5*r00);
IkReal x15523=(cj3*sj5);
IkReal x15524=(r21*sj5);
IkReal x15525=(cj1*cj2);
IkReal x15526=(cj5*sj3);
IkReal x15527=(sj3*sj5);
IkReal x15528=(r01*sj5);
IkReal x15529=(cj3*cj5);
IkReal x15530=(cj5*r20);
IkReal x15531=((1.0)*x15515);
IkReal x15532=((1.0)*x15514);
IkReal x15533=(cj3*x15515);
IkReal x15534=(sj3*x15515);
IkReal x15535=(cj3*x15514);
IkReal x15536=(x15517+x15516);
evalcond[0]=(((x15514*x15524))+(((-1.0)*r22*x15531))+(((-1.0)*x15530*x15532)));
evalcond[1]=((((-1.0)*r12*x15531))+(((-1.0)*x15519*x15532))+((x15514*x15518)));
evalcond[2]=((1.0)+((x15514*x15528))+(((-1.0)*r02*x15531))+(((-1.0)*x15522*x15532)));
evalcond[3]=(((r02*x15535))+((sj3*x15521))+(((-1.0)*cj3*x15522*x15531))+((r01*x15515*x15523))+((r00*x15527)));
evalcond[4]=(((cj3*x15521))+((x15522*x15534))+(((-1.0)*r01*x15527*x15531))+((r00*x15523))+(((-1.0)*r02*sj3*x15532)));
evalcond[5]=((((-1.0)*r20*x15529*x15531))+((r20*x15527))+((r21*x15515*x15523))+((r21*x15526))+x15536+((r22*x15535)));
evalcond[6]=(((r10*x15527))+(((-1.0)*cj3*x15519*x15531))+(((-1.0)*x15520))+((r12*x15535))+((x15518*x15533))+x15525+((r11*x15526)));
evalcond[7]=((((-1.0)*r12*sj3*x15532))+((r10*x15523))+((x15519*x15534))+x15536+(((-1.0)*sj3*x15518*x15531))+((r11*x15529)));
evalcond[8]=((((-1.0)*sj3*x15524*x15531))+((r20*x15523))+((r20*x15515*x15526))+((r21*x15529))+(((-1.0)*x15525))+(((-1.0)*r22*sj3*x15532))+x15520);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15537=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15537);
rxp1_1=(px*r21);
rxp1_2=(r11*x15537);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15538=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15538);
rxp1_1=(px*r21);
rxp1_2=(r11*x15538);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15539=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15539)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15539)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15540=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15540);
rxp1_1=(px*r21);
rxp1_2=(r11*x15540);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15541=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15541);
rxp1_1=(px*r21);
rxp1_2=(r11*x15541);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15542=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15542);
rxp1_1=(px*r21);
rxp1_2=(r11*x15542);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15543=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15543);
rxp1_1=(px*r21);
rxp1_2=(r11*x15543);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15546=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15546.valid){
continue;
}
IkReal x15544=x15546.value;
IkReal x15545=(sj0*x15544);
cj4array[0]=(((cj2*sj1*x15545))+((cj1*sj2*x15545)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15547=IKsin(j4);
IkReal x15548=IKcos(j4);
IkReal x15549=(cj5*r20);
IkReal x15550=(r21*sj5);
IkReal x15551=((1.0)*x15547);
IkReal x15552=((1.0)*x15548);
evalcond[0]=((-1.0)*r02*x15547);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15552)));
evalcond[2]=(((x15547*x15550))+(((-1.0)*x15549*x15551)));
evalcond[3]=(((r11*sj5*x15547))+(((-1.0)*cj5*r10*x15551)));
evalcond[4]=(((x15548*x15549))+(((-1.0)*x15550*x15552))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15554=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15554.valid){
continue;
}
IkReal x15553=x15554.value;
cj4array[0]=(((cj1*cj2*x15553))+(((-1.0)*sj1*sj2*x15553)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15555=IKsin(j4);
IkReal x15556=IKcos(j4);
IkReal x15557=(r11*sj5);
IkReal x15558=((1.0)*sj0);
IkReal x15559=((1.0)*x15556);
IkReal x15560=((1.0)*cj5*x15555);
evalcond[0]=((-1.0)*r02*x15555);
evalcond[1]=((((-1.0)*r02*x15559))+(((-1.0)*x15558)));
evalcond[2]=((((-1.0)*r20*x15560))+((r21*sj5*x15555)));
evalcond[3]=(((x15555*x15557))+(((-1.0)*r10*x15560)));
evalcond[4]=(((cj5*r10*x15556))+(((-1.0)*cj1*sj2*x15558))+(((-1.0)*x15557*x15559))+(((-1.0)*cj2*sj1*x15558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15561=IKPowWithIntegerCheck(r02,-1);
if(!x15561.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15561.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15562=IKsin(j4);
IkReal x15563=IKcos(j4);
IkReal x15564=((1.0)*sj0);
IkReal x15565=(cj5*x15563);
IkReal x15566=(sj5*x15562);
IkReal x15567=((1.0)*sj5*x15563);
IkReal x15568=((1.0)*cj5*x15562);
evalcond[0]=((-1.0)*r02*x15562);
evalcond[1]=(((r21*x15566))+(((-1.0)*r20*x15568)));
evalcond[2]=((((-1.0)*r10*x15568))+((r11*x15566)));
evalcond[3]=((((-1.0)*r21*x15567))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15565)));
evalcond[4]=((((-1.0)*r11*x15567))+((r10*x15565))+(((-1.0)*cj1*sj2*x15564))+(((-1.0)*cj2*sj1*x15564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15569=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15569);
rxp1_1=(px*r21);
rxp1_2=(r11*x15569);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15570=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15570);
rxp1_1=(px*r21);
rxp1_2=(r11*x15570);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15571=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15571);
rxp1_1=(px*r21);
rxp1_2=(r11*x15571);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15574=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15574.valid){
continue;
}
IkReal x15572=x15574.value;
IkReal x15573=(sj0*x15572);
cj4array[0]=(((cj2*sj1*x15573))+((cj1*sj2*x15573)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15575=IKsin(j4);
IkReal x15576=IKcos(j4);
IkReal x15577=(r21*sj5);
IkReal x15578=((1.0)*cj5*r20);
evalcond[0]=(r02*x15575);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15576)));
evalcond[2]=(((x15575*x15577))+(((-1.0)*x15575*x15578)));
evalcond[3]=(((r11*sj5*x15575))+(((-1.0)*cj5*r10*x15575)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x15576*x15577))+(((-1.0)*x15576*x15578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15580=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15580.valid){
continue;
}
IkReal x15579=x15580.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15579))+((cj1*cj2*x15579)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15581=IKsin(j4);
IkReal x15582=IKcos(j4);
IkReal x15583=((1.0)*sj0);
IkReal x15584=((1.0)*cj5);
IkReal x15585=(sj5*x15581);
evalcond[0]=(r02*x15581);
evalcond[1]=((((-1.0)*x15583))+(((-1.0)*r02*x15582)));
evalcond[2]=((((-1.0)*r20*x15581*x15584))+((r21*x15585)));
evalcond[3]=(((r11*x15585))+(((-1.0)*r10*x15581*x15584)));
evalcond[4]=((((-1.0)*r10*x15582*x15584))+(((-1.0)*cj1*sj2*x15583))+(((-1.0)*cj2*sj1*x15583))+((r11*sj5*x15582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15586=IKPowWithIntegerCheck(r02,-1);
if(!x15586.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15586.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15587=IKsin(j4);
IkReal x15588=IKcos(j4);
IkReal x15589=((1.0)*cj1);
IkReal x15590=(r21*sj5);
IkReal x15591=((1.0)*cj5);
IkReal x15592=(r11*sj5);
evalcond[0]=(r02*x15587);
evalcond[1]=(((x15587*x15590))+(((-1.0)*r20*x15587*x15591)));
evalcond[2]=((((-1.0)*r10*x15587*x15591))+((x15587*x15592)));
evalcond[3]=((((-1.0)*cj2*x15589))+((sj1*sj2))+((x15588*x15590))+(((-1.0)*r20*x15588*x15591)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x15589))+(((-1.0)*r10*x15588*x15591))+((x15588*x15592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15593 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15593.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15593.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15594 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15594.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15594.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15595=((-1.0)*r10);
CheckValue<IkReal> x15597 = IKatan2WithCheck(IkReal(x15595),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15597.valid){
continue;
}
IkReal x15596=((-1.0)*(x15597.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15595);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15596;
IkReal gconst66=x15596;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15598=((-1.0)*r10);
CheckValue<IkReal> x15600 = IKatan2WithCheck(IkReal(x15598),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15600.valid){
continue;
}
IkReal x15599=((-1.0)*(x15600.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15598);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15599;
IkReal gconst66=x15599;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15601=((-1.0)*r10);
CheckValue<IkReal> x15603 = IKatan2WithCheck(IkReal(x15601),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15603.valid){
continue;
}
IkReal x15602=((-1.0)*(x15603.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15601);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15602;
IkReal gconst66=x15602;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15604=((1.0)*gconst67);
IkReal x15605=(cj1*cj2);
IkReal x15606=((1.0)*sj1*sj2);
CheckValue<IkReal> x15607=IKPowWithIntegerCheck(cj3,-1);
if(!x15607.valid){
continue;
}
CheckValue<IkReal> x15608=IKPowWithIntegerCheck(r02,-1);
if(!x15608.valid){
continue;
}
CheckValue<IkReal> x15609=IKPowWithIntegerCheck(((((-1.0)*r21*sj3*x15604))+((gconst68*r20*sj3))),-1);
if(!x15609.valid){
continue;
}
if( IKabs(((x15607.value)*(x15608.value)*((((cj0*x15605))+(((-1.0)*cj0*x15606)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15609.value)*(((((-1.0)*x15606))+x15605+(((-1.0)*cj3*r20*x15604))+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15607.value)*(x15608.value)*((((cj0*x15605))+(((-1.0)*cj0*x15606))))))+IKsqr(((x15609.value)*(((((-1.0)*x15606))+x15605+(((-1.0)*cj3*r20*x15604))+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15607.value)*(x15608.value)*((((cj0*x15605))+(((-1.0)*cj0*x15606))))), ((x15609.value)*(((((-1.0)*x15606))+x15605+(((-1.0)*cj3*r20*x15604))+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15610=IKsin(j4);
IkReal x15611=IKcos(j4);
IkReal x15612=(sj1*sj2);
IkReal x15613=(gconst68*sj3);
IkReal x15614=(gconst67*r11);
IkReal x15615=(gconst67*sj3);
IkReal x15616=((1.0)*gconst68);
IkReal x15617=(cj2*sj1);
IkReal x15618=((1.0)*cj0);
IkReal x15619=((1.0)*sj0);
IkReal x15620=(cj3*gconst67);
IkReal x15621=(cj3*gconst68);
IkReal x15622=(cj1*sj2);
IkReal x15623=(gconst67*r21);
IkReal x15624=((1.0)*cj1*cj2);
IkReal x15625=(cj3*x15611);
IkReal x15626=((1.0)*x15611);
IkReal x15627=(r02*x15610);
evalcond[0]=((((-1.0)*x15619))+(((-1.0)*r02*x15626)));
evalcond[1]=((((-1.0)*r20*x15610*x15616))+((x15610*x15623)));
evalcond[2]=(cj0+(((-1.0)*r10*x15610*x15616))+((x15610*x15614)));
evalcond[3]=(((cj0*x15612))+((cj3*x15627))+(((-1.0)*cj1*cj2*x15618)));
evalcond[4]=((((-1.0)*x15617*x15618))+(((-1.0)*sj3*x15627))+(((-1.0)*x15618*x15622)));
evalcond[5]=(((r21*x15613))+(((-1.0)*r20*x15616*x15625))+((r21*x15611*x15620))+x15617+x15622+((r20*x15615)));
evalcond[6]=(((r21*x15621))+(((-1.0)*x15624))+x15612+((r20*x15620))+((r20*x15611*x15613))+(((-1.0)*r21*x15615*x15626)));
evalcond[7]=(((sj0*x15612))+((x15614*x15625))+(((-1.0)*r10*x15616*x15625))+((r11*x15613))+((r10*x15615))+(((-1.0)*cj1*cj2*x15619)));
evalcond[8]=((((-1.0)*sj3*x15614*x15626))+((r10*x15611*x15613))+(((-1.0)*x15619*x15622))+(((-1.0)*x15617*x15619))+((r11*x15621))+((r10*x15620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15630=IKPowWithIntegerCheck(r02,-1);
if(!x15630.valid){
continue;
}
IkReal x15628=x15630.value;
IkReal x15629=((1.0)*cj0);
CheckValue<IkReal> x15631=IKPowWithIntegerCheck(sj3,-1);
if(!x15631.valid){
continue;
}
if( IKabs((x15628*(x15631.value)*(((((-1.0)*cj1*sj2*x15629))+(((-1.0)*cj2*sj1*x15629)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15628)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15628*(x15631.value)*(((((-1.0)*cj1*sj2*x15629))+(((-1.0)*cj2*sj1*x15629))))))+IKsqr(((-1.0)*sj0*x15628))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15628*(x15631.value)*(((((-1.0)*cj1*sj2*x15629))+(((-1.0)*cj2*sj1*x15629))))), ((-1.0)*sj0*x15628));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15632=IKsin(j4);
IkReal x15633=IKcos(j4);
IkReal x15634=(sj1*sj2);
IkReal x15635=(gconst68*sj3);
IkReal x15636=(gconst67*r11);
IkReal x15637=(gconst67*sj3);
IkReal x15638=((1.0)*gconst68);
IkReal x15639=(cj2*sj1);
IkReal x15640=((1.0)*cj0);
IkReal x15641=((1.0)*sj0);
IkReal x15642=(cj3*gconst67);
IkReal x15643=(cj3*gconst68);
IkReal x15644=(cj1*sj2);
IkReal x15645=(gconst67*r21);
IkReal x15646=((1.0)*cj1*cj2);
IkReal x15647=(cj3*x15633);
IkReal x15648=((1.0)*x15633);
IkReal x15649=(r02*x15632);
evalcond[0]=((((-1.0)*r02*x15648))+(((-1.0)*x15641)));
evalcond[1]=((((-1.0)*r20*x15632*x15638))+((x15632*x15645)));
evalcond[2]=(cj0+(((-1.0)*r10*x15632*x15638))+((x15632*x15636)));
evalcond[3]=(((cj3*x15649))+((cj0*x15634))+(((-1.0)*cj1*cj2*x15640)));
evalcond[4]=((((-1.0)*sj3*x15649))+(((-1.0)*x15639*x15640))+(((-1.0)*x15640*x15644)));
evalcond[5]=(((r21*x15633*x15642))+((r20*x15637))+(((-1.0)*r20*x15638*x15647))+x15639+x15644+((r21*x15635)));
evalcond[6]=((((-1.0)*r21*x15637*x15648))+x15634+((r21*x15643))+(((-1.0)*x15646))+((r20*x15633*x15635))+((r20*x15642)));
evalcond[7]=((((-1.0)*r10*x15638*x15647))+((r11*x15635))+((x15636*x15647))+((sj0*x15634))+((r10*x15637))+(((-1.0)*cj1*cj2*x15641)));
evalcond[8]=(((r10*x15633*x15635))+(((-1.0)*x15641*x15644))+(((-1.0)*x15639*x15641))+(((-1.0)*sj3*x15636*x15648))+((r11*x15643))+((r10*x15642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15651=IKPowWithIntegerCheck(r02,-1);
if(!x15651.valid){
continue;
}
IkReal x15650=x15651.value;
CheckValue<IkReal> x15652=IKPowWithIntegerCheck(cj3,-1);
if(!x15652.valid){
continue;
}
if( IKabs((x15650*(x15652.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15650)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15650*(x15652.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15650))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15650*(x15652.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15650));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15653=IKsin(j4);
IkReal x15654=IKcos(j4);
IkReal x15655=(sj1*sj2);
IkReal x15656=(gconst68*sj3);
IkReal x15657=(gconst67*r11);
IkReal x15658=(gconst67*sj3);
IkReal x15659=((1.0)*gconst68);
IkReal x15660=(cj2*sj1);
IkReal x15661=((1.0)*cj0);
IkReal x15662=((1.0)*sj0);
IkReal x15663=(cj3*gconst67);
IkReal x15664=(cj3*gconst68);
IkReal x15665=(cj1*sj2);
IkReal x15666=(gconst67*r21);
IkReal x15667=((1.0)*cj1*cj2);
IkReal x15668=(cj3*x15654);
IkReal x15669=((1.0)*x15654);
IkReal x15670=(r02*x15653);
evalcond[0]=((((-1.0)*x15662))+(((-1.0)*r02*x15669)));
evalcond[1]=((((-1.0)*r20*x15653*x15659))+((x15653*x15666)));
evalcond[2]=((((-1.0)*r10*x15653*x15659))+cj0+((x15653*x15657)));
evalcond[3]=(((cj3*x15670))+(((-1.0)*cj1*cj2*x15661))+((cj0*x15655)));
evalcond[4]=((((-1.0)*x15661*x15665))+(((-1.0)*sj3*x15670))+(((-1.0)*x15660*x15661)));
evalcond[5]=(x15660+x15665+((r21*x15654*x15663))+(((-1.0)*r20*x15659*x15668))+((r21*x15656))+((r20*x15658)));
evalcond[6]=((((-1.0)*r21*x15658*x15669))+(((-1.0)*x15667))+((r20*x15663))+x15655+((r21*x15664))+((r20*x15654*x15656)));
evalcond[7]=(((r10*x15658))+(((-1.0)*r10*x15659*x15668))+((r11*x15656))+(((-1.0)*cj1*cj2*x15662))+((x15657*x15668))+((sj0*x15655)));
evalcond[8]=(((r10*x15654*x15656))+(((-1.0)*x15662*x15665))+((r10*x15663))+(((-1.0)*sj3*x15657*x15669))+((r11*x15664))+(((-1.0)*x15660*x15662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15671=((-1.0)*r10);
CheckValue<IkReal> x15672 = IKatan2WithCheck(IkReal(x15671),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15672.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15672.value))));
IkReal gconst70=x15671;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15673 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15673.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15673.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15674=((-1.0)*r10);
IkReal x15675=((-1.0)*r11);
CheckValue<IkReal> x15677 = IKatan2WithCheck(IkReal(x15674),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15677.valid){
continue;
}
IkReal x15676=((1.0)*(x15677.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15674);
rxp1_1=(px*r21);
rxp1_2=(px*x15675);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15676)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15676)));
IkReal gconst70=x15674;
IkReal gconst71=x15675;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15678=((-1.0)*r10);
IkReal x15679=((-1.0)*r11);
CheckValue<IkReal> x15681 = IKatan2WithCheck(IkReal(x15678),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15681.valid){
continue;
}
IkReal x15680=((1.0)*(x15681.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15678);
rxp1_1=(px*r21);
rxp1_2=(px*x15679);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15680)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15680)));
IkReal gconst70=x15678;
IkReal gconst71=x15679;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15682=((-1.0)*r10);
IkReal x15683=((-1.0)*r11);
CheckValue<IkReal> x15685 = IKatan2WithCheck(IkReal(x15682),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15685.valid){
continue;
}
IkReal x15684=((1.0)*(x15685.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15682);
rxp1_1=(px*r21);
rxp1_2=(px*x15683);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15684)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15684)));
IkReal gconst70=x15682;
IkReal gconst71=x15683;
IkReal x15686=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r21*x15686))+(((-1.0)*r11*r20*x15686)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15687=((1.0)*r21);
IkReal x15688=(cj1*cj2);
IkReal x15689=((1.0)*sj1*sj2);
CheckValue<IkReal> x15690=IKPowWithIntegerCheck(cj3,-1);
if(!x15690.valid){
continue;
}
CheckValue<IkReal> x15691=IKPowWithIntegerCheck(r02,-1);
if(!x15691.valid){
continue;
}
CheckValue<IkReal> x15692=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15687))+((gconst71*r20*sj3))),-1);
if(!x15692.valid){
continue;
}
if( IKabs(((x15690.value)*(x15691.value)*((((cj0*x15688))+(((-1.0)*cj0*x15689)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15692.value)*(((((-1.0)*cj3*gconst71*x15687))+x15688+(((-1.0)*x15689))+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15690.value)*(x15691.value)*((((cj0*x15688))+(((-1.0)*cj0*x15689))))))+IKsqr(((x15692.value)*(((((-1.0)*cj3*gconst71*x15687))+x15688+(((-1.0)*x15689))+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15690.value)*(x15691.value)*((((cj0*x15688))+(((-1.0)*cj0*x15689))))), ((x15692.value)*(((((-1.0)*cj3*gconst71*x15687))+x15688+(((-1.0)*x15689))+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15693=IKsin(j4);
IkReal x15694=IKcos(j4);
IkReal x15695=(cj3*gconst70);
IkReal x15696=(sj1*sj2);
IkReal x15697=((1.0)*gconst71);
IkReal x15698=(gconst71*sj3);
IkReal x15699=(cj2*sj1);
IkReal x15700=((1.0)*sj0);
IkReal x15701=(gconst70*r11);
IkReal x15702=(gconst70*sj3);
IkReal x15703=((1.0)*cj0);
IkReal x15704=(cj3*gconst71);
IkReal x15705=(cj1*sj2);
IkReal x15706=((1.0)*cj1*cj2);
IkReal x15707=(r21*x15694);
IkReal x15708=(r10*x15694);
IkReal x15709=((1.0)*x15694);
IkReal x15710=(r02*x15693);
IkReal x15711=(r20*x15694);
evalcond[0]=((((-1.0)*x15700))+(((-1.0)*r02*x15709)));
evalcond[1]=((((-1.0)*r20*x15693*x15697))+((gconst70*r21*x15693)));
evalcond[2]=(cj0+((x15693*x15701))+(((-1.0)*r10*x15693*x15697)));
evalcond[3]=((((-1.0)*cj1*cj2*x15703))+((cj3*x15710))+((cj0*x15696)));
evalcond[4]=((((-1.0)*sj3*x15710))+(((-1.0)*x15703*x15705))+(((-1.0)*x15699*x15703)));
evalcond[5]=(((r20*x15702))+((x15695*x15707))+((r21*x15698))+x15699+(((-1.0)*cj3*x15697*x15711))+x15705);
evalcond[6]=((((-1.0)*x15706))+((r20*x15695))+(((-1.0)*x15702*x15707))+x15696+((r21*x15704))+((x15698*x15711)));
evalcond[7]=(((r11*x15698))+((sj0*x15696))+(((-1.0)*cj1*cj2*x15700))+(((-1.0)*cj3*x15697*x15708))+((r11*x15694*x15695))+((r10*x15702)));
evalcond[8]=(((r11*x15704))+((x15698*x15708))+((r10*x15695))+(((-1.0)*x15700*x15705))+(((-1.0)*sj3*x15701*x15709))+(((-1.0)*x15699*x15700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15714=IKPowWithIntegerCheck(r02,-1);
if(!x15714.valid){
continue;
}
IkReal x15712=x15714.value;
IkReal x15713=((1.0)*cj0);
CheckValue<IkReal> x15715=IKPowWithIntegerCheck(sj3,-1);
if(!x15715.valid){
continue;
}
if( IKabs((x15712*(x15715.value)*(((((-1.0)*cj2*sj1*x15713))+(((-1.0)*cj1*sj2*x15713)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15712)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15712*(x15715.value)*(((((-1.0)*cj2*sj1*x15713))+(((-1.0)*cj1*sj2*x15713))))))+IKsqr(((-1.0)*sj0*x15712))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15712*(x15715.value)*(((((-1.0)*cj2*sj1*x15713))+(((-1.0)*cj1*sj2*x15713))))), ((-1.0)*sj0*x15712));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15716=IKsin(j4);
IkReal x15717=IKcos(j4);
IkReal x15718=(cj3*gconst70);
IkReal x15719=(sj1*sj2);
IkReal x15720=((1.0)*gconst71);
IkReal x15721=(gconst71*sj3);
IkReal x15722=(cj2*sj1);
IkReal x15723=((1.0)*sj0);
IkReal x15724=(gconst70*r11);
IkReal x15725=(gconst70*sj3);
IkReal x15726=((1.0)*cj0);
IkReal x15727=(cj3*gconst71);
IkReal x15728=(cj1*sj2);
IkReal x15729=((1.0)*cj1*cj2);
IkReal x15730=(r21*x15717);
IkReal x15731=(r10*x15717);
IkReal x15732=((1.0)*x15717);
IkReal x15733=(r02*x15716);
IkReal x15734=(r20*x15717);
evalcond[0]=((((-1.0)*x15723))+(((-1.0)*r02*x15732)));
evalcond[1]=((((-1.0)*r20*x15716*x15720))+((gconst70*r21*x15716)));
evalcond[2]=(cj0+(((-1.0)*r10*x15716*x15720))+((x15716*x15724)));
evalcond[3]=((((-1.0)*cj1*cj2*x15726))+((cj0*x15719))+((cj3*x15733)));
evalcond[4]=((((-1.0)*sj3*x15733))+(((-1.0)*x15726*x15728))+(((-1.0)*x15722*x15726)));
evalcond[5]=(((x15718*x15730))+((r20*x15725))+((r21*x15721))+(((-1.0)*cj3*x15720*x15734))+x15722+x15728);
evalcond[6]=((((-1.0)*x15729))+((r20*x15718))+((r21*x15727))+(((-1.0)*x15725*x15730))+((x15721*x15734))+x15719);
evalcond[7]=(((r11*x15721))+(((-1.0)*cj1*cj2*x15723))+(((-1.0)*cj3*x15720*x15731))+((r11*x15717*x15718))+((r10*x15725))+((sj0*x15719)));
evalcond[8]=(((r11*x15727))+(((-1.0)*sj3*x15724*x15732))+(((-1.0)*x15723*x15728))+(((-1.0)*x15722*x15723))+((x15721*x15731))+((r10*x15718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15736=IKPowWithIntegerCheck(r02,-1);
if(!x15736.valid){
continue;
}
IkReal x15735=x15736.value;
CheckValue<IkReal> x15737=IKPowWithIntegerCheck(cj3,-1);
if(!x15737.valid){
continue;
}
if( IKabs((x15735*(x15737.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15735)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15735*(x15737.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15735))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15735*(x15737.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15735));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15738=IKsin(j4);
IkReal x15739=IKcos(j4);
IkReal x15740=(cj3*gconst70);
IkReal x15741=(sj1*sj2);
IkReal x15742=((1.0)*gconst71);
IkReal x15743=(gconst71*sj3);
IkReal x15744=(cj2*sj1);
IkReal x15745=((1.0)*sj0);
IkReal x15746=(gconst70*r11);
IkReal x15747=(gconst70*sj3);
IkReal x15748=((1.0)*cj0);
IkReal x15749=(cj3*gconst71);
IkReal x15750=(cj1*sj2);
IkReal x15751=((1.0)*cj1*cj2);
IkReal x15752=(r21*x15739);
IkReal x15753=(r10*x15739);
IkReal x15754=((1.0)*x15739);
IkReal x15755=(r02*x15738);
IkReal x15756=(r20*x15739);
evalcond[0]=((((-1.0)*x15745))+(((-1.0)*r02*x15754)));
evalcond[1]=(((gconst70*r21*x15738))+(((-1.0)*r20*x15738*x15742)));
evalcond[2]=(cj0+(((-1.0)*r10*x15738*x15742))+((x15738*x15746)));
evalcond[3]=(((cj3*x15755))+((cj0*x15741))+(((-1.0)*cj1*cj2*x15748)));
evalcond[4]=((((-1.0)*x15748*x15750))+(((-1.0)*x15744*x15748))+(((-1.0)*sj3*x15755)));
evalcond[5]=(((r21*x15743))+x15744+x15750+((r20*x15747))+(((-1.0)*cj3*x15742*x15756))+((x15740*x15752)));
evalcond[6]=(((x15743*x15756))+(((-1.0)*x15751))+((r21*x15749))+x15741+((r20*x15740))+(((-1.0)*x15747*x15752)));
evalcond[7]=(((r11*x15739*x15740))+((r11*x15743))+((sj0*x15741))+(((-1.0)*cj3*x15742*x15753))+(((-1.0)*cj1*cj2*x15745))+((r10*x15747)));
evalcond[8]=(((x15743*x15753))+(((-1.0)*x15744*x15745))+((r11*x15749))+(((-1.0)*x15745*x15750))+((r10*x15740))+(((-1.0)*sj3*x15746*x15754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15758=IKPowWithIntegerCheck(r02,-1);
if(!x15758.valid){
continue;
}
IkReal x15757=x15758.value;
CheckValue<IkReal> x15759=IKPowWithIntegerCheck(cj3,-1);
if(!x15759.valid){
continue;
}
if( IKabs((x15757*(x15759.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15757)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15757*(x15759.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15757))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15757*(x15759.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15757));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15760=IKsin(j4);
IkReal x15761=IKcos(j4);
IkReal x15762=(cj5*r10);
IkReal x15763=(sj1*sj2);
IkReal x15764=(cj5*sj3);
IkReal x15765=(r11*sj5);
IkReal x15766=(cj3*cj5);
IkReal x15767=(cj3*sj5);
IkReal x15768=(r21*sj5);
IkReal x15769=(cj2*sj1);
IkReal x15770=((1.0)*sj0);
IkReal x15771=((1.0)*cj0);
IkReal x15772=(sj3*sj5);
IkReal x15773=(cj1*sj2);
IkReal x15774=((1.0)*cj1*cj2);
IkReal x15775=((1.0)*x15760);
IkReal x15776=(r20*x15761);
IkReal x15777=(cj3*x15761);
IkReal x15778=(sj3*x15761);
evalcond[0]=((((-1.0)*r02*x15761))+(((-1.0)*x15770)));
evalcond[1]=(((x15760*x15768))+(((-1.0)*cj5*r20*x15775)));
evalcond[2]=((((-1.0)*x15762*x15775))+cj0+((x15760*x15765)));
evalcond[3]=(((cj0*x15763))+(((-1.0)*cj1*cj2*x15771))+((cj3*r02*x15760)));
evalcond[4]=((((-1.0)*r02*sj3*x15775))+(((-1.0)*x15769*x15771))+(((-1.0)*x15771*x15773)));
evalcond[5]=(((r21*x15764))+((r21*x15761*x15767))+(((-1.0)*x15766*x15776))+((r20*x15772))+x15773+x15769);
evalcond[6]=(((r21*x15766))+(((-1.0)*x15774))+((r20*x15767))+x15763+((x15764*x15776))+(((-1.0)*x15768*x15778)));
evalcond[7]=(((r10*x15772))+((x15765*x15777))+((sj0*x15763))+(((-1.0)*cj1*cj2*x15770))+((r11*x15764))+(((-1.0)*x15762*x15777)));
evalcond[8]=(((r10*x15767))+(((-1.0)*x15765*x15778))+(((-1.0)*x15770*x15773))+((x15762*x15778))+(((-1.0)*x15769*x15770))+((r11*x15766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15779=((1.0)*sj3);
IkReal x15780=((1.0)*cj5);
CheckValue<IkReal> x15781=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15780))),-1);
if(!x15781.valid){
continue;
}
CheckValue<IkReal> x15782=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15780))),-1);
if(!x15782.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15781.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15782.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15779))+(((-1.0)*cj5*r21*x15779)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15781.value)))+IKsqr(((x15782.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15779))+(((-1.0)*cj5*r21*x15779))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15781.value)), ((x15782.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15779))+(((-1.0)*cj5*r21*x15779))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15783=IKsin(j4);
IkReal x15784=IKcos(j4);
IkReal x15785=(cj5*r10);
IkReal x15786=(sj1*sj2);
IkReal x15787=(cj5*sj3);
IkReal x15788=(r11*sj5);
IkReal x15789=(cj3*cj5);
IkReal x15790=(cj3*sj5);
IkReal x15791=(r21*sj5);
IkReal x15792=(cj2*sj1);
IkReal x15793=((1.0)*sj0);
IkReal x15794=((1.0)*cj0);
IkReal x15795=(sj3*sj5);
IkReal x15796=(cj1*sj2);
IkReal x15797=((1.0)*cj1*cj2);
IkReal x15798=((1.0)*x15783);
IkReal x15799=(r20*x15784);
IkReal x15800=(cj3*x15784);
IkReal x15801=(sj3*x15784);
evalcond[0]=((((-1.0)*x15793))+(((-1.0)*r02*x15784)));
evalcond[1]=((((-1.0)*cj5*r20*x15798))+((x15783*x15791)));
evalcond[2]=(((x15783*x15788))+cj0+(((-1.0)*x15785*x15798)));
evalcond[3]=(((cj3*r02*x15783))+(((-1.0)*cj1*cj2*x15794))+((cj0*x15786)));
evalcond[4]=((((-1.0)*r02*sj3*x15798))+(((-1.0)*x15794*x15796))+(((-1.0)*x15792*x15794)));
evalcond[5]=(((r21*x15787))+((r20*x15795))+x15796+x15792+((r21*x15784*x15790))+(((-1.0)*x15789*x15799)));
evalcond[6]=((((-1.0)*x15791*x15801))+((r21*x15789))+(((-1.0)*x15797))+((x15787*x15799))+((r20*x15790))+x15786);
evalcond[7]=(((x15788*x15800))+((sj0*x15786))+(((-1.0)*cj1*cj2*x15793))+(((-1.0)*x15785*x15800))+((r10*x15795))+((r11*x15787)));
evalcond[8]=((((-1.0)*x15788*x15801))+(((-1.0)*x15793*x15796))+(((-1.0)*x15792*x15793))+((r10*x15790))+((r11*x15789))+((x15785*x15801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15802=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15802.valid){
continue;
}
CheckValue<IkReal> x15803=IKPowWithIntegerCheck(r02,-1);
if(!x15803.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15802.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15803.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15802.value)))+IKsqr(((-1.0)*sj0*(x15803.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15802.value)), ((-1.0)*sj0*(x15803.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15804=IKsin(j4);
IkReal x15805=IKcos(j4);
IkReal x15806=(cj5*r10);
IkReal x15807=(sj1*sj2);
IkReal x15808=(cj5*sj3);
IkReal x15809=(r11*sj5);
IkReal x15810=(cj3*cj5);
IkReal x15811=(cj3*sj5);
IkReal x15812=(r21*sj5);
IkReal x15813=(cj2*sj1);
IkReal x15814=((1.0)*sj0);
IkReal x15815=((1.0)*cj0);
IkReal x15816=(sj3*sj5);
IkReal x15817=(cj1*sj2);
IkReal x15818=((1.0)*cj1*cj2);
IkReal x15819=((1.0)*x15804);
IkReal x15820=(r20*x15805);
IkReal x15821=(cj3*x15805);
IkReal x15822=(sj3*x15805);
evalcond[0]=((((-1.0)*x15814))+(((-1.0)*r02*x15805)));
evalcond[1]=(((x15804*x15812))+(((-1.0)*cj5*r20*x15819)));
evalcond[2]=(cj0+((x15804*x15809))+(((-1.0)*x15806*x15819)));
evalcond[3]=((((-1.0)*cj1*cj2*x15815))+((cj0*x15807))+((cj3*r02*x15804)));
evalcond[4]=((((-1.0)*x15813*x15815))+(((-1.0)*r02*sj3*x15819))+(((-1.0)*x15815*x15817)));
evalcond[5]=((((-1.0)*x15810*x15820))+((r21*x15805*x15811))+((r21*x15808))+((r20*x15816))+x15813+x15817);
evalcond[6]=(((x15808*x15820))+(((-1.0)*x15818))+(((-1.0)*x15812*x15822))+((r21*x15810))+((r20*x15811))+x15807);
evalcond[7]=((((-1.0)*cj1*cj2*x15814))+((r10*x15816))+(((-1.0)*x15806*x15821))+((r11*x15808))+((x15809*x15821))+((sj0*x15807)));
evalcond[8]=((((-1.0)*x15813*x15814))+((x15806*x15822))+((r11*x15810))+(((-1.0)*x15814*x15817))+((r10*x15811))+(((-1.0)*x15809*x15822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15823=((1.0)*sj0);
IkReal x15824=((1.0)*cj0);
CheckValue<IkReal> x15825=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15825.valid){
continue;
}
CheckValue<IkReal> x15826 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15824))+(((-1.0)*r12*x15823)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x15823))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15825.value)))+(x15826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15827=IKsin(j4);
IkReal x15828=IKcos(j4);
IkReal x15829=(r11*sj5);
IkReal x15830=(cj5*r10);
IkReal x15831=(sj1*sj2);
IkReal x15832=(cj5*sj3);
IkReal x15833=((1.0)*sj0);
IkReal x15834=(cj3*cj5);
IkReal x15835=(cj3*sj5);
IkReal x15836=(r21*sj5);
IkReal x15837=(cj2*sj1);
IkReal x15838=(sj3*sj5);
IkReal x15839=(r01*sj5);
IkReal x15840=((1.0)*cj0);
IkReal x15841=(cj1*sj2);
IkReal x15842=((1.0)*x15828);
IkReal x15843=((1.0)*x15827);
IkReal x15844=(cj3*x15828);
IkReal x15845=((1.0)*cj1*cj2);
IkReal x15846=(cj3*x15827);
evalcond[0]=((((-1.0)*cj5*r20*x15843))+(((-1.0)*r22*x15842))+((x15827*x15836)));
evalcond[1]=(cj0+(((-1.0)*x15830*x15843))+(((-1.0)*r12*x15842))+((x15827*x15829)));
evalcond[2]=((((-1.0)*cj5*r00*x15843))+(((-1.0)*x15833))+(((-1.0)*r02*x15842))+((x15827*x15839)));
evalcond[3]=(((r20*x15838))+((r21*x15828*x15835))+((r22*x15846))+x15837+x15841+(((-1.0)*r20*x15834*x15842))+((r21*x15832)));
evalcond[4]=((((-1.0)*sj3*x15836*x15842))+((r20*x15835))+(((-1.0)*r22*sj3*x15843))+(((-1.0)*x15845))+((r20*x15828*x15832))+x15831+((r21*x15834)));
evalcond[5]=(((r01*x15828*x15835))+((cj0*x15831))+(((-1.0)*cj1*cj2*x15840))+((r01*x15832))+((r02*x15846))+((r00*x15838))+(((-1.0)*r00*x15834*x15842)));
evalcond[6]=(((r10*x15838))+(((-1.0)*cj3*x15830*x15842))+((x15829*x15844))+((sj0*x15831))+((r11*x15832))+(((-1.0)*cj1*cj2*x15833))+((r12*x15846)));
evalcond[7]=((((-1.0)*r02*sj3*x15843))+(((-1.0)*r01*x15838*x15842))+((r01*x15834))+((r00*x15835))+((r00*x15828*x15832))+(((-1.0)*x15840*x15841))+(((-1.0)*x15837*x15840)));
evalcond[8]=(((r10*x15835))+(((-1.0)*x15833*x15841))+(((-1.0)*x15833*x15837))+((r11*x15834))+((sj3*x15828*x15830))+(((-1.0)*r12*sj3*x15843))+(((-1.0)*sj3*x15829*x15842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15847=((1.0)*cj5);
CheckValue<IkReal> x15848=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15847)))),-1);
if(!x15848.valid){
continue;
}
CheckValue<IkReal> x15849 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x15847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15848.value)))+(x15849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15850=IKsin(j4);
IkReal x15851=IKcos(j4);
IkReal x15852=(r11*sj5);
IkReal x15853=(cj5*r10);
IkReal x15854=(sj1*sj2);
IkReal x15855=(cj5*sj3);
IkReal x15856=((1.0)*sj0);
IkReal x15857=(cj3*cj5);
IkReal x15858=(cj3*sj5);
IkReal x15859=(r21*sj5);
IkReal x15860=(cj2*sj1);
IkReal x15861=(sj3*sj5);
IkReal x15862=(r01*sj5);
IkReal x15863=((1.0)*cj0);
IkReal x15864=(cj1*sj2);
IkReal x15865=((1.0)*x15851);
IkReal x15866=((1.0)*x15850);
IkReal x15867=(cj3*x15851);
IkReal x15868=((1.0)*cj1*cj2);
IkReal x15869=(cj3*x15850);
evalcond[0]=(((x15850*x15859))+(((-1.0)*r22*x15865))+(((-1.0)*cj5*r20*x15866)));
evalcond[1]=(cj0+((x15850*x15852))+(((-1.0)*x15853*x15866))+(((-1.0)*r12*x15865)));
evalcond[2]=((((-1.0)*cj5*r00*x15866))+(((-1.0)*r02*x15865))+(((-1.0)*x15856))+((x15850*x15862)));
evalcond[3]=(((r22*x15869))+((r21*x15851*x15858))+(((-1.0)*r20*x15857*x15865))+((r21*x15855))+((r20*x15861))+x15864+x15860);
evalcond[4]=(((r20*x15851*x15855))+(((-1.0)*x15868))+(((-1.0)*r22*sj3*x15866))+((r20*x15858))+(((-1.0)*sj3*x15859*x15865))+((r21*x15857))+x15854);
evalcond[5]=(((cj0*x15854))+((r02*x15869))+((r01*x15855))+((r01*x15851*x15858))+((r00*x15861))+(((-1.0)*r00*x15857*x15865))+(((-1.0)*cj1*cj2*x15863)));
evalcond[6]=(((r12*x15869))+(((-1.0)*cj3*x15853*x15865))+((x15852*x15867))+(((-1.0)*cj1*cj2*x15856))+((r11*x15855))+((r10*x15861))+((sj0*x15854)));
evalcond[7]=((((-1.0)*x15863*x15864))+((r00*x15858))+((r01*x15857))+(((-1.0)*r02*sj3*x15866))+(((-1.0)*r01*x15861*x15865))+((r00*x15851*x15855))+(((-1.0)*x15860*x15863)));
evalcond[8]=((((-1.0)*x15856*x15864))+(((-1.0)*x15856*x15860))+(((-1.0)*sj3*x15852*x15865))+((r10*x15858))+((r11*x15857))+(((-1.0)*r12*sj3*x15866))+((sj3*x15851*x15853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15870=((1.0)*cj5);
CheckValue<IkReal> x15871=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15870)))),-1);
if(!x15871.valid){
continue;
}
CheckValue<IkReal> x15872 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x15870))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15871.value)))+(x15872.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15873=IKsin(j4);
IkReal x15874=IKcos(j4);
IkReal x15875=(r11*sj5);
IkReal x15876=(cj5*r10);
IkReal x15877=(sj1*sj2);
IkReal x15878=(cj5*sj3);
IkReal x15879=((1.0)*sj0);
IkReal x15880=(cj3*cj5);
IkReal x15881=(cj3*sj5);
IkReal x15882=(r21*sj5);
IkReal x15883=(cj2*sj1);
IkReal x15884=(sj3*sj5);
IkReal x15885=(r01*sj5);
IkReal x15886=((1.0)*cj0);
IkReal x15887=(cj1*sj2);
IkReal x15888=((1.0)*x15874);
IkReal x15889=((1.0)*x15873);
IkReal x15890=(cj3*x15874);
IkReal x15891=((1.0)*cj1*cj2);
IkReal x15892=(cj3*x15873);
evalcond[0]=((((-1.0)*cj5*r20*x15889))+(((-1.0)*r22*x15888))+((x15873*x15882)));
evalcond[1]=(((x15873*x15875))+cj0+(((-1.0)*x15876*x15889))+(((-1.0)*r12*x15888)));
evalcond[2]=((((-1.0)*cj5*r00*x15889))+(((-1.0)*r02*x15888))+(((-1.0)*x15879))+((x15873*x15885)));
evalcond[3]=((((-1.0)*r20*x15880*x15888))+((r21*x15874*x15881))+((r20*x15884))+((r21*x15878))+((r22*x15892))+x15887+x15883);
evalcond[4]=(((r20*x15874*x15878))+((r20*x15881))+(((-1.0)*sj3*x15882*x15888))+(((-1.0)*x15891))+(((-1.0)*r22*sj3*x15889))+x15877+((r21*x15880)));
evalcond[5]=(((r01*x15878))+((r00*x15884))+(((-1.0)*cj1*cj2*x15886))+((r01*x15874*x15881))+((r02*x15892))+(((-1.0)*r00*x15880*x15888))+((cj0*x15877)));
evalcond[6]=(((r11*x15878))+((r10*x15884))+(((-1.0)*cj3*x15876*x15888))+((r12*x15892))+(((-1.0)*cj1*cj2*x15879))+((x15875*x15890))+((sj0*x15877)));
evalcond[7]=((((-1.0)*x15883*x15886))+((r00*x15874*x15878))+((r00*x15881))+((r01*x15880))+(((-1.0)*x15886*x15887))+(((-1.0)*r02*sj3*x15889))+(((-1.0)*r01*x15884*x15888)));
evalcond[8]=(((r10*x15881))+((r11*x15880))+((sj3*x15874*x15876))+(((-1.0)*sj3*x15875*x15888))+(((-1.0)*r12*sj3*x15889))+(((-1.0)*x15879*x15883))+(((-1.0)*x15879*x15887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15893=cj5*cj5;
IkReal x15894=r21*r21;
IkReal x15895=r20*r20;
IkReal x15896=(r20*r21);
IkReal x15897=((1.0)*cj3);
IkReal x15898=((1.0)*cj5);
IkReal x15899=(cj1*sj2);
IkReal x15900=(cj5*sj5);
IkReal x15901=(sj3*sj5);
IkReal x15902=(cj2*sj1);
IkReal x15903=(r21*sj5);
CheckValue<IkReal> x15904=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15894*x15897))+(((2.0)*cj3*x15896*x15900))+(((-1.0)*x15897*(r22*r22)))+(((-1.0)*x15893*x15895*x15897))+((cj3*x15893*x15894)))),-1);
if(!x15904.valid){
continue;
}
CheckValue<IkReal> x15905 = IKatan2WithCheck(IkReal((((r22*x15902))+((cj5*r21*r22*sj3))+((r20*r22*x15901))+((r22*x15899)))),IkReal((((x15902*x15903))+(((-2.0)*sj3*x15893*x15896))+(((-1.0)*r20*x15898*x15902))+(((-1.0)*x15895*x15898*x15901))+((sj3*x15894*x15900))+(((-1.0)*r20*x15898*x15899))+((sj3*x15896))+((x15899*x15903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15904.value)))+(x15905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15906=IKsin(j4);
IkReal x15907=IKcos(j4);
IkReal x15908=(cj3*r21);
IkReal x15909=(r21*sj5);
IkReal x15910=(r20*sj5);
IkReal x15911=(cj5*r20);
IkReal x15912=((1.0)*x15907);
IkReal x15913=((1.0)*x15906);
evalcond[0]=((((-1.0)*x15911*x15913))+(((-1.0)*r22*x15912))+((x15906*x15909)));
evalcond[1]=((((-1.0)*cj3*x15911*x15912))+((cj2*sj1))+((sj5*x15907*x15908))+((sj3*x15910))+((cj5*r21*sj3))+((cj1*sj2))+((cj3*r22*x15906)));
evalcond[2]=(((cj5*x15908))+((sj3*x15907*x15911))+(((-1.0)*sj3*x15909*x15912))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x15913))+((cj3*x15910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15914=(cj5*sj4);
IkReal x15915=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15915))+(((-1.0)*r00*x15914)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15914))+(((-1.0)*r11*x15915))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15915))+(((-1.0)*r00*x15914))))+IKsqr((((r10*x15914))+(((-1.0)*r11*x15915))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15915))+(((-1.0)*r00*x15914))), (((r10*x15914))+(((-1.0)*r11*x15915))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15916=IKcos(j0);
IkReal x15917=IKsin(j0);
IkReal x15918=(r02*sj4);
IkReal x15919=((1.0)*sj3);
IkReal x15920=(r12*sj4);
IkReal x15921=(cj3*cj4);
IkReal x15922=((1.0)*cj5);
IkReal x15923=(r11*sj5);
IkReal x15924=((1.0)*cj1);
IkReal x15925=((0.39225)*sj1);
IkReal x15926=(cj5*r01);
IkReal x15927=(r01*sj5);
IkReal x15928=(r00*sj5);
IkReal x15929=((1.0)*sj1);
IkReal x15930=((0.39225)*cj2);
IkReal x15931=(cj5*r11);
IkReal x15932=(r10*sj5);
IkReal x15933=((1.0)*cj4);
IkReal x15934=(sj2*x15916);
IkReal x15935=(sj2*x15917);
IkReal x15936=(cj4*cj5*sj3);
IkReal x15937=(cj1*x15916);
IkReal x15938=(cj2*x15916);
IkReal x15939=(cj1*x15917);
IkReal x15940=(cj2*x15917);
evalcond[0]=((((-1.0)*r10*sj4*x15922))+(((-1.0)*r12*x15933))+((sj4*x15923))+x15916);
evalcond[1]=((((-1.0)*r00*sj4*x15922))+(((-1.0)*x15917))+(((-1.0)*r02*x15933))+((sj4*x15927)));
evalcond[2]=(((x15930*x15937))+(((-0.09465)*x15928))+(((-0.09465)*x15926))+(((-1.0)*px))+(((0.425)*x15937))+(((-1.0)*x15925*x15934))+(((-0.10915)*x15917)));
evalcond[3]=(((x15930*x15939))+(((-0.09465)*x15931))+(((-0.09465)*x15932))+(((0.10915)*x15916))+(((-1.0)*py))+(((0.425)*x15939))+(((-1.0)*x15925*x15935)));
evalcond[4]=(((sj3*x15926))+((sj3*x15928))+((x15921*x15927))+((cj3*x15918))+(((-1.0)*x15924*x15938))+((sj1*x15934))+(((-1.0)*r00*x15921*x15922)));
evalcond[5]=((((-1.0)*r10*x15921*x15922))+((cj3*x15920))+((x15921*x15923))+(((-1.0)*x15924*x15940))+((sj1*x15935))+((sj3*x15931))+((sj3*x15932)));
evalcond[6]=((((-1.0)*x15918*x15919))+((cj3*x15928))+((cj3*x15926))+((r00*x15936))+(((-1.0)*cj4*x15919*x15927))+(((-1.0)*x15929*x15938))+(((-1.0)*x15924*x15934)));
evalcond[7]=((((-1.0)*x15929*x15940))+((cj3*x15931))+((cj3*x15932))+(((-1.0)*cj4*x15919*x15923))+(((-1.0)*x15919*x15920))+(((-1.0)*x15924*x15935))+((r10*x15936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15941=cj5*cj5;
IkReal x15942=r21*r21;
IkReal x15943=r20*r20;
IkReal x15944=(r20*r21);
IkReal x15945=(sj1*sj2);
IkReal x15946=(r21*sj5);
IkReal x15947=(cj1*cj2);
IkReal x15948=(cj5*r20);
IkReal x15949=(cj5*sj5);
IkReal x15950=(cj3*r22);
IkReal x15951=(sj3*x15942);
CheckValue<IkReal> x15952=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x15944*x15949))+((sj3*x15941*x15943))+(((-1.0)*x15941*x15951))+x15951)),-1);
if(!x15952.valid){
continue;
}
CheckValue<IkReal> x15953 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15947))+((r20*sj5*x15950))+((cj5*r21*x15950))+((r22*x15945)))),IkReal((((cj3*x15944))+(((-2.0)*cj3*x15941*x15944))+((cj3*x15942*x15949))+(((-1.0)*cj3*x15943*x15949))+((x15945*x15946))+((x15947*x15948))+(((-1.0)*x15946*x15947))+(((-1.0)*x15945*x15948)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15952.value)))+(x15953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15954=IKsin(j4);
IkReal x15955=IKcos(j4);
IkReal x15956=(cj3*r21);
IkReal x15957=(r21*sj5);
IkReal x15958=(r20*sj5);
IkReal x15959=(cj5*r20);
IkReal x15960=((1.0)*x15955);
IkReal x15961=((1.0)*x15954);
evalcond[0]=((((-1.0)*x15959*x15961))+((x15954*x15957))+(((-1.0)*r22*x15960)));
evalcond[1]=((((-1.0)*cj3*x15959*x15960))+((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+((sj5*x15955*x15956))+((cj3*r22*x15954))+((sj3*x15958)));
evalcond[2]=((((-1.0)*r22*sj3*x15961))+(((-1.0)*sj3*x15957*x15960))+((cj5*x15956))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x15955*x15959))+((cj3*x15958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15962=(cj5*sj4);
IkReal x15963=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15963))+(((-1.0)*r00*x15962)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15963))+((r10*x15962))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15963))+(((-1.0)*r00*x15962))))+IKsqr(((((-1.0)*r11*x15963))+((r10*x15962))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15963))+(((-1.0)*r00*x15962))), ((((-1.0)*r11*x15963))+((r10*x15962))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15964=IKcos(j0);
IkReal x15965=IKsin(j0);
IkReal x15966=(r02*sj4);
IkReal x15967=((1.0)*sj3);
IkReal x15968=(r12*sj4);
IkReal x15969=(cj3*cj4);
IkReal x15970=((1.0)*cj5);
IkReal x15971=(r11*sj5);
IkReal x15972=((1.0)*cj1);
IkReal x15973=((0.39225)*sj1);
IkReal x15974=(cj5*r01);
IkReal x15975=(r01*sj5);
IkReal x15976=(r00*sj5);
IkReal x15977=((1.0)*sj1);
IkReal x15978=((0.39225)*cj2);
IkReal x15979=(cj5*r11);
IkReal x15980=(r10*sj5);
IkReal x15981=((1.0)*cj4);
IkReal x15982=(sj2*x15964);
IkReal x15983=(sj2*x15965);
IkReal x15984=(cj4*cj5*sj3);
IkReal x15985=(cj1*x15964);
IkReal x15986=(cj2*x15964);
IkReal x15987=(cj1*x15965);
IkReal x15988=(cj2*x15965);
evalcond[0]=(((sj4*x15971))+(((-1.0)*r10*sj4*x15970))+(((-1.0)*r12*x15981))+x15964);
evalcond[1]=((((-1.0)*r00*sj4*x15970))+(((-1.0)*r02*x15981))+((sj4*x15975))+(((-1.0)*x15965)));
evalcond[2]=((((-0.09465)*x15974))+(((-0.09465)*x15976))+(((-0.10915)*x15965))+(((0.425)*x15985))+(((-1.0)*x15973*x15982))+(((-1.0)*px))+((x15978*x15985)));
evalcond[3]=((((-0.09465)*x15979))+(((0.425)*x15987))+(((-1.0)*x15973*x15983))+(((0.10915)*x15964))+(((-1.0)*py))+((x15978*x15987))+(((-0.09465)*x15980)));
evalcond[4]=((((-1.0)*r00*x15969*x15970))+((x15969*x15975))+(((-1.0)*x15972*x15986))+((sj1*x15982))+((sj3*x15974))+((sj3*x15976))+((cj3*x15966)));
evalcond[5]=(((x15969*x15971))+(((-1.0)*x15972*x15988))+((sj1*x15983))+(((-1.0)*r10*x15969*x15970))+((sj3*x15980))+((sj3*x15979))+((cj3*x15968)));
evalcond[6]=(((r00*x15984))+(((-1.0)*cj4*x15967*x15975))+(((-1.0)*x15972*x15982))+(((-1.0)*x15966*x15967))+(((-1.0)*x15977*x15986))+((cj3*x15974))+((cj3*x15976)));
evalcond[7]=((((-1.0)*cj4*x15967*x15971))+((cj3*x15980))+(((-1.0)*x15967*x15968))+(((-1.0)*x15972*x15983))+(((-1.0)*x15977*x15988))+((r10*x15984))+((cj3*x15979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (cadc90bc91ae0d945f3583c4adddea50)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
